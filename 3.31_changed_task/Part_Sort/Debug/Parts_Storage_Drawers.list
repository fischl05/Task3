
Parts_Storage_Drawers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d04  20000108  08006f68  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e0c  08006f68  00020e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7b4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff5  00000000  00000000  0003c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011c73  00000000  00000000  000408d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00052550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d78  00000000  00000000  00053590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016696  00000000  00000000  00055308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa94  00000000  00000000  0006b99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f86  00000000  00000000  0008b432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c3b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003780  00000000  00000000  0010c408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006048 	.word	0x08006048

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	08006048 	.word	0x08006048

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:
 80004e4:	2300      	movs	r3, #0
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
 80004ea:	ac05      	add	r4, sp, #20
 80004ec:	000e      	movs	r6, r1
 80004ee:	210a      	movs	r1, #10
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
 80004f4:	7023      	strb	r3, [r4, #0]
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
 8000508:	0030      	movs	r0, r6
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
 800051e:	0028      	movs	r0, r5
 8000520:	187f      	adds	r7, r7, r1
 8000522:	210a      	movs	r1, #10
 8000524:	70a7      	strb	r7, [r4, #2]
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fe96 	bl	8004278 <HAL_I2C_Master_Transmit>
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	2000052c 	.word	0x2000052c

08000554 <DS3231_get_time>:
 8000554:	2300      	movs	r3, #0
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
 800055c:	aa02      	add	r2, sp, #8
 800055e:	2564      	movs	r5, #100	; 0x64
 8000560:	73d3      	strb	r3, [r2, #15]
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
 8000566:	9103      	str	r1, [sp, #12]
 8000568:	a902      	add	r1, sp, #8
 800056a:	9002      	str	r0, [sp, #8]
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fe7f 	bl	8004278 <HAL_I2C_Master_Transmit>
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 ff0a 	bl	800439c <HAL_I2C_Master_Receive>
 8000588:	2701      	movs	r7, #1
 800058a:	220f      	movs	r2, #15
 800058c:	ab02      	add	r3, sp, #8
 800058e:	a902      	add	r1, sp, #8
 8000590:	73df      	strb	r7, [r3, #15]
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fe6c 	bl	8004278 <HAL_I2C_Master_Transmit>
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 fef7 	bl	800439c <HAL_I2C_Master_Receive>
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fe59 	bl	8004278 <HAL_I2C_Master_Transmit>
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fee4 	bl	800439c <HAL_I2C_Master_Receive>
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	2000052c 	.word	0x2000052c

08000610 <DS3231_set_date>:
 8000610:	2304      	movs	r3, #4
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
 8000616:	ac05      	add	r4, sp, #20
 8000618:	000e      	movs	r6, r1
 800061a:	210a      	movs	r1, #10
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
 8000620:	7023      	strb	r3, [r4, #0]
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
 8000634:	0030      	movs	r0, r6
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
 800064a:	0028      	movs	r0, r5
 800064c:	187f      	adds	r7, r7, r1
 800064e:	210a      	movs	r1, #10
 8000650:	70a7      	strb	r7, [r4, #2]
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fe00 	bl	8004278 <HAL_I2C_Master_Transmit>
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	2000052c 	.word	0x2000052c

08000680 <DS3231_get_date>:
 8000680:	2304      	movs	r3, #4
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
 8000688:	aa02      	add	r2, sp, #8
 800068a:	2564      	movs	r5, #100	; 0x64
 800068c:	73d3      	strb	r3, [r2, #15]
 800068e:	220f      	movs	r2, #15
 8000690:	0007      	movs	r7, r0
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
 8000694:	000e      	movs	r6, r1
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fde9 	bl	8004278 <HAL_I2C_Master_Transmit>
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fe74 	bl	800439c <HAL_I2C_Master_Receive>
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fdd6 	bl	8004278 <HAL_I2C_Master_Transmit>
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fe61 	bl	800439c <HAL_I2C_Master_Receive>
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fdc3 	bl	8004278 <HAL_I2C_Master_Transmit>
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fe4e 	bl	800439c <HAL_I2C_Master_Receive>
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	2000052c 	.word	0x2000052c

08000738 <led_color>:
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
 8000746:	60a3      	str	r3, [r4, #8]
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000124 	.word	0x20000124

08000750 <led_update>:
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
 800075e:	3001      	adds	r0, #1
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
 800076e:	6895      	ldr	r5, [r2, #8]
 8000770:	320c      	adds	r2, #12
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 fce0 	bl	8005150 <HAL_SPI_Transmit_DMA>
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200002d4 	.word	0x200002d4
 8000798:	20000124 	.word	0x20000124
 800079c:	08006080 	.word	0x08006080
 80007a0:	20000578 	.word	0x20000578

080007a4 <led_clear>:
 80007a4:	22d8      	movs	r2, #216	; 0xd8
 80007a6:	b510      	push	{r4, lr}
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 ffc3 	bl	8005738 <memset>
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	20000124 	.word	0x20000124

080007b8 <led_cmp>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	260c      	movs	r6, #12
 80007bc:	0035      	movs	r5, r6
 80007be:	4345      	muls	r5, r0
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <led_cmp+0x38>)
 80007c2:	4370      	muls	r0, r6
 80007c4:	592f      	ldr	r7, [r5, r4]
 80007c6:	1965      	adds	r5, r4, r5
 80007c8:	686d      	ldr	r5, [r5, #4]
 80007ca:	1aba      	subs	r2, r7, r2
 80007cc:	1a6d      	subs	r5, r5, r1
 80007ce:	4257      	negs	r7, r2
 80007d0:	417a      	adcs	r2, r7
 80007d2:	4269      	negs	r1, r5
 80007d4:	414d      	adcs	r5, r1
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	68a1      	ldr	r1, [r4, #8]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	1952      	adds	r2, r2, r5
 80007de:	4299      	cmp	r1, r3
 80007e0:	d101      	bne.n	80007e6 <led_cmp+0x2e>
 80007e2:	3201      	adds	r2, #1
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	3a03      	subs	r2, #3
 80007e8:	4253      	negs	r3, r2
 80007ea:	415a      	adcs	r2, r3
 80007ec:	b2d0      	uxtb	r0, r2
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	20000124 	.word	0x20000124

080007f4 <SystemClock_Config>:
 80007f4:	b510      	push	{r4, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	2224      	movs	r2, #36	; 0x24
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80f      	add	r0, sp, #60	; 0x3c
 80007fe:	f004 ff9b 	bl	8005738 <memset>
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a801      	add	r0, sp, #4
 8000808:	f004 ff96 	bl	8005738 <memset>
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	a806      	add	r0, sp, #24
 8000812:	f004 ff91 	bl	8005738 <memset>
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <SystemClock_Config+0x90>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0x94>)
 800081a:	680b      	ldr	r3, [r1, #0]
 800081c:	2401      	movs	r4, #1
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4313      	orrs	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	; 0x38
 800082c:	9318      	str	r3, [sp, #96]	; 0x60
 800082e:	2300      	movs	r3, #0
 8000830:	9319      	str	r3, [sp, #100]	; 0x64
 8000832:	931a      	str	r3, [sp, #104]	; 0x68
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	2210      	movs	r2, #16
 8000838:	03db      	lsls	r3, r3, #15
 800083a:	a80e      	add	r0, sp, #56	; 0x38
 800083c:	9411      	str	r4, [sp, #68]	; 0x44
 800083e:	9212      	str	r2, [sp, #72]	; 0x48
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
 8000842:	f003 ff73 	bl	800472c <HAL_RCC_OscConfig>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5a>
 800084a:	b672      	cpsid	i
 800084c:	e7fe      	b.n	800084c <SystemClock_Config+0x58>
 800084e:	230f      	movs	r3, #15
 8000850:	9003      	str	r0, [sp, #12]
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9004      	str	r0, [sp, #16]
 8000856:	3b0c      	subs	r3, #12
 8000858:	9005      	str	r0, [sp, #20]
 800085a:	0021      	movs	r1, r4
 800085c:	a801      	add	r0, sp, #4
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f004 f9e6 	bl	8004c30 <HAL_RCC_ClockConfig>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x78>
 8000868:	b672      	cpsid	i
 800086a:	e7fe      	b.n	800086a <SystemClock_Config+0x76>
 800086c:	2308      	movs	r3, #8
 800086e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000870:	a806      	add	r0, sp, #24
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	f004 faaa 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x8c>
 800087c:	b672      	cpsid	i
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x8a>
 8000880:	b01c      	add	sp, #112	; 0x70
 8000882:	bd10      	pop	{r4, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <main>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	2601      	movs	r6, #1
 8000890:	b08b      	sub	sp, #44	; 0x2c
 8000892:	f002 fde3 	bl	800345c <HAL_Init>
 8000896:	f7ff ffad 	bl	80007f4 <SystemClock_Config>
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f004 ff4a 	bl	8005738 <memset>
 80008a4:	2102      	movs	r1, #2
 80008a6:	20a0      	movs	r0, #160	; 0xa0
 80008a8:	4f7a      	ldr	r7, [pc, #488]	; (8000a94 <main+0x208>)
 80008aa:	05c0      	lsls	r0, r0, #23
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	2500      	movs	r5, #0
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	4033      	ands	r3, r6
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	430a      	orrs	r2, r1
 80008c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	2200      	movs	r2, #0
 80008c6:	400b      	ands	r3, r1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	3106      	adds	r1, #6
 80008cc:	9b02      	ldr	r3, [sp, #8]
 80008ce:	f003 fb57 	bl	8003f80 <HAL_GPIO_WritePin>
 80008d2:	2200      	movs	r2, #0
 80008d4:	0031      	movs	r1, r6
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <main+0x20c>)
 80008d8:	f003 fb52 	bl	8003f80 <HAL_GPIO_WritePin>
 80008dc:	20a0      	movs	r0, #160	; 0xa0
 80008de:	2304      	movs	r3, #4
 80008e0:	a905      	add	r1, sp, #20
 80008e2:	05c0      	lsls	r0, r0, #23
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	9506      	str	r5, [sp, #24]
 80008e8:	9607      	str	r6, [sp, #28]
 80008ea:	f003 fa83 	bl	8003df4 <HAL_GPIO_Init>
 80008ee:	20a0      	movs	r0, #160	; 0xa0
 80008f0:	2208      	movs	r2, #8
 80008f2:	a905      	add	r1, sp, #20
 80008f4:	05c0      	lsls	r0, r0, #23
 80008f6:	9205      	str	r2, [sp, #20]
 80008f8:	9606      	str	r6, [sp, #24]
 80008fa:	9507      	str	r5, [sp, #28]
 80008fc:	9508      	str	r5, [sp, #32]
 80008fe:	f003 fa79 	bl	8003df4 <HAL_GPIO_Init>
 8000902:	4865      	ldr	r0, [pc, #404]	; (8000a98 <main+0x20c>)
 8000904:	a905      	add	r1, sp, #20
 8000906:	9605      	str	r6, [sp, #20]
 8000908:	9606      	str	r6, [sp, #24]
 800090a:	9507      	str	r5, [sp, #28]
 800090c:	9508      	str	r5, [sp, #32]
 800090e:	f003 fa71 	bl	8003df4 <HAL_GPIO_Init>
 8000912:	2208      	movs	r2, #8
 8000914:	0029      	movs	r1, r5
 8000916:	a805      	add	r0, sp, #20
 8000918:	f004 ff0e 	bl	8005738 <memset>
 800091c:	2306      	movs	r3, #6
 800091e:	4c5f      	ldr	r4, [pc, #380]	; (8000a9c <main+0x210>)
 8000920:	63a3      	str	r3, [r4, #56]	; 0x38
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	33ff      	adds	r3, #255	; 0xff
 8000926:	6263      	str	r3, [r4, #36]	; 0x24
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x214>)
 800092a:	0022      	movs	r2, r4
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	2304      	movs	r3, #4
 8000930:	322c      	adds	r2, #44	; 0x2c
 8000932:	0020      	movs	r0, r4
 8000934:	8425      	strh	r5, [r4, #32]
 8000936:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000938:	62a5      	str	r5, [r4, #40]	; 0x28
 800093a:	7015      	strb	r5, [r2, #0]
 800093c:	6325      	str	r5, [r4, #48]	; 0x30
 800093e:	6365      	str	r5, [r4, #52]	; 0x34
 8000940:	6065      	str	r5, [r4, #4]
 8000942:	60a5      	str	r5, [r4, #8]
 8000944:	60e5      	str	r5, [r4, #12]
 8000946:	6126      	str	r6, [r4, #16]
 8000948:	6163      	str	r3, [r4, #20]
 800094a:	61a5      	str	r5, [r4, #24]
 800094c:	61e5      	str	r5, [r4, #28]
 800094e:	f002 fe75 	bl	800363c <HAL_ADC_Init>
 8000952:	42a8      	cmp	r0, r5
 8000954:	d001      	beq.n	800095a <main+0xce>
 8000956:	b672      	cpsid	i
 8000958:	e7fe      	b.n	8000958 <main+0xcc>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	0020      	movs	r0, r4
 800095e:	015b      	lsls	r3, r3, #5
 8000960:	a905      	add	r1, sp, #20
 8000962:	9605      	str	r6, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	f002 fff5 	bl	8003954 <HAL_ADC_ConfigChannel>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <main+0xe6>
 800096e:	b672      	cpsid	i
 8000970:	e7fe      	b.n	8000970 <main+0xe4>
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x218>)
 8000974:	0020      	movs	r0, r4
 8000976:	a905      	add	r1, sp, #20
 8000978:	9305      	str	r3, [sp, #20]
 800097a:	f002 ffeb 	bl	8003954 <HAL_ADC_ConfigChannel>
 800097e:	1e04      	subs	r4, r0, #0
 8000980:	d001      	beq.n	8000986 <main+0xfa>
 8000982:	b672      	cpsid	i
 8000984:	e7fe      	b.n	8000984 <main+0xf8>
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	0001      	movs	r1, r0
 800098a:	4333      	orrs	r3, r6
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	0002      	movs	r2, r0
 8000992:	4033      	ands	r3, r6
 8000994:	200a      	movs	r0, #10
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	9b00      	ldr	r3, [sp, #0]
 800099a:	f003 f82f 	bl	80039fc <HAL_NVIC_SetPriority>
 800099e:	200a      	movs	r0, #10
 80009a0:	f003 f856 	bl	8003a50 <HAL_NVIC_EnableIRQ>
 80009a4:	4d40      	ldr	r5, [pc, #256]	; (8000aa8 <main+0x21c>)
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x220>)
 80009a8:	0028      	movs	r0, r5
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <main+0x224>)
 80009ae:	60ac      	str	r4, [r5, #8]
 80009b0:	606b      	str	r3, [r5, #4]
 80009b2:	60ee      	str	r6, [r5, #12]
 80009b4:	612c      	str	r4, [r5, #16]
 80009b6:	616c      	str	r4, [r5, #20]
 80009b8:	61ac      	str	r4, [r5, #24]
 80009ba:	61ec      	str	r4, [r5, #28]
 80009bc:	622c      	str	r4, [r5, #32]
 80009be:	f003 fc05 	bl	80041cc <HAL_I2C_Init>
 80009c2:	1e01      	subs	r1, r0, #0
 80009c4:	d001      	beq.n	80009ca <main+0x13e>
 80009c6:	b672      	cpsid	i
 80009c8:	e7fe      	b.n	80009c8 <main+0x13c>
 80009ca:	0028      	movs	r0, r5
 80009cc:	f003 fe1c 	bl	8004608 <HAL_I2CEx_ConfigAnalogFilter>
 80009d0:	1e01      	subs	r1, r0, #0
 80009d2:	d001      	beq.n	80009d8 <main+0x14c>
 80009d4:	b672      	cpsid	i
 80009d6:	e7fe      	b.n	80009d6 <main+0x14a>
 80009d8:	0028      	movs	r0, r5
 80009da:	f003 fe3b 	bl	8004654 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x15a>
 80009e2:	b672      	cpsid	i
 80009e4:	e7fe      	b.n	80009e4 <main+0x158>
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <main+0x228>)
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <main+0x22c>)
 80009ea:	6083      	str	r3, [r0, #8]
 80009ec:	6002      	str	r2, [r0, #0]
 80009ee:	2282      	movs	r2, #130	; 0x82
 80009f0:	60c3      	str	r3, [r0, #12]
 80009f2:	6103      	str	r3, [r0, #16]
 80009f4:	6143      	str	r3, [r0, #20]
 80009f6:	6203      	str	r3, [r0, #32]
 80009f8:	6243      	str	r3, [r0, #36]	; 0x24
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
 80009fc:	2410      	movs	r4, #16
 80009fe:	2307      	movs	r3, #7
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	6042      	str	r2, [r0, #4]
 8000a04:	32fc      	adds	r2, #252	; 0xfc
 8000a06:	6182      	str	r2, [r0, #24]
 8000a08:	61c4      	str	r4, [r0, #28]
 8000a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000a0c:	f004 fb3e 	bl	800508c <HAL_SPI_Init>
 8000a10:	1e05      	subs	r5, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x18c>
 8000a14:	b672      	cpsid	i
 8000a16:	e7fe      	b.n	8000a16 <main+0x18a>
 8000a18:	0022      	movs	r2, r4
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	a805      	add	r0, sp, #20
 8000a1e:	f004 fe8b 	bl	8005738 <memset>
 8000a22:	2208      	movs	r2, #8
 8000a24:	0029      	movs	r1, r5
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f004 fe86 	bl	8005738 <memset>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	4c23      	ldr	r4, [pc, #140]	; (8000abc <main+0x230>)
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	231f      	movs	r3, #31
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <main+0x234>)
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	60a5      	str	r5, [r4, #8]
 8000a3e:	60e3      	str	r3, [r4, #12]
 8000a40:	6125      	str	r5, [r4, #16]
 8000a42:	6165      	str	r5, [r4, #20]
 8000a44:	f004 fc68 	bl	8005318 <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1c4>
 8000a4c:	b672      	cpsid	i
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1c2>
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	0020      	movs	r0, r4
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	a905      	add	r1, sp, #20
 8000a58:	9305      	str	r3, [sp, #20]
 8000a5a:	f004 fcad 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x1da>
 8000a62:	b672      	cpsid	i
 8000a64:	e7fe      	b.n	8000a64 <main+0x1d8>
 8000a66:	9003      	str	r0, [sp, #12]
 8000a68:	9004      	str	r0, [sp, #16]
 8000a6a:	a903      	add	r1, sp, #12
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f004 fddd 	bl	800562c <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x1ee>
 8000a76:	b672      	cpsid	i
 8000a78:	e7fe      	b.n	8000a78 <main+0x1ec>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	0011      	movs	r1, r2
 8000a80:	f002 ffbc 	bl	80039fc <HAL_NVIC_SetPriority>
 8000a84:	200f      	movs	r0, #15
 8000a86:	f002 ffe3 	bl	8003a50 <HAL_NVIC_EnableIRQ>
 8000a8a:	f002 fb37 	bl	80030fc <PSDrawers_Initialized>
 8000a8e:	f002 fc1b 	bl	80032c8 <PSDrawers_Main>
 8000a92:	e7fe      	b.n	8000a92 <main+0x206>
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	20000488 	.word	0x20000488
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	04000002 	.word	0x04000002
 8000aa8:	2000052c 	.word	0x2000052c
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00200c28 	.word	0x00200c28
 8000ab4:	20000578 	.word	0x20000578
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	200005d0 	.word	0x200005d0
 8000ac0:	000003e7 	.word	0x000003e7

08000ac4 <Error_Handler>:
 8000ac4:	b672      	cpsid	i
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x2>

08000ac8 <SSD1306_Fill>:
 8000ac8:	2100      	movs	r1, #0
 8000aca:	b510      	push	{r4, lr}
 8000acc:	4288      	cmp	r0, r1
 8000ace:	d000      	beq.n	8000ad2 <SSD1306_Fill+0xa>
 8000ad0:	31ff      	adds	r1, #255	; 0xff
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SSD1306_Fill+0x18>)
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	f004 fe2e 	bl	8005738 <memset>
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000616 	.word	0x20000616

08000ae4 <SSD1306_DrawPixel>:
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	0004      	movs	r4, r0
 8000ae8:	287f      	cmp	r0, #127	; 0x7f
 8000aea:	d812      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000aec:	293f      	cmp	r1, #63	; 0x3f
 8000aee:	d810      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0x48>)
 8000af2:	4d0f      	ldr	r5, [pc, #60]	; (8000b30 <SSD1306_DrawPixel+0x4c>)
 8000af4:	7918      	ldrb	r0, [r3, #4]
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d00b      	beq.n	8000b14 <SSD1306_DrawPixel+0x30>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d10b      	bne.n	8000b18 <SSD1306_DrawPixel+0x34>
 8000b00:	01d8      	lsls	r0, r3, #7
 8000b02:	2307      	movs	r3, #7
 8000b04:	4019      	ands	r1, r3
 8000b06:	3b06      	subs	r3, #6
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1900      	adds	r0, r0, r4
 8000b0c:	5c2a      	ldrb	r2, [r5, r0]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	542b      	strb	r3, [r5, r0]
 8000b12:	bd30      	pop	{r4, r5, pc}
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d0f3      	beq.n	8000b00 <SSD1306_DrawPixel+0x1c>
 8000b18:	01d8      	lsls	r0, r3, #7
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4019      	ands	r1, r3
 8000b20:	408a      	lsls	r2, r1
 8000b22:	1900      	adds	r0, r0, r4
 8000b24:	5c2b      	ldrb	r3, [r5, r0]
 8000b26:	4393      	bics	r3, r2
 8000b28:	e7f2      	b.n	8000b10 <SSD1306_DrawPixel+0x2c>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000610 	.word	0x20000610
 8000b30:	20000616 	.word	0x20000616

08000b34 <SSD1306_GotoXY>:
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <SSD1306_GotoXY+0x8>)
 8000b36:	8018      	strh	r0, [r3, #0]
 8000b38:	8059      	strh	r1, [r3, #2]
 8000b3a:	4770      	bx	lr
 8000b3c:	20000610 	.word	0x20000610

08000b40 <SSD1306_Putc>:
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b42:	0007      	movs	r7, r0
 8000b44:	000c      	movs	r4, r1
 8000b46:	2500      	movs	r5, #0
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	7863      	ldrb	r3, [r4, #1]
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d806      	bhi.n	8000b5e <SSD1306_Putc+0x1e>
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b52:	7823      	ldrb	r3, [r4, #0]
 8000b54:	8811      	ldrh	r1, [r2, #0]
 8000b56:	0038      	movs	r0, r7
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	8013      	strh	r3, [r2, #0]
 8000b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000b5e:	003a      	movs	r2, r7
 8000b60:	2600      	movs	r6, #0
 8000b62:	3a20      	subs	r2, #32
 8000b64:	4353      	muls	r3, r2
 8000b66:	6862      	ldr	r2, [r4, #4]
 8000b68:	195b      	adds	r3, r3, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	5a9b      	ldrh	r3, [r3, r2]
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b72:	7822      	ldrb	r2, [r4, #0]
 8000b74:	8818      	ldrh	r0, [r3, #0]
 8000b76:	42b2      	cmp	r2, r6
 8000b78:	d801      	bhi.n	8000b7e <SSD1306_Putc+0x3e>
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7e5      	b.n	8000b4a <SSD1306_Putc+0xa>
 8000b7e:	8859      	ldrh	r1, [r3, #2]
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	40b3      	lsls	r3, r6
 8000b86:	1980      	adds	r0, r0, r6
 8000b88:	1949      	adds	r1, r1, r5
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	4213      	tst	r3, r2
 8000b92:	d004      	beq.n	8000b9e <SSD1306_Putc+0x5e>
 8000b94:	9a00      	ldr	r2, [sp, #0]
 8000b96:	f7ff ffa5 	bl	8000ae4 <SSD1306_DrawPixel>
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7e8      	b.n	8000b70 <SSD1306_Putc+0x30>
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	425a      	negs	r2, r3
 8000ba2:	415a      	adcs	r2, r3
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	e7f6      	b.n	8000b96 <SSD1306_Putc+0x56>
 8000ba8:	20000610 	.word	0x20000610

08000bac <SSD1306_Puts>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <SSD1306_Puts+0x10>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	f7ff ffbe 	bl	8000b40 <SSD1306_Putc>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	7820      	ldrb	r0, [r4, #0]
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	d1f6      	bne.n	8000bba <SSD1306_Puts+0xe>
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7f1      	b.n	8000bb4 <SSD1306_Puts+0x8>

08000bd0 <SSD1306_DrawLine>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	ac0c      	add	r4, sp, #48	; 0x30
 8000bd6:	7824      	ldrb	r4, [r4, #0]
 8000bd8:	9405      	str	r4, [sp, #20]
 8000bda:	1c04      	adds	r4, r0, #0
 8000bdc:	287f      	cmp	r0, #127	; 0x7f
 8000bde:	d900      	bls.n	8000be2 <SSD1306_DrawLine+0x12>
 8000be0:	247f      	movs	r4, #127	; 0x7f
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	1c16      	adds	r6, r2, #0
 8000be6:	2a7f      	cmp	r2, #127	; 0x7f
 8000be8:	d900      	bls.n	8000bec <SSD1306_DrawLine+0x1c>
 8000bea:	267f      	movs	r6, #127	; 0x7f
 8000bec:	b2b6      	uxth	r6, r6
 8000bee:	1c0d      	adds	r5, r1, #0
 8000bf0:	293f      	cmp	r1, #63	; 0x3f
 8000bf2:	d900      	bls.n	8000bf6 <SSD1306_DrawLine+0x26>
 8000bf4:	253f      	movs	r5, #63	; 0x3f
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	1c1f      	adds	r7, r3, #0
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d900      	bls.n	8000c00 <SSD1306_DrawLine+0x30>
 8000bfe:	273f      	movs	r7, #63	; 0x3f
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	1b33      	subs	r3, r6, r4
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d800      	bhi.n	8000c0a <SSD1306_DrawLine+0x3a>
 8000c08:	1ba3      	subs	r3, r4, r6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d224      	bcs.n	8000c5c <SSD1306_DrawLine+0x8c>
 8000c12:	1b7b      	subs	r3, r7, r5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d801      	bhi.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd23      	ble.n	8000c76 <SSD1306_DrawLine+0xa6>
 8000c2e:	9a00      	ldr	r2, [sp, #0]
 8000c30:	0fdb      	lsrs	r3, r3, #31
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12b      	bne.n	8000c96 <SSD1306_DrawLine+0xc6>
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	d902      	bls.n	8000c48 <SSD1306_DrawLine+0x78>
 8000c42:	002b      	movs	r3, r5
 8000c44:	003d      	movs	r5, r7
 8000c46:	001f      	movs	r7, r3
 8000c48:	1c33      	adds	r3, r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d900      	bls.n	8000c50 <SSD1306_DrawLine+0x80>
 8000c4e:	1c23      	adds	r3, r4, #0
 8000c50:	b29c      	uxth	r4, r3
 8000c52:	b22d      	sxth	r5, r5
 8000c54:	42bd      	cmp	r5, r7
 8000c56:	dd16      	ble.n	8000c86 <SSD1306_DrawLine+0xb6>
 8000c58:	b007      	add	sp, #28
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	1beb      	subs	r3, r5, r7
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2301      	movs	r3, #1
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d903      	bls.n	8000c70 <SSD1306_DrawLine+0xa0>
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7da      	b.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c70:	425b      	negs	r3, r3
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	e7fa      	b.n	8000c6c <SSD1306_DrawLine+0x9c>
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0fdb      	lsrs	r3, r3, #31
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	e7d7      	b.n	8000c36 <SSD1306_DrawLine+0x66>
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	0029      	movs	r1, r5
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	9a05      	ldr	r2, [sp, #20]
 8000c8e:	f7ff ff29 	bl	8000ae4 <SSD1306_DrawPixel>
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7dd      	b.n	8000c52 <SSD1306_DrawLine+0x82>
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d115      	bne.n	8000cc8 <SSD1306_DrawLine+0xf8>
 8000c9c:	1c2b      	adds	r3, r5, #0
 8000c9e:	42bd      	cmp	r5, r7
 8000ca0:	d900      	bls.n	8000ca4 <SSD1306_DrawLine+0xd4>
 8000ca2:	1c3b      	adds	r3, r7, #0
 8000ca4:	b29d      	uxth	r5, r3
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d202      	bcs.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000caa:	0023      	movs	r3, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	001e      	movs	r6, r3
 8000cb0:	b224      	sxth	r4, r4
 8000cb2:	42b4      	cmp	r4, r6
 8000cb4:	dcd0      	bgt.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	0020      	movs	r0, r4
 8000cba:	0029      	movs	r1, r5
 8000cbc:	9a05      	ldr	r2, [sp, #20]
 8000cbe:	f7ff ff11 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	e7f4      	b.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	0029      	movs	r1, r5
 8000cca:	0020      	movs	r0, r4
 8000ccc:	9a05      	ldr	r2, [sp, #20]
 8000cce:	f7ff ff09 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d101      	bne.n	8000cda <SSD1306_DrawLine+0x10a>
 8000cd6:	42bd      	cmp	r5, r7
 8000cd8:	d0be      	beq.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	425a      	negs	r2, r3
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd05      	ble.n	8000cf0 <SSD1306_DrawLine+0x120>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	9a03      	ldr	r2, [sp, #12]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	18a4      	adds	r4, r4, r2
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	9a02      	ldr	r2, [sp, #8]
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	dae6      	bge.n	8000cc6 <SSD1306_DrawLine+0xf6>
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	9a04      	ldr	r2, [sp, #16]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	e7df      	b.n	8000cc6 <SSD1306_DrawLine+0xf6>

08000d06 <SSD1306_DrawRectangle>:
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0007      	movs	r7, r0
 8000d12:	000e      	movs	r6, r1
 8000d14:	9303      	str	r3, [sp, #12]
 8000d16:	287f      	cmp	r0, #127	; 0x7f
 8000d18:	d831      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1a:	293f      	cmp	r1, #63	; 0x3f
 8000d1c:	d82f      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1e:	1883      	adds	r3, r0, r2
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dd02      	ble.n	8000d2a <SSD1306_DrawRectangle+0x24>
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	1973      	adds	r3, r6, r5
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd02      	ble.n	8000d36 <SSD1306_DrawRectangle+0x30>
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1bad      	subs	r5, r5, r6
 8000d34:	b2ad      	uxth	r5, r5
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	19d2      	adds	r2, r2, r7
 8000d3a:	b294      	uxth	r4, r2
 8000d3c:	0022      	movs	r2, r4
 8000d3e:	0031      	movs	r1, r6
 8000d40:	0038      	movs	r0, r7
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0033      	movs	r3, r6
 8000d46:	f7ff ff43 	bl	8000bd0 <SSD1306_DrawLine>
 8000d4a:	19ad      	adds	r5, r5, r6
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	0022      	movs	r2, r4
 8000d52:	0029      	movs	r1, r5
 8000d54:	0038      	movs	r0, r7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	f7ff ff39 	bl	8000bd0 <SSD1306_DrawLine>
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	003a      	movs	r2, r7
 8000d62:	0031      	movs	r1, r6
 8000d64:	0038      	movs	r0, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	002b      	movs	r3, r5
 8000d6a:	f7ff ff31 	bl	8000bd0 <SSD1306_DrawLine>
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	0022      	movs	r2, r4
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0031      	movs	r1, r6
 8000d76:	002b      	movs	r3, r5
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff ff29 	bl	8000bd0 <SSD1306_DrawLine>
 8000d7e:	b005      	add	sp, #20
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <SSD1306_DrawFilledRectangle>:
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	ab0a      	add	r3, sp, #40	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000f      	movs	r7, r1
 8000d90:	0014      	movs	r4, r2
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	287f      	cmp	r0, #127	; 0x7f
 8000d96:	d814      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d98:	293f      	cmp	r1, #63	; 0x3f
 8000d9a:	d812      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d9c:	1883      	adds	r3, r0, r2
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	dd02      	ble.n	8000da8 <SSD1306_DrawFilledRectangle+0x26>
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	1a24      	subs	r4, r4, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	9b02      	ldr	r3, [sp, #8]
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	dd03      	ble.n	8000db8 <SSD1306_DrawFilledRectangle+0x36>
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2600      	movs	r6, #0
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	b2b1      	uxth	r1, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawFilledRectangle+0x44>
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	19c9      	adds	r1, r1, r7
 8000dca:	b289      	uxth	r1, r1
 8000dcc:	1962      	adds	r2, r4, r5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	3601      	adds	r6, #1
 8000dd8:	f7ff fefa 	bl	8000bd0 <SSD1306_DrawLine>
 8000ddc:	b2f6      	uxtb	r6, r6
 8000dde:	e7ec      	b.n	8000dba <SSD1306_DrawFilledRectangle+0x38>

08000de0 <ssd1306_I2C_WriteMulti>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	2400      	movs	r4, #0
 8000de4:	b0c2      	sub	sp, #264	; 0x108
 8000de6:	0015      	movs	r5, r2
 8000de8:	aa02      	add	r2, sp, #8
 8000dea:	7011      	strb	r1, [r2, #0]
 8000dec:	429c      	cmp	r4, r3
 8000dee:	d309      	bcc.n	8000e04 <ssd1306_I2C_WriteMulti+0x24>
 8000df0:	b281      	uxth	r1, r0
 8000df2:	200a      	movs	r0, #10
 8000df4:	3301      	adds	r3, #1
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ssd1306_I2C_WriteMulti+0x30>)
 8000dfc:	f003 fa3c 	bl	8004278 <HAL_I2C_Master_Transmit>
 8000e00:	b042      	add	sp, #264	; 0x108
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
 8000e04:	5d2e      	ldrb	r6, [r5, r4]
 8000e06:	1911      	adds	r1, r2, r4
 8000e08:	3401      	adds	r4, #1
 8000e0a:	704e      	strb	r6, [r1, #1]
 8000e0c:	b2e4      	uxtb	r4, r4
 8000e0e:	e7ed      	b.n	8000dec <ssd1306_I2C_WriteMulti+0xc>
 8000e10:	2000052c 	.word	0x2000052c

08000e14 <ssd1306_I2C_Write>:
 8000e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e16:	466b      	mov	r3, sp
 8000e18:	7319      	strb	r1, [r3, #12]
 8000e1a:	735a      	strb	r2, [r3, #13]
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	0001      	movs	r1, r0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	aa03      	add	r2, sp, #12
 8000e24:	3b08      	subs	r3, #8
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <ssd1306_I2C_Write+0x1c>)
 8000e28:	f003 fa26 	bl	8004278 <HAL_I2C_Master_Transmit>
 8000e2c:	b005      	add	sp, #20
 8000e2e:	bd00      	pop	{pc}
 8000e30:	2000052c 	.word	0x2000052c

08000e34 <SSD1306_UpdateScreen>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	24b0      	movs	r4, #176	; 0xb0
 8000e38:	2578      	movs	r5, #120	; 0x78
 8000e3a:	4e0e      	ldr	r6, [pc, #56]	; (8000e74 <SSD1306_UpdateScreen+0x40>)
 8000e3c:	0022      	movs	r2, r4
 8000e3e:	2100      	movs	r1, #0
 8000e40:	0028      	movs	r0, r5
 8000e42:	f7ff ffe7 	bl	8000e14 <ssd1306_I2C_Write>
 8000e46:	2200      	movs	r2, #0
 8000e48:	0028      	movs	r0, r5
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	f7ff ffe2 	bl	8000e14 <ssd1306_I2C_Write>
 8000e50:	3401      	adds	r4, #1
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	0028      	movs	r0, r5
 8000e58:	f7ff ffdc 	bl	8000e14 <ssd1306_I2C_Write>
 8000e5c:	b2e4      	uxtb	r4, r4
 8000e5e:	0032      	movs	r2, r6
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	0028      	movs	r0, r5
 8000e66:	f7ff ffbb 	bl	8000de0 <ssd1306_I2C_WriteMulti>
 8000e6a:	3680      	adds	r6, #128	; 0x80
 8000e6c:	2cb8      	cmp	r4, #184	; 0xb8
 8000e6e:	d1e5      	bne.n	8000e3c <SSD1306_UpdateScreen+0x8>
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000616 	.word	0x20000616

08000e78 <SSD1306_Clear>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe24 	bl	8000ac8 <SSD1306_Fill>
 8000e80:	f7ff ffd8 	bl	8000e34 <SSD1306_UpdateScreen>
 8000e84:	bd10      	pop	{r4, pc}
	...

08000e88 <SSD1306_Init>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2178      	movs	r1, #120	; 0x78
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <SSD1306_Init+0x150>)
 8000e90:	4852      	ldr	r0, [pc, #328]	; (8000fdc <SSD1306_Init+0x154>)
 8000e92:	f003 fb15 	bl	80044c0 <HAL_I2C_IsDeviceReady>
 8000e96:	2400      	movs	r4, #0
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d000      	beq.n	8000e9e <SSD1306_Init+0x16>
 8000e9c:	e09a      	b.n	8000fd4 <SSD1306_Init+0x14c>
 8000e9e:	0021      	movs	r1, r4
 8000ea0:	22ae      	movs	r2, #174	; 0xae
 8000ea2:	2078      	movs	r0, #120	; 0x78
 8000ea4:	f7ff ffb6 	bl	8000e14 <ssd1306_I2C_Write>
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2078      	movs	r0, #120	; 0x78
 8000eae:	f7ff ffb1 	bl	8000e14 <ssd1306_I2C_Write>
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	2078      	movs	r0, #120	; 0x78
 8000eb8:	f7ff ffac 	bl	8000e14 <ssd1306_I2C_Write>
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	22b0      	movs	r2, #176	; 0xb0
 8000ec0:	2078      	movs	r0, #120	; 0x78
 8000ec2:	f7ff ffa7 	bl	8000e14 <ssd1306_I2C_Write>
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	22c8      	movs	r2, #200	; 0xc8
 8000eca:	2078      	movs	r0, #120	; 0x78
 8000ecc:	f7ff ffa2 	bl	8000e14 <ssd1306_I2C_Write>
 8000ed0:	0022      	movs	r2, r4
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	2078      	movs	r0, #120	; 0x78
 8000ed6:	f7ff ff9d 	bl	8000e14 <ssd1306_I2C_Write>
 8000eda:	0021      	movs	r1, r4
 8000edc:	2210      	movs	r2, #16
 8000ede:	2078      	movs	r0, #120	; 0x78
 8000ee0:	f7ff ff98 	bl	8000e14 <ssd1306_I2C_Write>
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f7ff ff93 	bl	8000e14 <ssd1306_I2C_Write>
 8000eee:	0021      	movs	r1, r4
 8000ef0:	2281      	movs	r2, #129	; 0x81
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f7ff ff8e 	bl	8000e14 <ssd1306_I2C_Write>
 8000ef8:	0021      	movs	r1, r4
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	2078      	movs	r0, #120	; 0x78
 8000efe:	f7ff ff89 	bl	8000e14 <ssd1306_I2C_Write>
 8000f02:	0021      	movs	r1, r4
 8000f04:	22a1      	movs	r2, #161	; 0xa1
 8000f06:	2078      	movs	r0, #120	; 0x78
 8000f08:	f7ff ff84 	bl	8000e14 <ssd1306_I2C_Write>
 8000f0c:	0021      	movs	r1, r4
 8000f0e:	22a6      	movs	r2, #166	; 0xa6
 8000f10:	2078      	movs	r0, #120	; 0x78
 8000f12:	f7ff ff7f 	bl	8000e14 <ssd1306_I2C_Write>
 8000f16:	0021      	movs	r1, r4
 8000f18:	22a8      	movs	r2, #168	; 0xa8
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f7ff ff7a 	bl	8000e14 <ssd1306_I2C_Write>
 8000f20:	0021      	movs	r1, r4
 8000f22:	223f      	movs	r2, #63	; 0x3f
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f7ff ff75 	bl	8000e14 <ssd1306_I2C_Write>
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	22a4      	movs	r2, #164	; 0xa4
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f7ff ff70 	bl	8000e14 <ssd1306_I2C_Write>
 8000f34:	0021      	movs	r1, r4
 8000f36:	22d3      	movs	r2, #211	; 0xd3
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f7ff ff6b 	bl	8000e14 <ssd1306_I2C_Write>
 8000f3e:	0022      	movs	r2, r4
 8000f40:	0021      	movs	r1, r4
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f7ff ff66 	bl	8000e14 <ssd1306_I2C_Write>
 8000f48:	0021      	movs	r1, r4
 8000f4a:	22d5      	movs	r2, #213	; 0xd5
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f7ff ff61 	bl	8000e14 <ssd1306_I2C_Write>
 8000f52:	0021      	movs	r1, r4
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f7ff ff5c 	bl	8000e14 <ssd1306_I2C_Write>
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	22d9      	movs	r2, #217	; 0xd9
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f7ff ff57 	bl	8000e14 <ssd1306_I2C_Write>
 8000f66:	0021      	movs	r1, r4
 8000f68:	2222      	movs	r2, #34	; 0x22
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f7ff ff52 	bl	8000e14 <ssd1306_I2C_Write>
 8000f70:	0021      	movs	r1, r4
 8000f72:	22da      	movs	r2, #218	; 0xda
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f7ff ff4d 	bl	8000e14 <ssd1306_I2C_Write>
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f7ff ff48 	bl	8000e14 <ssd1306_I2C_Write>
 8000f84:	0021      	movs	r1, r4
 8000f86:	22db      	movs	r2, #219	; 0xdb
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f7ff ff43 	bl	8000e14 <ssd1306_I2C_Write>
 8000f8e:	0021      	movs	r1, r4
 8000f90:	2220      	movs	r2, #32
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f7ff ff3e 	bl	8000e14 <ssd1306_I2C_Write>
 8000f98:	0021      	movs	r1, r4
 8000f9a:	228d      	movs	r2, #141	; 0x8d
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f7ff ff39 	bl	8000e14 <ssd1306_I2C_Write>
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f7ff ff34 	bl	8000e14 <ssd1306_I2C_Write>
 8000fac:	0021      	movs	r1, r4
 8000fae:	22af      	movs	r2, #175	; 0xaf
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f7ff ff2f 	bl	8000e14 <ssd1306_I2C_Write>
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	222e      	movs	r2, #46	; 0x2e
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f7ff ff2a 	bl	8000e14 <ssd1306_I2C_Write>
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	f7ff fd81 	bl	8000ac8 <SSD1306_Fill>
 8000fc6:	f7ff ff35 	bl	8000e34 <SSD1306_UpdateScreen>
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SSD1306_Init+0x158>)
 8000fcc:	801c      	strh	r4, [r3, #0]
 8000fce:	805c      	strh	r4, [r3, #2]
 8000fd0:	3401      	adds	r4, #1
 8000fd2:	715c      	strb	r4, [r3, #5]
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	00004e20 	.word	0x00004e20
 8000fdc:	2000052c 	.word	0x2000052c
 8000fe0:	20000610 	.word	0x20000610

08000fe4 <eepWriteData>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	000d      	movs	r5, r1
 8000fe8:	0004      	movs	r4, r0
 8000fea:	f002 feb7 	bl	8003d5c <HAL_FLASHEx_DATAEEPROM_Unlock>
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <eepWriteData+0x1c>)
 8000ff0:	002a      	movs	r2, r5
 8000ff2:	18e1      	adds	r1, r4, r3
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 fed3 	bl	8003da0 <HAL_FLASHEx_DATAEEPROM_Program>
 8000ffa:	f002 fec7 	bl	8003d8c <HAL_FLASHEx_DATAEEPROM_Lock>
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	08080000 	.word	0x08080000

08001004 <eepReadData>:
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <eepReadData+0xc>)
 8001006:	18c0      	adds	r0, r0, r3
 8001008:	7800      	ldrb	r0, [r0, #0]
 800100a:	b2c0      	uxtb	r0, r0
 800100c:	4770      	bx	lr
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	08080000 	.word	0x08080000

08001014 <HAL_MspInit>:
 8001014:	2201      	movs	r2, #1
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_MspInit+0x18>)
 8001018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001022:	0552      	lsls	r2, r2, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
 8001028:	4770      	bx	lr
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_ADC_MspInit>:
 8001030:	b510      	push	{r4, lr}
 8001032:	0004      	movs	r4, r0
 8001034:	b086      	sub	sp, #24
 8001036:	2214      	movs	r2, #20
 8001038:	2100      	movs	r1, #0
 800103a:	a801      	add	r0, sp, #4
 800103c:	f004 fb7c 	bl	8005738 <memset>
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x48>)
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d115      	bne.n	8001074 <HAL_ADC_MspInit+0x44>
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x4c>)
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001050:	20a0      	movs	r0, #160	; 0xa0
 8001052:	430a      	orrs	r2, r1
 8001054:	2101      	movs	r1, #1
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105a:	05c0      	lsls	r0, r0, #23
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	400b      	ands	r3, r1
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	2303      	movs	r3, #3
 800106a:	a901      	add	r1, sp, #4
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	f002 fec0 	bl	8003df4 <HAL_GPIO_Init>
 8001074:	b006      	add	sp, #24
 8001076:	bd10      	pop	{r4, pc}
 8001078:	40012400 	.word	0x40012400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_I2C_MspInit>:
 8001080:	b510      	push	{r4, lr}
 8001082:	0004      	movs	r4, r0
 8001084:	b086      	sub	sp, #24
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a801      	add	r0, sp, #4
 800108c:	f004 fb54 	bl	8005738 <memset>
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_I2C_MspInit+0x50>)
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d119      	bne.n	80010cc <HAL_I2C_MspInit+0x4c>
 8001098:	2102      	movs	r1, #2
 800109a:	4c0e      	ldr	r4, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0x54>)
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <HAL_I2C_MspInit+0x58>)
 800109e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010a0:	430a      	orrs	r2, r1
 80010a2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80010a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a6:	400b      	ands	r3, r1
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	9b00      	ldr	r3, [sp, #0]
 80010ac:	23c0      	movs	r3, #192	; 0xc0
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	3bae      	subs	r3, #174	; 0xae
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	3b0f      	subs	r3, #15
 80010b6:	9304      	str	r3, [sp, #16]
 80010b8:	a901      	add	r1, sp, #4
 80010ba:	3b02      	subs	r3, #2
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	f002 fe99 	bl	8003df4 <HAL_GPIO_Init>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4313      	orrs	r3, r2
 80010ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80010cc:	b006      	add	sp, #24
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	50000400 	.word	0x50000400

080010dc <HAL_SPI_MspInit>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	0005      	movs	r5, r0
 80010e0:	b086      	sub	sp, #24
 80010e2:	2214      	movs	r2, #20
 80010e4:	2100      	movs	r1, #0
 80010e6:	a801      	add	r0, sp, #4
 80010e8:	f004 fb26 	bl	8005738 <memset>
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_SPI_MspInit+0x7c>)
 80010ee:	682a      	ldr	r2, [r5, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d12f      	bne.n	8001154 <HAL_SPI_MspInit+0x78>
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	2601      	movs	r6, #1
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_SPI_MspInit+0x80>)
 80010fa:	0152      	lsls	r2, r2, #5
 80010fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010fe:	20a0      	movs	r0, #160	; 0xa0
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
 8001104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001106:	05c0      	lsls	r0, r0, #23
 8001108:	4332      	orrs	r2, r6
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	a901      	add	r1, sp, #4
 8001110:	4033      	ands	r3, r6
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	9b00      	ldr	r3, [sp, #0]
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	3b9e      	subs	r3, #158	; 0x9e
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	199b      	adds	r3, r3, r6
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	f002 fe67 	bl	8003df4 <HAL_GPIO_Init>
 8001126:	4c0e      	ldr	r4, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x84>)
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0x88>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	2310      	movs	r3, #16
 8001130:	60a3      	str	r3, [r4, #8]
 8001132:	2300      	movs	r3, #0
 8001134:	0020      	movs	r0, r4
 8001136:	6066      	str	r6, [r4, #4]
 8001138:	60e3      	str	r3, [r4, #12]
 800113a:	6122      	str	r2, [r4, #16]
 800113c:	6163      	str	r3, [r4, #20]
 800113e:	61a3      	str	r3, [r4, #24]
 8001140:	61e3      	str	r3, [r4, #28]
 8001142:	6223      	str	r3, [r4, #32]
 8001144:	f002 fcaa 	bl	8003a9c <HAL_DMA_Init>
 8001148:	2800      	cmp	r0, #0
 800114a:	d001      	beq.n	8001150 <HAL_SPI_MspInit+0x74>
 800114c:	f7ff fcba 	bl	8000ac4 <Error_Handler>
 8001150:	64ac      	str	r4, [r5, #72]	; 0x48
 8001152:	62a5      	str	r5, [r4, #40]	; 0x28
 8001154:	b006      	add	sp, #24
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000
 8001160:	200004e4 	.word	0x200004e4
 8001164:	40020030 	.word	0x40020030

08001168 <HAL_TIM_Base_MspInit>:
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	429a      	cmp	r2, r3
 8001170:	d104      	bne.n	800117c <HAL_TIM_Base_MspInit+0x14>
 8001172:	2301      	movs	r3, #1
 8001174:	4a02      	ldr	r2, [pc, #8]	; (8001180 <HAL_TIM_Base_MspInit+0x18>)
 8001176:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001178:	430b      	orrs	r3, r1
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
 800117c:	4770      	bx	lr
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
 8001184:	e7fe      	b.n	8001184 <NMI_Handler>

08001186 <HardFault_Handler>:
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler>

08001188 <SVC_Handler>:
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:
 800118c:	b510      	push	{r4, lr}
 800118e:	f002 f979 	bl	8003484 <HAL_IncTick>
 8001192:	bd10      	pop	{r4, pc}

08001194 <DMA1_Channel2_3_IRQHandler>:
 8001194:	b510      	push	{r4, lr}
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001198:	f002 fd04 	bl	8003ba4 <HAL_DMA_IRQHandler>
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200004e4 	.word	0x200004e4

080011a4 <TIM2_IRQHandler>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0xc>)
 80011a8:	f004 f9b8 	bl	800551c <HAL_TIM_IRQHandler>
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	200005d0 	.word	0x200005d0

080011b4 <_sbrk>:
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <_sbrk+0x30>)
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <_sbrk+0x34>)
 80011b8:	0003      	movs	r3, r0
 80011ba:	1a89      	subs	r1, r1, r2
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <_sbrk+0x38>)
 80011be:	b510      	push	{r4, lr}
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d101      	bne.n	80011ca <_sbrk+0x16>
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <_sbrk+0x3c>)
 80011c8:	6010      	str	r0, [r2, #0]
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	18c3      	adds	r3, r0, r3
 80011ce:	428b      	cmp	r3, r1
 80011d0:	d906      	bls.n	80011e0 <_sbrk+0x2c>
 80011d2:	f004 fa61 	bl	8005698 <__errno>
 80011d6:	230c      	movs	r3, #12
 80011d8:	6003      	str	r3, [r0, #0]
 80011da:	2001      	movs	r0, #1
 80011dc:	4240      	negs	r0, r0
 80011de:	bd10      	pop	{r4, pc}
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e7fc      	b.n	80011de <_sbrk+0x2a>
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20002000 	.word	0x20002000
 80011ec:	20000a18 	.word	0x20000a18
 80011f0:	20000e10 	.word	0x20000e10

080011f4 <SystemInit>:
 80011f4:	4770      	bx	lr
	...

080011f8 <curxy>:
SORT_STATE standard;

/* Functions */

__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
__STATIC_INLINE uint8_t curxy(void) { return temp.x + ((5 - temp.y) * 6); }
 80011f8:	2005      	movs	r0, #5
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <curxy+0x14>)
 80011fc:	7853      	ldrb	r3, [r2, #1]
 80011fe:	1ac3      	subs	r3, r0, r3
 8001200:	3001      	adds	r0, #1
 8001202:	4358      	muls	r0, r3
 8001204:	7813      	ldrb	r3, [r2, #0]
 8001206:	18c0      	adds	r0, r0, r3
 8001208:	b2c0      	uxtb	r0, r0
 800120a:	4770      	bx	lr
 800120c:	20000ddb 	.word	0x20000ddb

08001210 <init_value>:
__STATIC_INLINE void init_value(void) { firF = sel = ModeF = joy_result = temp.x = temp.y = 0; }
 8001210:	2300      	movs	r3, #0
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <init_value+0x1c>)
 8001214:	7013      	strb	r3, [r2, #0]
 8001216:	7053      	strb	r3, [r2, #1]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <init_value+0x20>)
 800121a:	7013      	strb	r3, [r2, #0]
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <init_value+0x24>)
 800121e:	7013      	strb	r3, [r2, #0]
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <init_value+0x28>)
 8001222:	7013      	strb	r3, [r2, #0]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <init_value+0x2c>)
 8001226:	7013      	strb	r3, [r2, #0]
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000ddb 	.word	0x20000ddb
 8001230:	20000a3c 	.word	0x20000a3c
 8001234:	20000a1c 	.word	0x20000a1c
 8001238:	20000dc7 	.word	0x20000dc7
 800123c:	20000018 	.word	0x20000018

08001240 <cate_compare>:
	return res;
}

volatile int8_t cate_compare(struct Part* a, struct Part* b){
	int8_t res = 0;
	uint8_t a_pos = 0, b_pos = 0;
 8001240:	2300      	movs	r3, #0
volatile int8_t cate_compare(struct Part* a, struct Part* b){
 8001242:	b510      	push	{r4, lr}
	while(a->cate != standard.sortCateprior[a_pos]) a_pos++;
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <cate_compare+0x30>)
 8001246:	7904      	ldrb	r4, [r0, #4]
 8001248:	18d0      	adds	r0, r2, r3
 800124a:	7980      	ldrb	r0, [r0, #6]
 800124c:	42a0      	cmp	r0, r4
 800124e:	d108      	bne.n	8001262 <cate_compare+0x22>
	uint8_t a_pos = 0, b_pos = 0;
 8001250:	2000      	movs	r0, #0
	while(b->cate != standard.sortCateprior[b_pos]) b_pos++;
 8001252:	7909      	ldrb	r1, [r1, #4]
 8001254:	1814      	adds	r4, r2, r0
 8001256:	79a4      	ldrb	r4, [r4, #6]
 8001258:	428c      	cmp	r4, r1
 800125a:	d105      	bne.n	8001268 <cate_compare+0x28>
	res = b_pos - a_pos;
 800125c:	1ac0      	subs	r0, r0, r3
	return res;
 800125e:	b240      	sxtb	r0, r0
}
 8001260:	bd10      	pop	{r4, pc}
	while(a->cate != standard.sortCateprior[a_pos]) a_pos++;
 8001262:	3301      	adds	r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	e7ef      	b.n	8001248 <cate_compare+0x8>
	while(b->cate != standard.sortCateprior[b_pos]) b_pos++;
 8001268:	3001      	adds	r0, #1
 800126a:	b2c0      	uxtb	r0, r0
 800126c:	e7f2      	b.n	8001254 <cate_compare+0x14>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000dcf 	.word	0x20000dcf

08001274 <store_compare>:

volatile int8_t store_compare(struct Part* a, struct Part* b){
	int8_t res = 0;
	res = a->store - b->store;
 8001274:	798a      	ldrb	r2, [r1, #6]
	if(!standard.sortStoreF) res *= -1;
 8001276:	4905      	ldr	r1, [pc, #20]	; (800128c <store_compare+0x18>)
	res = a->store - b->store;
 8001278:	7983      	ldrb	r3, [r0, #6]
	if(!standard.sortStoreF) res *= -1;
 800127a:	7849      	ldrb	r1, [r1, #1]
 800127c:	1ad0      	subs	r0, r2, r3
 800127e:	b2c0      	uxtb	r0, r0
 8001280:	2900      	cmp	r1, #0
 8001282:	d001      	beq.n	8001288 <store_compare+0x14>
	res = a->store - b->store;
 8001284:	1a98      	subs	r0, r3, r2
 8001286:	b2c0      	uxtb	r0, r0
	return res;
 8001288:	b240      	sxtb	r0, r0
}
 800128a:	4770      	bx	lr
 800128c:	20000dcf 	.word	0x20000dcf

08001290 <get_time>:
__STATIC_INLINE void get_time(void){
 8001290:	b510      	push	{r4, lr}
	DS3231_get_date(&time.day, &time.month, &time.year);
 8001292:	4c06      	ldr	r4, [pc, #24]	; (80012ac <get_time+0x1c>)
 8001294:	0022      	movs	r2, r4
 8001296:	1c61      	adds	r1, r4, #1
 8001298:	1ca0      	adds	r0, r4, #2
 800129a:	f7ff f9f1 	bl	8000680 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 800129e:	1ce2      	adds	r2, r4, #3
 80012a0:	1d21      	adds	r1, r4, #4
 80012a2:	1d60      	adds	r0, r4, #5
 80012a4:	f7ff f956 	bl	8000554 <DS3231_get_time>
}
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000095 	.word	0x20000095

080012b0 <name_compare>:
volatile int8_t name_compare(struct Part* a, struct Part* b){
 80012b0:	b510      	push	{r4, lr}
	res = strcmp(a->name, b->name);
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	6800      	ldr	r0, [r0, #0]
 80012b6:	f7fe ff27 	bl	8000108 <strcmp>
	if(!standard.sortNameF) res *= -1;
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <name_compare+0x1c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <name_compare+0x16>
 80012c2:	b240      	sxtb	r0, r0
}
 80012c4:	bd10      	pop	{r4, pc}
	if(!standard.sortNameF) res *= -1;
 80012c6:	4240      	negs	r0, r0
 80012c8:	e7fb      	b.n	80012c2 <name_compare+0x12>
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000dcf 	.word	0x20000dcf

080012d0 <ssd1306_putsXY>:
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80012d4:	2306      	movs	r3, #6
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80012d6:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80012d8:	4358      	muls	r0, r3
 80012da:	00c9      	lsls	r1, r1, #3
 80012dc:	f7ff fc2a 	bl	8000b34 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 80012e0:	002a      	movs	r2, r5
 80012e2:	0020      	movs	r0, r4
 80012e4:	4901      	ldr	r1, [pc, #4]	; (80012ec <ssd1306_putsXY+0x1c>)
 80012e6:	f7ff fc61 	bl	8000bac <SSD1306_Puts>
}
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	20000000 	.word	0x20000000

080012f0 <array_puts>:
void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	001e      	movs	r6, r3
 80012f6:	ab0a      	add	r3, sp, #40	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0004      	movs	r4, r0
	SSD1306_Fill(0);
 80012fc:	2000      	movs	r0, #0
void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 80012fe:	000f      	movs	r7, r1
 8001300:	0015      	movs	r5, r2
 8001302:	9303      	str	r3, [sp, #12]
	SSD1306_Fill(0);
 8001304:	f7ff fbe0 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8001308:	2100      	movs	r1, #0
 800130a:	2301      	movs	r3, #1
 800130c:	0008      	movs	r0, r1
 800130e:	227f      	movs	r2, #127	; 0x7f
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	3306      	adds	r3, #6
 8001314:	f7ff fd35 	bl	8000d82 <SSD1306_DrawFilledRectangle>
	ssd1306_putsXY(0, 0, title, 0);
 8001318:	2300      	movs	r3, #0
 800131a:	003a      	movs	r2, r7
 800131c:	0019      	movs	r1, r3
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ffd6 	bl	80012d0 <ssd1306_putsXY>
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001324:	9b03      	ldr	r3, [sp, #12]
 8001326:	005f      	lsls	r7, r3, #1
 8001328:	19e7      	adds	r7, r4, r7
 800132a:	42bc      	cmp	r4, r7
 800132c:	d101      	bne.n	8001332 <array_puts+0x42>
}
 800132e:	b005      	add	sp, #20
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001332:	7861      	ldrb	r1, [r4, #1]
 8001334:	7820      	ldrb	r0, [r4, #0]
 8001336:	0033      	movs	r3, r6
 8001338:	cd04      	ldmia	r5!, {r2}
 800133a:	f7ff ffc9 	bl	80012d0 <ssd1306_putsXY>
 800133e:	3402      	adds	r4, #2
 8001340:	e7f3      	b.n	800132a <array_puts+0x3a>
	...

08001344 <get_adc>:
void get_adc(void){
 8001344:	b510      	push	{r4, lr}
	uint32_t now_tick = HAL_GetTick();
 8001346:	f002 f8a9 	bl	800349c <HAL_GetTick>
	if(now_tick - frev_tick > 150){
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <get_adc+0x48>)
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	1ac3      	subs	r3, r0, r3
 8001350:	2b96      	cmp	r3, #150	; 0x96
 8001352:	d910      	bls.n	8001376 <get_adc+0x32>
		frev_tick = now_tick;
 8001354:	2196      	movs	r1, #150	; 0x96
 8001356:	6010      	str	r0, [r2, #0]
		if(JOY_U) joy_result = up;
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <get_adc+0x4c>)
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <get_adc+0x50>)
 800135c:	8850      	ldrh	r0, [r2, #2]
 800135e:	0049      	lsls	r1, r1, #1
 8001360:	4298      	cmp	r0, r3
 8001362:	d909      	bls.n	8001378 <get_adc+0x34>
 8001364:	2403      	movs	r4, #3
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <get_adc+0x54>)
		if(JOY_D) joy_result = down;
 8001368:	7004      	strb	r4, [r0, #0]
		if(JOY_L) joy_result = left;
 800136a:	8812      	ldrh	r2, [r2, #0]
 800136c:	428a      	cmp	r2, r1
 800136e:	d208      	bcs.n	8001382 <get_adc+0x3e>
 8001370:	2201      	movs	r2, #1
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <get_adc+0x54>)
		if(JOY_R) joy_result = right;
 8001374:	701a      	strb	r2, [r3, #0]
}
 8001376:	bd10      	pop	{r4, pc}
		if(JOY_D) joy_result = down;
 8001378:	4288      	cmp	r0, r1
 800137a:	d2f6      	bcs.n	800136a <get_adc+0x26>
 800137c:	2404      	movs	r4, #4
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <get_adc+0x54>)
 8001380:	e7f2      	b.n	8001368 <get_adc+0x24>
		if(JOY_R) joy_result = right;
 8001382:	429a      	cmp	r2, r3
 8001384:	d9f7      	bls.n	8001376 <get_adc+0x32>
 8001386:	2202      	movs	r2, #2
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <get_adc+0x54>)
 800138a:	e7f3      	b.n	8001374 <get_adc+0x30>
 800138c:	20000a34 	.word	0x20000a34
 8001390:	20000a1e 	.word	0x20000a1e
 8001394:	00000dac 	.word	0x00000dac
 8001398:	20000a3c 	.word	0x20000a3c

0800139c <get_sel>:
void get_sel(uint8_t* sel, uint8_t max, uint8_t min, uint8_t state){
 800139c:	b510      	push	{r4, lr}
	switch(state){
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d015      	beq.n	80013ce <get_sel+0x32>
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d020      	beq.n	80013e8 <get_sel+0x4c>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11d      	bne.n	80013e6 <get_sel+0x4a>
		if(joy_result == up) { if(*sel < max) *sel += 1; }
 80013aa:	4c16      	ldr	r4, [pc, #88]	; (8001404 <get_sel+0x68>)
 80013ac:	7823      	ldrb	r3, [r4, #0]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d104      	bne.n	80013bc <get_sel+0x20>
 80013b2:	7803      	ldrb	r3, [r0, #0]
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d216      	bcs.n	80013e6 <get_sel+0x4a>
 80013b8:	3301      	adds	r3, #1
 80013ba:	7003      	strb	r3, [r0, #0]
		if(joy_result == down) { if(*sel > min) *sel -= 1; }
 80013bc:	7823      	ldrb	r3, [r4, #0]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d111      	bne.n	80013e6 <get_sel+0x4a>
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 80013c2:	7803      	ldrb	r3, [r0, #0]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d90e      	bls.n	80013e6 <get_sel+0x4a>
 80013c8:	3b01      	subs	r3, #1
 80013ca:	7003      	strb	r3, [r0, #0]
}
 80013cc:	e00b      	b.n	80013e6 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
 80013ce:	4c0d      	ldr	r4, [pc, #52]	; (8001404 <get_sel+0x68>)
 80013d0:	7823      	ldrb	r3, [r4, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d104      	bne.n	80013e0 <get_sel+0x44>
 80013d6:	7803      	ldrb	r3, [r0, #0]
 80013d8:	428b      	cmp	r3, r1
 80013da:	d204      	bcs.n	80013e6 <get_sel+0x4a>
 80013dc:	3301      	adds	r3, #1
 80013de:	7003      	strb	r3, [r0, #0]
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
 80013e0:	7823      	ldrb	r3, [r4, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d0ed      	beq.n	80013c2 <get_sel+0x26>
}
 80013e6:	bd10      	pop	{r4, pc}
		if(joy_result == down) { if(*sel < max) *sel += 1; }
 80013e8:	4c06      	ldr	r4, [pc, #24]	; (8001404 <get_sel+0x68>)
 80013ea:	7823      	ldrb	r3, [r4, #0]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d104      	bne.n	80013fa <get_sel+0x5e>
 80013f0:	7803      	ldrb	r3, [r0, #0]
 80013f2:	428b      	cmp	r3, r1
 80013f4:	d2f7      	bcs.n	80013e6 <get_sel+0x4a>
 80013f6:	3301      	adds	r3, #1
 80013f8:	7003      	strb	r3, [r0, #0]
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 80013fa:	7823      	ldrb	r3, [r4, #0]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d1f2      	bne.n	80013e6 <get_sel+0x4a>
 8001400:	e7df      	b.n	80013c2 <get_sel+0x26>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20000a3c 	.word	0x20000a3c

08001408 <read_sw>:
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001408:	20a0      	movs	r0, #160	; 0xa0
uint8_t read_sw(void){
 800140a:	b510      	push	{r4, lr}
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 800140c:	2104      	movs	r1, #4
 800140e:	05c0      	lsls	r0, r0, #23
 8001410:	f002 fdb0 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <read_sw+0x38>)
 8001416:	7823      	ldrb	r3, [r4, #0]
 8001418:	4318      	orrs	r0, r3
 800141a:	b2c0      	uxtb	r0, r0
 800141c:	2800      	cmp	r0, #0
 800141e:	d102      	bne.n	8001426 <read_sw+0x1e>
 8001420:	3001      	adds	r0, #1
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001422:	7020      	strb	r0, [r4, #0]
}
 8001424:	bd10      	pop	{r4, pc}
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001426:	20a0      	movs	r0, #160	; 0xa0
 8001428:	2104      	movs	r1, #4
 800142a:	05c0      	lsls	r0, r0, #23
 800142c:	f002 fda2 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001430:	2800      	cmp	r0, #0
 8001432:	d0f7      	beq.n	8001424 <read_sw+0x1c>
 8001434:	7820      	ldrb	r0, [r4, #0]
 8001436:	2800      	cmp	r0, #0
 8001438:	d0f4      	beq.n	8001424 <read_sw+0x1c>
 800143a:	2000      	movs	r0, #0
 800143c:	e7f1      	b.n	8001422 <read_sw+0x1a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000a46 	.word	0x20000a46

08001444 <led_display>:
void led_display(struct Part* a, uint8_t i){
 8001444:	b510      	push	{r4, lr}
	switch(a->cate){
 8001446:	7900      	ldrb	r0, [r0, #4]
void led_display(struct Part* a, uint8_t i){
 8001448:	000c      	movs	r4, r1
	switch(a->cate){
 800144a:	3801      	subs	r0, #1
 800144c:	2803      	cmp	r0, #3
 800144e:	d809      	bhi.n	8001464 <led_display+0x20>
 8001450:	f7fe fe64 	bl	800011c <__gnu_thumb1_case_uqi>
 8001454:	110d0902 	.word	0x110d0902
	case 1: led_color(i, 4, 1, 0); break;
 8001458:	2300      	movs	r3, #0
 800145a:	2201      	movs	r2, #1
 800145c:	2104      	movs	r1, #4
	case 4: led_color(i, 0, 4, 4); break;
 800145e:	0020      	movs	r0, r4
 8001460:	f7ff f96a 	bl	8000738 <led_color>
}
 8001464:	bd10      	pop	{r4, pc}
	case 2: led_color(i, 1, 0, 4); break;
 8001466:	2304      	movs	r3, #4
 8001468:	2200      	movs	r2, #0
 800146a:	2101      	movs	r1, #1
 800146c:	e7f7      	b.n	800145e <led_display+0x1a>
	case 3: led_color(i, 4, 4, 0); break;
 800146e:	2204      	movs	r2, #4
 8001470:	2300      	movs	r3, #0
 8001472:	0011      	movs	r1, r2
 8001474:	e7f3      	b.n	800145e <led_display+0x1a>
	case 4: led_color(i, 0, 4, 4); break;
 8001476:	2304      	movs	r3, #4
 8001478:	2100      	movs	r1, #0
 800147a:	001a      	movs	r2, r3
 800147c:	e7ef      	b.n	800145e <led_display+0x1a>
	...

08001480 <main_menu>:
void main_menu(void){
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <main_menu+0x154>)
void main_menu(void){
 8001484:	b09b      	sub	sp, #108	; 0x6c
	if(!firF){
 8001486:	781c      	ldrb	r4, [r3, #0]
 8001488:	2c00      	cmp	r4, #0
 800148a:	d11b      	bne.n	80014c4 <main_menu+0x44>
		firF = 1;
 800148c:	2201      	movs	r2, #1
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800148e:	250c      	movs	r5, #12
		firF = 1;
 8001490:	701a      	strb	r2, [r3, #0]
		led_clear();
 8001492:	f7ff f987 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001496:	0028      	movs	r0, r5
 8001498:	4360      	muls	r0, r4
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <main_menu+0x158>)
 800149c:	b2e1      	uxtb	r1, r4
 800149e:	18c0      	adds	r0, r0, r3
 80014a0:	3401      	adds	r4, #1
 80014a2:	f7ff ffcf 	bl	8001444 <led_display>
 80014a6:	2c24      	cmp	r4, #36	; 0x24
 80014a8:	d1f5      	bne.n	8001496 <main_menu+0x16>
		led_update();
 80014aa:	f7ff f951 	bl	8000750 <led_update>
		for(uint8_t i = 0 ; i < 36 ; i++)
 80014ae:	21d8      	movs	r1, #216	; 0xd8
		led_update();
 80014b0:	2300      	movs	r3, #0
			if(pt[i].cate != 0) { check = 1; break; }
 80014b2:	484a      	ldr	r0, [pc, #296]	; (80015dc <main_menu+0x15c>)
		for(uint8_t i = 0 ; i < 36 ; i++)
 80014b4:	0049      	lsls	r1, r1, #1
			if(pt[i].cate != 0) { check = 1; break; }
 80014b6:	5cc2      	ldrb	r2, [r0, r3]
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d100      	bne.n	80014be <main_menu+0x3e>
 80014bc:	e081      	b.n	80015c2 <main_menu+0x142>
 80014be:	2201      	movs	r2, #1
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <main_menu+0x160>)
 80014c2:	701a      	strb	r2, [r3, #0]
	get_time();
 80014c4:	f7ff fee4 	bl	8001290 <get_time>
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 80014c8:	2300      	movs	r3, #0
 80014ca:	4f46      	ldr	r7, [pc, #280]	; (80015e4 <main_menu+0x164>)
 80014cc:	ac02      	add	r4, sp, #8
 80014ce:	7023      	strb	r3, [r4, #0]
 80014d0:	783b      	ldrb	r3, [r7, #0]
 80014d2:	2102      	movs	r1, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	7063      	strb	r3, [r4, #1]
 80014d8:	2303      	movs	r3, #3
 80014da:	2501      	movs	r5, #1
 80014dc:	2204      	movs	r2, #4
 80014de:	70e1      	strb	r1, [r4, #3]
 80014e0:	18c9      	adds	r1, r1, r3
 80014e2:	7261      	strb	r1, [r4, #9]
 80014e4:	1949      	adds	r1, r1, r5
 80014e6:	72e1      	strb	r1, [r4, #11]
 80014e8:	1949      	adds	r1, r1, r5
 80014ea:	7361      	strb	r1, [r4, #13]
 80014ec:	1889      	adds	r1, r1, r2
 80014ee:	73a1      	strb	r1, [r4, #14]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 80014f0:	21fa      	movs	r1, #250	; 0xfa
 80014f2:	4e3d      	ldr	r6, [pc, #244]	; (80015e8 <main_menu+0x168>)
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 80014f4:	7163      	strb	r3, [r4, #5]
 80014f6:	71e2      	strb	r2, [r4, #7]
 80014f8:	73e3      	strb	r3, [r4, #15]
 80014fa:	7462      	strb	r2, [r4, #17]
 80014fc:	330a      	adds	r3, #10
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 80014fe:	7832      	ldrb	r2, [r6, #0]
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 8001500:	70a5      	strb	r5, [r4, #2]
 8001502:	7125      	strb	r5, [r4, #4]
 8001504:	71a5      	strb	r5, [r4, #6]
 8001506:	7225      	strb	r5, [r4, #8]
 8001508:	72a5      	strb	r5, [r4, #10]
 800150a:	7325      	strb	r5, [r4, #12]
 800150c:	7423      	strb	r3, [r4, #16]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800150e:	00c9      	lsls	r1, r1, #3
 8001510:	1852      	adds	r2, r2, r1
 8001512:	78b1      	ldrb	r1, [r6, #2]
 8001514:	7873      	ldrb	r3, [r6, #1]
 8001516:	a810      	add	r0, sp, #64	; 0x40
 8001518:	9100      	str	r1, [sp, #0]
 800151a:	4934      	ldr	r1, [pc, #208]	; (80015ec <main_menu+0x16c>)
 800151c:	f004 fa34 	bl	8005988 <siprintf>
	sprintf(bf[1], "%02d:%02d:%02d", time.hour, time.min, time.sec);
 8001520:	7971      	ldrb	r1, [r6, #5]
 8001522:	7933      	ldrb	r3, [r6, #4]
 8001524:	78f2      	ldrb	r2, [r6, #3]
 8001526:	a815      	add	r0, sp, #84	; 0x54
 8001528:	9100      	str	r1, [sp, #0]
 800152a:	4931      	ldr	r1, [pc, #196]	; (80015f0 <main_menu+0x170>)
 800152c:	f004 fa2c 	bl	8005988 <siprintf>
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <main_menu+0x174>)
 8001532:	a910      	add	r1, sp, #64	; 0x40
 8001534:	9307      	str	r3, [sp, #28]
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <main_menu+0x178>)
 8001538:	910e      	str	r1, [sp, #56]	; 0x38
 800153a:	9308      	str	r3, [sp, #32]
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <main_menu+0x17c>)
 800153e:	a915      	add	r1, sp, #84	; 0x54
 8001540:	9309      	str	r3, [sp, #36]	; 0x24
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <main_menu+0x180>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001544:	0020      	movs	r0, r4
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001546:	930a      	str	r3, [sp, #40]	; 0x28
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <main_menu+0x184>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 800154a:	aa07      	add	r2, sp, #28
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 800154c:	930b      	str	r3, [sp, #44]	; 0x2c
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <main_menu+0x188>)
 8001550:	910f      	str	r1, [sp, #60]	; 0x3c
 8001552:	930c      	str	r3, [sp, #48]	; 0x30
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <main_menu+0x18c>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001556:	492e      	ldr	r1, [pc, #184]	; (8001610 <main_menu+0x190>)
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001558:	930d      	str	r3, [sp, #52]	; 0x34
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 800155a:	2309      	movs	r3, #9
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	002b      	movs	r3, r5
 8001560:	f7ff fec6 	bl	80012f0 <array_puts>
	SSD1306_UpdateScreen();
 8001564:	f7ff fc66 	bl	8000e34 <SSD1306_UpdateScreen>
	get_adc();
 8001568:	f7ff feec 	bl	8001344 <get_adc>
	get_sel(&sel, 5, 0, 2);
 800156c:	2302      	movs	r3, #2
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	0038      	movs	r0, r7
 8001574:	f7ff ff12 	bl	800139c <get_sel>
	joy_result = basic;
 8001578:	2200      	movs	r2, #0
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <main_menu+0x194>)
 800157c:	701a      	strb	r2, [r3, #0]
	if(read_sw()){
 800157e:	f7ff ff43 	bl	8001408 <read_sw>
 8001582:	2800      	cmp	r0, #0
 8001584:	d01b      	beq.n	80015be <main_menu+0x13e>
		if(sel == 0) { led_clear(); led_update(); start_check++; }
 8001586:	783b      	ldrb	r3, [r7, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <main_menu+0x11c>
 800158c:	f7ff f90a 	bl	80007a4 <led_clear>
 8001590:	f7ff f8de 	bl	8000750 <led_update>
 8001594:	4a20      	ldr	r2, [pc, #128]	; (8001618 <main_menu+0x198>)
 8001596:	7813      	ldrb	r3, [r2, #0]
 8001598:	195b      	adds	r3, r3, r5
 800159a:	7013      	strb	r3, [r2, #0]
		ModeF = sel + 1;
 800159c:	7839      	ldrb	r1, [r7, #0]
 800159e:	481f      	ldr	r0, [pc, #124]	; (800161c <main_menu+0x19c>)
 80015a0:	1c4b      	adds	r3, r1, #1
 80015a2:	7003      	strb	r3, [r0, #0]
		firF = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <main_menu+0x154>)
 80015a8:	7013      	strb	r3, [r2, #0]
		if(!check && sel != 0) { buzM = 1; ModeF = 0; }
 80015aa:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <main_menu+0x160>)
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d10d      	bne.n	80015ce <main_menu+0x14e>
 80015b2:	4299      	cmp	r1, r3
 80015b4:	d00b      	beq.n	80015ce <main_menu+0x14e>
 80015b6:	2101      	movs	r1, #1
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <main_menu+0x1a0>)
 80015ba:	7002      	strb	r2, [r0, #0]
 80015bc:	7019      	strb	r1, [r3, #0]
}
 80015be:	b01b      	add	sp, #108	; 0x6c
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0 ; i < 36 ; i++)
 80015c2:	330c      	adds	r3, #12
 80015c4:	428b      	cmp	r3, r1
 80015c6:	d000      	beq.n	80015ca <main_menu+0x14a>
 80015c8:	e775      	b.n	80014b6 <main_menu+0x36>
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <main_menu+0x160>)
 80015cc:	e779      	b.n	80014c2 <main_menu+0x42>
		else sel = 0;
 80015ce:	703b      	strb	r3, [r7, #0]
}
 80015d0:	e7f5      	b.n	80015be <main_menu+0x13e>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	20000018 	.word	0x20000018
 80015d8:	20000a48 	.word	0x20000a48
 80015dc:	20000a4c 	.word	0x20000a4c
 80015e0:	20000a28 	.word	0x20000a28
 80015e4:	20000dc7 	.word	0x20000dc7
 80015e8:	20000095 	.word	0x20000095
 80015ec:	08006a89 	.word	0x08006a89
 80015f0:	08006a98 	.word	0x08006a98
 80015f4:	08006aa7 	.word	0x08006aa7
 80015f8:	08006aa9 	.word	0x08006aa9
 80015fc:	08006ab3 	.word	0x08006ab3
 8001600:	08006abc 	.word	0x08006abc
 8001604:	08006ca8 	.word	0x08006ca8
 8001608:	08006ac6 	.word	0x08006ac6
 800160c:	08006acf 	.word	0x08006acf
 8001610:	08006ad9 	.word	0x08006ad9
 8001614:	20000a3c 	.word	0x20000a3c
 8001618:	20000dd9 	.word	0x20000dd9
 800161c:	20000a1c 	.word	0x20000a1c
 8001620:	20000a24 	.word	0x20000a24

08001624 <input_string>:
char* input_string(char* str){
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t input_sel = 0;
 8001626:	2700      	movs	r7, #0
char* input_string(char* str){
 8001628:	b08f      	sub	sp, #60	; 0x3c
 800162a:	9007      	str	r0, [sp, #28]
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 800162c:	210b      	movs	r1, #11
 800162e:	2001      	movs	r0, #1
 8001630:	f004 f828 	bl	8005684 <calloc>
	uint8_t keyX = 0, keyY = 0;
 8001634:	003c      	movs	r4, r7
 8001636:	003d      	movs	r5, r7
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 8001638:	9003      	str	r0, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800163a:	2201      	movs	r2, #1
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	a809      	add	r0, sp, #36	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	7083      	strb	r3, [r0, #2]
 8001644:	9304      	str	r3, [sp, #16]
 8001646:	2302      	movs	r3, #2
 8001648:	70c3      	strb	r3, [r0, #3]
		char* array[3] = { ">", "^", input_keyboard };
 800164a:	4b58      	ldr	r3, [pc, #352]	; (80017ac <input_string+0x188>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800164c:	2600      	movs	r6, #0
		char* array[3] = { ">", "^", input_keyboard };
 800164e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <input_string+0x18c>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 8001652:	7042      	strb	r2, [r0, #1]
		char* array[3] = { ">", "^", input_keyboard };
 8001654:	930c      	str	r3, [sp, #48]	; 0x30
 8001656:	9b03      	ldr	r3, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 8001658:	7102      	strb	r2, [r0, #4]
		char* array[3] = { ">", "^", input_keyboard };
 800165a:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 800165c:	2303      	movs	r3, #3
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800165e:	7142      	strb	r2, [r0, #5]
 8001660:	7006      	strb	r6, [r0, #0]
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 8001662:	9907      	ldr	r1, [sp, #28]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	0013      	movs	r3, r2
 8001668:	aa0b      	add	r2, sp, #44	; 0x2c
 800166a:	f7ff fe41 	bl	80012f0 <array_puts>
				SSD1306_GotoXY(14 + j * 10, (4 * 8) + (i * 8));
 800166e:	00f3      	lsls	r3, r6, #3
 8001670:	3320      	adds	r3, #32
 8001672:	b29b      	uxth	r3, r3
 8001674:	9305      	str	r3, [sp, #20]
 8001676:	00b3      	lsls	r3, r6, #2
 8001678:	9306      	str	r3, [sp, #24]
 800167a:	2300      	movs	r3, #0
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	200a      	movs	r0, #10
 8001680:	9b02      	ldr	r3, [sp, #8]
 8001682:	9905      	ldr	r1, [sp, #20]
 8001684:	4358      	muls	r0, r3
 8001686:	300e      	adds	r0, #14
 8001688:	b280      	uxth	r0, r0
 800168a:	f7ff fa53 	bl	8000b34 <SSD1306_GotoXY>
				SSD1306_Putc(keyboard[i][j], &Font_6x8, !(keyX == j && keyY == i));
 800168e:	9a06      	ldr	r2, [sp, #24]
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <input_string+0x190>)
 8001692:	58d3      	ldr	r3, [r2, r3]
 8001694:	9a02      	ldr	r2, [sp, #8]
 8001696:	5c98      	ldrb	r0, [r3, r2]
 8001698:	466b      	mov	r3, sp
 800169a:	7a1b      	ldrb	r3, [r3, #8]
 800169c:	2201      	movs	r2, #1
 800169e:	429d      	cmp	r5, r3
 80016a0:	d103      	bne.n	80016aa <input_string+0x86>
 80016a2:	b2f2      	uxtb	r2, r6
 80016a4:	1b12      	subs	r2, r2, r4
 80016a6:	1e53      	subs	r3, r2, #1
 80016a8:	419a      	sbcs	r2, r3
 80016aa:	4943      	ldr	r1, [pc, #268]	; (80017b8 <input_string+0x194>)
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f7ff fa47 	bl	8000b40 <SSD1306_Putc>
			for(uint8_t j = 0 ; j < 10 ; j++){
 80016b2:	9b02      	ldr	r3, [sp, #8]
 80016b4:	3301      	adds	r3, #1
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2b0a      	cmp	r3, #10
 80016ba:	d1e0      	bne.n	800167e <input_string+0x5a>
		for(uint8_t i = 0 ; i < 4 ; i++)
 80016bc:	3601      	adds	r6, #1
 80016be:	2e04      	cmp	r6, #4
 80016c0:	d1d5      	bne.n	800166e <input_string+0x4a>
		ssd1306_putsXY(19, 4, "&", !(keyX == 10 && keyY == 0));
 80016c2:	2301      	movs	r3, #1
 80016c4:	2d0a      	cmp	r5, #10
 80016c6:	d102      	bne.n	80016ce <input_string+0xaa>
 80016c8:	0023      	movs	r3, r4
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	4193      	sbcs	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2104      	movs	r1, #4
 80016d2:	2013      	movs	r0, #19
 80016d4:	4a39      	ldr	r2, [pc, #228]	; (80017bc <input_string+0x198>)
 80016d6:	f7ff fdfb 	bl	80012d0 <ssd1306_putsXY>
		ssd1306_putsXY(19, 6, "*", !(keyX == 10 && keyY == 2));
 80016da:	2301      	movs	r3, #1
 80016dc:	2d0a      	cmp	r5, #10
 80016de:	d102      	bne.n	80016e6 <input_string+0xc2>
 80016e0:	1ea3      	subs	r3, r4, #2
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	4193      	sbcs	r3, r2
 80016e6:	2106      	movs	r1, #6
 80016e8:	2013      	movs	r0, #19
 80016ea:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <input_string+0x19c>)
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f7ff fdef 	bl	80012d0 <ssd1306_putsXY>
		if(keyY == 0 || keyY == 2) limitX = 10;
 80016f2:	260a      	movs	r6, #10
		SSD1306_UpdateScreen();
 80016f4:	f7ff fb9e 	bl	8000e34 <SSD1306_UpdateScreen>
		if(keyY == 0 || keyY == 2) limitX = 10;
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d003      	beq.n	8001704 <input_string+0xe0>
 80016fc:	1ea6      	subs	r6, r4, #2
 80016fe:	4273      	negs	r3, r6
 8001700:	415e      	adcs	r6, r3
 8001702:	3609      	adds	r6, #9
		get_adc();
 8001704:	f7ff fe1e 	bl	8001344 <get_adc>
		if(joy_result == left) { keyX = keyX > 0 ? keyX - 1 : limitX; }
 8001708:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <input_string+0x1a0>)
 800170a:	7813      	ldrb	r3, [r2, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <input_string+0xf8>
 8001710:	2d00      	cmp	r5, #0
 8001712:	d001      	beq.n	8001718 <input_string+0xf4>
 8001714:	3d01      	subs	r5, #1
 8001716:	b2ee      	uxtb	r6, r5
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001718:	0035      	movs	r5, r6
 800171a:	e00f      	b.n	800173c <input_string+0x118>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 800171c:	2b02      	cmp	r3, #2
 800171e:	d009      	beq.n	8001734 <input_string+0x110>
		if(joy_result == up){
 8001720:	2b03      	cmp	r3, #3
 8001722:	d01f      	beq.n	8001764 <input_string+0x140>
		if(joy_result == down){
 8001724:	2b04      	cmp	r3, #4
 8001726:	d109      	bne.n	800173c <input_string+0x118>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001728:	2d0a      	cmp	r5, #10
 800172a:	d01d      	beq.n	8001768 <input_string+0x144>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 800172c:	2c03      	cmp	r4, #3
 800172e:	d026      	beq.n	800177e <input_string+0x15a>
 8001730:	3401      	adds	r4, #1
 8001732:	e020      	b.n	8001776 <input_string+0x152>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001734:	42b5      	cmp	r5, r6
 8001736:	d237      	bcs.n	80017a8 <input_string+0x184>
 8001738:	3501      	adds	r5, #1
 800173a:	b2ed      	uxtb	r5, r5
		joy_result = basic;
 800173c:	2300      	movs	r3, #0
 800173e:	7013      	strb	r3, [r2, #0]
		if(read_sw()){
 8001740:	f7ff fe62 	bl	8001408 <read_sw>
 8001744:	2800      	cmp	r0, #0
 8001746:	d100      	bne.n	800174a <input_string+0x126>
 8001748:	e777      	b.n	800163a <input_string+0x16>
			if(keyX < 10) input_keyboard[input_sel++] = keyboard[keyY][keyX];
 800174a:	2d0a      	cmp	r5, #10
 800174c:	d019      	beq.n	8001782 <input_string+0x15e>
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <input_string+0x190>)
 8001750:	00a2      	lsls	r2, r4, #2
 8001752:	58d3      	ldr	r3, [r2, r3]
 8001754:	9a03      	ldr	r2, [sp, #12]
 8001756:	5d5b      	ldrb	r3, [r3, r5]
 8001758:	55d3      	strb	r3, [r2, r7]
		if(input_sel >= 10) break;
 800175a:	9b04      	ldr	r3, [sp, #16]
 800175c:	2b0a      	cmp	r3, #10
 800175e:	d01d      	beq.n	800179c <input_string+0x178>
 8001760:	001f      	movs	r7, r3
 8001762:	e76a      	b.n	800163a <input_string+0x16>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001764:	2d0a      	cmp	r5, #10
 8001766:	d103      	bne.n	8001770 <input_string+0x14c>
 8001768:	4263      	negs	r3, r4
 800176a:	415c      	adcs	r4, r3
 800176c:	0064      	lsls	r4, r4, #1
 800176e:	e7e5      	b.n	800173c <input_string+0x118>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 8001770:	2c00      	cmp	r4, #0
 8001772:	d002      	beq.n	800177a <input_string+0x156>
 8001774:	3c01      	subs	r4, #1
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 8001776:	b2e4      	uxtb	r4, r4
 8001778:	e7e0      	b.n	800173c <input_string+0x118>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 800177a:	001c      	movs	r4, r3
 800177c:	e7de      	b.n	800173c <input_string+0x118>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 800177e:	2400      	movs	r4, #0
 8001780:	e7dc      	b.n	800173c <input_string+0x118>
				if(keyY == 0) input_keyboard[input_sel > 0 ? --input_sel : 0] = '\0';
 8001782:	2c00      	cmp	r4, #0
 8001784:	d107      	bne.n	8001796 <input_string+0x172>
 8001786:	2f00      	cmp	r7, #0
 8001788:	d001      	beq.n	800178e <input_string+0x16a>
 800178a:	3f01      	subs	r7, #1
 800178c:	b2ff      	uxtb	r7, r7
 800178e:	2300      	movs	r3, #0
 8001790:	9a03      	ldr	r2, [sp, #12]
 8001792:	55d3      	strb	r3, [r2, r7]
				if(keyY == 2) break;
 8001794:	e751      	b.n	800163a <input_string+0x16>
 8001796:	2c02      	cmp	r4, #2
 8001798:	d000      	beq.n	800179c <input_string+0x178>
 800179a:	e74e      	b.n	800163a <input_string+0x16>
	firF = 0;
 800179c:	2200      	movs	r2, #0
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <input_string+0x1a4>)
}
 80017a0:	9803      	ldr	r0, [sp, #12]
	firF = 0;
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	b00f      	add	sp, #60	; 0x3c
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 80017a8:	2500      	movs	r5, #0
		if(joy_result == down){
 80017aa:	e7c7      	b.n	800173c <input_string+0x118>
 80017ac:	08006aa7 	.word	0x08006aa7
 80017b0:	08006adf 	.word	0x08006adf
 80017b4:	2000001c 	.word	0x2000001c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	08006ae1 	.word	0x08006ae1
 80017c0:	08006ae3 	.word	0x08006ae3
 80017c4:	20000a3c 	.word	0x20000a3c
 80017c8:	20000018 	.word	0x20000018

080017cc <logShift>:
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017cc:	234a      	movs	r3, #74	; 0x4a
 80017ce:	214a      	movs	r1, #74	; 0x4a
 80017d0:	001a      	movs	r2, r3
void logShift(uint8_t workCate){
 80017d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017d4:	4f44      	ldr	r7, [pc, #272]	; (80018e8 <logShift+0x11c>)
 80017d6:	4249      	negs	r1, r1
 80017d8:	783c      	ldrb	r4, [r7, #0]
void logShift(uint8_t workCate){
 80017da:	0005      	movs	r5, r0
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017dc:	4361      	muls	r1, r4
 80017de:	1e60      	subs	r0, r4, #1
 80017e0:	18c9      	adds	r1, r1, r3
 80017e2:	4343      	muls	r3, r0
 80017e4:	4e41      	ldr	r6, [pc, #260]	; (80018ec <logShift+0x120>)
 80017e6:	18c9      	adds	r1, r1, r3
void logShift(uint8_t workCate){
 80017e8:	b085      	sub	sp, #20
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017ea:	4362      	muls	r2, r4
 80017ec:	4840      	ldr	r0, [pc, #256]	; (80018f0 <logShift+0x124>)
 80017ee:	1989      	adds	r1, r1, r6
 80017f0:	f003 ff8f 	bl	8005712 <memmove>
	if(work_cnt < 5) work_cnt++;
 80017f4:	2c04      	cmp	r4, #4
 80017f6:	d801      	bhi.n	80017fc <logShift+0x30>
 80017f8:	3401      	adds	r4, #1
 80017fa:	703c      	strb	r4, [r7, #0]
	get_time();
 80017fc:	f7ff fd48 	bl	8001290 <get_time>
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001800:	483c      	ldr	r0, [pc, #240]	; (80018f4 <logShift+0x128>)
 8001802:	00ac      	lsls	r4, r5, #2
 8001804:	493c      	ldr	r1, [pc, #240]	; (80018f8 <logShift+0x12c>)
 8001806:	5820      	ldr	r0, [r4, r0]
 8001808:	784b      	ldrb	r3, [r1, #1]
 800180a:	780a      	ldrb	r2, [r1, #0]
 800180c:	9003      	str	r0, [sp, #12]
 800180e:	7908      	ldrb	r0, [r1, #4]
 8001810:	9002      	str	r0, [sp, #8]
 8001812:	78c8      	ldrb	r0, [r1, #3]
 8001814:	9001      	str	r0, [sp, #4]
 8001816:	7889      	ldrb	r1, [r1, #2]
 8001818:	0030      	movs	r0, r6
 800181a:	9100      	str	r1, [sp, #0]
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <logShift+0x130>)
 800181e:	f004 f8b3 	bl	8005988 <siprintf>
	switch(workCate){
 8001822:	2d03      	cmp	r5, #3
 8001824:	d824      	bhi.n	8001870 <logShift+0xa4>
 8001826:	0028      	movs	r0, r5
 8001828:	4e35      	ldr	r6, [pc, #212]	; (8001900 <logShift+0x134>)
 800182a:	4d36      	ldr	r5, [pc, #216]	; (8001904 <logShift+0x138>)
 800182c:	f7fe fc76 	bl	800011c <__gnu_thumb1_case_uqi>
 8001830:	483b2202 	.word	0x483b2202
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 8001834:	f7ff fce0 	bl	80011f8 <curxy>
 8001838:	270c      	movs	r7, #12
 800183a:	4378      	muls	r0, r7
 800183c:	4c32      	ldr	r4, [pc, #200]	; (8001908 <logShift+0x13c>)
 800183e:	4a33      	ldr	r2, [pc, #204]	; (800190c <logShift+0x140>)
 8001840:	1823      	adds	r3, r4, r0
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	4932      	ldr	r1, [pc, #200]	; (8001910 <logShift+0x144>)
 8001846:	3b01      	subs	r3, #1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	589b      	ldr	r3, [r3, r2]
 800184c:	5902      	ldr	r2, [r0, r4]
 800184e:	0030      	movs	r0, r6
 8001850:	f004 f89a 	bl	8005988 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", pt[curxy()].store, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001854:	f7ff fcd0 	bl	80011f8 <curxy>
 8001858:	4347      	muls	r7, r0
 800185a:	19e4      	adds	r4, r4, r7
 800185c:	7aa3      	ldrb	r3, [r4, #10]
 800185e:	88e2      	ldrh	r2, [r4, #6]
 8001860:	3301      	adds	r3, #1
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001862:	7ae1      	ldrb	r1, [r4, #11]
 8001864:	0028      	movs	r0, r5
 8001866:	3101      	adds	r1, #1
 8001868:	9100      	str	r1, [sp, #0]
 800186a:	492a      	ldr	r1, [pc, #168]	; (8001914 <logShift+0x148>)
 800186c:	f004 f88c 	bl	8005988 <siprintf>
}
 8001870:	b005      	add	sp, #20
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 8001874:	f7ff fcc0 	bl	80011f8 <curxy>
 8001878:	270c      	movs	r7, #12
 800187a:	4378      	muls	r0, r7
 800187c:	4c22      	ldr	r4, [pc, #136]	; (8001908 <logShift+0x13c>)
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <logShift+0x140>)
 8001880:	1823      	adds	r3, r4, r0
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	4922      	ldr	r1, [pc, #136]	; (8001910 <logShift+0x144>)
 8001886:	3b01      	subs	r3, #1
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	589b      	ldr	r3, [r3, r2]
 800188c:	5902      	ldr	r2, [r0, r4]
 800188e:	0030      	movs	r0, r6
 8001890:	f004 f87a 	bl	8005988 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001894:	f7ff fcb0 	bl	80011f8 <curxy>
 8001898:	4347      	muls	r7, r0
 800189a:	19e4      	adds	r4, r4, r7
 800189c:	7aa3      	ldrb	r3, [r4, #10]
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <logShift+0x14c>)
 80018a0:	3301      	adds	r3, #1
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	e7dd      	b.n	8001862 <logShift+0x96>
		sprintf(ptLog[0].content1, "Sear:%s", find_name);
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <logShift+0x150>)
 80018a8:	491d      	ldr	r1, [pc, #116]	; (8001920 <logShift+0x154>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	0030      	movs	r0, r6
 80018ae:	f004 f86b 	bl	8005988 <siprintf>
		sprintf(ptLog[0].content2, "Num of Find:%d", findC);
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <logShift+0x158>)
 80018b4:	491c      	ldr	r1, [pc, #112]	; (8001928 <logShift+0x15c>)
 80018b6:	781a      	ldrb	r2, [r3, #0]
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 80018b8:	0028      	movs	r0, r5
 80018ba:	f004 f865 	bl	8005988 <siprintf>
}
 80018be:	e7d7      	b.n	8001870 <logShift+0xa4>
		sprintf(ptLog[0].content1, "S(%d,%d) E(%d,%d)", ptionS.x + 1, ptionS.y + 1, ptionE.x + 1, ptionE.y + 1);
 80018c0:	481a      	ldr	r0, [pc, #104]	; (800192c <logShift+0x160>)
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <logShift+0x164>)
 80018c4:	7841      	ldrb	r1, [r0, #1]
 80018c6:	7853      	ldrb	r3, [r2, #1]
 80018c8:	3101      	adds	r1, #1
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	9101      	str	r1, [sp, #4]
 80018ce:	7801      	ldrb	r1, [r0, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	3101      	adds	r1, #1
 80018d4:	3201      	adds	r2, #1
 80018d6:	9100      	str	r1, [sp, #0]
 80018d8:	0030      	movs	r0, r6
 80018da:	4916      	ldr	r1, [pc, #88]	; (8001934 <logShift+0x168>)
 80018dc:	f004 f854 	bl	8005988 <siprintf>
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <logShift+0x16c>)
 80018e2:	4916      	ldr	r1, [pc, #88]	; (800193c <logShift+0x170>)
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	e7e7      	b.n	80018b8 <logShift+0xec>
 80018e8:	20000ddd 	.word	0x20000ddd
 80018ec:	20000bf8 	.word	0x20000bf8
 80018f0:	20000c42 	.word	0x20000c42
 80018f4:	20000084 	.word	0x20000084
 80018f8:	20000095 	.word	0x20000095
 80018fc:	08006ae5 	.word	0x08006ae5
 8001900:	20000c16 	.word	0x20000c16
 8001904:	20000c2c 	.word	0x20000c2c
 8001908:	20000a48 	.word	0x20000a48
 800190c:	20000054 	.word	0x20000054
 8001910:	08006b01 	.word	0x08006b01
 8001914:	08006b07 	.word	0x08006b07
 8001918:	2000009b 	.word	0x2000009b
 800191c:	20000a30 	.word	0x20000a30
 8001920:	08006b15 	.word	0x08006b15
 8001924:	20000a2c 	.word	0x20000a2c
 8001928:	08006b1d 	.word	0x08006b1d
 800192c:	20000dc1 	.word	0x20000dc1
 8001930:	20000dc3 	.word	0x20000dc3
 8001934:	08006b2c 	.word	0x08006b2c
 8001938:	20000dc0 	.word	0x20000dc0
 800193c:	08006b3e 	.word	0x08006b3e

08001940 <start>:
uint8_t start(void){
 8001940:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 0 ; i < 36 ; i++)
 8001942:	2400      	movs	r4, #0
		if(i / 6 == 0 || i / 6 == 3) led_color(i, 4, 0, 0);
 8001944:	2c05      	cmp	r4, #5
 8001946:	d903      	bls.n	8001950 <start+0x10>
 8001948:	0023      	movs	r3, r4
 800194a:	3b12      	subs	r3, #18
 800194c:	2b05      	cmp	r3, #5
 800194e:	d839      	bhi.n	80019c4 <start+0x84>
 8001950:	2300      	movs	r3, #0
 8001952:	2104      	movs	r1, #4
 8001954:	001a      	movs	r2, r3
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 8001956:	0020      	movs	r0, r4
 8001958:	f7fe feee 	bl	8000738 <led_color>
	for(uint8_t i = 0 ; i < 36 ; i++)
 800195c:	3401      	adds	r4, #1
 800195e:	b2e4      	uxtb	r4, r4
 8001960:	2c24      	cmp	r4, #36	; 0x24
 8001962:	d1ef      	bne.n	8001944 <start+0x4>
	led_update();
 8001964:	f7fe fef4 	bl	8000750 <led_update>
 8001968:	3c0c      	subs	r4, #12
		SSD1306_GotoXY(43, 24 + i);
 800196a:	0021      	movs	r1, r4
 800196c:	202b      	movs	r0, #43	; 0x2b
 800196e:	f7ff f8e1 	bl	8000b34 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 8001972:	4d1f      	ldr	r5, [pc, #124]	; (80019f0 <start+0xb0>)
 8001974:	2200      	movs	r2, #0
 8001976:	0029      	movs	r1, r5
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <start+0xb4>)
 800197a:	f7ff f917 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY(39, 24);
 800197e:	2118      	movs	r1, #24
 8001980:	2027      	movs	r0, #39	; 0x27
 8001982:	f7ff f8d7 	bl	8000b34 <SSD1306_GotoXY>
	for(uint8_t i = 0 ; i < 9 ; i++){
 8001986:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 8001988:	2201      	movs	r2, #1
 800198a:	0029      	movs	r1, r5
 800198c:	481a      	ldr	r0, [pc, #104]	; (80019f8 <start+0xb8>)
 800198e:	f7ff f90d 	bl	8000bac <SSD1306_Puts>
	for(uint8_t i = 0 ; i < 9 ; i++){
 8001992:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 8001994:	f7ff fa4e 	bl	8000e34 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 8001998:	20c8      	movs	r0, #200	; 0xc8
 800199a:	f001 fd85 	bl	80034a8 <HAL_Delay>
	for(uint8_t i = 0 ; i < 9 ; i++){
 800199e:	2c21      	cmp	r4, #33	; 0x21
 80019a0:	d1e3      	bne.n	800196a <start+0x2a>
	HAL_Delay(1000);
 80019a2:	20fa      	movs	r0, #250	; 0xfa
 80019a4:	0080      	lsls	r0, r0, #2
 80019a6:	f001 fd7f 	bl	80034a8 <HAL_Delay>
	SSD1306_Clear();
 80019aa:	f7ff fa65 	bl	8000e78 <SSD1306_Clear>
	led_clear();
 80019ae:	f7fe fef9 	bl	80007a4 <led_clear>
	led_update();
 80019b2:	f7fe fecd 	bl	8000750 <led_update>
	if(!eepReadData(0)) return 1;
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fb24 	bl	8001004 <eepReadData>
 80019bc:	4243      	negs	r3, r0
 80019be:	4158      	adcs	r0, r3
}
 80019c0:	b2c0      	uxtb	r0, r0
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
		else if(i / 6 == 1 || i / 6 == 4) led_color(i, 0, 4, 0);
 80019c4:	1fa3      	subs	r3, r4, #6
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d902      	bls.n	80019d0 <start+0x90>
 80019ca:	3b12      	subs	r3, #18
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d803      	bhi.n	80019d8 <start+0x98>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2204      	movs	r2, #4
 80019d4:	0019      	movs	r1, r3
 80019d6:	e7be      	b.n	8001956 <start+0x16>
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 80019d8:	0023      	movs	r3, r4
 80019da:	3b0c      	subs	r3, #12
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d902      	bls.n	80019e6 <start+0xa6>
 80019e0:	3b12      	subs	r3, #18
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d8ba      	bhi.n	800195c <start+0x1c>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2304      	movs	r3, #4
 80019ea:	0011      	movs	r1, r2
 80019ec:	e7b3      	b.n	8001956 <start+0x16>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	20000000 	.word	0x20000000
 80019f4:	08006b4f 	.word	0x08006b4f
 80019f8:	08006b56 	.word	0x08006b56

080019fc <time_settting>:
void time_settting(void){
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	b08b      	sub	sp, #44	; 0x2c
	while(!read_sw()){
 8001a00:	f7ff fd02 	bl	8001408 <read_sw>
 8001a04:	4c48      	ldr	r4, [pc, #288]	; (8001b28 <time_settting+0x12c>)
 8001a06:	1e05      	subs	r5, r0, #0
 8001a08:	d00f      	beq.n	8001a2a <time_settting+0x2e>
	DS3231_set_date(time.day, time.month, time.year);
 8001a0a:	7822      	ldrb	r2, [r4, #0]
 8001a0c:	7861      	ldrb	r1, [r4, #1]
 8001a0e:	78a0      	ldrb	r0, [r4, #2]
 8001a10:	f7fe fdfe 	bl	8000610 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 8001a14:	78e2      	ldrb	r2, [r4, #3]
 8001a16:	7921      	ldrb	r1, [r4, #4]
 8001a18:	7960      	ldrb	r0, [r4, #5]
 8001a1a:	f7fe fd63 	bl	80004e4 <DS3231_set_time>
	eepWriteData(0, 1);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fadf 	bl	8000fe4 <eepWriteData>
}
 8001a26:	b00b      	add	sp, #44	; 0x2c
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		get_adc();
 8001a2a:	f7ff fc8b 	bl	8001344 <get_adc>
		get_sel(&sel, 5, 0, 1);
 8001a2e:	4e3f      	ldr	r6, [pc, #252]	; (8001b2c <time_settting+0x130>)
 8001a30:	002a      	movs	r2, r5
 8001a32:	2301      	movs	r3, #1
 8001a34:	2105      	movs	r1, #5
 8001a36:	0030      	movs	r0, r6
 8001a38:	f7ff fcb0 	bl	800139c <get_sel>
		if(sel == 0) get_sel(&time.year, 99, 0, 0);
 8001a3c:	7832      	ldrb	r2, [r6, #0]
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d104      	bne.n	8001a4c <time_settting+0x50>
 8001a42:	0013      	movs	r3, r2
 8001a44:	2163      	movs	r1, #99	; 0x63
 8001a46:	0020      	movs	r0, r4
 8001a48:	f7ff fca8 	bl	800139c <get_sel>
		if(sel == 1) get_sel(&time.month, 12, 1, 0);
 8001a4c:	7832      	ldrb	r2, [r6, #0]
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d104      	bne.n	8001a5c <time_settting+0x60>
 8001a52:	2300      	movs	r3, #0
 8001a54:	210c      	movs	r1, #12
 8001a56:	1c60      	adds	r0, r4, #1
 8001a58:	f7ff fca0 	bl	800139c <get_sel>
		if(sel == 2) get_sel(&time.day, lastDay[time.month - 1], 1, 0);
 8001a5c:	7833      	ldrb	r3, [r6, #0]
 8001a5e:	4f34      	ldr	r7, [pc, #208]	; (8001b30 <time_settting+0x134>)
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d108      	bne.n	8001a76 <time_settting+0x7a>
 8001a64:	7863      	ldrb	r3, [r4, #1]
 8001a66:	2201      	movs	r2, #1
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	7819      	ldrb	r1, [r3, #0]
 8001a6e:	1ca0      	adds	r0, r4, #2
 8001a70:	2300      	movs	r3, #0
 8001a72:	f7ff fc93 	bl	800139c <get_sel>
		if(sel == 3) get_sel(&time.hour, 23, 0, 0);
 8001a76:	7833      	ldrb	r3, [r6, #0]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d105      	bne.n	8001a88 <time_settting+0x8c>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2117      	movs	r1, #23
 8001a80:	001a      	movs	r2, r3
 8001a82:	1ce0      	adds	r0, r4, #3
 8001a84:	f7ff fc8a 	bl	800139c <get_sel>
		if(sel == 4) get_sel(&time.min, 59, 0, 0);
 8001a88:	7833      	ldrb	r3, [r6, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d105      	bne.n	8001a9a <time_settting+0x9e>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	213b      	movs	r1, #59	; 0x3b
 8001a92:	001a      	movs	r2, r3
 8001a94:	1d20      	adds	r0, r4, #4
 8001a96:	f7ff fc81 	bl	800139c <get_sel>
		if(sel == 5) get_sel(&time.sec, 59, 0, 0);
 8001a9a:	7833      	ldrb	r3, [r6, #0]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d105      	bne.n	8001aac <time_settting+0xb0>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	213b      	movs	r1, #59	; 0x3b
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	1d60      	adds	r0, r4, #5
 8001aa8:	f7ff fc78 	bl	800139c <get_sel>
		if(time.day > lastDay[time.month - 1]) time.day = lastDay[time.month - 1];
 8001aac:	7865      	ldrb	r5, [r4, #1]
 8001aae:	78a2      	ldrb	r2, [r4, #2]
 8001ab0:	197f      	adds	r7, r7, r5
 8001ab2:	3f01      	subs	r7, #1
 8001ab4:	783b      	ldrb	r3, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d900      	bls.n	8001abc <time_settting+0xc0>
 8001aba:	70a3      	strb	r3, [r4, #2]
		joy_result = basic;
 8001abc:	2200      	movs	r2, #0
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <time_settting+0x138>)
		POS pos[2] = {{0, 2}, {0, 4}};
 8001ac0:	491d      	ldr	r1, [pc, #116]	; (8001b38 <time_settting+0x13c>)
		joy_result = basic;
 8001ac2:	701a      	strb	r2, [r3, #0]
		POS pos[2] = {{0, 2}, {0, 4}};
 8001ac4:	a802      	add	r0, sp, #8
 8001ac6:	3204      	adds	r2, #4
 8001ac8:	f003 fe1a 	bl	8005700 <memcpy>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001acc:	7833      	ldrb	r3, [r6, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <time_settting+0x140>)
 8001ad0:	0099      	lsls	r1, r3, #2
 8001ad2:	588a      	ldr	r2, [r1, r2]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d117      	bne.n	8001b08 <time_settting+0x10c>
 8001ad8:	23fa      	movs	r3, #250	; 0xfa
 8001ada:	7825      	ldrb	r5, [r4, #0]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	18ed      	adds	r5, r5, r3
 8001ae0:	ac05      	add	r4, sp, #20
 8001ae2:	002b      	movs	r3, r5
 8001ae4:	0020      	movs	r0, r4
 8001ae6:	4916      	ldr	r1, [pc, #88]	; (8001b40 <time_settting+0x144>)
 8001ae8:	f003 ff4e 	bl	8005988 <siprintf>
		char* array[2] = { "RTC Time setting.", bf };
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <time_settting+0x148>)
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001aee:	4916      	ldr	r1, [pc, #88]	; (8001b48 <time_settting+0x14c>)
		char* array[2] = { "RTC Time setting.", bf };
 8001af0:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001af2:	2302      	movs	r3, #2
 8001af4:	aa03      	add	r2, sp, #12
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	a802      	add	r0, sp, #8
 8001afa:	3b01      	subs	r3, #1
		char* array[2] = { "RTC Time setting.", bf };
 8001afc:	9404      	str	r4, [sp, #16]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001afe:	f7ff fbf7 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8001b02:	f7ff f997 	bl	8000e34 <SSD1306_UpdateScreen>
 8001b06:	e77b      	b.n	8001a00 <time_settting+0x4>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d0e9      	beq.n	8001ae0 <time_settting+0xe4>
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d101      	bne.n	8001b14 <time_settting+0x118>
 8001b10:	78a5      	ldrb	r5, [r4, #2]
 8001b12:	e7e5      	b.n	8001ae0 <time_settting+0xe4>
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d101      	bne.n	8001b1c <time_settting+0x120>
 8001b18:	78e5      	ldrb	r5, [r4, #3]
 8001b1a:	e7e1      	b.n	8001ae0 <time_settting+0xe4>
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d101      	bne.n	8001b24 <time_settting+0x128>
 8001b20:	7925      	ldrb	r5, [r4, #4]
 8001b22:	e7dd      	b.n	8001ae0 <time_settting+0xe4>
 8001b24:	7965      	ldrb	r5, [r4, #5]
 8001b26:	e7db      	b.n	8001ae0 <time_settting+0xe4>
 8001b28:	20000095 	.word	0x20000095
 8001b2c:	20000dc7 	.word	0x20000dc7
 8001b30:	08006e10 	.word	0x08006e10
 8001b34:	20000a3c 	.word	0x20000a3c
 8001b38:	08006060 	.word	0x08006060
 8001b3c:	2000006c 	.word	0x2000006c
 8001b40:	08006b5e 	.word	0x08006b5e
 8001b44:	08006b66 	.word	0x08006b66
 8001b48:	08006b78 	.word	0x08006b78

08001b4c <position_set>:
void position_set(void){
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS new = temp;
 8001b4e:	4f54      	ldr	r7, [pc, #336]	; (8001ca0 <position_set+0x154>)
void position_set(void){
 8001b50:	b089      	sub	sp, #36	; 0x24
	POS new = temp;
 8001b52:	783c      	ldrb	r4, [r7, #0]
 8001b54:	787e      	ldrb	r6, [r7, #1]
	while(!read_sw()){
 8001b56:	f7ff fc57 	bl	8001408 <read_sw>
 8001b5a:	1e05      	subs	r5, r0, #0
 8001b5c:	d004      	beq.n	8001b68 <position_set+0x1c>
	firF = 0;
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <position_set+0x158>)
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	b009      	add	sp, #36	; 0x24
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	783a      	ldrb	r2, [r7, #0]
 8001b6c:	494e      	ldr	r1, [pc, #312]	; (8001ca8 <position_set+0x15c>)
 8001b6e:	3301      	adds	r3, #1
 8001b70:	3201      	adds	r2, #1
 8001b72:	a803      	add	r0, sp, #12
 8001b74:	f003 ff08 	bl	8005988 <siprintf>
		ssd1306_putsXY(pos.x, pos.y, bf, 0);
 8001b78:	002b      	movs	r3, r5
 8001b7a:	2106      	movs	r1, #6
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	aa03      	add	r2, sp, #12
 8001b80:	f7ff fba6 	bl	80012d0 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8001b84:	f7ff f956 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 8001b88:	f7fe fe0c 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001b8c:	4b47      	ldr	r3, [pc, #284]	; (8001cac <position_set+0x160>)
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	9b01      	ldr	r3, [sp, #4]
 8001b92:	7919      	ldrb	r1, [r3, #4]
 8001b94:	2900      	cmp	r1, #0
 8001b96:	d100      	bne.n	8001b9a <position_set+0x4e>
 8001b98:	e07e      	b.n	8001c98 <position_set+0x14c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	0028      	movs	r0, r5
 8001ba2:	f7fe fdc9 	bl	8000738 <led_color>
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	3501      	adds	r5, #1
 8001baa:	330c      	adds	r3, #12
 8001bac:	b2ed      	uxtb	r5, r5
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2d24      	cmp	r5, #36	; 0x24
 8001bb2:	d1ed      	bne.n	8001b90 <position_set+0x44>
		led_color(curxy(), 4, 4, 4);
 8001bb4:	f7ff fb20 	bl	80011f8 <curxy>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	001a      	movs	r2, r3
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	f7fe fdbb 	bl	8000738 <led_color>
		led_update();
 8001bc2:	f7fe fdc5 	bl	8000750 <led_update>
		if(cnt > 150){
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <position_set+0x164>)
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	2a96      	cmp	r2, #150	; 0x96
 8001bcc:	d95b      	bls.n	8001c86 <position_set+0x13a>
			cnt = 0;
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <position_set+0x168>)
 8001bd4:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <position_set+0x16c>)
 8001bd6:	885b      	ldrh	r3, [r3, #2]
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d911      	bls.n	8001c00 <position_set+0xb4>
 8001bdc:	3601      	adds	r6, #1
 8001bde:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001be0:	2305      	movs	r3, #5
 8001be2:	1b58      	subs	r0, r3, r5
 8001be4:	3301      	adds	r3, #1
 8001be6:	4358      	muls	r0, r3
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001be8:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001bea:	1820      	adds	r0, r4, r0
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bec:	001a      	movs	r2, r3
 8001bee:	2104      	movs	r1, #4
 8001bf0:	b2c0      	uxtb	r0, r0
 8001bf2:	f7fe fde1 	bl	80007b8 <led_cmp>
 8001bf6:	002e      	movs	r6, r5
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	b2ed      	uxtb	r5, r5
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d1ef      	bne.n	8001be0 <position_set+0x94>
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c00:	2296      	movs	r2, #150	; 0x96
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <position_set+0x168>)
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	885b      	ldrh	r3, [r3, #2]
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d211      	bcs.n	8001c30 <position_set+0xe4>
 8001c0c:	3e01      	subs	r6, #1
 8001c0e:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c10:	2305      	movs	r3, #5
 8001c12:	1b58      	subs	r0, r3, r5
 8001c14:	3301      	adds	r3, #1
 8001c16:	4358      	muls	r0, r3
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c18:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c1a:	1820      	adds	r0, r4, r0
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2104      	movs	r1, #4
 8001c20:	b2c0      	uxtb	r0, r0
 8001c22:	f7fe fdc9 	bl	80007b8 <led_cmp>
 8001c26:	002e      	movs	r6, r5
 8001c28:	3d01      	subs	r5, #1
 8001c2a:	b2ed      	uxtb	r5, r5
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1ef      	bne.n	8001c10 <position_set+0xc4>
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c30:	2296      	movs	r2, #150	; 0x96
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <position_set+0x168>)
 8001c34:	0052      	lsls	r2, r2, #1
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d20f      	bcs.n	8001c5c <position_set+0x110>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	2506      	movs	r5, #6
 8001c40:	1b9b      	subs	r3, r3, r6
 8001c42:	435d      	muls	r5, r3
 8001c44:	b2ed      	uxtb	r5, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c46:	2300      	movs	r3, #0
 8001c48:	3c01      	subs	r4, #1
 8001c4a:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c4c:	1960      	adds	r0, r4, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2104      	movs	r1, #4
 8001c52:	b2c0      	uxtb	r0, r0
 8001c54:	f7fe fdb0 	bl	80007b8 <led_cmp>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d1f4      	bne.n	8001c46 <position_set+0xfa>
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <position_set+0x168>)
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <position_set+0x16c>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d90f      	bls.n	8001c86 <position_set+0x13a>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c66:	2305      	movs	r3, #5
 8001c68:	2506      	movs	r5, #6
 8001c6a:	1b9b      	subs	r3, r3, r6
 8001c6c:	435d      	muls	r5, r3
 8001c6e:	b2ed      	uxtb	r5, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c70:	2300      	movs	r3, #0
 8001c72:	3401      	adds	r4, #1
 8001c74:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001c76:	1960      	adds	r0, r4, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001c78:	001a      	movs	r2, r3
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	b2c0      	uxtb	r0, r0
 8001c7e:	f7fe fd9b 	bl	80007b8 <led_cmp>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d1f4      	bne.n	8001c70 <position_set+0x124>
		if(new.x > 5) new.x = temp.x;
 8001c86:	2c05      	cmp	r4, #5
 8001c88:	d900      	bls.n	8001c8c <position_set+0x140>
 8001c8a:	783c      	ldrb	r4, [r7, #0]
		if(new.y > 5) new.y = temp.y;
 8001c8c:	2e05      	cmp	r6, #5
 8001c8e:	d900      	bls.n	8001c92 <position_set+0x146>
 8001c90:	787e      	ldrb	r6, [r7, #1]
		temp = new;
 8001c92:	703c      	strb	r4, [r7, #0]
 8001c94:	707e      	strb	r6, [r7, #1]
 8001c96:	e75e      	b.n	8001b56 <position_set+0xa>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001c98:	000b      	movs	r3, r1
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	e780      	b.n	8001ba0 <position_set+0x54>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000ddb 	.word	0x20000ddb
 8001ca4:	20000018 	.word	0x20000018
 8001ca8:	08006b82 	.word	0x08006b82
 8001cac:	20000a48 	.word	0x20000a48
 8001cb0:	20000a2a 	.word	0x20000a2a
 8001cb4:	20000a1e 	.word	0x20000a1e
 8001cb8:	00000dac 	.word	0x00000dac

08001cbc <save_mode>:
void save_mode(void){
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <save_mode+0x1d8>)
void save_mode(void){
 8001cc0:	b0a3      	sub	sp, #140	; 0x8c
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001cc2:	7819      	ldrb	r1, [r3, #0]
 8001cc4:	23c8      	movs	r3, #200	; 0xc8
 8001cc6:	2900      	cmp	r1, #0
 8001cc8:	d006      	beq.n	8001cd8 <save_mode+0x1c>
 8001cca:	3b64      	subs	r3, #100	; 0x64
 8001ccc:	2901      	cmp	r1, #1
 8001cce:	d003      	beq.n	8001cd8 <save_mode+0x1c>
 8001cd0:	3b32      	subs	r3, #50	; 0x32
 8001cd2:	2902      	cmp	r1, #2
 8001cd4:	d000      	beq.n	8001cd8 <save_mode+0x1c>
 8001cd6:	3b28      	subs	r3, #40	; 0x28
 8001cd8:	4a6f      	ldr	r2, [pc, #444]	; (8001e98 <save_mode+0x1dc>)
 8001cda:	7013      	strb	r3, [r2, #0]
	if(!firF){
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <save_mode+0x1e0>)
 8001cde:	7818      	ldrb	r0, [r3, #0]
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d152      	bne.n	8001d8a <save_mode+0xce>
		firF = 1;
 8001ce4:	2201      	movs	r2, #1
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001ce6:	4c6e      	ldr	r4, [pc, #440]	; (8001ea0 <save_mode+0x1e4>)
		firF = 1;
 8001ce8:	701a      	strb	r2, [r3, #0]
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001cea:	ab03      	add	r3, sp, #12
 8001cec:	7018      	strb	r0, [r3, #0]
 8001cee:	7098      	strb	r0, [r3, #2]
 8001cf0:	3003      	adds	r0, #3
 8001cf2:	7158      	strb	r0, [r3, #5]
 8001cf4:	7824      	ldrb	r4, [r4, #0]
 8001cf6:	1880      	adds	r0, r0, r2
 8001cf8:	71d8      	strb	r0, [r3, #7]
 8001cfa:	1880      	adds	r0, r0, r2
 8001cfc:	70da      	strb	r2, [r3, #3]
 8001cfe:	711a      	strb	r2, [r3, #4]
 8001d00:	719a      	strb	r2, [r3, #6]
 8001d02:	721a      	strb	r2, [r3, #8]
 8001d04:	7258      	strb	r0, [r3, #9]
 8001d06:	729a      	strb	r2, [r3, #10]
 8001d08:	1880      	adds	r0, r0, r2
 8001d0a:	731a      	strb	r2, [r3, #12]
 8001d0c:	3403      	adds	r4, #3
 8001d0e:	3206      	adds	r2, #6
 8001d10:	72d8      	strb	r0, [r3, #11]
 8001d12:	735a      	strb	r2, [r3, #13]
 8001d14:	705c      	strb	r4, [r3, #1]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <save_mode+0x1e8>)
 8001d18:	0089      	lsls	r1, r1, #2
 8001d1a:	ae0e      	add	r6, sp, #56	; 0x38
 8001d1c:	58ca      	ldr	r2, [r1, r3]
 8001d1e:	0030      	movs	r0, r6
 8001d20:	4961      	ldr	r1, [pc, #388]	; (8001ea8 <save_mode+0x1ec>)
 8001d22:	f003 fe31 	bl	8005988 <siprintf>
		sprintf(bf[1], "Name:%s", input_name[0] > 0 ? input_name : "(NONE)");
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <save_mode+0x1f0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	7813      	ldrb	r3, [r2, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <save_mode+0x76>
 8001d30:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <save_mode+0x1f4>)
 8001d32:	ad13      	add	r5, sp, #76	; 0x4c
 8001d34:	495f      	ldr	r1, [pc, #380]	; (8001eb4 <save_mode+0x1f8>)
 8001d36:	0028      	movs	r0, r5
 8001d38:	f003 fe26 	bl	8005988 <siprintf>
		sprintf(bf[2], "Store: %d/%d", store_num, store_max);
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <save_mode+0x1dc>)
 8001d3e:	4a5e      	ldr	r2, [pc, #376]	; (8001eb8 <save_mode+0x1fc>)
 8001d40:	ac18      	add	r4, sp, #96	; 0x60
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	495d      	ldr	r1, [pc, #372]	; (8001ebc <save_mode+0x200>)
 8001d48:	0020      	movs	r0, r4
 8001d4a:	f003 fe1d 	bl	8005988 <siprintf>
		sprintf(bf[3], "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <save_mode+0x204>)
 8001d50:	af1d      	add	r7, sp, #116	; 0x74
 8001d52:	7853      	ldrb	r3, [r2, #1]
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	495b      	ldr	r1, [pc, #364]	; (8001ec4 <save_mode+0x208>)
 8001d58:	3301      	adds	r3, #1
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	0038      	movs	r0, r7
 8001d5e:	f003 fe13 	bl	8005988 <siprintf>
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d62:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <save_mode+0x20c>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d64:	4959      	ldr	r1, [pc, #356]	; (8001ecc <save_mode+0x210>)
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d66:	9307      	str	r3, [sp, #28]
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <save_mode+0x214>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d6a:	aa07      	add	r2, sp, #28
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d6c:	9308      	str	r3, [sp, #32]
 8001d6e:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <save_mode+0x218>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d70:	a803      	add	r0, sp, #12
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d72:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d74:	2307      	movs	r3, #7
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	3b06      	subs	r3, #6
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d7a:	9609      	str	r6, [sp, #36]	; 0x24
 8001d7c:	950a      	str	r5, [sp, #40]	; 0x28
 8001d7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d80:	970c      	str	r7, [sp, #48]	; 0x30
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d82:	f7ff fab5 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8001d86:	f7ff f855 	bl	8000e34 <SSD1306_UpdateScreen>
	get_adc();
 8001d8a:	f7ff fadb 	bl	8001344 <get_adc>
	get_sel(&sel, 4, 0, 2);
 8001d8e:	4c44      	ldr	r4, [pc, #272]	; (8001ea0 <save_mode+0x1e4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	2302      	movs	r3, #2
 8001d94:	2104      	movs	r1, #4
 8001d96:	0020      	movs	r0, r4
 8001d98:	f7ff fb00 	bl	800139c <get_sel>
	if(sel == 0) get_sel(&cate_sel, etc, res, 1);
 8001d9c:	7822      	ldrb	r2, [r4, #0]
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d104      	bne.n	8001dac <save_mode+0xf0>
 8001da2:	2301      	movs	r3, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	483b      	ldr	r0, [pc, #236]	; (8001e94 <save_mode+0x1d8>)
 8001da8:	f7ff faf8 	bl	800139c <get_sel>
	if(sel == 2) get_sel(&store_num, store_max, 1, 1);
 8001dac:	7823      	ldrb	r3, [r4, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d106      	bne.n	8001dc0 <save_mode+0x104>
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <save_mode+0x1dc>)
 8001db4:	4840      	ldr	r0, [pc, #256]	; (8001eb8 <save_mode+0x1fc>)
 8001db6:	7819      	ldrb	r1, [r3, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	001a      	movs	r2, r3
 8001dbc:	f7ff faee 	bl	800139c <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8001dc0:	4a45      	ldr	r2, [pc, #276]	; (8001ed8 <save_mode+0x21c>)
 8001dc2:	7813      	ldrb	r3, [r2, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <save_mode+0x114>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	7013      	strb	r3, [r2, #0]
 8001dcc:	4a33      	ldr	r2, [pc, #204]	; (8001e9c <save_mode+0x1e0>)
 8001dce:	7013      	strb	r3, [r2, #0]
	if(read_sw()){
 8001dd0:	f7ff fb1a 	bl	8001408 <read_sw>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d056      	beq.n	8001e86 <save_mode+0x1ca>
		if(sel == 1) input_name = input_string("input Name");
 8001dd8:	7823      	ldrb	r3, [r4, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <save_mode+0x12c>
 8001dde:	483f      	ldr	r0, [pc, #252]	; (8001edc <save_mode+0x220>)
 8001de0:	f7ff fc20 	bl	8001624 <input_string>
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <save_mode+0x1f0>)
 8001de6:	6018      	str	r0, [r3, #0]
		if(sel == 3) position_set();
 8001de8:	7823      	ldrb	r3, [r4, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d101      	bne.n	8001df2 <save_mode+0x136>
 8001dee:	f7ff fead 	bl	8001b4c <position_set>
		if(sel == 4){
 8001df2:	7823      	ldrb	r3, [r4, #0]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d146      	bne.n	8001e86 <save_mode+0x1ca>
			if(input_name[0] > 0){
 8001df8:	4f2c      	ldr	r7, [pc, #176]	; (8001eac <save_mode+0x1f0>)
 8001dfa:	683e      	ldr	r6, [r7, #0]
 8001dfc:	7833      	ldrb	r3, [r6, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d043      	beq.n	8001e8a <save_mode+0x1ce>
				pt[curxy()].name = input_name;
 8001e02:	f7ff f9f9 	bl	80011f8 <curxy>
 8001e06:	250c      	movs	r5, #12
 8001e08:	4368      	muls	r0, r5
 8001e0a:	4c35      	ldr	r4, [pc, #212]	; (8001ee0 <save_mode+0x224>)
				pt[curxy()].cate = cate_sel + 1;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <save_mode+0x1d8>)
				pt[curxy()].name = input_name;
 8001e0e:	5106      	str	r6, [r0, r4]
				pt[curxy()].cate = cate_sel + 1;
 8001e10:	781e      	ldrb	r6, [r3, #0]
 8001e12:	f7ff f9f1 	bl	80011f8 <curxy>
 8001e16:	4368      	muls	r0, r5
				pt[curxy()].max = store_max;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <save_mode+0x1dc>)
				pt[curxy()].cate = cate_sel + 1;
 8001e1a:	1820      	adds	r0, r4, r0
 8001e1c:	3601      	adds	r6, #1
 8001e1e:	7106      	strb	r6, [r0, #4]
				pt[curxy()].max = store_max;
 8001e20:	781e      	ldrb	r6, [r3, #0]
 8001e22:	f7ff f9e9 	bl	80011f8 <curxy>
 8001e26:	4368      	muls	r0, r5
				pt[curxy()].store = store_num;
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <save_mode+0x1fc>)
				pt[curxy()].max = store_max;
 8001e2a:	1820      	adds	r0, r4, r0
 8001e2c:	8106      	strh	r6, [r0, #8]
				pt[curxy()].store = store_num;
 8001e2e:	781e      	ldrb	r6, [r3, #0]
 8001e30:	f7ff f9e2 	bl	80011f8 <curxy>
 8001e34:	4368      	muls	r0, r5
 8001e36:	1820      	adds	r0, r4, r0
 8001e38:	80c6      	strh	r6, [r0, #6]
				pt[curxy()].pos = start_check;
 8001e3a:	f7ff f9dd 	bl	80011f8 <curxy>
 8001e3e:	4368      	muls	r0, r5
 8001e40:	4e28      	ldr	r6, [pc, #160]	; (8001ee4 <save_mode+0x228>)
 8001e42:	1820      	adds	r0, r4, r0
 8001e44:	7833      	ldrb	r3, [r6, #0]
 8001e46:	7143      	strb	r3, [r0, #5]
				pt[curxy()].temp = temp;
 8001e48:	f7ff f9d6 	bl	80011f8 <curxy>
 8001e4c:	4368      	muls	r0, r5
 8001e4e:	1820      	adds	r0, r4, r0
 8001e50:	2202      	movs	r2, #2
 8001e52:	491b      	ldr	r1, [pc, #108]	; (8001ec0 <save_mode+0x204>)
 8001e54:	300a      	adds	r0, #10
 8001e56:	f003 fc53 	bl	8005700 <memcpy>
				logShift(0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fcb6 	bl	80017cc <logShift>
				if(start_check == 1) ptfirst = pt[curxy()];
 8001e60:	7833      	ldrb	r3, [r6, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <save_mode+0x1b8>
 8001e66:	f7ff f9c7 	bl	80011f8 <curxy>
 8001e6a:	4345      	muls	r5, r0
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <save_mode+0x22c>)
 8001e6e:	1964      	adds	r4, r4, r5
 8001e70:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e72:	c307      	stmia	r3!, {r0, r1, r2}
				input_name = NULL;
 8001e74:	2300      	movs	r3, #0
				cate_sel = res;
 8001e76:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <save_mode+0x1d8>)
				input_name = NULL;
 8001e78:	603b      	str	r3, [r7, #0]
				cate_sel = res;
 8001e7a:	7013      	strb	r3, [r2, #0]
				store_num = 1;
 8001e7c:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <save_mode+0x1fc>)
 8001e7e:	3301      	adds	r3, #1
 8001e80:	7013      	strb	r3, [r2, #0]
				init_value();
 8001e82:	f7ff f9c5 	bl	8001210 <init_value>
}
 8001e86:	b023      	add	sp, #140	; 0x8c
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else buzM = 2;
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <save_mode+0x230>)
 8001e8e:	701a      	strb	r2, [r3, #0]
}
 8001e90:	e7f9      	b.n	8001e86 <save_mode+0x1ca>
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	20000a27 	.word	0x20000a27
 8001e98:	20000dda 	.word	0x20000dda
 8001e9c:	20000018 	.word	0x20000018
 8001ea0:	20000dc7 	.word	0x20000dc7
 8001ea4:	20000054 	.word	0x20000054
 8001ea8:	08006b93 	.word	0x08006b93
 8001eac:	20000a38 	.word	0x20000a38
 8001eb0:	08006d48 	.word	0x08006d48
 8001eb4:	08006b9b 	.word	0x08006b9b
 8001eb8:	20000094 	.word	0x20000094
 8001ebc:	08006ba3 	.word	0x08006ba3
 8001ec0:	20000ddb 	.word	0x20000ddb
 8001ec4:	08006b82 	.word	0x08006b82
 8001ec8:	08006aa7 	.word	0x08006aa7
 8001ecc:	08006bcc 	.word	0x08006bcc
 8001ed0:	08006bb0 	.word	0x08006bb0
 8001ed4:	08006bc6 	.word	0x08006bc6
 8001ed8:	20000a3c 	.word	0x20000a3c
 8001edc:	08006bd2 	.word	0x08006bd2
 8001ee0:	20000a48 	.word	0x20000a48
 8001ee4:	20000dd9 	.word	0x20000dd9
 8001ee8:	20000db4 	.word	0x20000db4
 8001eec:	20000a24 	.word	0x20000a24

08001ef0 <part_refill>:
	uint8_t refill_num = 0;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	2200      	movs	r2, #0
void part_refill(void){
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b08d      	sub	sp, #52	; 0x34
	uint8_t refill_num = 0;
 8001ef8:	446b      	add	r3, sp
 8001efa:	701a      	strb	r2, [r3, #0]
	while(!read_sw()){
 8001efc:	f7ff fa84 	bl	8001408 <read_sw>
 8001f00:	1e04      	subs	r4, r0, #0
 8001f02:	d012      	beq.n	8001f2a <part_refill+0x3a>
	if(refill_num > 0) { pt[curxy()].store += refill_num; logShift(0); }
 8001f04:	230f      	movs	r3, #15
 8001f06:	446b      	add	r3, sp
 8001f08:	260c      	movs	r6, #12
 8001f0a:	781d      	ldrb	r5, [r3, #0]
 8001f0c:	f7ff f974 	bl	80011f8 <curxy>
 8001f10:	4c25      	ldr	r4, [pc, #148]	; (8001fa8 <part_refill+0xb8>)
 8001f12:	4370      	muls	r0, r6
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	d03a      	beq.n	8001f8e <part_refill+0x9e>
 8001f18:	1820      	adds	r0, r4, r0
 8001f1a:	88c3      	ldrh	r3, [r0, #6]
 8001f1c:	195d      	adds	r5, r3, r5
 8001f1e:	80c5      	strh	r5, [r0, #6]
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff fc53 	bl	80017cc <logShift>
}
 8001f26:	b00d      	add	sp, #52	; 0x34
 8001f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	491f      	ldr	r1, [pc, #124]	; (8001fac <part_refill+0xbc>)
 8001f2e:	a804      	add	r0, sp, #16
 8001f30:	1889      	adds	r1, r1, r2
 8001f32:	f003 fbe5 	bl	8005700 <memcpy>
		sprintf(bf, "IN:%d/%d", refill_num, pt[curxy()].max);
 8001f36:	f7ff f95f 	bl	80011f8 <curxy>
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	260f      	movs	r6, #15
 8001f3e:	4358      	muls	r0, r3
 8001f40:	4d19      	ldr	r5, [pc, #100]	; (8001fa8 <part_refill+0xb8>)
 8001f42:	446e      	add	r6, sp
 8001f44:	1828      	adds	r0, r5, r0
 8001f46:	af07      	add	r7, sp, #28
 8001f48:	8903      	ldrh	r3, [r0, #8]
 8001f4a:	7832      	ldrb	r2, [r6, #0]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <part_refill+0xc0>)
 8001f4e:	0038      	movs	r0, r7
 8001f50:	f003 fd1a 	bl	8005988 <siprintf>
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f54:	2202      	movs	r2, #2
		char* array[2] = { "Part has all used.", bf };
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <part_refill+0xc4>)
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f58:	4917      	ldr	r1, [pc, #92]	; (8001fb8 <part_refill+0xc8>)
 8001f5a:	a804      	add	r0, sp, #16
		char* array[2] = { "Part has all used.", bf };
 8001f5c:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	aa05      	add	r2, sp, #20
		char* array[2] = { "Part has all used.", bf };
 8001f64:	9706      	str	r7, [sp, #24]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f66:	f7ff f9c3 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8001f6a:	f7fe ff63 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8001f6e:	f7ff f9e9 	bl	8001344 <get_adc>
		get_sel(&refill_num, pt[curxy()].max, 0, 0);
 8001f72:	f7ff f941 	bl	80011f8 <curxy>
 8001f76:	230c      	movs	r3, #12
 8001f78:	4358      	muls	r0, r3
 8001f7a:	182d      	adds	r5, r5, r0
 8001f7c:	0023      	movs	r3, r4
 8001f7e:	0022      	movs	r2, r4
 8001f80:	0030      	movs	r0, r6
 8001f82:	7a29      	ldrb	r1, [r5, #8]
 8001f84:	f7ff fa0a 	bl	800139c <get_sel>
		joy_result = basic;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <part_refill+0xcc>)
 8001f8a:	701c      	strb	r4, [r3, #0]
 8001f8c:	e7b6      	b.n	8001efc <part_refill+0xc>
	else { free(pt[curxy()].name); memset(&pt[curxy()], 0, sizeof(struct Part)); }
 8001f8e:	5820      	ldr	r0, [r4, r0]
 8001f90:	f003 fbac 	bl	80056ec <free>
 8001f94:	f7ff f930 	bl	80011f8 <curxy>
 8001f98:	4370      	muls	r0, r6
 8001f9a:	0032      	movs	r2, r6
 8001f9c:	0029      	movs	r1, r5
 8001f9e:	1820      	adds	r0, r4, r0
 8001fa0:	f003 fbca 	bl	8005738 <memset>
}
 8001fa4:	e7bf      	b.n	8001f26 <part_refill+0x36>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	20000a48 	.word	0x20000a48
 8001fac:	08006060 	.word	0x08006060
 8001fb0:	08006bdd 	.word	0x08006bdd
 8001fb4:	08006be6 	.word	0x08006be6
 8001fb8:	08006bf9 	.word	0x08006bf9
 8001fbc:	20000a3c 	.word	0x20000a3c

08001fc0 <part_use>:
	use_num = 1;
 8001fc0:	2201      	movs	r2, #1
void part_use(void){
 8001fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	use_num = 1;
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <part_use+0xd4>)
void part_use(void){
 8001fc6:	b08b      	sub	sp, #44	; 0x2c
	use_num = 1;
 8001fc8:	701a      	strb	r2, [r3, #0]
	led_clear();
 8001fca:	2400      	movs	r4, #0
 8001fcc:	f7fe fbea 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001fd0:	250c      	movs	r5, #12
 8001fd2:	0028      	movs	r0, r5
 8001fd4:	4360      	muls	r0, r4
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <part_use+0xd8>)
 8001fd8:	b2e1      	uxtb	r1, r4
 8001fda:	18c0      	adds	r0, r0, r3
 8001fdc:	3401      	adds	r4, #1
 8001fde:	f7ff fa31 	bl	8001444 <led_display>
 8001fe2:	2c24      	cmp	r4, #36	; 0x24
 8001fe4:	d1f5      	bne.n	8001fd2 <part_use+0x12>
	led_color(curxy(), 4, 4, 4);
 8001fe6:	f7ff f907 	bl	80011f8 <curxy>
 8001fea:	2304      	movs	r3, #4
 8001fec:	001a      	movs	r2, r3
 8001fee:	0019      	movs	r1, r3
 8001ff0:	f7fe fba2 	bl	8000738 <led_color>
	led_update();
 8001ff4:	f7fe fbac 	bl	8000750 <led_update>
	while(!read_sw()){
 8001ff8:	f7ff fa06 	bl	8001408 <read_sw>
 8001ffc:	1e04      	subs	r4, r0, #0
 8001ffe:	d018      	beq.n	8002032 <part_use+0x72>
	logShift(1);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff fbe3 	bl	80017cc <logShift>
	pt[curxy()].store -= use_num;
 8002006:	250c      	movs	r5, #12
 8002008:	f7ff f8f6 	bl	80011f8 <curxy>
 800200c:	4368      	muls	r0, r5
 800200e:	4c22      	ldr	r4, [pc, #136]	; (8002098 <part_use+0xd8>)
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <part_use+0xd4>)
 8002012:	1820      	adds	r0, r4, r0
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	88c3      	ldrh	r3, [r0, #6]
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	80c3      	strh	r3, [r0, #6]
	if(pt[curxy()].store == 0) part_refill();
 800201c:	f7ff f8ec 	bl	80011f8 <curxy>
 8002020:	4345      	muls	r5, r0
 8002022:	1964      	adds	r4, r4, r5
 8002024:	88e3      	ldrh	r3, [r4, #6]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <part_use+0x6e>
 800202a:	f7ff ff61 	bl	8001ef0 <part_refill>
}
 800202e:	b00b      	add	sp, #44	; 0x2c
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8002032:	2204      	movs	r2, #4
 8002034:	4919      	ldr	r1, [pc, #100]	; (800209c <part_use+0xdc>)
 8002036:	a802      	add	r0, sp, #8
 8002038:	1889      	adds	r1, r1, r2
 800203a:	f003 fb61 	bl	8005700 <memcpy>
		sprintf(bf, "(%d/%d)", use_num, pt[curxy()].store);
 800203e:	f7ff f8db 	bl	80011f8 <curxy>
 8002042:	230c      	movs	r3, #12
 8002044:	4358      	muls	r0, r3
 8002046:	4d14      	ldr	r5, [pc, #80]	; (8002098 <part_use+0xd8>)
 8002048:	4e12      	ldr	r6, [pc, #72]	; (8002094 <part_use+0xd4>)
 800204a:	1828      	adds	r0, r5, r0
 800204c:	af05      	add	r7, sp, #20
 800204e:	88c3      	ldrh	r3, [r0, #6]
 8002050:	7832      	ldrb	r2, [r6, #0]
 8002052:	4913      	ldr	r1, [pc, #76]	; (80020a0 <part_use+0xe0>)
 8002054:	0038      	movs	r0, r7
 8002056:	f003 fc97 	bl	8005988 <siprintf>
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800205a:	2202      	movs	r2, #2
		char* array[2] = { "How many use?", bf };
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <part_use+0xe4>)
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800205e:	4912      	ldr	r1, [pc, #72]	; (80020a8 <part_use+0xe8>)
 8002060:	a802      	add	r0, sp, #8
		char* array[2] = { "How many use?", bf };
 8002062:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8002064:	9200      	str	r2, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	aa03      	add	r2, sp, #12
		char* array[2] = { "How many use?", bf };
 800206a:	9704      	str	r7, [sp, #16]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800206c:	f7ff f940 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8002070:	f7fe fee0 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8002074:	f7ff f966 	bl	8001344 <get_adc>
		get_sel(&use_num, pt[curxy()].store, 1, 0);
 8002078:	f7ff f8be 	bl	80011f8 <curxy>
 800207c:	230c      	movs	r3, #12
 800207e:	4358      	muls	r0, r3
 8002080:	182d      	adds	r5, r5, r0
 8002082:	0023      	movs	r3, r4
 8002084:	2201      	movs	r2, #1
 8002086:	0030      	movs	r0, r6
 8002088:	79a9      	ldrb	r1, [r5, #6]
 800208a:	f7ff f987 	bl	800139c <get_sel>
		joy_result = basic;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <part_use+0xec>)
 8002090:	701c      	strb	r4, [r3, #0]
 8002092:	e7b1      	b.n	8001ff8 <part_use+0x38>
 8002094:	2000009b 	.word	0x2000009b
 8002098:	20000a48 	.word	0x20000a48
 800209c:	08006060 	.word	0x08006060
 80020a0:	08006c01 	.word	0x08006c01
 80020a4:	08006c09 	.word	0x08006c09
 80020a8:	08006c17 	.word	0x08006c17
 80020ac:	20000a3c 	.word	0x20000a3c

080020b0 <use_mode>:
void use_mode(void){
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80020b2:	4c5f      	ldr	r4, [pc, #380]	; (8002230 <use_mode+0x180>)
void use_mode(void){
 80020b4:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 80020b6:	7823      	ldrb	r3, [r4, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d163      	bne.n	8002184 <use_mode+0xd4>
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020bc:	2208      	movs	r2, #8
 80020be:	495d      	ldr	r1, [pc, #372]	; (8002234 <use_mode+0x184>)
		firF = 1;
 80020c0:	3301      	adds	r3, #1
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020c2:	1889      	adds	r1, r1, r2
 80020c4:	a803      	add	r0, sp, #12
		firF = 1;
 80020c6:	7023      	strb	r3, [r4, #0]
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020c8:	f003 fb1a 	bl	8005700 <memcpy>
		sprintf(bf[0], pt[curxy()].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[curxy()].cate - 1]);
 80020cc:	f7ff f894 	bl	80011f8 <curxy>
 80020d0:	230c      	movs	r3, #12
 80020d2:	4343      	muls	r3, r0
 80020d4:	4d58      	ldr	r5, [pc, #352]	; (8002238 <use_mode+0x188>)
 80020d6:	4959      	ldr	r1, [pc, #356]	; (800223c <use_mode+0x18c>)
 80020d8:	18eb      	adds	r3, r5, r3
 80020da:	791b      	ldrb	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d100      	bne.n	80020e2 <use_mode+0x32>
 80020e0:	4957      	ldr	r1, [pc, #348]	; (8002240 <use_mode+0x190>)
 80020e2:	4a58      	ldr	r2, [pc, #352]	; (8002244 <use_mode+0x194>)
 80020e4:	3b01      	subs	r3, #1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	af09      	add	r7, sp, #36	; 0x24
 80020ea:	589a      	ldr	r2, [r3, r2]
 80020ec:	0038      	movs	r0, r7
 80020ee:	f003 fc4b 	bl	8005988 <siprintf>
		sprintf(bf[1], "Name:%s", pt[curxy()].cate != 0 ? pt[curxy()].name : "");
 80020f2:	f7ff f881 	bl	80011f8 <curxy>
 80020f6:	230c      	movs	r3, #12
 80020f8:	4358      	muls	r0, r3
 80020fa:	182b      	adds	r3, r5, r0
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	4a52      	ldr	r2, [pc, #328]	; (8002248 <use_mode+0x198>)
 8002100:	2b00      	cmp	r3, #0
 8002102:	d000      	beq.n	8002106 <use_mode+0x56>
 8002104:	582a      	ldr	r2, [r5, r0]
 8002106:	ae0e      	add	r6, sp, #56	; 0x38
 8002108:	4950      	ldr	r1, [pc, #320]	; (800224c <use_mode+0x19c>)
 800210a:	0030      	movs	r0, r6
 800210c:	f003 fc3c 	bl	8005988 <siprintf>
		sprintf(bf[2], "Store:%d", pt[curxy()].store);
 8002110:	f7ff f872 	bl	80011f8 <curxy>
 8002114:	230c      	movs	r3, #12
 8002116:	4358      	muls	r0, r3
 8002118:	4d47      	ldr	r5, [pc, #284]	; (8002238 <use_mode+0x188>)
 800211a:	494d      	ldr	r1, [pc, #308]	; (8002250 <use_mode+0x1a0>)
 800211c:	1828      	adds	r0, r5, r0
 800211e:	88c2      	ldrh	r2, [r0, #6]
 8002120:	a813      	add	r0, sp, #76	; 0x4c
 8002122:	f003 fc31 	bl	8005988 <siprintf>
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <use_mode+0x1a4>)
 8002128:	aa13      	add	r2, sp, #76	; 0x4c
 800212a:	9305      	str	r3, [sp, #20]
 800212c:	9208      	str	r2, [sp, #32]
 800212e:	9706      	str	r7, [sp, #24]
 8002130:	9607      	str	r6, [sp, #28]
		array_puts(pos, "#Use", array, 1, pt[curxy()].cate != 0 ? sizeof(pos) / 2 : 2);
 8002132:	f7ff f861 	bl	80011f8 <curxy>
 8002136:	230c      	movs	r3, #12
 8002138:	4358      	muls	r0, r3
 800213a:	1828      	adds	r0, r5, r0
 800213c:	7902      	ldrb	r2, [r0, #4]
 800213e:	3b08      	subs	r3, #8
 8002140:	2a00      	cmp	r2, #0
 8002142:	d100      	bne.n	8002146 <use_mode+0x96>
 8002144:	3b02      	subs	r3, #2
 8002146:	4944      	ldr	r1, [pc, #272]	; (8002258 <use_mode+0x1a8>)
 8002148:	aa05      	add	r2, sp, #20
 800214a:	a803      	add	r0, sp, #12
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	f7ff f8ce 	bl	80012f0 <array_puts>
		led_clear();
 8002154:	2600      	movs	r6, #0
		SSD1306_UpdateScreen();
 8002156:	f7fe fe6d 	bl	8000e34 <SSD1306_UpdateScreen>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800215a:	270c      	movs	r7, #12
		led_clear();
 800215c:	f7fe fb22 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002160:	0038      	movs	r0, r7
 8002162:	4370      	muls	r0, r6
 8002164:	b2f1      	uxtb	r1, r6
 8002166:	1828      	adds	r0, r5, r0
 8002168:	3601      	adds	r6, #1
 800216a:	f7ff f96b 	bl	8001444 <led_display>
 800216e:	2e24      	cmp	r6, #36	; 0x24
 8002170:	d1f6      	bne.n	8002160 <use_mode+0xb0>
		led_color(curxy(), 4, 4, 4);
 8002172:	f7ff f841 	bl	80011f8 <curxy>
 8002176:	2304      	movs	r3, #4
 8002178:	001a      	movs	r2, r3
 800217a:	0019      	movs	r1, r3
 800217c:	f7fe fadc 	bl	8000738 <led_color>
		led_update();
 8002180:	f7fe fae6 	bl	8000750 <led_update>
	if(cnt > 150){
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <use_mode+0x1ac>)
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	2a96      	cmp	r2, #150	; 0x96
 800218a:	d927      	bls.n	80021dc <use_mode+0x12c>
		cnt = 0;
 800218c:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800218e:	4834      	ldr	r0, [pc, #208]	; (8002260 <use_mode+0x1b0>)
		cnt = 0;
 8002190:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002192:	8842      	ldrh	r2, [r0, #2]
 8002194:	4933      	ldr	r1, [pc, #204]	; (8002264 <use_mode+0x1b4>)
 8002196:	428a      	cmp	r2, r1
 8002198:	d933      	bls.n	8002202 <use_mode+0x152>
 800219a:	4d33      	ldr	r5, [pc, #204]	; (8002268 <use_mode+0x1b8>)
 800219c:	786b      	ldrb	r3, [r5, #1]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d801      	bhi.n	80021a6 <use_mode+0xf6>
 80021a2:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 80021a8:	8803      	ldrh	r3, [r0, #0]
 80021aa:	2096      	movs	r0, #150	; 0x96
 80021ac:	0040      	lsls	r0, r0, #1
 80021ae:	4283      	cmp	r3, r0
 80021b0:	d231      	bcs.n	8002216 <use_mode+0x166>
 80021b2:	482d      	ldr	r0, [pc, #180]	; (8002268 <use_mode+0x1b8>)
 80021b4:	7801      	ldrb	r1, [r0, #0]
 80021b6:	2900      	cmp	r1, #0
 80021b8:	d001      	beq.n	80021be <use_mode+0x10e>
 80021ba:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80021bc:	b2c9      	uxtb	r1, r1
 80021be:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 80021c0:	21c8      	movs	r1, #200	; 0xc8
 80021c2:	3a2d      	subs	r2, #45	; 0x2d
 80021c4:	3aff      	subs	r2, #255	; 0xff
 80021c6:	b292      	uxth	r2, r2
 80021c8:	0109      	lsls	r1, r1, #4
 80021ca:	428a      	cmp	r2, r1
 80021cc:	d804      	bhi.n	80021d8 <use_mode+0x128>
 80021ce:	3b2d      	subs	r3, #45	; 0x2d
 80021d0:	3bff      	subs	r3, #255	; 0xff
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d901      	bls.n	80021dc <use_mode+0x12c>
 80021d8:	2300      	movs	r3, #0
 80021da:	7023      	strb	r3, [r4, #0]
	if(read_sw()){
 80021dc:	f7ff f914 	bl	8001408 <read_sw>
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d00c      	beq.n	80021fe <use_mode+0x14e>
		if(pt[curxy()].cate != 0) { part_use(); init_value(); }
 80021e4:	f7ff f808 	bl	80011f8 <curxy>
 80021e8:	230c      	movs	r3, #12
 80021ea:	4343      	muls	r3, r0
 80021ec:	4812      	ldr	r0, [pc, #72]	; (8002238 <use_mode+0x188>)
 80021ee:	18c0      	adds	r0, r0, r3
 80021f0:	7903      	ldrb	r3, [r0, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d017      	beq.n	8002226 <use_mode+0x176>
 80021f6:	f7ff fee3 	bl	8001fc0 <part_use>
 80021fa:	f7ff f809 	bl	8001210 <init_value>
}
 80021fe:	b019      	add	sp, #100	; 0x64
 8002200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002202:	2396      	movs	r3, #150	; 0x96
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	429a      	cmp	r2, r3
 8002208:	d2ce      	bcs.n	80021a8 <use_mode+0xf8>
 800220a:	4d17      	ldr	r5, [pc, #92]	; (8002268 <use_mode+0x1b8>)
 800220c:	786b      	ldrb	r3, [r5, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0c9      	beq.n	80021a6 <use_mode+0xf6>
 8002212:	3b01      	subs	r3, #1
 8002214:	e7c6      	b.n	80021a4 <use_mode+0xf4>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002216:	428b      	cmp	r3, r1
 8002218:	d9d2      	bls.n	80021c0 <use_mode+0x110>
 800221a:	4813      	ldr	r0, [pc, #76]	; (8002268 <use_mode+0x1b8>)
 800221c:	7801      	ldrb	r1, [r0, #0]
 800221e:	2904      	cmp	r1, #4
 8002220:	d8cd      	bhi.n	80021be <use_mode+0x10e>
 8002222:	3101      	adds	r1, #1
 8002224:	e7ca      	b.n	80021bc <use_mode+0x10c>
		else buzM = 2;
 8002226:	2202      	movs	r2, #2
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <use_mode+0x1bc>)
 800222a:	701a      	strb	r2, [r3, #0]
}
 800222c:	e7e7      	b.n	80021fe <use_mode+0x14e>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	20000018 	.word	0x20000018
 8002234:	08006060 	.word	0x08006060
 8002238:	20000a48 	.word	0x20000a48
 800223c:	08006b93 	.word	0x08006b93
 8002240:	08006c1c 	.word	0x08006c1c
 8002244:	20000054 	.word	0x20000054
 8002248:	08006e21 	.word	0x08006e21
 800224c:	08006b9b 	.word	0x08006b9b
 8002250:	08006c24 	.word	0x08006c24
 8002254:	08006c2d 	.word	0x08006c2d
 8002258:	08006c17 	.word	0x08006c17
 800225c:	20000a2a 	.word	0x20000a2a
 8002260:	20000a1e 	.word	0x20000a1e
 8002264:	00000dac 	.word	0x00000dac
 8002268:	20000ddb 	.word	0x20000ddb
 800226c:	20000a24 	.word	0x20000a24

08002270 <find_result>:
void find_result(char* str){
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t find_num = 0;
 8002272:	2400      	movs	r4, #0
void find_result(char* str){
 8002274:	b085      	sub	sp, #20
 8002276:	af02      	add	r7, sp, #8
 8002278:	4d7e      	ldr	r5, [pc, #504]	; (8002474 <find_result+0x204>)
 800227a:	6038      	str	r0, [r7, #0]
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(pt[i].name, str)) find_num++;
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	6828      	ldr	r0, [r5, #0]
 8002280:	f7fd ff42 	bl	8000108 <strcmp>
 8002284:	2800      	cmp	r0, #0
 8002286:	d101      	bne.n	800228c <find_result+0x1c>
 8002288:	3401      	adds	r4, #1
 800228a:	b2e4      	uxtb	r4, r4
 800228c:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <find_result+0x208>)
 800228e:	350c      	adds	r5, #12
 8002290:	429d      	cmp	r5, r3
 8002292:	d1f3      	bne.n	800227c <find_result+0xc>
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 8002294:	0021      	movs	r1, r4
 8002296:	200c      	movs	r0, #12
 8002298:	f003 f9f4 	bl	8005684 <calloc>
	findC = 0;
 800229c:	2400      	movs	r4, #0
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <find_result+0x20c>)
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 80022a0:	6078      	str	r0, [r7, #4]
	findC = 0;
 80022a2:	701c      	strb	r4, [r3, #0]
	for(uint8_t i = 0 ; i < start_check ; i++)
 80022a4:	4b76      	ldr	r3, [pc, #472]	; (8002480 <find_result+0x210>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	42a3      	cmp	r3, r4
 80022aa:	d819      	bhi.n	80022e0 <find_result+0x70>
	while(!read_sw()){
 80022ac:	f7ff f8ac 	bl	8001408 <read_sw>
 80022b0:	4d72      	ldr	r5, [pc, #456]	; (800247c <find_result+0x20c>)
 80022b2:	1e06      	subs	r6, r0, #0
 80022b4:	d032      	beq.n	800231c <find_result+0xac>
	logShift(2);
 80022b6:	2002      	movs	r0, #2
 80022b8:	f7ff fa88 	bl	80017cc <logShift>
	if(findC > 0) { temp = find_part[sel].temp; part_use(); }
 80022bc:	782b      	ldrb	r3, [r5, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <find_result+0x6c>
 80022c2:	210c      	movs	r1, #12
 80022c4:	4b6f      	ldr	r3, [pc, #444]	; (8002484 <find_result+0x214>)
 80022c6:	2202      	movs	r2, #2
 80022c8:	7818      	ldrb	r0, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4341      	muls	r1, r0
 80022ce:	1859      	adds	r1, r3, r1
 80022d0:	310a      	adds	r1, #10
 80022d2:	486d      	ldr	r0, [pc, #436]	; (8002488 <find_result+0x218>)
 80022d4:	f003 fa14 	bl	8005700 <memcpy>
 80022d8:	f7ff fe72 	bl	8001fc0 <part_use>
}
 80022dc:	46bd      	mov	sp, r7
 80022de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022e0:	4d64      	ldr	r5, [pc, #400]	; (8002474 <find_result+0x204>)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	6828      	ldr	r0, [r5, #0]
 80022e6:	f7fd ff0f 	bl	8000108 <strcmp>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d10f      	bne.n	800230e <find_result+0x9e>
 80022ee:	796b      	ldrb	r3, [r5, #5]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	42a3      	cmp	r3, r4
 80022f4:	d10b      	bne.n	800230e <find_result+0x9e>
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <find_result+0x20c>)
 80022f8:	4960      	ldr	r1, [pc, #384]	; (800247c <find_result+0x20c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	700a      	strb	r2, [r1, #0]
 8002300:	220c      	movs	r2, #12
 8002302:	4353      	muls	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	18d3      	adds	r3, r2, r3
 8002308:	002a      	movs	r2, r5
 800230a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800230c:	c343      	stmia	r3!, {r0, r1, r6}
		for(uint8_t j = 0 ; j < 36 ; j++)
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <find_result+0x208>)
 8002310:	350c      	adds	r5, #12
 8002312:	429d      	cmp	r5, r3
 8002314:	d1e5      	bne.n	80022e2 <find_result+0x72>
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002316:	3401      	adds	r4, #1
 8002318:	b2e4      	uxtb	r4, r4
 800231a:	e7c3      	b.n	80022a4 <find_result+0x34>
		if(findC > 0){
 800231c:	782b      	ldrb	r3, [r5, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d032      	beq.n	8002388 <find_result+0x118>
			get_adc();
 8002322:	f7ff f80f 	bl	8001344 <get_adc>
			get_sel(&sel, findC - 1, 0, 2);
 8002326:	7829      	ldrb	r1, [r5, #0]
 8002328:	2302      	movs	r3, #2
 800232a:	3901      	subs	r1, #1
 800232c:	0032      	movs	r2, r6
 800232e:	4855      	ldr	r0, [pc, #340]	; (8002484 <find_result+0x214>)
 8002330:	b2c9      	uxtb	r1, r1
 8002332:	f7ff f833 	bl	800139c <get_sel>
			joy_result = basic;
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <find_result+0x21c>)
			led_clear();
 8002338:	0034      	movs	r4, r6
			joy_result = basic;
 800233a:	701e      	strb	r6, [r3, #0]
			led_clear();
 800233c:	f7fe fa32 	bl	80007a4 <led_clear>
			for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002340:	200c      	movs	r0, #12
 8002342:	4360      	muls	r0, r4
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <find_result+0x204>)
 8002346:	b2e1      	uxtb	r1, r4
 8002348:	18c0      	adds	r0, r0, r3
 800234a:	3401      	adds	r4, #1
 800234c:	f7ff f87a 	bl	8001444 <led_display>
 8002350:	2c24      	cmp	r4, #36	; 0x24
 8002352:	d1f5      	bne.n	8002340 <find_result+0xd0>
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 8002354:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <find_result+0x214>)
 8002356:	494e      	ldr	r1, [pc, #312]	; (8002490 <find_result+0x220>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	230c      	movs	r3, #12
 800235c:	435a      	muls	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8809      	ldrh	r1, [r1, #0]
 8002362:	189a      	adds	r2, r3, r2
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002364:	2305      	movs	r3, #5
 8002366:	7ad0      	ldrb	r0, [r2, #11]
 8002368:	1a18      	subs	r0, r3, r0
 800236a:	3301      	adds	r3, #1
 800236c:	4343      	muls	r3, r0
 800236e:	7a90      	ldrb	r0, [r2, #10]
 8002370:	1818      	adds	r0, r3, r0
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 8002372:	23fa      	movs	r3, #250	; 0xfa
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002374:	b2c0      	uxtb	r0, r0
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4299      	cmp	r1, r3
 800237a:	d24b      	bcs.n	8002414 <find_result+0x1a4>
 800237c:	0001      	movs	r1, r0
 800237e:	0010      	movs	r0, r2
 8002380:	f7ff f860 	bl	8001444 <led_display>
			led_update();
 8002384:	f7fe f9e4 	bl	8000750 <led_update>
		POS pos[2 + findC];
 8002388:	782b      	ldrb	r3, [r5, #0]
 800238a:	466d      	mov	r5, sp
 800238c:	005a      	lsls	r2, r3, #1
 800238e:	320b      	adds	r2, #11
 8002390:	08d2      	lsrs	r2, r2, #3
 8002392:	00d2      	lsls	r2, r2, #3
 8002394:	1aaa      	subs	r2, r5, r2
 8002396:	4695      	mov	sp, r2
		char bf[findC][30];
 8002398:	221e      	movs	r2, #30
 800239a:	4353      	muls	r3, r2
 800239c:	466a      	mov	r2, sp
 800239e:	3307      	adds	r3, #7
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1ad3      	subs	r3, r2, r3
		POS pos[2 + findC];
 80023a6:	ac02      	add	r4, sp, #8
		char bf[findC][30];
 80023a8:	469d      	mov	sp, r3
 80023aa:	ab02      	add	r3, sp, #8
 80023ac:	603b      	str	r3, [r7, #0]
		pos[0].x = 0, pos[0].y = 1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	2201      	movs	r2, #1
 80023b2:	7023      	strb	r3, [r4, #0]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023b4:	70a3      	strb	r3, [r4, #2]
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <find_result+0x214>)
		pos[0].x = 0, pos[0].y = 1;
 80023b8:	7062      	strb	r2, [r4, #1]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	3302      	adds	r3, #2
 80023be:	70e3      	strb	r3, [r4, #3]
		for(uint8_t i = 0 ; i < findC ; i++){
 80023c0:	4b2e      	ldr	r3, [pc, #184]	; (800247c <find_result+0x20c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	429e      	cmp	r6, r3
 80023c6:	d32b      	bcc.n	8002420 <find_result+0x1b0>
		char* array[2 + findC];
 80023c8:	4669      	mov	r1, sp
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	320f      	adds	r2, #15
 80023ce:	08d2      	lsrs	r2, r2, #3
 80023d0:	00d2      	lsls	r2, r2, #3
 80023d2:	1a8a      	subs	r2, r1, r2
 80023d4:	4695      	mov	sp, r2
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80023d6:	492f      	ldr	r1, [pc, #188]	; (8002494 <find_result+0x224>)
		char* array[2 + findC];
 80023d8:	aa02      	add	r2, sp, #8
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d100      	bne.n	80023e0 <find_result+0x170>
 80023de:	492e      	ldr	r1, [pc, #184]	; (8002498 <find_result+0x228>)
 80023e0:	201e      	movs	r0, #30
 80023e2:	0016      	movs	r6, r2
 80023e4:	4358      	muls	r0, r3
 80023e6:	6011      	str	r1, [r2, #0]
		array[1] = ">";
 80023e8:	492c      	ldr	r1, [pc, #176]	; (800249c <find_result+0x22c>)
 80023ea:	3608      	adds	r6, #8
 80023ec:	6051      	str	r1, [r2, #4]
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	1808      	adds	r0, r1, r0
 80023f2:	4288      	cmp	r0, r1
 80023f4:	d13a      	bne.n	800246c <find_result+0x1fc>
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
 80023f6:	2101      	movs	r1, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <find_result+0x190>
 80023fc:	3302      	adds	r3, #2
 80023fe:	b2d9      	uxtb	r1, r3
 8002400:	9100      	str	r1, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	0020      	movs	r0, r4
 8002406:	4926      	ldr	r1, [pc, #152]	; (80024a0 <find_result+0x230>)
 8002408:	f7fe ff72 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 800240c:	f7fe fd12 	bl	8000e34 <SSD1306_UpdateScreen>
 8002410:	46ad      	mov	sp, r5
 8002412:	e74b      	b.n	80022ac <find_result+0x3c>
			else led_color(calxy(find_part[sel].temp.x,  find_part[sel].temp.y), 0, 0, 0);
 8002414:	2300      	movs	r3, #0
 8002416:	001a      	movs	r2, r3
 8002418:	0019      	movs	r1, r3
 800241a:	f7fe f98d 	bl	8000738 <led_color>
 800241e:	e7b1      	b.n	8002384 <find_result+0x114>
			sprintf(bf[i], "%s(%s/%d,%d)", find_part[i].name, ptCate[find_part[sel].cate - 1], find_part[i].temp.x + 1, find_part[i].temp.y + 1);
 8002420:	220c      	movs	r2, #12
 8002422:	210c      	movs	r1, #12
 8002424:	201e      	movs	r0, #30
 8002426:	4372      	muls	r2, r6
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4370      	muls	r0, r6
 800242c:	189a      	adds	r2, r3, r2
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <find_result+0x214>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	434b      	muls	r3, r1
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	18cb      	adds	r3, r1, r3
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	1808      	adds	r0, r1, r0
 800243e:	7ad1      	ldrb	r1, [r2, #11]
 8002440:	3b01      	subs	r3, #1
 8002442:	3101      	adds	r1, #1
 8002444:	9101      	str	r1, [sp, #4]
 8002446:	7a91      	ldrb	r1, [r2, #10]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	3101      	adds	r1, #1
 800244c:	9100      	str	r1, [sp, #0]
 800244e:	4915      	ldr	r1, [pc, #84]	; (80024a4 <find_result+0x234>)
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	585b      	ldr	r3, [r3, r1]
 8002454:	4914      	ldr	r1, [pc, #80]	; (80024a8 <find_result+0x238>)
 8002456:	f003 fa97 	bl	8005988 <siprintf>
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 800245a:	2201      	movs	r2, #1
 800245c:	0073      	lsls	r3, r6, #1
 800245e:	18e3      	adds	r3, r4, r3
 8002460:	711a      	strb	r2, [r3, #4]
 8002462:	1cb2      	adds	r2, r6, #2
		for(uint8_t i = 0 ; i < findC ; i++){
 8002464:	3601      	adds	r6, #1
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 8002466:	715a      	strb	r2, [r3, #5]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002468:	b2f6      	uxtb	r6, r6
 800246a:	e7a9      	b.n	80023c0 <find_result+0x150>
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 800246c:	c602      	stmia	r6!, {r1}
 800246e:	311e      	adds	r1, #30
 8002470:	e7bf      	b.n	80023f2 <find_result+0x182>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	20000a48 	.word	0x20000a48
 8002478:	20000bf8 	.word	0x20000bf8
 800247c:	20000a2c 	.word	0x20000a2c
 8002480:	20000dd9 	.word	0x20000dd9
 8002484:	20000dc7 	.word	0x20000dc7
 8002488:	20000ddb 	.word	0x20000ddb
 800248c:	20000a3c 	.word	0x20000a3c
 8002490:	20000a3e 	.word	0x20000a3e
 8002494:	08006c39 	.word	0x08006c39
 8002498:	08006c4a 	.word	0x08006c4a
 800249c:	08006aa7 	.word	0x08006aa7
 80024a0:	08006c63 	.word	0x08006c63
 80024a4:	20000054 	.word	0x20000054
 80024a8:	08006c56 	.word	0x08006c56

080024ac <find_mode>:
void find_mode(void){
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80024ae:	4c2a      	ldr	r4, [pc, #168]	; (8002558 <find_mode+0xac>)
void find_mode(void){
 80024b0:	b08b      	sub	sp, #44	; 0x2c
	if(!firF){
 80024b2:	7823      	ldrb	r3, [r4, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d12b      	bne.n	8002510 <find_mode+0x64>
		POS pos = {3, 4};
 80024b8:	4928      	ldr	r1, [pc, #160]	; (800255c <find_mode+0xb0>)
		firF = 1;
 80024ba:	3301      	adds	r3, #1
		POS pos = {3, 4};
 80024bc:	3110      	adds	r1, #16
 80024be:	2202      	movs	r2, #2
 80024c0:	a803      	add	r0, sp, #12
		firF = 1;
 80024c2:	7023      	strb	r3, [r4, #0]
		POS pos = {3, 4};
 80024c4:	f003 f91c 	bl	8005700 <memcpy>
		sprintf(bf, find_name[0] > 0 ? find_name : "Input find name");
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <find_mode+0xb4>)
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	780b      	ldrb	r3, [r1, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d100      	bne.n	80024d4 <find_mode+0x28>
 80024d2:	4924      	ldr	r1, [pc, #144]	; (8002564 <find_mode+0xb8>)
 80024d4:	ad05      	add	r5, sp, #20
 80024d6:	0028      	movs	r0, r5
 80024d8:	f003 fa56 	bl	8005988 <siprintf>
		char* array = { bf };
 80024dc:	9504      	str	r5, [sp, #16]
		array_puts(&pos, "#Find", &array, 1, sizeof(pos) / 2);
 80024de:	2501      	movs	r5, #1
 80024e0:	4921      	ldr	r1, [pc, #132]	; (8002568 <find_mode+0xbc>)
 80024e2:	002b      	movs	r3, r5
 80024e4:	aa04      	add	r2, sp, #16
 80024e6:	a803      	add	r0, sp, #12
 80024e8:	9500      	str	r5, [sp, #0]
 80024ea:	f7fe ff01 	bl	80012f0 <array_puts>
		SSD1306_DrawRectangle(pos.x * 6 - 2, pos.y * 8 - 3, strlen("Input find name") * 6 + 3, 12, 1);
 80024ee:	466b      	mov	r3, sp
 80024f0:	7b59      	ldrb	r1, [r3, #13]
 80024f2:	7b18      	ldrb	r0, [r3, #12]
 80024f4:	2306      	movs	r3, #6
 80024f6:	4358      	muls	r0, r3
 80024f8:	00c9      	lsls	r1, r1, #3
 80024fa:	3903      	subs	r1, #3
 80024fc:	3802      	subs	r0, #2
 80024fe:	225d      	movs	r2, #93	; 0x5d
 8002500:	b289      	uxth	r1, r1
 8002502:	b280      	uxth	r0, r0
 8002504:	18db      	adds	r3, r3, r3
 8002506:	9500      	str	r5, [sp, #0]
 8002508:	f7fe fbfd 	bl	8000d06 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 800250c:	f7fe fc92 	bl	8000e34 <SSD1306_UpdateScreen>
	if(read_sw()){
 8002510:	f7fe ff7a 	bl	8001408 <read_sw>
 8002514:	2800      	cmp	r0, #0
 8002516:	d00e      	beq.n	8002536 <find_mode+0x8a>
		if(!screenState) { find_name = input_string("#input part name"); firF = 0; }
 8002518:	4e14      	ldr	r6, [pc, #80]	; (800256c <find_mode+0xc0>)
 800251a:	4d11      	ldr	r5, [pc, #68]	; (8002560 <find_mode+0xb4>)
 800251c:	7837      	ldrb	r7, [r6, #0]
 800251e:	2f00      	cmp	r7, #0
 8002520:	d10b      	bne.n	800253a <find_mode+0x8e>
 8002522:	4813      	ldr	r0, [pc, #76]	; (8002570 <find_mode+0xc4>)
 8002524:	f7ff f87e 	bl	8001624 <input_string>
 8002528:	7027      	strb	r7, [r4, #0]
 800252a:	6028      	str	r0, [r5, #0]
		screenState = find_name[0] > 0;
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	4193      	sbcs	r3, r2
 8002534:	7033      	strb	r3, [r6, #0]
}
 8002536:	b00b      	add	sp, #44	; 0x2c
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ ledM = 1; find_result(find_name); ledM = 0; }
 800253a:	2301      	movs	r3, #1
 800253c:	2400      	movs	r4, #0
 800253e:	4f0d      	ldr	r7, [pc, #52]	; (8002574 <find_mode+0xc8>)
 8002540:	6828      	ldr	r0, [r5, #0]
 8002542:	703b      	strb	r3, [r7, #0]
 8002544:	f7ff fe94 	bl	8002270 <find_result>
			{ free(find_name); find_name = NULL; }
 8002548:	6828      	ldr	r0, [r5, #0]
			{ ledM = 1; find_result(find_name); ledM = 0; }
 800254a:	703c      	strb	r4, [r7, #0]
			{ free(find_name); find_name = NULL; }
 800254c:	f003 f8ce 	bl	80056ec <free>
 8002550:	602c      	str	r4, [r5, #0]
			init_value();
 8002552:	f7fe fe5d 	bl	8001210 <init_value>
 8002556:	e7e9      	b.n	800252c <find_mode+0x80>
 8002558:	20000018 	.word	0x20000018
 800255c:	08006060 	.word	0x08006060
 8002560:	20000a30 	.word	0x20000a30
 8002564:	08006c70 	.word	0x08006c70
 8002568:	08006c80 	.word	0x08006c80
 800256c:	20000dc6 	.word	0x20000dc6
 8002570:	08006c86 	.word	0x08006c86
 8002574:	20000a40 	.word	0x20000a40

08002578 <partition_save>:
void partition_save(void){
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b08f      	sub	sp, #60	; 0x3c
	memset(&spart, 0, sizeof(struct Part));
 800257c:	ac06      	add	r4, sp, #24
 800257e:	220c      	movs	r2, #12
 8002580:	2100      	movs	r1, #0
 8002582:	0020      	movs	r0, r4
 8002584:	f003 f8d8 	bl	8005738 <memset>
	ptionC = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <partition_save+0x190>)
 800258c:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <partition_save+0x194>)
 8002590:	785a      	ldrb	r2, [r3, #1]
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	4b5e      	ldr	r3, [pc, #376]	; (8002710 <partition_save+0x198>)
 8002596:	9902      	ldr	r1, [sp, #8]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	9303      	str	r3, [sp, #12]
 800259c:	428b      	cmp	r3, r1
 800259e:	d211      	bcs.n	80025c4 <partition_save+0x4c>
	if(spart.cate == 0) spart = ptfirst;
 80025a0:	7923      	ldrb	r3, [r4, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <partition_save+0x34>
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <partition_save+0x19c>)
 80025a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80025aa:	c423      	stmia	r4!, {r0, r1, r5}
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d22f      	bcs.n	8002612 <partition_save+0x9a>
	while(!read_sw()){
 80025b2:	f7fe ff29 	bl	8001408 <read_sw>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d065      	beq.n	8002686 <partition_save+0x10e>
	logShift(3);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f7ff f906 	bl	80017cc <logShift>
}
 80025c0:	b00f      	add	sp, #60	; 0x3c
 80025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025c4:	4b51      	ldr	r3, [pc, #324]	; (800270c <partition_save+0x194>)
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80025c6:	2706      	movs	r7, #6
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025c8:	7818      	ldrb	r0, [r3, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80025ca:	2305      	movs	r3, #5
 80025cc:	9902      	ldr	r1, [sp, #8]
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	437b      	muls	r3, r7
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	9303      	str	r3, [sp, #12]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025d6:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <partition_save+0x198>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4283      	cmp	r3, r0
 80025dc:	d204      	bcs.n	80025e8 <partition_save+0x70>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025de:	9902      	ldr	r1, [sp, #8]
 80025e0:	3101      	adds	r1, #1
 80025e2:	b2cb      	uxtb	r3, r1
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	e7d5      	b.n	8002594 <partition_save+0x1c>
			if(pt[calxy(j, i)].cate != 0) spart = pt[calxy(j, i)];
 80025e8:	270c      	movs	r7, #12
 80025ea:	9b03      	ldr	r3, [sp, #12]
 80025ec:	494a      	ldr	r1, [pc, #296]	; (8002718 <partition_save+0x1a0>)
 80025ee:	18c3      	adds	r3, r0, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	437b      	muls	r3, r7
 80025f4:	18cb      	adds	r3, r1, r3
 80025f6:	791f      	ldrb	r7, [r3, #4]
 80025f8:	2f00      	cmp	r7, #0
 80025fa:	d002      	beq.n	8002602 <partition_save+0x8a>
 80025fc:	0027      	movs	r7, r4
 80025fe:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002600:	c762      	stmia	r7!, {r1, r5, r6}
			ptionC++;
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <partition_save+0x190>)
 8002604:	4f40      	ldr	r7, [pc, #256]	; (8002708 <partition_save+0x190>)
 8002606:	781b      	ldrb	r3, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002608:	3001      	adds	r0, #1
			ptionC++;
 800260a:	3301      	adds	r3, #1
 800260c:	703b      	strb	r3, [r7, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800260e:	b2c0      	uxtb	r0, r0
 8002610:	e7e1      	b.n	80025d6 <partition_save+0x5e>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002612:	2105      	movs	r1, #5
 8002614:	2006      	movs	r0, #6
 8002616:	1a89      	subs	r1, r1, r2
 8002618:	4341      	muls	r1, r0
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <partition_save+0x194>)
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 800261c:	b2c9      	uxtb	r1, r1
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800261e:	781b      	ldrb	r3, [r3, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002620:	9102      	str	r1, [sp, #8]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002622:	493b      	ldr	r1, [pc, #236]	; (8002710 <partition_save+0x198>)
 8002624:	7809      	ldrb	r1, [r1, #0]
 8002626:	4299      	cmp	r1, r3
 8002628:	d202      	bcs.n	8002630 <partition_save+0xb8>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800262a:	3201      	adds	r2, #1
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	e7bd      	b.n	80025ac <partition_save+0x34>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002630:	2505      	movs	r5, #5
			if(calxy(j, i) != calxy(spart.temp.x, spart.temp.y)){
 8002632:	a806      	add	r0, sp, #24
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002634:	7ac4      	ldrb	r4, [r0, #11]
 8002636:	9902      	ldr	r1, [sp, #8]
 8002638:	1b2c      	subs	r4, r5, r4
 800263a:	3501      	adds	r5, #1
 800263c:	436c      	muls	r4, r5
 800263e:	7a85      	ldrb	r5, [r0, #10]
 8002640:	1859      	adds	r1, r3, r1
 8002642:	1964      	adds	r4, r4, r5
 8002644:	b2c9      	uxtb	r1, r1
			if(calxy(j, i) != calxy(spart.temp.x, spart.temp.y)){
 8002646:	b2e4      	uxtb	r4, r4
 8002648:	428c      	cmp	r4, r1
 800264a:	d010      	beq.n	800266e <partition_save+0xf6>
				pt[calxy(j,  i)] = spart;
 800264c:	250c      	movs	r5, #12
 800264e:	434d      	muls	r5, r1
 8002650:	46ac      	mov	ip, r5
 8002652:	4c31      	ldr	r4, [pc, #196]	; (8002718 <partition_save+0x1a0>)
 8002654:	1965      	adds	r5, r4, r5
 8002656:	c8d0      	ldmia	r0!, {r4, r6, r7}
 8002658:	c5d0      	stmia	r5!, {r4, r6, r7}
				pt[calxy(j,  i)].pos = ++start_check;
 800265a:	4d30      	ldr	r5, [pc, #192]	; (800271c <partition_save+0x1a4>)
 800265c:	4c2e      	ldr	r4, [pc, #184]	; (8002718 <partition_save+0x1a0>)
 800265e:	7828      	ldrb	r0, [r5, #0]
 8002660:	4464      	add	r4, ip
 8002662:	3001      	adds	r0, #1
 8002664:	b2c0      	uxtb	r0, r0
 8002666:	7028      	strb	r0, [r5, #0]
 8002668:	7160      	strb	r0, [r4, #5]
				pt[calxy(j,  i)].temp.x = j;
 800266a:	72a3      	strb	r3, [r4, #10]
				pt[calxy(j,  i)].temp.y = i;
 800266c:	72e2      	strb	r2, [r4, #11]
			pt[calxy(j,  i)].max *= ptionC;
 800266e:	200c      	movs	r0, #12
 8002670:	4341      	muls	r1, r0
 8002672:	4829      	ldr	r0, [pc, #164]	; (8002718 <partition_save+0x1a0>)
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002674:	3301      	adds	r3, #1
			pt[calxy(j,  i)].max *= ptionC;
 8002676:	1841      	adds	r1, r0, r1
 8002678:	4823      	ldr	r0, [pc, #140]	; (8002708 <partition_save+0x190>)
 800267a:	890c      	ldrh	r4, [r1, #8]
 800267c:	7800      	ldrb	r0, [r0, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800267e:	b2db      	uxtb	r3, r3
			pt[calxy(j,  i)].max *= ptionC;
 8002680:	4360      	muls	r0, r4
 8002682:	8108      	strh	r0, [r1, #8]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002684:	e7cd      	b.n	8002622 <partition_save+0xaa>
		POS pos = {0, 3};
 8002686:	2203      	movs	r2, #3
 8002688:	ab02      	add	r3, sp, #8
 800268a:	7218      	strb	r0, [r3, #8]
 800268c:	725a      	strb	r2, [r3, #9]
		sprintf(bf, "Total number:%d", ptionC);
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <partition_save+0x190>)
 8002690:	ac09      	add	r4, sp, #36	; 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	4922      	ldr	r1, [pc, #136]	; (8002720 <partition_save+0x1a8>)
 8002696:	0020      	movs	r0, r4
 8002698:	f003 f976 	bl	8005988 <siprintf>
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 800269c:	2301      	movs	r3, #1
 800269e:	aa05      	add	r2, sp, #20
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4920      	ldr	r1, [pc, #128]	; (8002724 <partition_save+0x1ac>)
 80026a4:	a804      	add	r0, sp, #16
		char* array = { bf };
 80026a6:	9405      	str	r4, [sp, #20]
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 80026a8:	f7fe fe22 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 80026ac:	f7fe fbc2 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 80026b0:	f7fe f878 	bl	80007a4 <led_clear>
		if(ledC < 500)
 80026b4:	23fa      	movs	r3, #250	; 0xfa
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <partition_save+0x1b0>)
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	8812      	ldrh	r2, [r2, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d21f      	bcs.n	8002700 <partition_save+0x188>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 80026c0:	4f12      	ldr	r7, [pc, #72]	; (800270c <partition_save+0x194>)
 80026c2:	787c      	ldrb	r4, [r7, #1]
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <partition_save+0x198>)
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	d202      	bcs.n	80026d2 <partition_save+0x15a>
		led_update();
 80026cc:	f7fe f840 	bl	8000750 <led_update>
 80026d0:	e76f      	b.n	80025b2 <partition_save+0x3a>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80026d2:	2305      	movs	r3, #5
 80026d4:	1b1e      	subs	r6, r3, r4
 80026d6:	3301      	adds	r3, #1
 80026d8:	435e      	muls	r6, r3
				for(uint8_t j = min.x ; j <= max.x ; j++)
 80026da:	783d      	ldrb	r5, [r7, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80026dc:	b2f6      	uxtb	r6, r6
				for(uint8_t j = min.x ; j <= max.x ; j++)
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <partition_save+0x198>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	42ab      	cmp	r3, r5
 80026e4:	d202      	bcs.n	80026ec <partition_save+0x174>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 80026e6:	3401      	adds	r4, #1
 80026e8:	b2e4      	uxtb	r4, r4
 80026ea:	e7eb      	b.n	80026c4 <partition_save+0x14c>
					led_color(calxy(j,  i), 0, 4, 0);
 80026ec:	2300      	movs	r3, #0
 80026ee:	19a8      	adds	r0, r5, r6
 80026f0:	2204      	movs	r2, #4
 80026f2:	0019      	movs	r1, r3
 80026f4:	b2c0      	uxtb	r0, r0
				for(uint8_t j = min.x ; j <= max.x ; j++)
 80026f6:	3501      	adds	r5, #1
					led_color(calxy(j,  i), 0, 4, 0);
 80026f8:	f7fe f81e 	bl	8000738 <led_color>
				for(uint8_t j = min.x ; j <= max.x ; j++)
 80026fc:	b2ed      	uxtb	r5, r5
 80026fe:	e7ee      	b.n	80026de <partition_save+0x166>
		else led_clear();
 8002700:	f7fe f850 	bl	80007a4 <led_clear>
 8002704:	e7e2      	b.n	80026cc <partition_save+0x154>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000dc0 	.word	0x20000dc0
 800270c:	20000a44 	.word	0x20000a44
 8002710:	20000a42 	.word	0x20000a42
 8002714:	20000db4 	.word	0x20000db4
 8002718:	20000a48 	.word	0x20000a48
 800271c:	20000dd9 	.word	0x20000dd9
 8002720:	08006c97 	.word	0x08006c97
 8002724:	08006ca7 	.word	0x08006ca7
 8002728:	20000a3e 	.word	0x20000a3e

0800272c <partition_mode>:
void partition_mode(void){
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800272e:	4c70      	ldr	r4, [pc, #448]	; (80028f0 <partition_mode+0x1c4>)
void partition_mode(void){
 8002730:	b093      	sub	sp, #76	; 0x4c
	if(!firF){
 8002732:	7823      	ldrb	r3, [r4, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d15d      	bne.n	80027f4 <partition_mode+0xc8>
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002738:	496e      	ldr	r1, [pc, #440]	; (80028f4 <partition_mode+0x1c8>)
		firF = 1;
 800273a:	3301      	adds	r3, #1
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 800273c:	3112      	adds	r1, #18
 800273e:	2206      	movs	r2, #6
 8002740:	a803      	add	r0, sp, #12
		firF = 1;
 8002742:	7023      	strb	r3, [r4, #0]
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002744:	f002 ffdc 	bl	8005700 <memcpy>
		sprintf(bf[0], !screenState ? "Start (%d,%d)" : "End (%d,%d)", temp.x + 1, temp.y + 1);
 8002748:	4b6b      	ldr	r3, [pc, #428]	; (80028f8 <partition_mode+0x1cc>)
 800274a:	496c      	ldr	r1, [pc, #432]	; (80028fc <partition_mode+0x1d0>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d000      	beq.n	8002754 <partition_mode+0x28>
 8002752:	496b      	ldr	r1, [pc, #428]	; (8002900 <partition_mode+0x1d4>)
 8002754:	4a6b      	ldr	r2, [pc, #428]	; (8002904 <partition_mode+0x1d8>)
 8002756:	a808      	add	r0, sp, #32
 8002758:	7853      	ldrb	r3, [r2, #1]
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	3201      	adds	r2, #1
 8002760:	f003 f912 	bl	8005988 <siprintf>
		sprintf(bf[1], pt[curxy()].cate != 0 ? "%s(%s/%d/%d)" : "(NONE)", pt[curxy()].name, ptCate[pt[curxy()].cate - 1], pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8002764:	f7fe fd48 	bl	80011f8 <curxy>
 8002768:	230c      	movs	r3, #12
 800276a:	4343      	muls	r3, r0
 800276c:	4a66      	ldr	r2, [pc, #408]	; (8002908 <partition_mode+0x1dc>)
 800276e:	4967      	ldr	r1, [pc, #412]	; (800290c <partition_mode+0x1e0>)
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	791b      	ldrb	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <partition_mode+0x4e>
 8002778:	4965      	ldr	r1, [pc, #404]	; (8002910 <partition_mode+0x1e4>)
 800277a:	250c      	movs	r5, #12
 800277c:	4368      	muls	r0, r5
 800277e:	1817      	adds	r7, r2, r0
 8002780:	7afe      	ldrb	r6, [r7, #11]
 8002782:	3b01      	subs	r3, #1
 8002784:	3601      	adds	r6, #1
 8002786:	9601      	str	r6, [sp, #4]
 8002788:	7abe      	ldrb	r6, [r7, #10]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3601      	adds	r6, #1
 800278e:	9600      	str	r6, [sp, #0]
 8002790:	4e60      	ldr	r6, [pc, #384]	; (8002914 <partition_mode+0x1e8>)
 8002792:	ad0d      	add	r5, sp, #52	; 0x34
 8002794:	5812      	ldr	r2, [r2, r0]
 8002796:	599b      	ldr	r3, [r3, r6]
 8002798:	0028      	movs	r0, r5
 800279a:	f003 f8f5 	bl	8005988 <siprintf>
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <partition_mode+0x1cc>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <partition_mode+0x1ec>)
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	d000      	beq.n	80027aa <partition_mode+0x7e>
 80027a8:	4b5c      	ldr	r3, [pc, #368]	; (800291c <partition_mode+0x1f0>)
 80027aa:	9305      	str	r3, [sp, #20]
 80027ac:	ab08      	add	r3, sp, #32
 80027ae:	9306      	str	r3, [sp, #24]
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 80027b0:	2303      	movs	r3, #3
 80027b2:	495b      	ldr	r1, [pc, #364]	; (8002920 <partition_mode+0x1f4>)
 80027b4:	aa05      	add	r2, sp, #20
 80027b6:	a803      	add	r0, sp, #12
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	3b02      	subs	r3, #2
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 80027bc:	9507      	str	r5, [sp, #28]
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80027be:	260c      	movs	r6, #12
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 80027c0:	f7fe fd96 	bl	80012f0 <array_puts>
		led_clear();
 80027c4:	2500      	movs	r5, #0
		SSD1306_UpdateScreen();
 80027c6:	f7fe fb35 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 80027ca:	f7fd ffeb 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80027ce:	0030      	movs	r0, r6
 80027d0:	4368      	muls	r0, r5
 80027d2:	4b4d      	ldr	r3, [pc, #308]	; (8002908 <partition_mode+0x1dc>)
 80027d4:	b2e9      	uxtb	r1, r5
 80027d6:	18c0      	adds	r0, r0, r3
 80027d8:	3501      	adds	r5, #1
 80027da:	f7fe fe33 	bl	8001444 <led_display>
 80027de:	2d24      	cmp	r5, #36	; 0x24
 80027e0:	d1f5      	bne.n	80027ce <partition_mode+0xa2>
		led_color(curxy(), 4, 4, 4);
 80027e2:	f7fe fd09 	bl	80011f8 <curxy>
 80027e6:	2304      	movs	r3, #4
 80027e8:	001a      	movs	r2, r3
 80027ea:	0019      	movs	r1, r3
 80027ec:	f7fd ffa4 	bl	8000738 <led_color>
		led_update();
 80027f0:	f7fd ffae 	bl	8000750 <led_update>
	if(cnt > 150){
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <partition_mode+0x1f8>)
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	2a96      	cmp	r2, #150	; 0x96
 80027fa:	d927      	bls.n	800284c <partition_mode+0x120>
		cnt = 0;
 80027fc:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 80027fe:	484a      	ldr	r0, [pc, #296]	; (8002928 <partition_mode+0x1fc>)
		cnt = 0;
 8002800:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002802:	8842      	ldrh	r2, [r0, #2]
 8002804:	4949      	ldr	r1, [pc, #292]	; (800292c <partition_mode+0x200>)
 8002806:	428a      	cmp	r2, r1
 8002808:	d935      	bls.n	8002876 <partition_mode+0x14a>
 800280a:	4d3e      	ldr	r5, [pc, #248]	; (8002904 <partition_mode+0x1d8>)
 800280c:	786b      	ldrb	r3, [r5, #1]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d801      	bhi.n	8002816 <partition_mode+0xea>
 8002812:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002814:	b2db      	uxtb	r3, r3
 8002816:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002818:	8803      	ldrh	r3, [r0, #0]
 800281a:	2096      	movs	r0, #150	; 0x96
 800281c:	0040      	lsls	r0, r0, #1
 800281e:	4283      	cmp	r3, r0
 8002820:	d233      	bcs.n	800288a <partition_mode+0x15e>
 8002822:	4838      	ldr	r0, [pc, #224]	; (8002904 <partition_mode+0x1d8>)
 8002824:	7801      	ldrb	r1, [r0, #0]
 8002826:	2900      	cmp	r1, #0
 8002828:	d001      	beq.n	800282e <partition_mode+0x102>
 800282a:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800282c:	b2c9      	uxtb	r1, r1
 800282e:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 8002830:	21c8      	movs	r1, #200	; 0xc8
 8002832:	3a2d      	subs	r2, #45	; 0x2d
 8002834:	3aff      	subs	r2, #255	; 0xff
 8002836:	b292      	uxth	r2, r2
 8002838:	0109      	lsls	r1, r1, #4
 800283a:	428a      	cmp	r2, r1
 800283c:	d804      	bhi.n	8002848 <partition_mode+0x11c>
 800283e:	3b2d      	subs	r3, #45	; 0x2d
 8002840:	3bff      	subs	r3, #255	; 0xff
 8002842:	b29b      	uxth	r3, r3
 8002844:	428b      	cmp	r3, r1
 8002846:	d901      	bls.n	800284c <partition_mode+0x120>
 8002848:	2300      	movs	r3, #0
 800284a:	7023      	strb	r3, [r4, #0]
	if(read_sw()){
 800284c:	f7fe fddc 	bl	8001408 <read_sw>
 8002850:	2800      	cmp	r0, #0
 8002852:	d00e      	beq.n	8002872 <partition_mode+0x146>
		if(!screenState) { ptionS = temp; firF = 0; }
 8002854:	4d28      	ldr	r5, [pc, #160]	; (80028f8 <partition_mode+0x1cc>)
 8002856:	492b      	ldr	r1, [pc, #172]	; (8002904 <partition_mode+0x1d8>)
 8002858:	782f      	ldrb	r7, [r5, #0]
 800285a:	4e35      	ldr	r6, [pc, #212]	; (8002930 <partition_mode+0x204>)
 800285c:	2f00      	cmp	r7, #0
 800285e:	d11c      	bne.n	800289a <partition_mode+0x16e>
 8002860:	2202      	movs	r2, #2
 8002862:	0030      	movs	r0, r6
 8002864:	f002 ff4c 	bl	8005700 <memcpy>
 8002868:	7027      	strb	r7, [r4, #0]
		screenState = !screenState;
 800286a:	782b      	ldrb	r3, [r5, #0]
 800286c:	425a      	negs	r2, r3
 800286e:	4153      	adcs	r3, r2
 8002870:	702b      	strb	r3, [r5, #0]
}
 8002872:	b013      	add	sp, #76	; 0x4c
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002876:	2396      	movs	r3, #150	; 0x96
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	429a      	cmp	r2, r3
 800287c:	d2cc      	bcs.n	8002818 <partition_mode+0xec>
 800287e:	4d21      	ldr	r5, [pc, #132]	; (8002904 <partition_mode+0x1d8>)
 8002880:	786b      	ldrb	r3, [r5, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0c7      	beq.n	8002816 <partition_mode+0xea>
 8002886:	3b01      	subs	r3, #1
 8002888:	e7c4      	b.n	8002814 <partition_mode+0xe8>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800288a:	428b      	cmp	r3, r1
 800288c:	d9d0      	bls.n	8002830 <partition_mode+0x104>
 800288e:	481d      	ldr	r0, [pc, #116]	; (8002904 <partition_mode+0x1d8>)
 8002890:	7801      	ldrb	r1, [r0, #0]
 8002892:	2904      	cmp	r1, #4
 8002894:	d8cb      	bhi.n	800282e <partition_mode+0x102>
 8002896:	3101      	adds	r1, #1
 8002898:	e7c8      	b.n	800282c <partition_mode+0x100>
			ptionE = temp;
 800289a:	4c26      	ldr	r4, [pc, #152]	; (8002934 <partition_mode+0x208>)
 800289c:	2202      	movs	r2, #2
 800289e:	0020      	movs	r0, r4
 80028a0:	f002 ff2e 	bl	8005700 <memcpy>
			min.x = ptionS.x > ptionE.x ? ptionE.x : ptionS.x;
 80028a4:	7830      	ldrb	r0, [r6, #0]
 80028a6:	7821      	ldrb	r1, [r4, #0]
 80028a8:	1c03      	adds	r3, r0, #0
 80028aa:	4288      	cmp	r0, r1
 80028ac:	d900      	bls.n	80028b0 <partition_mode+0x184>
 80028ae:	1c0b      	adds	r3, r1, #0
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <partition_mode+0x20c>)
 80028b2:	7013      	strb	r3, [r2, #0]
			min.y = ptionS.y > ptionE.y ? ptionE.y : ptionS.y;
 80028b4:	7872      	ldrb	r2, [r6, #1]
 80028b6:	7863      	ldrb	r3, [r4, #1]
 80028b8:	1c14      	adds	r4, r2, #0
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d900      	bls.n	80028c0 <partition_mode+0x194>
 80028be:	1c1c      	adds	r4, r3, #0
 80028c0:	4e1d      	ldr	r6, [pc, #116]	; (8002938 <partition_mode+0x20c>)
 80028c2:	7074      	strb	r4, [r6, #1]
			max.x = ptionS.x > ptionE.x ? ptionS.x : ptionE.x;
 80028c4:	4c1d      	ldr	r4, [pc, #116]	; (800293c <partition_mode+0x210>)
 80028c6:	1c06      	adds	r6, r0, #0
 80028c8:	4288      	cmp	r0, r1
 80028ca:	d200      	bcs.n	80028ce <partition_mode+0x1a2>
 80028cc:	1c0e      	adds	r6, r1, #0
 80028ce:	7026      	strb	r6, [r4, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 80028d0:	1c11      	adds	r1, r2, #0
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d200      	bcs.n	80028d8 <partition_mode+0x1ac>
 80028d6:	1c19      	adds	r1, r3, #0
			{ ledM = 1; partition_save(); ledM = 0; }
 80028d8:	2301      	movs	r3, #1
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 80028da:	7061      	strb	r1, [r4, #1]
			{ ledM = 1; partition_save(); ledM = 0; }
 80028dc:	4c18      	ldr	r4, [pc, #96]	; (8002940 <partition_mode+0x214>)
 80028de:	7023      	strb	r3, [r4, #0]
 80028e0:	f7ff fe4a 	bl	8002578 <partition_save>
 80028e4:	2300      	movs	r3, #0
 80028e6:	7023      	strb	r3, [r4, #0]
			init_value();
 80028e8:	f7fe fc92 	bl	8001210 <init_value>
 80028ec:	e7bd      	b.n	800286a <partition_mode+0x13e>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	20000018 	.word	0x20000018
 80028f4:	08006060 	.word	0x08006060
 80028f8:	20000dc5 	.word	0x20000dc5
 80028fc:	08006cb2 	.word	0x08006cb2
 8002900:	08006cc0 	.word	0x08006cc0
 8002904:	20000ddb 	.word	0x20000ddb
 8002908:	20000a48 	.word	0x20000a48
 800290c:	08006ccc 	.word	0x08006ccc
 8002910:	08006d48 	.word	0x08006d48
 8002914:	20000054 	.word	0x20000054
 8002918:	08006cd9 	.word	0x08006cd9
 800291c:	08006cec 	.word	0x08006cec
 8002920:	08006ca7 	.word	0x08006ca7
 8002924:	20000a2a 	.word	0x20000a2a
 8002928:	20000a1e 	.word	0x20000a1e
 800292c:	00000dac 	.word	0x00000dac
 8002930:	20000dc3 	.word	0x20000dc3
 8002934:	20000dc1 	.word	0x20000dc1
 8002938:	20000a44 	.word	0x20000a44
 800293c:	20000a42 	.word	0x20000a42
 8002940:	20000a40 	.word	0x20000a40

08002944 <log_detail>:
void log_detail(uint8_t i){
 8002944:	b510      	push	{r4, lr}
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 8002946:	4912      	ldr	r1, [pc, #72]	; (8002990 <log_detail+0x4c>)
void log_detail(uint8_t i){
 8002948:	b088      	sub	sp, #32
 800294a:	0004      	movs	r4, r0
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 800294c:	2206      	movs	r2, #6
 800294e:	3118      	adds	r1, #24
 8002950:	a803      	add	r0, sp, #12
 8002952:	f002 fed5 	bl	8005700 <memcpy>
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 8002956:	204a      	movs	r0, #74	; 0x4a
 8002958:	4360      	muls	r0, r4
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <log_detail+0x50>)
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <log_detail+0x54>)
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 800295e:	18c2      	adds	r2, r0, r3
 8002960:	9205      	str	r2, [sp, #20]
 8002962:	0002      	movs	r2, r0
 8002964:	3034      	adds	r0, #52	; 0x34
 8002966:	321e      	adds	r2, #30
 8002968:	18d2      	adds	r2, r2, r3
 800296a:	18c0      	adds	r0, r0, r3
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 800296c:	2303      	movs	r3, #3
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 800296e:	9206      	str	r2, [sp, #24]
 8002970:	9007      	str	r0, [sp, #28]
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	aa05      	add	r2, sp, #20
 8002976:	3b02      	subs	r3, #2
 8002978:	a803      	add	r0, sp, #12
 800297a:	f7fe fcb9 	bl	80012f0 <array_puts>
	SSD1306_UpdateScreen();
 800297e:	f7fe fa59 	bl	8000e34 <SSD1306_UpdateScreen>
	while(!read_sw());
 8002982:	f7fe fd41 	bl	8001408 <read_sw>
 8002986:	2800      	cmp	r0, #0
 8002988:	d0fb      	beq.n	8002982 <log_detail+0x3e>
}
 800298a:	b008      	add	sp, #32
 800298c:	bd10      	pop	{r4, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	08006060 	.word	0x08006060
 8002994:	20000bf8 	.word	0x20000bf8
 8002998:	08006cfd 	.word	0x08006cfd

0800299c <log_mode>:
void log_mode(void){
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <log_mode+0xec>)
 80029a0:	4e3a      	ldr	r6, [pc, #232]	; (8002a8c <log_mode+0xf0>)
 80029a2:	781d      	ldrb	r5, [r3, #0]
void log_mode(void){
 80029a4:	b0bb      	sub	sp, #236	; 0xec
	if(!firF){
 80029a6:	2d00      	cmp	r5, #0
 80029a8:	d13c      	bne.n	8002a24 <log_mode+0x88>
		firF = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <log_mode+0xec>)
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 80029ae:	ac02      	add	r4, sp, #8
		firF = 1;
 80029b0:	7013      	strb	r3, [r2, #0]
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 80029b2:	4a37      	ldr	r2, [pc, #220]	; (8002a90 <log_mode+0xf4>)
 80029b4:	70a3      	strb	r3, [r4, #2]
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	7123      	strb	r3, [r4, #4]
 80029ba:	3202      	adds	r2, #2
 80029bc:	7062      	strb	r2, [r4, #1]
 80029be:	2202      	movs	r2, #2
 80029c0:	70e2      	strb	r2, [r4, #3]
 80029c2:	18d2      	adds	r2, r2, r3
 80029c4:	7162      	strb	r2, [r4, #5]
 80029c6:	18d2      	adds	r2, r2, r3
 80029c8:	71e2      	strb	r2, [r4, #7]
 80029ca:	18d2      	adds	r2, r2, r3
 80029cc:	71a3      	strb	r3, [r4, #6]
 80029ce:	7223      	strb	r3, [r4, #8]
 80029d0:	7262      	strb	r2, [r4, #9]
 80029d2:	72a3      	strb	r3, [r4, #10]
 80029d4:	18d2      	adds	r2, r2, r3
 80029d6:	7323      	strb	r3, [r4, #12]
 80029d8:	4f2e      	ldr	r7, [pc, #184]	; (8002a94 <log_mode+0xf8>)
 80029da:	3306      	adds	r3, #6
 80029dc:	7025      	strb	r5, [r4, #0]
 80029de:	72e2      	strb	r2, [r4, #11]
 80029e0:	7363      	strb	r3, [r4, #13]
		log_num = 0;
 80029e2:	7035      	strb	r5, [r6, #0]
			if(!strlen(ptLog[i].title)) break;
 80029e4:	783b      	ldrb	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13e      	bne.n	8002a68 <log_mode+0xcc>
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <log_mode+0xfc>)
		array_puts(pos, "#Log", array, 1, log_num + 1);
 80029ec:	0020      	movs	r0, r4
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 80029ee:	9306      	str	r3, [sp, #24]
 80029f0:	ab0d      	add	r3, sp, #52	; 0x34
 80029f2:	9307      	str	r3, [sp, #28]
 80029f4:	2352      	movs	r3, #82	; 0x52
 80029f6:	446b      	add	r3, sp
 80029f8:	9308      	str	r3, [sp, #32]
 80029fa:	ab1c      	add	r3, sp, #112	; 0x70
 80029fc:	9309      	str	r3, [sp, #36]	; 0x24
 80029fe:	238e      	movs	r3, #142	; 0x8e
 8002a00:	446b      	add	r3, sp
 8002a02:	930a      	str	r3, [sp, #40]	; 0x28
 8002a04:	ab2b      	add	r3, sp, #172	; 0xac
 8002a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a08:	23ca      	movs	r3, #202	; 0xca
 8002a0a:	446b      	add	r3, sp
 8002a0c:	930c      	str	r3, [sp, #48]	; 0x30
		array_puts(pos, "#Log", array, 1, log_num + 1);
 8002a0e:	7833      	ldrb	r3, [r6, #0]
 8002a10:	4922      	ldr	r1, [pc, #136]	; (8002a9c <log_mode+0x100>)
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	aa06      	add	r2, sp, #24
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f7fe fc68 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8002a20:	f7fe fa08 	bl	8000e34 <SSD1306_UpdateScreen>
	get_adc();
 8002a24:	f7fe fc8e 	bl	8001344 <get_adc>
	get_sel(&sel, log_num - 1, 0, 2);
 8002a28:	7831      	ldrb	r1, [r6, #0]
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	3901      	subs	r1, #1
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4817      	ldr	r0, [pc, #92]	; (8002a90 <log_mode+0xf4>)
 8002a32:	b2c9      	uxtb	r1, r1
 8002a34:	f7fe fcb2 	bl	800139c <get_sel>
	if(joy_result != basic) { if(joy_result == left) init_value(); joy_result = basic; firF = 0; }
 8002a38:	4c19      	ldr	r4, [pc, #100]	; (8002aa0 <log_mode+0x104>)
 8002a3a:	7823      	ldrb	r3, [r4, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <log_mode+0xb4>
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <log_mode+0xac>
 8002a44:	f7fe fbe4 	bl	8001210 <init_value>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <log_mode+0xec>)
 8002a4c:	7023      	strb	r3, [r4, #0]
 8002a4e:	7013      	strb	r3, [r2, #0]
	if(read_sw()) { log_detail(sel); init_value(); }
 8002a50:	f7fe fcda 	bl	8001408 <read_sw>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d005      	beq.n	8002a64 <log_mode+0xc8>
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <log_mode+0xf4>)
 8002a5a:	7818      	ldrb	r0, [r3, #0]
 8002a5c:	f7ff ff72 	bl	8002944 <log_detail>
 8002a60:	f7fe fbd6 	bl	8001210 <init_value>
}
 8002a64:	b03b      	add	sp, #236	; 0xec
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(bf[i], "%s", ptLog[i].title);
 8002a68:	201e      	movs	r0, #30
 8002a6a:	4368      	muls	r0, r5
 8002a6c:	ab0d      	add	r3, sp, #52	; 0x34
 8002a6e:	0039      	movs	r1, r7
 8002a70:	1818      	adds	r0, r3, r0
 8002a72:	f002 ffa9 	bl	80059c8 <strcpy>
			log_num++;
 8002a76:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002a78:	3501      	adds	r5, #1
			log_num++;
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	7033      	strb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002a7e:	374a      	adds	r7, #74	; 0x4a
 8002a80:	2d06      	cmp	r5, #6
 8002a82:	d1af      	bne.n	80029e4 <log_mode+0x48>
 8002a84:	e7b1      	b.n	80029ea <log_mode+0x4e>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000018 	.word	0x20000018
 8002a8c:	20000a41 	.word	0x20000a41
 8002a90:	20000dc7 	.word	0x20000dc7
 8002a94:	20000bf8 	.word	0x20000bf8
 8002a98:	08006aa7 	.word	0x08006aa7
 8002a9c:	08006d09 	.word	0x08006d09
 8002aa0:	20000a3c 	.word	0x20000a3c

08002aa4 <by_set>:
void by_set(void){
 8002aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t by_sel = 0, num = 0;
 8002aa6:	2700      	movs	r7, #0
	memset(sortBypriorF, 0, 3);
 8002aa8:	4d3d      	ldr	r5, [pc, #244]	; (8002ba0 <by_set+0xfc>)
 8002aaa:	2203      	movs	r2, #3
 8002aac:	2100      	movs	r1, #0
void by_set(void){
 8002aae:	b08b      	sub	sp, #44	; 0x2c
	memset(sortBypriorF, 0, 3);
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	f002 fe41 	bl	8005738 <memset>
	memset(standard.sortByprior, 0, 3);
 8002ab6:	4e3b      	ldr	r6, [pc, #236]	; (8002ba4 <by_set+0x100>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	2100      	movs	r1, #0
 8002abc:	1cf0      	adds	r0, r6, #3
 8002abe:	f002 fe3b 	bl	8005738 <memset>
	uint8_t by_sel = 0, num = 0;
 8002ac2:	003c      	movs	r4, r7
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	d13f      	bne.n	8002b48 <by_set+0xa4>
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <by_set+0x104>)
 8002aca:	00a2      	lsls	r2, r4, #2
 8002acc:	58d2      	ldr	r2, [r2, r3]
				num == 1 ? ptBy[by_sel] : standard.sortByprior[1] ? ptBy[standard.sortByprior[1] - 1] : " ",
 8002ace:	7931      	ldrb	r1, [r6, #4]
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <by_set+0x108>)
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d003      	beq.n	8002ade <by_set+0x3a>
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <by_set+0x104>)
 8002ad8:	3901      	subs	r1, #1
 8002ada:	0089      	lsls	r1, r1, #2
 8002adc:	58cb      	ldr	r3, [r1, r3]
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002ade:	2f02      	cmp	r7, #2
 8002ae0:	d13f      	bne.n	8002b62 <by_set+0xbe>
 8002ae2:	4931      	ldr	r1, [pc, #196]	; (8002ba8 <by_set+0x104>)
 8002ae4:	00a0      	lsls	r0, r4, #2
				num == 2 ? ptBy[by_sel] : standard.sortByprior[2] ? ptBy[standard.sortByprior[2] - 1] : " ");
 8002ae6:	5808      	ldr	r0, [r1, r0]
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002ae8:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <by_set+0x10c>)
 8002aea:	9000      	str	r0, [sp, #0]
 8002aec:	a802      	add	r0, sp, #8
 8002aee:	f002 ff4b 	bl	8005988 <siprintf>
		ssd1306_putsXY(1, 2, bf, 0);
 8002af2:	2300      	movs	r3, #0
 8002af4:	2102      	movs	r1, #2
 8002af6:	2001      	movs	r0, #1
 8002af8:	aa02      	add	r2, sp, #8
 8002afa:	f7fe fbe9 	bl	80012d0 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8002afe:	f7fe f999 	bl	8000e34 <SSD1306_UpdateScreen>
		if(num < 2){
 8002b02:	2f01      	cmp	r7, #1
 8002b04:	d80e      	bhi.n	8002b24 <by_set+0x80>
			get_adc();
 8002b06:	f7fe fc1d 	bl	8001344 <get_adc>
			if(joy_result == up) { do{ by_sel = (by_sel + 1) < 3 ? by_sel + 1 : 0; }while(sortBypriorF[by_sel]); }
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <by_set+0x110>)
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	2a03      	cmp	r2, #3
 8002b10:	d131      	bne.n	8002b76 <by_set+0xd2>
 8002b12:	2c01      	cmp	r4, #1
 8002b14:	d82d      	bhi.n	8002b72 <by_set+0xce>
 8002b16:	3401      	adds	r4, #1
 8002b18:	b2e4      	uxtb	r4, r4
 8002b1a:	5d2a      	ldrb	r2, [r5, r4]
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	d1f8      	bne.n	8002b12 <by_set+0x6e>
			joy_result = basic;
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
		if(read_sw()){
 8002b24:	f7fe fc70 	bl	8001408 <read_sw>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0cb      	beq.n	8002ac4 <by_set+0x20>
			sortBypriorF[by_sel] = 1;
 8002b2c:	2201      	movs	r2, #1
			standard.sortByprior[num++] = by_sel + 1;
 8002b2e:	1c7b      	adds	r3, r7, #1
			sortBypriorF[by_sel] = 1;
 8002b30:	552a      	strb	r2, [r5, r4]
			standard.sortByprior[num++] = by_sel + 1;
 8002b32:	19f7      	adds	r7, r6, r7
 8002b34:	18a4      	adds	r4, r4, r2
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	70fc      	strb	r4, [r7, #3]
			if(num < 3) { by_sel = 0; while(sortBypriorF[by_sel]) by_sel++; }
 8002b3a:	2400      	movs	r4, #0
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d929      	bls.n	8002b94 <by_set+0xf0>
			else { firF = 0; break; }
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <by_set+0x114>)
 8002b42:	701c      	strb	r4, [r3, #0]
}
 8002b44:	b00b      	add	sp, #44	; 0x2c
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002b48:	78f3      	ldrb	r3, [r6, #3]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <by_set+0x108>)
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <by_set+0xb4>
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <by_set+0x104>)
 8002b52:	3b01      	subs	r3, #1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	589a      	ldr	r2, [r3, r2]
 8002b58:	2f01      	cmp	r7, #1
 8002b5a:	d1b8      	bne.n	8002ace <by_set+0x2a>
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <by_set+0x104>)
 8002b5e:	00a1      	lsls	r1, r4, #2
 8002b60:	58cb      	ldr	r3, [r1, r3]
				num == 2 ? ptBy[by_sel] : standard.sortByprior[2] ? ptBy[standard.sortByprior[2] - 1] : " ");
 8002b62:	7971      	ldrb	r1, [r6, #5]
 8002b64:	4811      	ldr	r0, [pc, #68]	; (8002bac <by_set+0x108>)
 8002b66:	2900      	cmp	r1, #0
 8002b68:	d0be      	beq.n	8002ae8 <by_set+0x44>
 8002b6a:	3901      	subs	r1, #1
 8002b6c:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <by_set+0x104>)
 8002b6e:	0089      	lsls	r1, r1, #2
 8002b70:	e7b9      	b.n	8002ae6 <by_set+0x42>
			if(joy_result == up) { do{ by_sel = (by_sel + 1) < 3 ? by_sel + 1 : 0; }while(sortBypriorF[by_sel]); }
 8002b72:	2400      	movs	r4, #0
 8002b74:	e7d1      	b.n	8002b1a <by_set+0x76>
			if(joy_result == down) { do{ by_sel = by_sel > 0 ? by_sel - 1 : 2; }while(sortBypriorF[by_sel]); }
 8002b76:	2a04      	cmp	r2, #4
 8002b78:	d1d2      	bne.n	8002b20 <by_set+0x7c>
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	2c00      	cmp	r4, #0
 8002b7e:	d005      	beq.n	8002b8c <by_set+0xe8>
 8002b80:	3c01      	subs	r4, #1
 8002b82:	b2e4      	uxtb	r4, r4
 8002b84:	5d2a      	ldrb	r2, [r5, r4]
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d1f8      	bne.n	8002b7c <by_set+0xd8>
 8002b8a:	e7c9      	b.n	8002b20 <by_set+0x7c>
 8002b8c:	000c      	movs	r4, r1
 8002b8e:	e7f9      	b.n	8002b84 <by_set+0xe0>
			if(num < 3) { by_sel = 0; while(sortBypriorF[by_sel]) by_sel++; }
 8002b90:	3401      	adds	r4, #1
 8002b92:	b2e4      	uxtb	r4, r4
 8002b94:	5d2a      	ldrb	r2, [r5, r4]
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	d1fa      	bne.n	8002b90 <by_set+0xec>
 8002b9a:	001f      	movs	r7, r3
	while(1){
 8002b9c:	e792      	b.n	8002ac4 <by_set+0x20>
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000dc8 	.word	0x20000dc8
 8002ba4:	20000dcf 	.word	0x20000dcf
 8002ba8:	20000048 	.word	0x20000048
 8002bac:	08006e20 	.word	0x08006e20
 8002bb0:	08006d0e 	.word	0x08006d0e
 8002bb4:	20000a3c 	.word	0x20000a3c
 8002bb8:	20000018 	.word	0x20000018

08002bbc <cate_set>:
void cate_set(void){
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t cate_sel = 0, num = 0;
 8002bbe:	2500      	movs	r5, #0
	memset(sortCatepriorF, 0, 4);
 8002bc0:	4e45      	ldr	r6, [pc, #276]	; (8002cd8 <cate_set+0x11c>)
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	2100      	movs	r1, #0
void cate_set(void){
 8002bc6:	b08b      	sub	sp, #44	; 0x2c
	memset(sortCatepriorF, 0, 4);
 8002bc8:	0030      	movs	r0, r6
 8002bca:	f002 fdb5 	bl	8005738 <memset>
	memset(standard.sortCateprior, 0, 4);
 8002bce:	4843      	ldr	r0, [pc, #268]	; (8002cdc <cate_set+0x120>)
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	3006      	adds	r0, #6
 8002bd6:	f002 fdaf 	bl	8005738 <memset>
	uint8_t cate_sel = 0, num = 0;
 8002bda:	002c      	movs	r4, r5
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002bdc:	4f3f      	ldr	r7, [pc, #252]	; (8002cdc <cate_set+0x120>)
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d117      	bne.n	8002c12 <cate_set+0x56>
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <cate_set+0x124>)
 8002be4:	00a2      	lsls	r2, r4, #2
 8002be6:	58d2      	ldr	r2, [r2, r3]
				num == 1 ? ptCate[cate_sel] : standard.sortCateprior[1] ? ptCate[standard.sortCateprior[1] - 1] : " ",
 8002be8:	79f9      	ldrb	r1, [r7, #7]
 8002bea:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <cate_set+0x128>)
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d003      	beq.n	8002bf8 <cate_set+0x3c>
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <cate_set+0x124>)
 8002bf2:	3901      	subs	r1, #1
 8002bf4:	0089      	lsls	r1, r1, #2
 8002bf6:	58cb      	ldr	r3, [r1, r3]
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002bf8:	2d02      	cmp	r5, #2
 8002bfa:	d117      	bne.n	8002c2c <cate_set+0x70>
 8002bfc:	4938      	ldr	r1, [pc, #224]	; (8002ce0 <cate_set+0x124>)
 8002bfe:	00a0      	lsls	r0, r4, #2
 8002c00:	5840      	ldr	r0, [r0, r1]
								num == 3 ? ptCate[cate_sel] : standard.sortCateprior[3] ? ptCate[standard.sortCateprior[3] - 1] : " ");
 8002c02:	7a79      	ldrb	r1, [r7, #9]
 8002c04:	4f37      	ldr	r7, [pc, #220]	; (8002ce4 <cate_set+0x128>)
 8002c06:	2900      	cmp	r1, #0
 8002c08:	d01d      	beq.n	8002c46 <cate_set+0x8a>
 8002c0a:	3901      	subs	r1, #1
 8002c0c:	4f34      	ldr	r7, [pc, #208]	; (8002ce0 <cate_set+0x124>)
 8002c0e:	0089      	lsls	r1, r1, #2
 8002c10:	e018      	b.n	8002c44 <cate_set+0x88>
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c12:	79bb      	ldrb	r3, [r7, #6]
 8002c14:	4a33      	ldr	r2, [pc, #204]	; (8002ce4 <cate_set+0x128>)
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <cate_set+0x66>
 8002c1a:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <cate_set+0x124>)
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	589a      	ldr	r2, [r3, r2]
 8002c22:	2d01      	cmp	r5, #1
 8002c24:	d1e0      	bne.n	8002be8 <cate_set+0x2c>
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <cate_set+0x124>)
 8002c28:	00a1      	lsls	r1, r4, #2
 8002c2a:	58cb      	ldr	r3, [r1, r3]
						num == 2 ? ptCate[cate_sel] : standard.sortCateprior[2] ? ptCate[standard.sortCateprior[2] - 1] : " ",
 8002c2c:	7a39      	ldrb	r1, [r7, #8]
 8002c2e:	482d      	ldr	r0, [pc, #180]	; (8002ce4 <cate_set+0x128>)
 8002c30:	2900      	cmp	r1, #0
 8002c32:	d003      	beq.n	8002c3c <cate_set+0x80>
 8002c34:	482a      	ldr	r0, [pc, #168]	; (8002ce0 <cate_set+0x124>)
 8002c36:	3901      	subs	r1, #1
 8002c38:	0089      	lsls	r1, r1, #2
 8002c3a:	5808      	ldr	r0, [r1, r0]
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c3c:	2d03      	cmp	r5, #3
 8002c3e:	d1e0      	bne.n	8002c02 <cate_set+0x46>
 8002c40:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <cate_set+0x124>)
 8002c42:	00a7      	lsls	r7, r4, #2
								num == 3 ? ptCate[cate_sel] : standard.sortCateprior[3] ? ptCate[standard.sortCateprior[3] - 1] : " ");
 8002c44:	59cf      	ldr	r7, [r1, r7]
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c46:	4928      	ldr	r1, [pc, #160]	; (8002ce8 <cate_set+0x12c>)
 8002c48:	9000      	str	r0, [sp, #0]
 8002c4a:	9701      	str	r7, [sp, #4]
 8002c4c:	a802      	add	r0, sp, #8
 8002c4e:	f002 fe9b 	bl	8005988 <siprintf>
		ssd1306_putsXY(1, 3, bf, 0);
 8002c52:	2300      	movs	r3, #0
 8002c54:	2103      	movs	r1, #3
 8002c56:	2001      	movs	r0, #1
 8002c58:	aa02      	add	r2, sp, #8
 8002c5a:	f7fe fb39 	bl	80012d0 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8002c5e:	f7fe f8e9 	bl	8000e34 <SSD1306_UpdateScreen>
		if(num < 3){
 8002c62:	2d02      	cmp	r5, #2
 8002c64:	d80e      	bhi.n	8002c84 <cate_set+0xc8>
			get_adc();
 8002c66:	f7fe fb6d 	bl	8001344 <get_adc>
			if(joy_result == up) { do{ cate_sel = (cate_sel + 1) < 4 ? cate_sel + 1 : 0; }while(sortCatepriorF[cate_sel]); }
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <cate_set+0x130>)
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	2a03      	cmp	r2, #3
 8002c70:	d11d      	bne.n	8002cae <cate_set+0xf2>
 8002c72:	2c02      	cmp	r4, #2
 8002c74:	d819      	bhi.n	8002caa <cate_set+0xee>
 8002c76:	3401      	adds	r4, #1
 8002c78:	b2e4      	uxtb	r4, r4
 8002c7a:	5d32      	ldrb	r2, [r6, r4]
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d1f8      	bne.n	8002c72 <cate_set+0xb6>
			joy_result = basic;
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
		if(read_sw()){
 8002c84:	f7fe fbc0 	bl	8001408 <read_sw>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d0a7      	beq.n	8002bdc <cate_set+0x20>
			sortCatepriorF[cate_sel] = 1;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	5532      	strb	r2, [r6, r4]
			standard.sortCateprior[num++] = cate_sel + 1;
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <cate_set+0x120>)
 8002c92:	1c6b      	adds	r3, r5, #1
 8002c94:	3401      	adds	r4, #1
 8002c96:	1955      	adds	r5, r2, r5
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	71ac      	strb	r4, [r5, #6]
			if(num < 4) { cate_sel = 0; while(sortCatepriorF[cate_sel]) cate_sel++; }
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d914      	bls.n	8002ccc <cate_set+0x110>
			else { firF = 0; break; }
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <cate_set+0x134>)
 8002ca4:	701c      	strb	r4, [r3, #0]
}
 8002ca6:	b00b      	add	sp, #44	; 0x2c
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(joy_result == up) { do{ cate_sel = (cate_sel + 1) < 4 ? cate_sel + 1 : 0; }while(sortCatepriorF[cate_sel]); }
 8002caa:	2400      	movs	r4, #0
 8002cac:	e7e5      	b.n	8002c7a <cate_set+0xbe>
			if(joy_result == down) { do{ cate_sel = cate_sel > 0 ? cate_sel - 1 : 3; }while(sortCatepriorF[cate_sel]); }
 8002cae:	2a04      	cmp	r2, #4
 8002cb0:	d1e6      	bne.n	8002c80 <cate_set+0xc4>
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	2c00      	cmp	r4, #0
 8002cb6:	d005      	beq.n	8002cc4 <cate_set+0x108>
 8002cb8:	3c01      	subs	r4, #1
 8002cba:	b2e4      	uxtb	r4, r4
 8002cbc:	5d32      	ldrb	r2, [r6, r4]
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d1f8      	bne.n	8002cb4 <cate_set+0xf8>
 8002cc2:	e7dd      	b.n	8002c80 <cate_set+0xc4>
 8002cc4:	000c      	movs	r4, r1
 8002cc6:	e7f9      	b.n	8002cbc <cate_set+0x100>
			if(num < 4) { cate_sel = 0; while(sortCatepriorF[cate_sel]) cate_sel++; }
 8002cc8:	3401      	adds	r4, #1
 8002cca:	b2e4      	uxtb	r4, r4
 8002ccc:	5d32      	ldrb	r2, [r6, r4]
 8002cce:	2a00      	cmp	r2, #0
 8002cd0:	d1fa      	bne.n	8002cc8 <cate_set+0x10c>
 8002cd2:	001d      	movs	r5, r3
	while(1){
 8002cd4:	e782      	b.n	8002bdc <cate_set+0x20>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	20000dcb 	.word	0x20000dcb
 8002cdc:	20000dcf 	.word	0x20000dcf
 8002ce0:	20000054 	.word	0x20000054
 8002ce4:	08006e20 	.word	0x08006e20
 8002ce8:	08006d20 	.word	0x08006d20
 8002cec:	20000a3c 	.word	0x20000a3c
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <part_swap>:
volatile void part_swap(struct Part* a, struct Part* b){
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	b085      	sub	sp, #20
	temp = *a;
 8002cf8:	ab01      	add	r3, sp, #4
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	0004      	movs	r4, r0
 8002cfe:	cce0      	ldmia	r4!, {r5, r6, r7}
 8002d00:	c2e0      	stmia	r2!, {r5, r6, r7}
	*a = *b;
 8002d02:	000a      	movs	r2, r1
 8002d04:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002d06:	c070      	stmia	r0!, {r4, r5, r6}
	*b = temp;
 8002d08:	cb15      	ldmia	r3!, {r0, r2, r4}
 8002d0a:	c115      	stmia	r1!, {r0, r2, r4}
}
 8002d0c:	b005      	add	sp, #20
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d10 <part_sort>:
volatile int8_t (*compare_item[3])(struct Part* a, struct Part* b) = { name_compare, cate_compare, store_compare };

volatile void part_sort(void){
	int8_t res = 0, swapF = 0;

	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d10:	2300      	movs	r3, #0
volatile void part_sort(void){
 8002d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d14:	b085      	sub	sp, #20
 8002d16:	2400      	movs	r4, #0
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <part_sort+0x1cc>)
 8002d1c:	4f70      	ldr	r7, [pc, #448]	; (8002ee0 <part_sort+0x1d0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	9a00      	ldr	r2, [sp, #0]
		for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002d22:	707c      	strb	r4, [r7, #1]
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d83d      	bhi.n	8002da4 <part_sort+0x94>
					}
					else if(res < 0) swapF = 1;
					if(swapF) { part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]); swapF = 0; }
				}

	POS cur = {0, 0};
 8002d28:	0025      	movs	r5, r4
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
		for(temp.x = 0 ; temp.x < 6;  temp.x++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	703b      	strb	r3, [r7, #0]
			if(standard.sortTypeF){
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <part_sort+0x1d4>)
 8002d30:	789b      	ldrb	r3, [r3, #2]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d100      	bne.n	8002d38 <part_sort+0x28>
 8002d36:	e0ad      	b.n	8002e94 <part_sort+0x184>
				if(pt[curxy()].cate != 0){
 8002d38:	f7fe fa5e 	bl	80011f8 <curxy>
 8002d3c:	260c      	movs	r6, #12
 8002d3e:	4346      	muls	r6, r0
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <part_sort+0x1d8>)
 8002d42:	199e      	adds	r6, r3, r6
 8002d44:	7933      	ldrb	r3, [r6, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <part_sort+0x6a>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002d4a:	2306      	movs	r3, #6
 8002d4c:	2005      	movs	r0, #5
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d4e:	0019      	movs	r1, r3
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002d50:	1b04      	subs	r4, r0, r4
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d52:	0028      	movs	r0, r5
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002d54:	435c      	muls	r4, r3
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d56:	f7fd fa7b 	bl	8000250 <__aeabi_uidivmod>
 8002d5a:	230c      	movs	r3, #12
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002d5c:	1861      	adds	r1, r4, r1
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d5e:	b2c9      	uxtb	r1, r1
 8002d60:	4359      	muls	r1, r3
 8002d62:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <part_sort+0x1d8>)
					cur.x++;
 8002d64:	3501      	adds	r5, #1
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d66:	18c9      	adds	r1, r1, r3
 8002d68:	0030      	movs	r0, r6
					cur.x++;
 8002d6a:	b2ed      	uxtb	r5, r5
					part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002d6c:	f7ff ffc2 	bl	8002cf4 <part_swap>
					cur.y = cur.x / 6;
 8002d70:	2106      	movs	r1, #6
 8002d72:	0028      	movs	r0, r5
 8002d74:	f7fd f9e6 	bl	8000144 <__udivsi3>
 8002d78:	b2c4      	uxtb	r4, r0
		for(temp.x = 0 ; temp.x < 6;  temp.x++)
 8002d7a:	783b      	ldrb	r3, [r7, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	703b      	strb	r3, [r7, #0]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d9d3      	bls.n	8002d2e <part_sort+0x1e>
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002d86:	787b      	ldrb	r3, [r7, #1]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	707b      	strb	r3, [r7, #1]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d9cb      	bls.n	8002d2a <part_sort+0x1a>
				}
			}
			else temp.x = temp.y = 6;

	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002d92:	2300      	movs	r3, #0
		for(temp.x = 0 ; temp.x < 6;  temp.x++)
			if(pt[curxy()].cate != 0) pt[curxy()].temp = temp;
 8002d94:	260c      	movs	r6, #12
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002d96:	707b      	strb	r3, [r7, #1]
 8002d98:	787c      	ldrb	r4, [r7, #1]
 8002d9a:	2c05      	cmp	r4, #5
 8002d9c:	d800      	bhi.n	8002da0 <part_sort+0x90>
 8002d9e:	e07d      	b.n	8002e9c <part_sort+0x18c>
			else memset(&pt[curxy()], 0, sizeof(struct Part));
}
 8002da0:	b005      	add	sp, #20
 8002da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002da4:	466b      	mov	r3, sp
 8002da6:	73dc      	strb	r4, [r3, #15]
 8002da8:	466b      	mov	r3, sp
 8002daa:	7bdb      	ldrb	r3, [r3, #15]
 8002dac:	703b      	strb	r3, [r7, #0]
 8002dae:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <part_sort+0x1d0>)
 8002db0:	781d      	ldrb	r5, [r3, #0]
					POS cur = temp;
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	9301      	str	r3, [sp, #4]
			for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002db6:	2d05      	cmp	r5, #5
 8002db8:	d90a      	bls.n	8002dd0 <part_sort+0xc0>
		for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002dba:	9b01      	ldr	r3, [sp, #4]
 8002dbc:	4a48      	ldr	r2, [pc, #288]	; (8002ee0 <part_sort+0x1d0>)
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	7053      	strb	r3, [r2, #1]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d9ef      	bls.n	8002da8 <part_sort+0x98>
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002dc8:	9b00      	ldr	r3, [sp, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e7a2      	b.n	8002d16 <part_sort+0x6>
				if(pt[curxy()].cate != 0){
 8002dd0:	f7fe fa12 	bl	80011f8 <curxy>
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	4343      	muls	r3, r0
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <part_sort+0x1d8>)
 8002dda:	9002      	str	r0, [sp, #8]
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	791b      	ldrb	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d052      	beq.n	8002e8a <part_sort+0x17a>
					POS cur = temp;
 8002de4:	9e01      	ldr	r6, [sp, #4]
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002de6:	2106      	movs	r1, #6
 8002de8:	0028      	movs	r0, r5
 8002dea:	f7fd fa31 	bl	8000250 <__aeabi_uidivmod>
 8002dee:	b2c9      	uxtb	r1, r1
 8002df0:	2905      	cmp	r1, #5
 8002df2:	d101      	bne.n	8002df8 <part_sort+0xe8>
 8002df4:	3601      	adds	r6, #1
 8002df6:	b2f6      	uxtb	r6, r6
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002df8:	2305      	movs	r3, #5
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002dfa:	3501      	adds	r5, #1
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002dfc:	1b9c      	subs	r4, r3, r6
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002dfe:	b2ed      	uxtb	r5, r5
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002e00:	3301      	adds	r3, #1
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002e02:	0019      	movs	r1, r3
 8002e04:	0028      	movs	r0, r5
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002e06:	435c      	muls	r4, r3
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002e08:	f7fd fa22 	bl	8000250 <__aeabi_uidivmod>
 8002e0c:	230c      	movs	r3, #12
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002e0e:	1864      	adds	r4, r4, r1
 8002e10:	b2e4      	uxtb	r4, r4
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[calxy(cur.x % 6, cur.y)].cate == 0);
 8002e12:	435c      	muls	r4, r3
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <part_sort+0x1d8>)
 8002e16:	191c      	adds	r4, r3, r4
 8002e18:	7923      	ldrb	r3, [r4, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0e3      	beq.n	8002de6 <part_sort+0xd6>
					if(cur.x >= 36) break;
 8002e1e:	2d23      	cmp	r5, #35	; 0x23
 8002e20:	d8cb      	bhi.n	8002dba <part_sort+0xaa>
					res = compare_item[standard.sortByprior[0] - 1](&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002e22:	230c      	movs	r3, #12
 8002e24:	9802      	ldr	r0, [sp, #8]
 8002e26:	4e2f      	ldr	r6, [pc, #188]	; (8002ee4 <part_sort+0x1d4>)
 8002e28:	4358      	muls	r0, r3
 8002e2a:	78f3      	ldrb	r3, [r6, #3]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <part_sort+0x1d8>)
 8002e2e:	4d2f      	ldr	r5, [pc, #188]	; (8002eec <part_sort+0x1dc>)
 8002e30:	3b01      	subs	r3, #1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	0021      	movs	r1, r4
 8002e36:	595b      	ldr	r3, [r3, r5]
 8002e38:	1810      	adds	r0, r2, r0
 8002e3a:	4798      	blx	r3
					if(res == 0){
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d119      	bne.n	8002e74 <part_sort+0x164>
						res = compare_item[standard.sortByprior[1] - 1](&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002e40:	f7fe f9da 	bl	80011f8 <curxy>
 8002e44:	230c      	movs	r3, #12
 8002e46:	4358      	muls	r0, r3
 8002e48:	7933      	ldrb	r3, [r6, #4]
 8002e4a:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <part_sort+0x1d8>)
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	0021      	movs	r1, r4
 8002e52:	595b      	ldr	r3, [r3, r5]
 8002e54:	1810      	adds	r0, r2, r0
 8002e56:	4798      	blx	r3
						if(res == 0){
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d10b      	bne.n	8002e74 <part_sort+0x164>
							res = compare_item[standard.sortByprior[2] - 1](&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]);
 8002e5c:	f7fe f9cc 	bl	80011f8 <curxy>
 8002e60:	230c      	movs	r3, #12
 8002e62:	4358      	muls	r0, r3
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <part_sort+0x1d8>)
 8002e66:	0021      	movs	r1, r4
 8002e68:	1818      	adds	r0, r3, r0
 8002e6a:	7973      	ldrb	r3, [r6, #5]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	595b      	ldr	r3, [r3, r5]
 8002e72:	4798      	blx	r3
							if(res < 0) swapF = 1;
 8002e74:	2800      	cmp	r0, #0
 8002e76:	da08      	bge.n	8002e8a <part_sort+0x17a>
					if(swapF) { part_swap(&pt[curxy()], &pt[calxy(cur.x % 6, cur.y)]); swapF = 0; }
 8002e78:	f7fe f9be 	bl	80011f8 <curxy>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	4358      	muls	r0, r3
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <part_sort+0x1d8>)
 8002e82:	0021      	movs	r1, r4
 8002e84:	18c0      	adds	r0, r0, r3
 8002e86:	f7ff ff35 	bl	8002cf4 <part_swap>
			for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002e8a:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <part_sort+0x1d0>)
 8002e8c:	7813      	ldrb	r3, [r2, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	7013      	strb	r3, [r2, #0]
 8002e92:	e78c      	b.n	8002dae <part_sort+0x9e>
			else temp.x = temp.y = 6;
 8002e94:	2306      	movs	r3, #6
 8002e96:	707b      	strb	r3, [r7, #1]
 8002e98:	703b      	strb	r3, [r7, #0]
 8002e9a:	e76e      	b.n	8002d7a <part_sort+0x6a>
		for(temp.x = 0 ; temp.x < 6;  temp.x++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	703b      	strb	r3, [r7, #0]
 8002ea0:	783d      	ldrb	r5, [r7, #0]
 8002ea2:	2d05      	cmp	r5, #5
 8002ea4:	d902      	bls.n	8002eac <part_sort+0x19c>
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002ea6:	3401      	adds	r4, #1
 8002ea8:	707c      	strb	r4, [r7, #1]
 8002eaa:	e775      	b.n	8002d98 <part_sort+0x88>
			if(pt[curxy()].cate != 0) pt[curxy()].temp = temp;
 8002eac:	f7fe f9a4 	bl	80011f8 <curxy>
 8002eb0:	4370      	muls	r0, r6
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <part_sort+0x1d8>)
 8002eb4:	181a      	adds	r2, r3, r0
 8002eb6:	7911      	ldrb	r1, [r2, #4]
 8002eb8:	4694      	mov	ip, r2
 8002eba:	2900      	cmp	r1, #0
 8002ebc:	d008      	beq.n	8002ed0 <part_sort+0x1c0>
 8002ebe:	0010      	movs	r0, r2
 8002ec0:	0039      	movs	r1, r7
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	300a      	adds	r0, #10
 8002ec6:	f002 fc1b 	bl	8005700 <memcpy>
		for(temp.x = 0 ; temp.x < 6;  temp.x++)
 8002eca:	3501      	adds	r5, #1
 8002ecc:	703d      	strb	r5, [r7, #0]
 8002ece:	e7e7      	b.n	8002ea0 <part_sort+0x190>
			else memset(&pt[curxy()], 0, sizeof(struct Part));
 8002ed0:	0032      	movs	r2, r6
 8002ed2:	4660      	mov	r0, ip
 8002ed4:	f002 fc30 	bl	8005738 <memset>
 8002ed8:	e7f7      	b.n	8002eca <part_sort+0x1ba>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000dd9 	.word	0x20000dd9
 8002ee0:	20000ddb 	.word	0x20000ddb
 8002ee4:	20000dcf 	.word	0x20000dcf
 8002ee8:	20000a48 	.word	0x20000a48
 8002eec:	2000000c 	.word	0x2000000c

08002ef0 <sort_mode>:

volatile void sort_mode(void){
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t byF, cateF;
	if(!firF){
 8002ef2:	4d6e      	ldr	r5, [pc, #440]	; (80030ac <sort_mode+0x1bc>)
volatile void sort_mode(void){
 8002ef4:	b0b5      	sub	sp, #212	; 0xd4
	if(!firF){
 8002ef6:	7829      	ldrb	r1, [r5, #0]
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d000      	beq.n	8002efe <sort_mode+0xe>
 8002efc:	e083      	b.n	8003006 <sort_mode+0x116>
		firF = 1;
 8002efe:	2201      	movs	r2, #1
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002f00:	ab02      	add	r3, sp, #8
 8002f02:	7019      	strb	r1, [r3, #0]
 8002f04:	7099      	strb	r1, [r3, #2]
 8002f06:	486a      	ldr	r0, [pc, #424]	; (80030b0 <sort_mode+0x1c0>)
 8002f08:	3102      	adds	r1, #2
 8002f0a:	7159      	strb	r1, [r3, #5]
 8002f0c:	1889      	adds	r1, r1, r2
 8002f0e:	71d9      	strb	r1, [r3, #7]
 8002f10:	7800      	ldrb	r0, [r0, #0]
 8002f12:	1889      	adds	r1, r1, r2
 8002f14:	7259      	strb	r1, [r3, #9]
 8002f16:	1889      	adds	r1, r1, r2
 8002f18:	70da      	strb	r2, [r3, #3]
 8002f1a:	711a      	strb	r2, [r3, #4]
 8002f1c:	719a      	strb	r2, [r3, #6]
 8002f1e:	721a      	strb	r2, [r3, #8]
 8002f20:	729a      	strb	r2, [r3, #10]
 8002f22:	72d9      	strb	r1, [r3, #11]
 8002f24:	731a      	strb	r2, [r3, #12]
 8002f26:	1889      	adds	r1, r1, r2
 8002f28:	739a      	strb	r2, [r3, #14]
		firF = 1;
 8002f2a:	702a      	strb	r2, [r5, #0]
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002f2c:	3002      	adds	r0, #2
 8002f2e:	3206      	adds	r2, #6
 8002f30:	7359      	strb	r1, [r3, #13]
 8002f32:	7058      	strb	r0, [r3, #1]
 8002f34:	73da      	strb	r2, [r3, #15]
		char bf[5][30];
		sprintf(bf[0], !byF ? "By:(NONE)" : "By:%-5s>%-5s>%-5s", ptBy[standard.sortByprior[0] - 1], ptBy[standard.sortByprior[1] - 1], ptBy[standard.sortByprior[2] - 1]);
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <sort_mode+0x1c4>)
 8002f38:	495f      	ldr	r1, [pc, #380]	; (80030b8 <sort_mode+0x1c8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d000      	beq.n	8002f42 <sort_mode+0x52>
 8002f40:	495e      	ldr	r1, [pc, #376]	; (80030bc <sort_mode+0x1cc>)
 8002f42:	4c5f      	ldr	r4, [pc, #380]	; (80030c0 <sort_mode+0x1d0>)
 8002f44:	4e5f      	ldr	r6, [pc, #380]	; (80030c4 <sort_mode+0x1d4>)
 8002f46:	7960      	ldrb	r0, [r4, #5]
 8002f48:	7923      	ldrb	r3, [r4, #4]
 8002f4a:	3801      	subs	r0, #1
 8002f4c:	78e2      	ldrb	r2, [r4, #3]
 8002f4e:	0080      	lsls	r0, r0, #2
 8002f50:	5980      	ldr	r0, [r0, r6]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	3a01      	subs	r2, #1
 8002f56:	9000      	str	r0, [sp, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	599b      	ldr	r3, [r3, r6]
 8002f5e:	5992      	ldr	r2, [r2, r6]
 8002f60:	a80e      	add	r0, sp, #56	; 0x38
 8002f62:	f002 fd11 	bl	8005988 <siprintf>
		sprintf(bf[1], !cateF ? "Cate:(NONE)" : "Cate:%-3s>%-3s>%-3s>%-3s", ptCate[standard.sortCateprior[0] - 1], ptCate[standard.sortCateprior[1] - 1], ptCate[standard.sortCateprior[2] - 1], ptCate[standard.sortCateprior[3] - 1]);
 8002f66:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <sort_mode+0x1d8>)
 8002f68:	4958      	ldr	r1, [pc, #352]	; (80030cc <sort_mode+0x1dc>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d000      	beq.n	8002f72 <sort_mode+0x82>
 8002f70:	4957      	ldr	r1, [pc, #348]	; (80030d0 <sort_mode+0x1e0>)
 8002f72:	2756      	movs	r7, #86	; 0x56
 8002f74:	7a60      	ldrb	r0, [r4, #9]
 8002f76:	4e57      	ldr	r6, [pc, #348]	; (80030d4 <sort_mode+0x1e4>)
 8002f78:	3801      	subs	r0, #1
 8002f7a:	0080      	lsls	r0, r0, #2
 8002f7c:	5980      	ldr	r0, [r0, r6]
 8002f7e:	79e3      	ldrb	r3, [r4, #7]
 8002f80:	79a2      	ldrb	r2, [r4, #6]
 8002f82:	9001      	str	r0, [sp, #4]
 8002f84:	7a20      	ldrb	r0, [r4, #8]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	3801      	subs	r0, #1
 8002f8a:	0080      	lsls	r0, r0, #2
 8002f8c:	5980      	ldr	r0, [r0, r6]
 8002f8e:	3a01      	subs	r2, #1
 8002f90:	9000      	str	r0, [sp, #0]
 8002f92:	446f      	add	r7, sp
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	599b      	ldr	r3, [r3, r6]
 8002f9a:	5992      	ldr	r2, [r2, r6]
 8002f9c:	0038      	movs	r0, r7
 8002f9e:	f002 fcf3 	bl	8005988 <siprintf>
		sprintf(bf[2], "Name:%s", ptSort[standard.sortNameF]);
 8002fa2:	7823      	ldrb	r3, [r4, #0]
 8002fa4:	4a4c      	ldr	r2, [pc, #304]	; (80030d8 <sort_mode+0x1e8>)
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	ae1d      	add	r6, sp, #116	; 0x74
 8002faa:	589a      	ldr	r2, [r3, r2]
 8002fac:	494b      	ldr	r1, [pc, #300]	; (80030dc <sort_mode+0x1ec>)
 8002fae:	0030      	movs	r0, r6
 8002fb0:	f002 fcea 	bl	8005988 <siprintf>
		sprintf(bf[3], "Store:%s", ptSort[standard.sortStoreF]);
 8002fb4:	7863      	ldrb	r3, [r4, #1]
 8002fb6:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <sort_mode+0x1e8>)
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	589a      	ldr	r2, [r3, r2]
 8002fbc:	2392      	movs	r3, #146	; 0x92
 8002fbe:	446b      	add	r3, sp
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	4947      	ldr	r1, [pc, #284]	; (80030e0 <sort_mode+0x1f0>)
 8002fc4:	f002 fce0 	bl	8005988 <siprintf>
		sprintf(bf[4], "Option:Type %d", standard.sortTypeF + 1);
 8002fc8:	78a2      	ldrb	r2, [r4, #2]
 8002fca:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fcc:	4945      	ldr	r1, [pc, #276]	; (80030e4 <sort_mode+0x1f4>)
 8002fce:	3201      	adds	r2, #1
 8002fd0:	0020      	movs	r0, r4
 8002fd2:	f002 fcd9 	bl	8005988 <siprintf>
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fd6:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <sort_mode+0x1f8>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fd8:	4944      	ldr	r1, [pc, #272]	; (80030ec <sort_mode+0x1fc>)
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fda:	9306      	str	r3, [sp, #24]
 8002fdc:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <sort_mode+0x200>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fde:	aa06      	add	r2, sp, #24
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fe0:	9307      	str	r3, [sp, #28]
 8002fe2:	ab0e      	add	r3, sp, #56	; 0x38
 8002fe4:	9308      	str	r3, [sp, #32]
 8002fe6:	2392      	movs	r3, #146	; 0x92
 8002fe8:	446b      	add	r3, sp
 8002fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <sort_mode+0x204>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fee:	a802      	add	r0, sp, #8
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002ff0:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	3b07      	subs	r3, #7
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002ff8:	9709      	str	r7, [sp, #36]	; 0x24
 8002ffa:	960a      	str	r6, [sp, #40]	; 0x28
 8002ffc:	940c      	str	r4, [sp, #48]	; 0x30
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002ffe:	f7fe f977 	bl	80012f0 <array_puts>
		SSD1306_UpdateScreen();
 8003002:	f7fd ff17 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	get_adc();
 8003006:	f7fe f99d 	bl	8001344 <get_adc>
	get_sel(&sel, 5, 0, 2);
 800300a:	4c29      	ldr	r4, [pc, #164]	; (80030b0 <sort_mode+0x1c0>)
 800300c:	2302      	movs	r3, #2
 800300e:	2200      	movs	r2, #0
 8003010:	2105      	movs	r1, #5
 8003012:	0020      	movs	r0, r4
 8003014:	f7fe f9c2 	bl	800139c <get_sel>
	if(sel == 2) get_sel(&standard.sortNameF, 1, 0, 1);
 8003018:	7823      	ldrb	r3, [r4, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d105      	bne.n	800302a <sort_mode+0x13a>
 800301e:	3b01      	subs	r3, #1
 8003020:	2200      	movs	r2, #0
 8003022:	0019      	movs	r1, r3
 8003024:	4826      	ldr	r0, [pc, #152]	; (80030c0 <sort_mode+0x1d0>)
 8003026:	f7fe f9b9 	bl	800139c <get_sel>
	if(sel == 3) get_sel(&standard.sortStoreF, 1, 0, 1);
 800302a:	7823      	ldrb	r3, [r4, #0]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d106      	bne.n	800303e <sort_mode+0x14e>
 8003030:	4823      	ldr	r0, [pc, #140]	; (80030c0 <sort_mode+0x1d0>)
 8003032:	3b02      	subs	r3, #2
 8003034:	2200      	movs	r2, #0
 8003036:	0019      	movs	r1, r3
 8003038:	18c0      	adds	r0, r0, r3
 800303a:	f7fe f9af 	bl	800139c <get_sel>
	if(sel == 4) get_sel(&standard.sortTypeF, 1, 0, 1);
 800303e:	7823      	ldrb	r3, [r4, #0]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d106      	bne.n	8003052 <sort_mode+0x162>
 8003044:	481e      	ldr	r0, [pc, #120]	; (80030c0 <sort_mode+0x1d0>)
 8003046:	3b03      	subs	r3, #3
 8003048:	2200      	movs	r2, #0
 800304a:	0019      	movs	r1, r3
 800304c:	3002      	adds	r0, #2
 800304e:	f7fe f9a5 	bl	800139c <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8003052:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <sort_mode+0x208>)
 8003054:	7813      	ldrb	r3, [r2, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <sort_mode+0x170>
 800305a:	2300      	movs	r3, #0
 800305c:	7013      	strb	r3, [r2, #0]
 800305e:	702b      	strb	r3, [r5, #0]
	if(read_sw()){
 8003060:	f7fe f9d2 	bl	8001408 <read_sw>
 8003064:	2800      	cmp	r0, #0
 8003066:	d01e      	beq.n	80030a6 <sort_mode+0x1b6>
		if(sel == 0) { by_set(); byF = 1; }
 8003068:	7823      	ldrb	r3, [r4, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <sort_mode+0x188>
 800306e:	f7ff fd19 	bl	8002aa4 <by_set>
 8003072:	2201      	movs	r2, #1
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <sort_mode+0x1c4>)
 8003076:	701a      	strb	r2, [r3, #0]
		if(sel == 1) { cate_set(); cateF = 1; }
 8003078:	7825      	ldrb	r5, [r4, #0]
 800307a:	2d01      	cmp	r5, #1
 800307c:	d103      	bne.n	8003086 <sort_mode+0x196>
 800307e:	f7ff fd9d 	bl	8002bbc <cate_set>
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <sort_mode+0x1d8>)
 8003084:	701d      	strb	r5, [r3, #0]
		if(sel == 5) { part_sort(); byF = cateF = 0; memset(&standard, 0, sizeof(SORT_STATE)); init_value(); }
 8003086:	7823      	ldrb	r3, [r4, #0]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d10c      	bne.n	80030a6 <sort_mode+0x1b6>
 800308c:	f7ff fe40 	bl	8002d10 <part_sort>
 8003090:	2100      	movs	r1, #0
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <sort_mode+0x1d8>)
 8003094:	220a      	movs	r2, #10
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <sort_mode+0x1c4>)
 800309a:	4809      	ldr	r0, [pc, #36]	; (80030c0 <sort_mode+0x1d0>)
 800309c:	7019      	strb	r1, [r3, #0]
 800309e:	f002 fb4b 	bl	8005738 <memset>
 80030a2:	f7fe f8b5 	bl	8001210 <init_value>
	}
}
 80030a6:	b035      	add	sp, #212	; 0xd4
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	20000018 	.word	0x20000018
 80030b0:	20000dc7 	.word	0x20000dc7
 80030b4:	20000a25 	.word	0x20000a25
 80030b8:	08006d39 	.word	0x08006d39
 80030bc:	08006d0e 	.word	0x08006d0e
 80030c0:	20000dcf 	.word	0x20000dcf
 80030c4:	20000048 	.word	0x20000048
 80030c8:	20000a26 	.word	0x20000a26
 80030cc:	08006d43 	.word	0x08006d43
 80030d0:	08006d20 	.word	0x08006d20
 80030d4:	20000054 	.word	0x20000054
 80030d8:	20000064 	.word	0x20000064
 80030dc:	08006b9b 	.word	0x08006b9b
 80030e0:	08006d4f 	.word	0x08006d4f
 80030e4:	08006d58 	.word	0x08006d58
 80030e8:	08006aa7 	.word	0x08006aa7
 80030ec:	08006d7c 	.word	0x08006d7c
 80030f0:	08006d67 	.word	0x08006d67
 80030f4:	08006bc6 	.word	0x08006bc6
 80030f8:	20000a3c 	.word	0x20000a3c

080030fc <PSDrawers_Initialized>:
void (*play_task[7])(void) = { main_menu, save_mode, use_mode, find_mode, partition_mode, log_mode, sort_mode };

/* Tasks */

void PSDrawers_Initialized(void)
{
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	b085      	sub	sp, #20
	SSD1306_Init();
 8003100:	f7fd fec2 	bl	8000e88 <SSD1306_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8003104:	4866      	ldr	r0, [pc, #408]	; (80032a0 <PSDrawers_Initialized+0x1a4>)
 8003106:	f002 f92b 	bl	8005360 <HAL_TIM_Base_Start_IT>

	/* Write user code here */
	if(start()) time_settting();
 800310a:	f7fe fc19 	bl	8001940 <start>
 800310e:	2800      	cmp	r0, #0
 8003110:	d001      	beq.n	8003116 <PSDrawers_Initialized+0x1a>
 8003112:	f7fe fc73 	bl	80019fc <time_settting>
	init_value();
 8003116:	f7fe f87b 	bl	8001210 <init_value>

	pt[curxy()].name = "A";
 800311a:	240c      	movs	r4, #12
 800311c:	f7fe f86c 	bl	80011f8 <curxy>
 8003120:	4360      	muls	r0, r4
 8003122:	4d60      	ldr	r5, [pc, #384]	; (80032a4 <PSDrawers_Initialized+0x1a8>)
 8003124:	4b60      	ldr	r3, [pc, #384]	; (80032a8 <PSDrawers_Initialized+0x1ac>)
	pt[curxy()].cate = cap + 1;
 8003126:	2702      	movs	r7, #2
	pt[curxy()].name = "A";
 8003128:	5143      	str	r3, [r0, r5]
	pt[curxy()].cate = cap + 1;
 800312a:	f7fe f865 	bl	80011f8 <curxy>
 800312e:	4360      	muls	r0, r4
 8003130:	1828      	adds	r0, r5, r0
 8003132:	7107      	strb	r7, [r0, #4]
	pt[curxy()].store = 20;
 8003134:	f7fe f860 	bl	80011f8 <curxy>
 8003138:	2314      	movs	r3, #20
 800313a:	4360      	muls	r0, r4
 800313c:	1828      	adds	r0, r5, r0
 800313e:	80c3      	strh	r3, [r0, #6]
	pt[curxy()].temp = temp;
 8003140:	f7fe f85a 	bl	80011f8 <curxy>
 8003144:	4360      	muls	r0, r4
 8003146:	4a59      	ldr	r2, [pc, #356]	; (80032ac <PSDrawers_Initialized+0x1b0>)
 8003148:	4e59      	ldr	r6, [pc, #356]	; (80032b0 <PSDrawers_Initialized+0x1b4>)
 800314a:	1810      	adds	r0, r2, r0
 800314c:	0031      	movs	r1, r6
 800314e:	003a      	movs	r2, r7
 8003150:	3008      	adds	r0, #8
 8003152:	f002 fad5 	bl	8005700 <memcpy>

	temp.x++;
 8003156:	7832      	ldrb	r2, [r6, #0]
 8003158:	9201      	str	r2, [sp, #4]
 800315a:	1c53      	adds	r3, r2, #1
	temp.y++;
 800315c:	7872      	ldrb	r2, [r6, #1]
	temp.x++;
 800315e:	7033      	strb	r3, [r6, #0]
	temp.y++;
 8003160:	9202      	str	r2, [sp, #8]
 8003162:	1c53      	adds	r3, r2, #1
	start_check++;
 8003164:	4a53      	ldr	r2, [pc, #332]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
	temp.y++;
 8003166:	7073      	strb	r3, [r6, #1]
	start_check++;
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	1c53      	adds	r3, r2, #1
 800316c:	9203      	str	r2, [sp, #12]
 800316e:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
 8003170:	7013      	strb	r3, [r2, #0]

	pt[curxy()].name = "B";
 8003172:	f7fe f841 	bl	80011f8 <curxy>
 8003176:	4360      	muls	r0, r4
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <PSDrawers_Initialized+0x1bc>)
 800317a:	5143      	str	r3, [r0, r5]
	pt[curxy()].cate = cap + 1;
 800317c:	f7fe f83c 	bl	80011f8 <curxy>
 8003180:	4360      	muls	r0, r4
 8003182:	1828      	adds	r0, r5, r0
 8003184:	7107      	strb	r7, [r0, #4]
	pt[curxy()].store = 20;
 8003186:	f7fe f837 	bl	80011f8 <curxy>
 800318a:	2314      	movs	r3, #20
 800318c:	4360      	muls	r0, r4
 800318e:	1828      	adds	r0, r5, r0
 8003190:	80c3      	strh	r3, [r0, #6]
	pt[curxy()].temp = temp;
 8003192:	f7fe f831 	bl	80011f8 <curxy>
 8003196:	4360      	muls	r0, r4
 8003198:	4b44      	ldr	r3, [pc, #272]	; (80032ac <PSDrawers_Initialized+0x1b0>)
 800319a:	0031      	movs	r1, r6
 800319c:	1818      	adds	r0, r3, r0
 800319e:	003a      	movs	r2, r7
 80031a0:	3008      	adds	r0, #8
 80031a2:	f002 faad 	bl	8005700 <memcpy>

	temp.x++;
 80031a6:	9b01      	ldr	r3, [sp, #4]
	temp.y++;
	start_check++;
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
	temp.x++;
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	7033      	strb	r3, [r6, #0]
	temp.y++;
 80031ae:	9b02      	ldr	r3, [sp, #8]
 80031b0:	19db      	adds	r3, r3, r7
 80031b2:	7073      	strb	r3, [r6, #1]
	start_check++;
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	19db      	adds	r3, r3, r7
 80031b8:	7013      	strb	r3, [r2, #0]

	pt[curxy()].name = "C";
 80031ba:	f7fe f81d 	bl	80011f8 <curxy>
 80031be:	4360      	muls	r0, r4
 80031c0:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <PSDrawers_Initialized+0x1c0>)
 80031c2:	5143      	str	r3, [r0, r5]
	pt[curxy()].cate = etc + 1;
 80031c4:	f7fe f818 	bl	80011f8 <curxy>
 80031c8:	2304      	movs	r3, #4
 80031ca:	4360      	muls	r0, r4
 80031cc:	1828      	adds	r0, r5, r0
 80031ce:	7103      	strb	r3, [r0, #4]
	pt[curxy()].store = 5;
 80031d0:	f7fe f812 	bl	80011f8 <curxy>
 80031d4:	2305      	movs	r3, #5
 80031d6:	4360      	muls	r0, r4
 80031d8:	1828      	adds	r0, r5, r0
 80031da:	80c3      	strh	r3, [r0, #6]
	pt[curxy()].temp = temp;
 80031dc:	f7fe f80c 	bl	80011f8 <curxy>
 80031e0:	4360      	muls	r0, r4
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <PSDrawers_Initialized+0x1b0>)
 80031e4:	0031      	movs	r1, r6
 80031e6:	1818      	adds	r0, r3, r0
 80031e8:	003a      	movs	r2, r7
 80031ea:	3008      	adds	r0, #8
 80031ec:	f002 fa88 	bl	8005700 <memcpy>

	temp.x++;
 80031f0:	9b01      	ldr	r3, [sp, #4]
	temp.y++;
	start_check++;
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
	temp.x++;
 80031f4:	3303      	adds	r3, #3
 80031f6:	7033      	strb	r3, [r6, #0]
	temp.y++;
 80031f8:	9b02      	ldr	r3, [sp, #8]
 80031fa:	3303      	adds	r3, #3
 80031fc:	7073      	strb	r3, [r6, #1]
	start_check++;
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	3303      	adds	r3, #3
 8003202:	7013      	strb	r3, [r2, #0]

	pt[curxy()].name = "D";
 8003204:	f7fd fff8 	bl	80011f8 <curxy>
 8003208:	4360      	muls	r0, r4
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <PSDrawers_Initialized+0x1c4>)
 800320c:	5143      	str	r3, [r0, r5]
	pt[curxy()].cate = ic + 1;
 800320e:	f7fd fff3 	bl	80011f8 <curxy>
 8003212:	2303      	movs	r3, #3
 8003214:	4360      	muls	r0, r4
 8003216:	1828      	adds	r0, r5, r0
 8003218:	7103      	strb	r3, [r0, #4]
	pt[curxy()].store = 10;
 800321a:	f7fd ffed 	bl	80011f8 <curxy>
 800321e:	230a      	movs	r3, #10
 8003220:	4360      	muls	r0, r4
 8003222:	1828      	adds	r0, r5, r0
 8003224:	80c3      	strh	r3, [r0, #6]
	pt[curxy()].temp = temp;
 8003226:	f7fd ffe7 	bl	80011f8 <curxy>
 800322a:	4360      	muls	r0, r4
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <PSDrawers_Initialized+0x1b0>)
 800322e:	0031      	movs	r1, r6
 8003230:	1818      	adds	r0, r3, r0
 8003232:	003a      	movs	r2, r7
 8003234:	3008      	adds	r0, #8
 8003236:	f002 fa63 	bl	8005700 <memcpy>

	temp.x++;
 800323a:	9b01      	ldr	r3, [sp, #4]
	temp.y++;
	start_check++;
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
	temp.x++;
 800323e:	3304      	adds	r3, #4
 8003240:	7033      	strb	r3, [r6, #0]
	temp.y++;
 8003242:	9b02      	ldr	r3, [sp, #8]
 8003244:	3304      	adds	r3, #4
 8003246:	7073      	strb	r3, [r6, #1]
	start_check++;
 8003248:	9b03      	ldr	r3, [sp, #12]
 800324a:	3304      	adds	r3, #4
 800324c:	7013      	strb	r3, [r2, #0]

	pt[curxy()].name = "E";
 800324e:	f7fd ffd3 	bl	80011f8 <curxy>
 8003252:	4360      	muls	r0, r4
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <PSDrawers_Initialized+0x1c8>)
 8003256:	5143      	str	r3, [r0, r5]
	pt[curxy()].cate = res + 1;
 8003258:	f7fd ffce 	bl	80011f8 <curxy>
 800325c:	2301      	movs	r3, #1
 800325e:	4360      	muls	r0, r4
 8003260:	1828      	adds	r0, r5, r0
 8003262:	7103      	strb	r3, [r0, #4]
	pt[curxy()].store = 25;
 8003264:	f7fd ffc8 	bl	80011f8 <curxy>
 8003268:	2319      	movs	r3, #25
 800326a:	4360      	muls	r0, r4
 800326c:	182d      	adds	r5, r5, r0
 800326e:	80eb      	strh	r3, [r5, #6]
	pt[curxy()].temp = temp;
 8003270:	f7fd ffc2 	bl	80011f8 <curxy>
 8003274:	4344      	muls	r4, r0
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <PSDrawers_Initialized+0x1b0>)
 8003278:	003a      	movs	r2, r7
 800327a:	191c      	adds	r4, r3, r4
 800327c:	0020      	movs	r0, r4
 800327e:	0031      	movs	r1, r6
 8003280:	3008      	adds	r0, #8
 8003282:	f002 fa3d 	bl	8005700 <memcpy>

	temp.x++;
 8003286:	9b01      	ldr	r3, [sp, #4]
	temp.y++;
	start_check++;
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <PSDrawers_Initialized+0x1b8>)
	temp.x++;
 800328a:	3305      	adds	r3, #5
 800328c:	7033      	strb	r3, [r6, #0]
	temp.y++;
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	3305      	adds	r3, #5
 8003292:	7073      	strb	r3, [r6, #1]
	start_check++;
 8003294:	9b03      	ldr	r3, [sp, #12]
 8003296:	3305      	adds	r3, #5
 8003298:	7013      	strb	r3, [r2, #0]
}
 800329a:	b005      	add	sp, #20
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	200005d0 	.word	0x200005d0
 80032a4:	20000a48 	.word	0x20000a48
 80032a8:	08006d82 	.word	0x08006d82
 80032ac:	20000a4a 	.word	0x20000a4a
 80032b0:	20000ddb 	.word	0x20000ddb
 80032b4:	20000dd9 	.word	0x20000dd9
 80032b8:	08006d84 	.word	0x08006d84
 80032bc:	08006dce 	.word	0x08006dce
 80032c0:	08006dbe 	.word	0x08006dbe
 80032c4:	08006db9 	.word	0x08006db9

080032c8 <PSDrawers_Main>:

void PSDrawers_Main(void)
{
 80032c8:	b510      	push	{r4, lr}
	while(1)
	{
		/* Write user code here */
		play_task[ModeF]();
 80032ca:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <PSDrawers_Main+0x10>)
 80032cc:	4a03      	ldr	r2, [pc, #12]	; (80032dc <PSDrawers_Main+0x14>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	589b      	ldr	r3, [r3, r2]
 80032d4:	4798      	blx	r3
	while(1)
 80032d6:	e7f8      	b.n	80032ca <PSDrawers_Main+0x2>
 80032d8:	20000a1c 	.word	0x20000a1c
 80032dc:	2000002c 	.word	0x2000002c

080032e0 <HAL_TIM_PeriodElapsedCallback>:

/* Callbacks */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	6802      	ldr	r2, [r0, #0]
{
 80032e4:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM2)
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d14a      	bne.n	8003382 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_ADC_Start(&hadc);
 80032ec:	4c2d      	ldr	r4, [pc, #180]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032ee:	0020      	movs	r0, r4
 80032f0:	f000 fa7e 	bl	80037f0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 80032f4:	210a      	movs	r1, #10
 80032f6:	0020      	movs	r0, r4
 80032f8:	f000 fac4 	bl	8003884 <HAL_ADC_PollForConversion>
		adcV[0] = HAL_ADC_GetValue(&hadc);
 80032fc:	0020      	movs	r0, r4
 80032fe:	f000 fb25 	bl	800394c <HAL_ADC_GetValue>
 8003302:	4d29      	ldr	r5, [pc, #164]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8003304:	210a      	movs	r1, #10
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8003306:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8003308:	0020      	movs	r0, r4
 800330a:	f000 fabb 	bl	8003884 <HAL_ADC_PollForConversion>
		adcV[1] = HAL_ADC_GetValue(&hadc);
 800330e:	0020      	movs	r0, r4
 8003310:	f000 fb1c 	bl	800394c <HAL_ADC_GetValue>
 8003314:	8068      	strh	r0, [r5, #2]
		HAL_ADC_Stop(&hadc);
 8003316:	0020      	movs	r0, r4
 8003318:	f000 fa96 	bl	8003848 <HAL_ADC_Stop>
		cnt++;
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
		if(buzM) buzC++;
 800331e:	4d24      	ldr	r5, [pc, #144]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		cnt++;
 8003320:	8813      	ldrh	r3, [r2, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	8013      	strh	r3, [r2, #0]
		if(buzM) buzC++;
 8003326:	782a      	ldrb	r2, [r5, #0]
 8003328:	2a00      	cmp	r2, #0
 800332a:	d01c      	beq.n	8003366 <HAL_TIM_PeriodElapsedCallback+0x86>
 800332c:	4c21      	ldr	r4, [pc, #132]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800332e:	8823      	ldrh	r3, [r4, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	8023      	strh	r3, [r4, #0]
		if(buzM == 1){
 8003336:	2a01      	cmp	r2, #1
 8003338:	d109      	bne.n	800334e <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(buzC < 500) BUZ(1);
 800333a:	21fa      	movs	r1, #250	; 0xfa
 800333c:	0049      	lsls	r1, r1, #1
 800333e:	428b      	cmp	r3, r1
 8003340:	d220      	bcs.n	8003384 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8003342:	39ed      	subs	r1, #237	; 0xed
 8003344:	39ff      	subs	r1, #255	; 0xff
			else { buzM = buzC = 0; BUZ(0); }
 8003346:	20a0      	movs	r0, #160	; 0xa0
 8003348:	05c0      	lsls	r0, r0, #23
 800334a:	f000 fe19 	bl	8003f80 <HAL_GPIO_WritePin>
		}
		if(buzM == 2){
 800334e:	782b      	ldrb	r3, [r5, #0]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d108      	bne.n	8003366 <HAL_TIM_PeriodElapsedCallback+0x86>
			if(buzC < 25) BUZ(1);
 8003354:	8823      	ldrh	r3, [r4, #0]
 8003356:	2b18      	cmp	r3, #24
 8003358:	d819      	bhi.n	800338e <HAL_TIM_PeriodElapsedCallback+0xae>
 800335a:	2201      	movs	r2, #1
			else if(buzC < 50) BUZ(0);
			else if(buzC < 75) BUZ(1);
			else { buzM = buzC = 0; BUZ(0); }
 800335c:	20a0      	movs	r0, #160	; 0xa0
 800335e:	2108      	movs	r1, #8
 8003360:	05c0      	lsls	r0, r0, #23
 8003362:	f000 fe0d 	bl	8003f80 <HAL_GPIO_WritePin>
		}
		if(ledM) ledC = ledC < 1000 ? ledC + 1 : 0;
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8003370:	20fa      	movs	r0, #250	; 0xfa
 8003372:	8813      	ldrh	r3, [r2, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	0080      	lsls	r0, r0, #2
 8003378:	4283      	cmp	r3, r0
 800337a:	d201      	bcs.n	8003380 <HAL_TIM_PeriodElapsedCallback+0xa0>
 800337c:	3301      	adds	r3, #1
 800337e:	b299      	uxth	r1, r3
 8003380:	8011      	strh	r1, [r2, #0]
		else ledC = 0;
	}
}
 8003382:	bd70      	pop	{r4, r5, r6, pc}
			else { buzM = buzC = 0; BUZ(0); }
 8003384:	2200      	movs	r2, #0
 8003386:	2108      	movs	r1, #8
 8003388:	8022      	strh	r2, [r4, #0]
 800338a:	702a      	strb	r2, [r5, #0]
 800338c:	e7db      	b.n	8003346 <HAL_TIM_PeriodElapsedCallback+0x66>
			else if(buzC < 50) BUZ(0);
 800338e:	2200      	movs	r2, #0
 8003390:	2b31      	cmp	r3, #49	; 0x31
 8003392:	d9e3      	bls.n	800335c <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(buzC < 75) BUZ(1);
 8003394:	2b4a      	cmp	r3, #74	; 0x4a
 8003396:	d9e0      	bls.n	800335a <HAL_TIM_PeriodElapsedCallback+0x7a>
			else { buzM = buzC = 0; BUZ(0); }
 8003398:	2200      	movs	r2, #0
 800339a:	8022      	strh	r2, [r4, #0]
 800339c:	702a      	strb	r2, [r5, #0]
 800339e:	e7dd      	b.n	800335c <HAL_TIM_PeriodElapsedCallback+0x7c>
		else ledC = 0;
 80033a0:	8013      	strh	r3, [r2, #0]
}
 80033a2:	e7ee      	b.n	8003382 <HAL_TIM_PeriodElapsedCallback+0xa2>
 80033a4:	20000488 	.word	0x20000488
 80033a8:	20000a1e 	.word	0x20000a1e
 80033ac:	20000a2a 	.word	0x20000a2a
 80033b0:	20000a24 	.word	0x20000a24
 80033b4:	20000a22 	.word	0x20000a22
 80033b8:	20000a40 	.word	0x20000a40
 80033bc:	20000a3e 	.word	0x20000a3e

080033c0 <Reset_Handler>:
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <LoopForever+0x2>)
 80033c2:	4685      	mov	sp, r0
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <LoopForever+0x6>)
 80033c6:	490e      	ldr	r1, [pc, #56]	; (8003400 <LoopForever+0xa>)
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <LoopForever+0xe>)
 80033ca:	2300      	movs	r3, #0
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:
 80033ce:	58d4      	ldr	r4, [r2, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:
 80033d4:	18c4      	adds	r4, r0, r3
 80033d6:	428c      	cmp	r4, r1
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <LoopForever+0x12>)
 80033dc:	4c0b      	ldr	r4, [pc, #44]	; (800340c <LoopForever+0x16>)
 80033de:	2300      	movs	r3, #0
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:
 80033e6:	42a2      	cmp	r2, r4
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>
 80033ea:	f7fd ff03 	bl	80011f4 <SystemInit>
 80033ee:	f002 f959 	bl	80056a4 <__libc_init_array>
 80033f2:	f7fd fa4b 	bl	800088c <main>

080033f6 <LoopForever>:
 80033f6:	e7fe      	b.n	80033f6 <LoopForever>
 80033f8:	20002000 	.word	0x20002000
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000108 	.word	0x20000108
 8003404:	08006e60 	.word	0x08006e60
 8003408:	20000108 	.word	0x20000108
 800340c:	20000e0c 	.word	0x20000e0c

08003410 <ADC1_COMP_IRQHandler>:
 8003410:	e7fe      	b.n	8003410 <ADC1_COMP_IRQHandler>
	...

08003414 <HAL_InitTick>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	0005      	movs	r5, r0
 8003418:	20fa      	movs	r0, #250	; 0xfa
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_InitTick+0x3c>)
 800341c:	0080      	lsls	r0, r0, #2
 800341e:	7819      	ldrb	r1, [r3, #0]
 8003420:	f7fc fe90 	bl	8000144 <__udivsi3>
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_InitTick+0x40>)
 8003426:	0001      	movs	r1, r0
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	f7fc fe8b 	bl	8000144 <__udivsi3>
 800342e:	f000 fb1b 	bl	8003a68 <HAL_SYSTICK_Config>
 8003432:	0004      	movs	r4, r0
 8003434:	2001      	movs	r0, #1
 8003436:	2c00      	cmp	r4, #0
 8003438:	d109      	bne.n	800344e <HAL_InitTick+0x3a>
 800343a:	2d03      	cmp	r5, #3
 800343c:	d807      	bhi.n	800344e <HAL_InitTick+0x3a>
 800343e:	3802      	subs	r0, #2
 8003440:	0022      	movs	r2, r4
 8003442:	0029      	movs	r1, r5
 8003444:	f000 fada 	bl	80039fc <HAL_NVIC_SetPriority>
 8003448:	0020      	movs	r0, r4
 800344a:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_InitTick+0x44>)
 800344c:	601d      	str	r5, [r3, #0]
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	2000009c 	.word	0x2000009c
 8003454:	20000008 	.word	0x20000008
 8003458:	200000a0 	.word	0x200000a0

0800345c <HAL_Init>:
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	4a08      	ldr	r2, [pc, #32]	; (8003480 <HAL_Init+0x24>)
 8003460:	b510      	push	{r4, lr}
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	2003      	movs	r0, #3
 8003466:	430b      	orrs	r3, r1
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	f7ff ffd3 	bl	8003414 <HAL_InitTick>
 800346e:	1e04      	subs	r4, r0, #0
 8003470:	d103      	bne.n	800347a <HAL_Init+0x1e>
 8003472:	f7fd fdcf 	bl	8001014 <HAL_MspInit>
 8003476:	0020      	movs	r0, r4
 8003478:	bd10      	pop	{r4, pc}
 800347a:	2401      	movs	r4, #1
 800347c:	e7fb      	b.n	8003476 <HAL_Init+0x1a>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	40022000 	.word	0x40022000

08003484 <HAL_IncTick>:
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_IncTick+0x10>)
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_IncTick+0x14>)
 8003488:	6811      	ldr	r1, [r2, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	185b      	adds	r3, r3, r1
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4770      	bx	lr
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000de0 	.word	0x20000de0
 8003498:	2000009c 	.word	0x2000009c

0800349c <HAL_GetTick>:
 800349c:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <HAL_GetTick+0x8>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	4770      	bx	lr
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000de0 	.word	0x20000de0

080034a8 <HAL_Delay>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	0004      	movs	r4, r0
 80034ac:	f7ff fff6 	bl	800349c <HAL_GetTick>
 80034b0:	0005      	movs	r5, r0
 80034b2:	1c63      	adds	r3, r4, #1
 80034b4:	d002      	beq.n	80034bc <HAL_Delay+0x14>
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_Delay+0x20>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	18e4      	adds	r4, r4, r3
 80034bc:	f7ff ffee 	bl	800349c <HAL_GetTick>
 80034c0:	1b40      	subs	r0, r0, r5
 80034c2:	42a0      	cmp	r0, r4
 80034c4:	d3fa      	bcc.n	80034bc <HAL_Delay+0x14>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	2000009c 	.word	0x2000009c

080034cc <ADC_DelayMicroSecond>:
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <ADC_DelayMicroSecond+0x24>)
 80034ce:	b513      	push	{r0, r1, r4, lr}
 80034d0:	0004      	movs	r4, r0
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <ADC_DelayMicroSecond+0x28>)
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f7fc fe35 	bl	8000144 <__udivsi3>
 80034da:	4344      	muls	r4, r0
 80034dc:	9401      	str	r4, [sp, #4]
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <ADC_DelayMicroSecond+0x1a>
 80034e4:	bd13      	pop	{r0, r1, r4, pc}
 80034e6:	9b01      	ldr	r3, [sp, #4]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	e7f7      	b.n	80034de <ADC_DelayMicroSecond+0x12>
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	20000008 	.word	0x20000008
 80034f4:	000f4240 	.word	0x000f4240

080034f8 <ADC_Disable>:
 80034f8:	2103      	movs	r1, #3
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	0004      	movs	r4, r0
 8003500:	6898      	ldr	r0, [r3, #8]
 8003502:	4008      	ands	r0, r1
 8003504:	2801      	cmp	r0, #1
 8003506:	d001      	beq.n	800350c <ADC_Disable+0x14>
 8003508:	2000      	movs	r0, #0
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4202      	tst	r2, r0
 8003510:	d0fa      	beq.n	8003508 <ADC_Disable+0x10>
 8003512:	2205      	movs	r2, #5
 8003514:	689d      	ldr	r5, [r3, #8]
 8003516:	4015      	ands	r5, r2
 8003518:	2d01      	cmp	r5, #1
 800351a:	d11d      	bne.n	8003558 <ADC_Disable+0x60>
 800351c:	6898      	ldr	r0, [r3, #8]
 800351e:	3a03      	subs	r2, #3
 8003520:	4302      	orrs	r2, r0
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	6019      	str	r1, [r3, #0]
 8003526:	f7ff ffb9 	bl	800349c <HAL_GetTick>
 800352a:	0006      	movs	r6, r0
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	422b      	tst	r3, r5
 8003532:	d0e9      	beq.n	8003508 <ADC_Disable+0x10>
 8003534:	f7ff ffb2 	bl	800349c <HAL_GetTick>
 8003538:	1b80      	subs	r0, r0, r6
 800353a:	280a      	cmp	r0, #10
 800353c:	d9f6      	bls.n	800352c <ADC_Disable+0x34>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	422b      	tst	r3, r5
 8003544:	d0f2      	beq.n	800352c <ADC_Disable+0x34>
 8003546:	2310      	movs	r3, #16
 8003548:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800354a:	2001      	movs	r0, #1
 800354c:	4313      	orrs	r3, r2
 800354e:	6563      	str	r3, [r4, #84]	; 0x54
 8003550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003552:	431d      	orrs	r5, r3
 8003554:	65a5      	str	r5, [r4, #88]	; 0x58
 8003556:	e7d8      	b.n	800350a <ADC_Disable+0x12>
 8003558:	2310      	movs	r3, #16
 800355a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800355c:	4313      	orrs	r3, r2
 800355e:	6563      	str	r3, [r4, #84]	; 0x54
 8003560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003562:	4303      	orrs	r3, r0
 8003564:	65a3      	str	r3, [r4, #88]	; 0x58
 8003566:	e7d0      	b.n	800350a <ADC_Disable+0x12>

08003568 <ADC_Enable>:
 8003568:	2103      	movs	r1, #3
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	0004      	movs	r4, r0
 8003572:	400a      	ands	r2, r1
 8003574:	2a01      	cmp	r2, #1
 8003576:	d104      	bne.n	8003582 <ADC_Enable+0x1a>
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	4211      	tst	r1, r2
 800357c:	d001      	beq.n	8003582 <ADC_Enable+0x1a>
 800357e:	2000      	movs	r0, #0
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <ADC_Enable+0x74>)
 8003586:	4211      	tst	r1, r2
 8003588:	d008      	beq.n	800359c <ADC_Enable+0x34>
 800358a:	2310      	movs	r3, #16
 800358c:	2001      	movs	r0, #1
 800358e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003590:	4313      	orrs	r3, r2
 8003592:	6563      	str	r3, [r4, #84]	; 0x54
 8003594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003596:	4303      	orrs	r3, r0
 8003598:	65a3      	str	r3, [r4, #88]	; 0x58
 800359a:	e7f1      	b.n	8003580 <ADC_Enable+0x18>
 800359c:	2501      	movs	r5, #1
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	0028      	movs	r0, r5
 80035a2:	432a      	orrs	r2, r5
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	f7ff ff91 	bl	80034cc <ADC_DelayMicroSecond>
 80035aa:	f7ff ff77 	bl	800349c <HAL_GetTick>
 80035ae:	0006      	movs	r6, r0
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	422b      	tst	r3, r5
 80035b6:	d1e2      	bne.n	800357e <ADC_Enable+0x16>
 80035b8:	f7ff ff70 	bl	800349c <HAL_GetTick>
 80035bc:	1b80      	subs	r0, r0, r6
 80035be:	280a      	cmp	r0, #10
 80035c0:	d9f6      	bls.n	80035b0 <ADC_Enable+0x48>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	422b      	tst	r3, r5
 80035c8:	d1f2      	bne.n	80035b0 <ADC_Enable+0x48>
 80035ca:	2310      	movs	r3, #16
 80035cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80035ce:	2001      	movs	r0, #1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	6563      	str	r3, [r4, #84]	; 0x54
 80035d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035d6:	431d      	orrs	r5, r3
 80035d8:	65a5      	str	r5, [r4, #88]	; 0x58
 80035da:	e7d1      	b.n	8003580 <ADC_Enable+0x18>
 80035dc:	80000017 	.word	0x80000017

080035e0 <ADC_ConversionStop>:
 80035e0:	2204      	movs	r2, #4
 80035e2:	6803      	ldr	r3, [r0, #0]
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	6899      	ldr	r1, [r3, #8]
 80035e8:	0004      	movs	r4, r0
 80035ea:	4211      	tst	r1, r2
 80035ec:	d101      	bne.n	80035f2 <ADC_ConversionStop+0x12>
 80035ee:	2000      	movs	r0, #0
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	4211      	tst	r1, r2
 80035f6:	d006      	beq.n	8003606 <ADC_ConversionStop+0x26>
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	0792      	lsls	r2, r2, #30
 80035fc:	d403      	bmi.n	8003606 <ADC_ConversionStop+0x26>
 80035fe:	2210      	movs	r2, #16
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	f7ff ff49 	bl	800349c <HAL_GetTick>
 800360a:	2604      	movs	r6, #4
 800360c:	0005      	movs	r5, r0
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4233      	tst	r3, r6
 8003614:	d0eb      	beq.n	80035ee <ADC_ConversionStop+0xe>
 8003616:	f7ff ff41 	bl	800349c <HAL_GetTick>
 800361a:	1b40      	subs	r0, r0, r5
 800361c:	280a      	cmp	r0, #10
 800361e:	d9f6      	bls.n	800360e <ADC_ConversionStop+0x2e>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4233      	tst	r3, r6
 8003626:	d0f2      	beq.n	800360e <ADC_ConversionStop+0x2e>
 8003628:	2310      	movs	r3, #16
 800362a:	2001      	movs	r0, #1
 800362c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800362e:	4313      	orrs	r3, r2
 8003630:	6563      	str	r3, [r4, #84]	; 0x54
 8003632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003634:	4303      	orrs	r3, r0
 8003636:	65a3      	str	r3, [r4, #88]	; 0x58
 8003638:	e7da      	b.n	80035f0 <ADC_ConversionStop+0x10>
	...

0800363c <HAL_ADC_Init>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	0004      	movs	r4, r0
 8003640:	2001      	movs	r0, #1
 8003642:	2c00      	cmp	r4, #0
 8003644:	d01b      	beq.n	800367e <HAL_ADC_Init+0x42>
 8003646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_ADC_Init+0x1e>
 800364c:	0022      	movs	r2, r4
 800364e:	3250      	adds	r2, #80	; 0x50
 8003650:	65a3      	str	r3, [r4, #88]	; 0x58
 8003652:	0020      	movs	r0, r4
 8003654:	7013      	strb	r3, [r2, #0]
 8003656:	f7fd fceb 	bl	8001030 <HAL_ADC_MspInit>
 800365a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800365c:	06db      	lsls	r3, r3, #27
 800365e:	d406      	bmi.n	800366e <HAL_ADC_Init+0x32>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	2204      	movs	r2, #4
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	0008      	movs	r0, r1
 8003668:	4010      	ands	r0, r2
 800366a:	4211      	tst	r1, r2
 800366c:	d008      	beq.n	8003680 <HAL_ADC_Init+0x44>
 800366e:	2310      	movs	r3, #16
 8003670:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003672:	2001      	movs	r0, #1
 8003674:	4313      	orrs	r3, r2
 8003676:	6563      	str	r3, [r4, #84]	; 0x54
 8003678:	2300      	movs	r3, #0
 800367a:	3450      	adds	r4, #80	; 0x50
 800367c:	7023      	strb	r3, [r4, #0]
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003682:	4955      	ldr	r1, [pc, #340]	; (80037d8 <HAL_ADC_Init+0x19c>)
 8003684:	4011      	ands	r1, r2
 8003686:	2202      	movs	r2, #2
 8003688:	430a      	orrs	r2, r1
 800368a:	6562      	str	r2, [r4, #84]	; 0x54
 800368c:	2203      	movs	r2, #3
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	4011      	ands	r1, r2
 8003692:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_ADC_Init+0x1a0>)
 8003694:	2901      	cmp	r1, #1
 8003696:	d102      	bne.n	800369e <HAL_ADC_Init+0x62>
 8003698:	681d      	ldr	r5, [r3, #0]
 800369a:	420d      	tst	r5, r1
 800369c:	d119      	bne.n	80036d2 <HAL_ADC_Init+0x96>
 800369e:	2680      	movs	r6, #128	; 0x80
 80036a0:	6861      	ldr	r1, [r4, #4]
 80036a2:	05f6      	lsls	r6, r6, #23
 80036a4:	004d      	lsls	r5, r1, #1
 80036a6:	086d      	lsrs	r5, r5, #1
 80036a8:	42b5      	cmp	r5, r6
 80036aa:	d003      	beq.n	80036b4 <HAL_ADC_Init+0x78>
 80036ac:	2580      	movs	r5, #128	; 0x80
 80036ae:	062d      	lsls	r5, r5, #24
 80036b0:	42a9      	cmp	r1, r5
 80036b2:	d176      	bne.n	80037a2 <HAL_ADC_Init+0x166>
 80036b4:	691d      	ldr	r5, [r3, #16]
 80036b6:	00ad      	lsls	r5, r5, #2
 80036b8:	08ad      	lsrs	r5, r5, #2
 80036ba:	611d      	str	r5, [r3, #16]
 80036bc:	691d      	ldr	r5, [r3, #16]
 80036be:	4329      	orrs	r1, r5
 80036c0:	6119      	str	r1, [r3, #16]
 80036c2:	2518      	movs	r5, #24
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	43a9      	bics	r1, r5
 80036c8:	60d9      	str	r1, [r3, #12]
 80036ca:	68d9      	ldr	r1, [r3, #12]
 80036cc:	68a5      	ldr	r5, [r4, #8]
 80036ce:	4329      	orrs	r1, r5
 80036d0:	60d9      	str	r1, [r3, #12]
 80036d2:	6811      	ldr	r1, [r2, #0]
 80036d4:	4d42      	ldr	r5, [pc, #264]	; (80037e0 <HAL_ADC_Init+0x1a4>)
 80036d6:	4029      	ands	r1, r5
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036dc:	6815      	ldr	r5, [r2, #0]
 80036de:	0649      	lsls	r1, r1, #25
 80036e0:	4329      	orrs	r1, r5
 80036e2:	6011      	str	r1, [r2, #0]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	0552      	lsls	r2, r2, #21
 80036ea:	4211      	tst	r1, r2
 80036ec:	d102      	bne.n	80036f4 <HAL_ADC_Init+0xb8>
 80036ee:	6899      	ldr	r1, [r3, #8]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	493b      	ldr	r1, [pc, #236]	; (80037e4 <HAL_ADC_Init+0x1a8>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	6921      	ldr	r1, [r4, #16]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	68dd      	ldr	r5, [r3, #12]
 8003700:	68e2      	ldr	r2, [r4, #12]
 8003702:	2902      	cmp	r1, #2
 8003704:	d100      	bne.n	8003708 <HAL_ADC_Init+0xcc>
 8003706:	2004      	movs	r0, #4
 8003708:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800370a:	1c61      	adds	r1, r4, #1
 800370c:	4332      	orrs	r2, r6
 800370e:	432a      	orrs	r2, r5
 8003710:	69a5      	ldr	r5, [r4, #24]
 8003712:	7fc9      	ldrb	r1, [r1, #31]
 8003714:	03ad      	lsls	r5, r5, #14
 8003716:	432a      	orrs	r2, r5
 8003718:	69e5      	ldr	r5, [r4, #28]
 800371a:	03ed      	lsls	r5, r5, #15
 800371c:	432a      	orrs	r2, r5
 800371e:	034d      	lsls	r5, r1, #13
 8003720:	432a      	orrs	r2, r5
 8003722:	0025      	movs	r5, r4
 8003724:	352c      	adds	r5, #44	; 0x2c
 8003726:	782d      	ldrb	r5, [r5, #0]
 8003728:	006d      	lsls	r5, r5, #1
 800372a:	432a      	orrs	r2, r5
 800372c:	4302      	orrs	r2, r0
 800372e:	20c2      	movs	r0, #194	; 0xc2
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003734:	30ff      	adds	r0, #255	; 0xff
 8003736:	4282      	cmp	r2, r0
 8003738:	d004      	beq.n	8003744 <HAL_ADC_Init+0x108>
 800373a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800373c:	68d8      	ldr	r0, [r3, #12]
 800373e:	432a      	orrs	r2, r5
 8003740:	4302      	orrs	r2, r0
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	1ca2      	adds	r2, r4, #2
 8003746:	7fd2      	ldrb	r2, [r2, #31]
 8003748:	2a01      	cmp	r2, #1
 800374a:	d106      	bne.n	800375a <HAL_ADC_Init+0x11e>
 800374c:	2900      	cmp	r1, #0
 800374e:	d134      	bne.n	80037ba <HAL_ADC_Init+0x17e>
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	68d9      	ldr	r1, [r3, #12]
 8003754:	0252      	lsls	r2, r2, #9
 8003756:	430a      	orrs	r2, r1
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	2901      	cmp	r1, #1
 8003760:	d133      	bne.n	80037ca <HAL_ADC_Init+0x18e>
 8003762:	4821      	ldr	r0, [pc, #132]	; (80037e8 <HAL_ADC_Init+0x1ac>)
 8003764:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003766:	4002      	ands	r2, r0
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800376c:	6918      	ldr	r0, [r3, #16]
 800376e:	432a      	orrs	r2, r5
 8003770:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003772:	432a      	orrs	r2, r5
 8003774:	4302      	orrs	r2, r0
 8003776:	611a      	str	r2, [r3, #16]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	4311      	orrs	r1, r2
 800377c:	6119      	str	r1, [r3, #16]
 800377e:	2107      	movs	r1, #7
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	2000      	movs	r0, #0
 8003784:	438a      	bics	r2, r1
 8003786:	615a      	str	r2, [r3, #20]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800378c:	430a      	orrs	r2, r1
 800378e:	615a      	str	r2, [r3, #20]
 8003790:	2203      	movs	r2, #3
 8003792:	65a0      	str	r0, [r4, #88]	; 0x58
 8003794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003796:	4393      	bics	r3, r2
 8003798:	001a      	movs	r2, r3
 800379a:	2301      	movs	r3, #1
 800379c:	4313      	orrs	r3, r2
 800379e:	6563      	str	r3, [r4, #84]	; 0x54
 80037a0:	e76d      	b.n	800367e <HAL_ADC_Init+0x42>
 80037a2:	691d      	ldr	r5, [r3, #16]
 80037a4:	4e11      	ldr	r6, [pc, #68]	; (80037ec <HAL_ADC_Init+0x1b0>)
 80037a6:	00ad      	lsls	r5, r5, #2
 80037a8:	08ad      	lsrs	r5, r5, #2
 80037aa:	611d      	str	r5, [r3, #16]
 80037ac:	6815      	ldr	r5, [r2, #0]
 80037ae:	4035      	ands	r5, r6
 80037b0:	6015      	str	r5, [r2, #0]
 80037b2:	6815      	ldr	r5, [r2, #0]
 80037b4:	4329      	orrs	r1, r5
 80037b6:	6011      	str	r1, [r2, #0]
 80037b8:	e783      	b.n	80036c2 <HAL_ADC_Init+0x86>
 80037ba:	2120      	movs	r1, #32
 80037bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037be:	4301      	orrs	r1, r0
 80037c0:	6561      	str	r1, [r4, #84]	; 0x54
 80037c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80037c4:	430a      	orrs	r2, r1
 80037c6:	65a2      	str	r2, [r4, #88]	; 0x58
 80037c8:	e7c7      	b.n	800375a <HAL_ADC_Init+0x11e>
 80037ca:	2101      	movs	r1, #1
 80037cc:	420a      	tst	r2, r1
 80037ce:	d0d6      	beq.n	800377e <HAL_ADC_Init+0x142>
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	438a      	bics	r2, r1
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	e7d2      	b.n	800377e <HAL_ADC_Init+0x142>
 80037d8:	fffffefd 	.word	0xfffffefd
 80037dc:	40012708 	.word	0x40012708
 80037e0:	fdffffff 	.word	0xfdffffff
 80037e4:	fffe0219 	.word	0xfffe0219
 80037e8:	fffffc03 	.word	0xfffffc03
 80037ec:	ffc3ffff 	.word	0xffc3ffff

080037f0 <HAL_ADC_Start>:
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	b570      	push	{r4, r5, r6, lr}
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0004      	movs	r4, r0
 80037f8:	2002      	movs	r0, #2
 80037fa:	075b      	lsls	r3, r3, #29
 80037fc:	d41a      	bmi.n	8003834 <HAL_ADC_Start+0x44>
 80037fe:	0025      	movs	r5, r4
 8003800:	3550      	adds	r5, #80	; 0x50
 8003802:	782b      	ldrb	r3, [r5, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d015      	beq.n	8003834 <HAL_ADC_Start+0x44>
 8003808:	2301      	movs	r3, #1
 800380a:	702b      	strb	r3, [r5, #0]
 800380c:	69e3      	ldr	r3, [r4, #28]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d111      	bne.n	8003836 <HAL_ADC_Start+0x46>
 8003812:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <HAL_ADC_Start+0x54>)
 8003816:	2000      	movs	r0, #0
 8003818:	401a      	ands	r2, r3
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4313      	orrs	r3, r2
 8003820:	221c      	movs	r2, #28
 8003822:	6563      	str	r3, [r4, #84]	; 0x54
 8003824:	65a0      	str	r0, [r4, #88]	; 0x58
 8003826:	7028      	strb	r0, [r5, #0]
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	3a18      	subs	r2, #24
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	0020      	movs	r0, r4
 8003838:	f7ff fe96 	bl	8003568 <ADC_Enable>
 800383c:	2800      	cmp	r0, #0
 800383e:	d0e8      	beq.n	8003812 <HAL_ADC_Start+0x22>
 8003840:	e7f8      	b.n	8003834 <HAL_ADC_Start+0x44>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	fffff0fe 	.word	0xfffff0fe

08003848 <HAL_ADC_Stop>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	0006      	movs	r6, r0
 800384c:	3650      	adds	r6, #80	; 0x50
 800384e:	7833      	ldrb	r3, [r6, #0]
 8003850:	0004      	movs	r4, r0
 8003852:	2002      	movs	r0, #2
 8003854:	2b01      	cmp	r3, #1
 8003856:	d012      	beq.n	800387e <HAL_ADC_Stop+0x36>
 8003858:	2501      	movs	r5, #1
 800385a:	0020      	movs	r0, r4
 800385c:	7035      	strb	r5, [r6, #0]
 800385e:	f7ff febf 	bl	80035e0 <ADC_ConversionStop>
 8003862:	2800      	cmp	r0, #0
 8003864:	d109      	bne.n	800387a <HAL_ADC_Stop+0x32>
 8003866:	0020      	movs	r0, r4
 8003868:	f7ff fe46 	bl	80034f8 <ADC_Disable>
 800386c:	2800      	cmp	r0, #0
 800386e:	d104      	bne.n	800387a <HAL_ADC_Stop+0x32>
 8003870:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <HAL_ADC_Stop+0x38>)
 8003874:	4013      	ands	r3, r2
 8003876:	431d      	orrs	r5, r3
 8003878:	6565      	str	r5, [r4, #84]	; 0x54
 800387a:	2300      	movs	r3, #0
 800387c:	7033      	strb	r3, [r6, #0]
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	fffffefe 	.word	0xfffffefe

08003884 <HAL_ADC_PollForConversion>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	6945      	ldr	r5, [r0, #20]
 8003888:	0004      	movs	r4, r0
 800388a:	000e      	movs	r6, r1
 800388c:	2d08      	cmp	r5, #8
 800388e:	d00d      	beq.n	80038ac <HAL_ADC_PollForConversion+0x28>
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	2001      	movs	r0, #1
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	250c      	movs	r5, #12
 8003898:	4203      	tst	r3, r0
 800389a:	d007      	beq.n	80038ac <HAL_ADC_PollForConversion+0x28>
 800389c:	2320      	movs	r3, #32
 800389e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038a0:	3450      	adds	r4, #80	; 0x50
 80038a2:	4313      	orrs	r3, r2
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	2300      	movs	r3, #0
 80038a8:	7023      	strb	r3, [r4, #0]
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	f7ff fdf6 	bl	800349c <HAL_GetTick>
 80038b0:	0007      	movs	r7, r0
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4215      	tst	r5, r2
 80038b8:	d024      	beq.n	8003904 <HAL_ADC_PollForConversion+0x80>
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	430a      	orrs	r2, r1
 80038c2:	6562      	str	r2, [r4, #84]	; 0x54
 80038c4:	22c0      	movs	r2, #192	; 0xc0
 80038c6:	68d9      	ldr	r1, [r3, #12]
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4211      	tst	r1, r2
 80038cc:	d113      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x72>
 80038ce:	1c62      	adds	r2, r4, #1
 80038d0:	7fd2      	ldrb	r2, [r2, #31]
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x72>
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	0712      	lsls	r2, r2, #28
 80038da:	d50c      	bpl.n	80038f6 <HAL_ADC_PollForConversion+0x72>
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	0752      	lsls	r2, r2, #29
 80038e0:	d428      	bmi.n	8003934 <HAL_ADC_PollForConversion+0xb0>
 80038e2:	210c      	movs	r1, #12
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	438a      	bics	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <HAL_ADC_PollForConversion+0xc4>)
 80038ee:	4011      	ands	r1, r2
 80038f0:	2201      	movs	r2, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	6562      	str	r2, [r4, #84]	; 0x54
 80038f6:	2000      	movs	r0, #0
 80038f8:	69a2      	ldr	r2, [r4, #24]
 80038fa:	4282      	cmp	r2, r0
 80038fc:	d1d5      	bne.n	80038aa <HAL_ADC_PollForConversion+0x26>
 80038fe:	220c      	movs	r2, #12
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e7d2      	b.n	80038aa <HAL_ADC_PollForConversion+0x26>
 8003904:	1c72      	adds	r2, r6, #1
 8003906:	d0d5      	beq.n	80038b4 <HAL_ADC_PollForConversion+0x30>
 8003908:	2e00      	cmp	r6, #0
 800390a:	d10d      	bne.n	8003928 <HAL_ADC_PollForConversion+0xa4>
 800390c:	002a      	movs	r2, r5
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	401a      	ands	r2, r3
 8003914:	421d      	tst	r5, r3
 8003916:	d1cc      	bne.n	80038b2 <HAL_ADC_PollForConversion+0x2e>
 8003918:	2304      	movs	r3, #4
 800391a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800391c:	3450      	adds	r4, #80	; 0x50
 800391e:	430b      	orrs	r3, r1
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	2003      	movs	r0, #3
 8003924:	7022      	strb	r2, [r4, #0]
 8003926:	e7c0      	b.n	80038aa <HAL_ADC_PollForConversion+0x26>
 8003928:	f7ff fdb8 	bl	800349c <HAL_GetTick>
 800392c:	1bc0      	subs	r0, r0, r7
 800392e:	42b0      	cmp	r0, r6
 8003930:	d8ec      	bhi.n	800390c <HAL_ADC_PollForConversion+0x88>
 8003932:	e7be      	b.n	80038b2 <HAL_ADC_PollForConversion+0x2e>
 8003934:	2220      	movs	r2, #32
 8003936:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003938:	430a      	orrs	r2, r1
 800393a:	6562      	str	r2, [r4, #84]	; 0x54
 800393c:	2201      	movs	r2, #1
 800393e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003940:	430a      	orrs	r2, r1
 8003942:	65a2      	str	r2, [r4, #88]	; 0x58
 8003944:	e7d7      	b.n	80038f6 <HAL_ADC_PollForConversion+0x72>
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	fffffefe 	.word	0xfffffefe

0800394c <HAL_ADC_GetValue>:
 800394c:	6803      	ldr	r3, [r0, #0]
 800394e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003950:	4770      	bx	lr
	...

08003954 <HAL_ADC_ConfigChannel>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	0004      	movs	r4, r0
 8003958:	3450      	adds	r4, #80	; 0x50
 800395a:	7822      	ldrb	r2, [r4, #0]
 800395c:	0003      	movs	r3, r0
 800395e:	000d      	movs	r5, r1
 8003960:	2002      	movs	r0, #2
 8003962:	2a01      	cmp	r2, #1
 8003964:	d00b      	beq.n	800397e <HAL_ADC_ConfigChannel+0x2a>
 8003966:	3801      	subs	r0, #1
 8003968:	7020      	strb	r0, [r4, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	6891      	ldr	r1, [r2, #8]
 800396e:	0749      	lsls	r1, r1, #29
 8003970:	d506      	bpl.n	8003980 <HAL_ADC_ConfigChannel+0x2c>
 8003972:	2220      	movs	r2, #32
 8003974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003976:	430a      	orrs	r2, r1
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
 800397a:	2300      	movs	r3, #0
 800397c:	7023      	strb	r3, [r4, #0]
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	6828      	ldr	r0, [r5, #0]
 8003984:	4e19      	ldr	r6, [pc, #100]	; (80039ec <HAL_ADC_ConfigChannel+0x98>)
 8003986:	686f      	ldr	r7, [r5, #4]
 8003988:	0341      	lsls	r1, r0, #13
 800398a:	02db      	lsls	r3, r3, #11
 800398c:	0b49      	lsrs	r1, r1, #13
 800398e:	4003      	ands	r3, r0
 8003990:	42b7      	cmp	r7, r6
 8003992:	d019      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x74>
 8003994:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003996:	4301      	orrs	r1, r0
 8003998:	6291      	str	r1, [r2, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_ADC_ConfigChannel+0x5c>
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_ADC_ConfigChannel+0x9c>)
 80039a2:	041b      	lsls	r3, r3, #16
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	200a      	movs	r0, #10
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	f7ff fd8e 	bl	80034cc <ADC_DelayMicroSecond>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	039b      	lsls	r3, r3, #14
 80039b4:	d505      	bpl.n	80039c2 <HAL_ADC_ConfigChannel+0x6e>
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_ADC_ConfigChannel+0x9c>)
 80039ba:	03db      	lsls	r3, r3, #15
 80039bc:	6811      	ldr	r1, [r2, #0]
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	2000      	movs	r0, #0
 80039c4:	7020      	strb	r0, [r4, #0]
 80039c6:	e7da      	b.n	800397e <HAL_ADC_ConfigChannel+0x2a>
 80039c8:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80039ca:	438d      	bics	r5, r1
 80039cc:	6295      	str	r5, [r2, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x88>
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <HAL_ADC_ConfigChannel+0x9c>)
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <HAL_ADC_ConfigChannel+0xa0>)
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	400b      	ands	r3, r1
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	0383      	lsls	r3, r0, #14
 80039de:	d5f0      	bpl.n	80039c2 <HAL_ADC_ConfigChannel+0x6e>
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <HAL_ADC_ConfigChannel+0x9c>)
 80039e2:	4905      	ldr	r1, [pc, #20]	; (80039f8 <HAL_ADC_ConfigChannel+0xa4>)
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	400b      	ands	r3, r1
 80039e8:	e7ea      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x6c>
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	00001001 	.word	0x00001001
 80039f0:	40012708 	.word	0x40012708
 80039f4:	ff7fffff 	.word	0xff7fffff
 80039f8:	ffbfffff 	.word	0xffbfffff

080039fc <HAL_NVIC_SetPriority>:
 80039fc:	b530      	push	{r4, r5, lr}
 80039fe:	25ff      	movs	r5, #255	; 0xff
 8003a00:	2403      	movs	r4, #3
 8003a02:	002a      	movs	r2, r5
 8003a04:	4004      	ands	r4, r0
 8003a06:	00e4      	lsls	r4, r4, #3
 8003a08:	40a2      	lsls	r2, r4
 8003a0a:	0189      	lsls	r1, r1, #6
 8003a0c:	4029      	ands	r1, r5
 8003a0e:	43d2      	mvns	r2, r2
 8003a10:	40a1      	lsls	r1, r4
 8003a12:	b2c3      	uxtb	r3, r0
 8003a14:	2800      	cmp	r0, #0
 8003a16:	db0a      	blt.n	8003a2e <HAL_NVIC_SetPriority+0x32>
 8003a18:	24c0      	movs	r4, #192	; 0xc0
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_NVIC_SetPriority+0x4c>)
 8003a1c:	0880      	lsrs	r0, r0, #2
 8003a1e:	0080      	lsls	r0, r0, #2
 8003a20:	18c0      	adds	r0, r0, r3
 8003a22:	00a4      	lsls	r4, r4, #2
 8003a24:	5903      	ldr	r3, [r0, r4]
 8003a26:	401a      	ands	r2, r3
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	5101      	str	r1, [r0, r4]
 8003a2c:	bd30      	pop	{r4, r5, pc}
 8003a2e:	200f      	movs	r0, #15
 8003a30:	4003      	ands	r3, r0
 8003a32:	3b08      	subs	r3, #8
 8003a34:	4805      	ldr	r0, [pc, #20]	; (8003a4c <HAL_NVIC_SetPriority+0x50>)
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	181b      	adds	r3, r3, r0
 8003a3c:	69d8      	ldr	r0, [r3, #28]
 8003a3e:	4002      	ands	r2, r0
 8003a40:	4311      	orrs	r1, r2
 8003a42:	61d9      	str	r1, [r3, #28]
 8003a44:	e7f2      	b.n	8003a2c <HAL_NVIC_SetPriority+0x30>
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <HAL_NVIC_EnableIRQ>:
 8003a50:	2800      	cmp	r0, #0
 8003a52:	db05      	blt.n	8003a60 <HAL_NVIC_EnableIRQ+0x10>
 8003a54:	231f      	movs	r3, #31
 8003a56:	4018      	ands	r0, r3
 8003a58:	3b1e      	subs	r3, #30
 8003a5a:	4083      	lsls	r3, r0
 8003a5c:	4a01      	ldr	r2, [pc, #4]	; (8003a64 <HAL_NVIC_EnableIRQ+0x14>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4770      	bx	lr
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	e000e100 	.word	0xe000e100

08003a68 <HAL_SYSTICK_Config>:
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	1e43      	subs	r3, r0, #1
 8003a6c:	0452      	lsls	r2, r2, #17
 8003a6e:	2001      	movs	r0, #1
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d20d      	bcs.n	8003a90 <HAL_SYSTICK_Config+0x28>
 8003a74:	21c0      	movs	r1, #192	; 0xc0
 8003a76:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <HAL_SYSTICK_Config+0x2c>)
 8003a78:	4807      	ldr	r0, [pc, #28]	; (8003a98 <HAL_SYSTICK_Config+0x30>)
 8003a7a:	6053      	str	r3, [r2, #4]
 8003a7c:	6a03      	ldr	r3, [r0, #32]
 8003a7e:	0609      	lsls	r1, r1, #24
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6203      	str	r3, [r0, #32]
 8003a88:	2000      	movs	r0, #0
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	6090      	str	r0, [r2, #8]
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4770      	bx	lr
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	e000e010 	.word	0xe000e010
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <HAL_DMA_Init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	0004      	movs	r4, r0
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	2c00      	cmp	r4, #0
 8003aa4:	d035      	beq.n	8003b12 <HAL_DMA_Init+0x76>
 8003aa6:	6825      	ldr	r5, [r4, #0]
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_DMA_Init+0x78>)
 8003aaa:	2114      	movs	r1, #20
 8003aac:	18e8      	adds	r0, r5, r3
 8003aae:	f7fc fb49 	bl	8000144 <__udivsi3>
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_DMA_Init+0x7c>)
 8003ab4:	0080      	lsls	r0, r0, #2
 8003ab6:	6423      	str	r3, [r4, #64]	; 0x40
 8003ab8:	2302      	movs	r3, #2
 8003aba:	1da2      	adds	r2, r4, #6
 8003abc:	6460      	str	r0, [r4, #68]	; 0x44
 8003abe:	77d3      	strb	r3, [r2, #31]
 8003ac0:	682e      	ldr	r6, [r5, #0]
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_DMA_Init+0x80>)
 8003ac4:	68a1      	ldr	r1, [r4, #8]
 8003ac6:	401e      	ands	r6, r3
 8003ac8:	68e3      	ldr	r3, [r4, #12]
 8003aca:	6927      	ldr	r7, [r4, #16]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	433b      	orrs	r3, r7
 8003ad0:	6967      	ldr	r7, [r4, #20]
 8003ad2:	433b      	orrs	r3, r7
 8003ad4:	69a7      	ldr	r7, [r4, #24]
 8003ad6:	433b      	orrs	r3, r7
 8003ad8:	69e7      	ldr	r7, [r4, #28]
 8003ada:	433b      	orrs	r3, r7
 8003adc:	6a27      	ldr	r7, [r4, #32]
 8003ade:	433b      	orrs	r3, r7
 8003ae0:	4333      	orrs	r3, r6
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	01db      	lsls	r3, r3, #7
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d00c      	beq.n	8003b06 <HAL_DMA_Init+0x6a>
 8003aec:	251c      	movs	r5, #28
 8003aee:	4028      	ands	r0, r5
 8003af0:	3d0d      	subs	r5, #13
 8003af2:	4085      	lsls	r5, r0
 8003af4:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_DMA_Init+0x84>)
 8003af6:	680b      	ldr	r3, [r1, #0]
 8003af8:	43ab      	bics	r3, r5
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	680d      	ldr	r5, [r1, #0]
 8003b00:	4083      	lsls	r3, r0
 8003b02:	432b      	orrs	r3, r5
 8003b04:	600b      	str	r3, [r1, #0]
 8003b06:	2000      	movs	r0, #0
 8003b08:	2301      	movs	r3, #1
 8003b0a:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003b0c:	3405      	adds	r4, #5
 8003b0e:	77d3      	strb	r3, [r2, #31]
 8003b10:	77e0      	strb	r0, [r4, #31]
 8003b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b14:	bffdfff8 	.word	0xbffdfff8
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	ffff800f 	.word	0xffff800f
 8003b20:	400200a8 	.word	0x400200a8

08003b24 <HAL_DMA_Start_IT>:
 8003b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b26:	1d45      	adds	r5, r0, #5
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	7feb      	ldrb	r3, [r5, #31]
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2002      	movs	r0, #2
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d029      	beq.n	8003b88 <HAL_DMA_Start_IT+0x64>
 8003b34:	2301      	movs	r3, #1
 8003b36:	1da7      	adds	r7, r4, #6
 8003b38:	77eb      	strb	r3, [r5, #31]
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	469c      	mov	ip, r3
 8003b40:	4660      	mov	r0, ip
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2801      	cmp	r0, #1
 8003b46:	d12a      	bne.n	8003b9e <HAL_DMA_Start_IT+0x7a>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	77f8      	strb	r0, [r7, #31]
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003b50:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8003b52:	6805      	ldr	r5, [r0, #0]
 8003b54:	361c      	adds	r6, #28
 8003b56:	403e      	ands	r6, r7
 8003b58:	439d      	bics	r5, r3
 8003b5a:	40b3      	lsls	r3, r6
 8003b5c:	6005      	str	r5, [r0, #0]
 8003b5e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003b60:	606b      	str	r3, [r5, #4]
 8003b62:	9b01      	ldr	r3, [sp, #4]
 8003b64:	6043      	str	r3, [r0, #4]
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d10e      	bne.n	8003b8a <HAL_DMA_Start_IT+0x66>
 8003b6c:	6082      	str	r2, [r0, #8]
 8003b6e:	60c1      	str	r1, [r0, #12]
 8003b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_DMA_Start_IT+0x6c>
 8003b76:	230e      	movs	r3, #14
 8003b78:	6802      	ldr	r2, [r0, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	6003      	str	r3, [r0, #0]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	6802      	ldr	r2, [r0, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	6003      	str	r3, [r0, #0]
 8003b86:	2000      	movs	r0, #0
 8003b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b8a:	6081      	str	r1, [r0, #8]
 8003b8c:	60c2      	str	r2, [r0, #12]
 8003b8e:	e7ef      	b.n	8003b70 <HAL_DMA_Start_IT+0x4c>
 8003b90:	2204      	movs	r2, #4
 8003b92:	6803      	ldr	r3, [r0, #0]
 8003b94:	4393      	bics	r3, r2
 8003b96:	6003      	str	r3, [r0, #0]
 8003b98:	6802      	ldr	r2, [r0, #0]
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	e7ed      	b.n	8003b7a <HAL_DMA_Start_IT+0x56>
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	77ee      	strb	r6, [r5, #31]
 8003ba2:	e7f1      	b.n	8003b88 <HAL_DMA_Start_IT+0x64>

08003ba4 <HAL_DMA_IRQHandler>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	221c      	movs	r2, #28
 8003ba8:	2704      	movs	r7, #4
 8003baa:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003bac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003bae:	4032      	ands	r2, r6
 8003bb0:	003e      	movs	r6, r7
 8003bb2:	4096      	lsls	r6, r2
 8003bb4:	680d      	ldr	r5, [r1, #0]
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	681c      	ldr	r4, [r3, #0]
 8003bba:	4235      	tst	r5, r6
 8003bbc:	d00d      	beq.n	8003bda <HAL_DMA_IRQHandler+0x36>
 8003bbe:	423c      	tst	r4, r7
 8003bc0:	d00b      	beq.n	8003bda <HAL_DMA_IRQHandler+0x36>
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	0692      	lsls	r2, r2, #26
 8003bc6:	d402      	bmi.n	8003bce <HAL_DMA_IRQHandler+0x2a>
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	43ba      	bics	r2, r7
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003bd0:	604e      	str	r6, [r1, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x66>
 8003bd6:	4798      	blx	r3
 8003bd8:	e017      	b.n	8003c0a <HAL_DMA_IRQHandler+0x66>
 8003bda:	2702      	movs	r7, #2
 8003bdc:	003e      	movs	r6, r7
 8003bde:	4096      	lsls	r6, r2
 8003be0:	4235      	tst	r5, r6
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x68>
 8003be4:	423c      	tst	r4, r7
 8003be6:	d011      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x68>
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	0692      	lsls	r2, r2, #26
 8003bec:	d406      	bmi.n	8003bfc <HAL_DMA_IRQHandler+0x58>
 8003bee:	240a      	movs	r4, #10
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	43a2      	bics	r2, r4
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	1d83      	adds	r3, r0, #6
 8003bfa:	77da      	strb	r2, [r3, #31]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	1d43      	adds	r3, r0, #5
 8003c00:	604e      	str	r6, [r1, #4]
 8003c02:	77da      	strb	r2, [r3, #31]
 8003c04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d1e5      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x32>
 8003c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0c:	2608      	movs	r6, #8
 8003c0e:	0037      	movs	r7, r6
 8003c10:	4097      	lsls	r7, r2
 8003c12:	423d      	tst	r5, r7
 8003c14:	d0f9      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x66>
 8003c16:	4234      	tst	r4, r6
 8003c18:	d0f7      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x66>
 8003c1a:	250e      	movs	r5, #14
 8003c1c:	681c      	ldr	r4, [r3, #0]
 8003c1e:	43ac      	bics	r4, r5
 8003c20:	601c      	str	r4, [r3, #0]
 8003c22:	2301      	movs	r3, #1
 8003c24:	001c      	movs	r4, r3
 8003c26:	4094      	lsls	r4, r2
 8003c28:	1d82      	adds	r2, r0, #6
 8003c2a:	604c      	str	r4, [r1, #4]
 8003c2c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003c2e:	77d3      	strb	r3, [r2, #31]
 8003c30:	2200      	movs	r2, #0
 8003c32:	1d43      	adds	r3, r0, #5
 8003c34:	77da      	strb	r2, [r3, #31]
 8003c36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c38:	e7e5      	b.n	8003c06 <HAL_DMA_IRQHandler+0x62>
	...

08003c3c <FLASH_SetErrorCode>:
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <FLASH_SetErrorCode+0xa4>)
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	6990      	ldr	r0, [r2, #24]
 8003c42:	0049      	lsls	r1, r1, #1
 8003c44:	0003      	movs	r3, r0
 8003c46:	b530      	push	{r4, r5, lr}
 8003c48:	400b      	ands	r3, r1
 8003c4a:	4208      	tst	r0, r1
 8003c4c:	d005      	beq.n	8003c5a <FLASH_SetErrorCode+0x1e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	4824      	ldr	r0, [pc, #144]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003c52:	6944      	ldr	r4, [r0, #20]
 8003c54:	4323      	orrs	r3, r4
 8003c56:	6143      	str	r3, [r0, #20]
 8003c58:	000b      	movs	r3, r1
 8003c5a:	2080      	movs	r0, #128	; 0x80
 8003c5c:	6991      	ldr	r1, [r2, #24]
 8003c5e:	0080      	lsls	r0, r0, #2
 8003c60:	4201      	tst	r1, r0
 8003c62:	d005      	beq.n	8003c70 <FLASH_SetErrorCode+0x34>
 8003c64:	2101      	movs	r1, #1
 8003c66:	4c1f      	ldr	r4, [pc, #124]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003c68:	4303      	orrs	r3, r0
 8003c6a:	6965      	ldr	r5, [r4, #20]
 8003c6c:	4329      	orrs	r1, r5
 8003c6e:	6161      	str	r1, [r4, #20]
 8003c70:	2080      	movs	r0, #128	; 0x80
 8003c72:	6991      	ldr	r1, [r2, #24]
 8003c74:	00c0      	lsls	r0, r0, #3
 8003c76:	4201      	tst	r1, r0
 8003c78:	d005      	beq.n	8003c86 <FLASH_SetErrorCode+0x4a>
 8003c7a:	2108      	movs	r1, #8
 8003c7c:	4c19      	ldr	r4, [pc, #100]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003c7e:	4303      	orrs	r3, r0
 8003c80:	6965      	ldr	r5, [r4, #20]
 8003c82:	4329      	orrs	r1, r5
 8003c84:	6161      	str	r1, [r4, #20]
 8003c86:	2080      	movs	r0, #128	; 0x80
 8003c88:	6991      	ldr	r1, [r2, #24]
 8003c8a:	0100      	lsls	r0, r0, #4
 8003c8c:	4201      	tst	r1, r0
 8003c8e:	d005      	beq.n	8003c9c <FLASH_SetErrorCode+0x60>
 8003c90:	2104      	movs	r1, #4
 8003c92:	4c14      	ldr	r4, [pc, #80]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003c94:	4303      	orrs	r3, r0
 8003c96:	6965      	ldr	r5, [r4, #20]
 8003c98:	4329      	orrs	r1, r5
 8003c9a:	6161      	str	r1, [r4, #20]
 8003c9c:	2080      	movs	r0, #128	; 0x80
 8003c9e:	6991      	ldr	r1, [r2, #24]
 8003ca0:	0180      	lsls	r0, r0, #6
 8003ca2:	4201      	tst	r1, r0
 8003ca4:	d005      	beq.n	8003cb2 <FLASH_SetErrorCode+0x76>
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	4c0e      	ldr	r4, [pc, #56]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003caa:	4303      	orrs	r3, r0
 8003cac:	6965      	ldr	r5, [r4, #20]
 8003cae:	4329      	orrs	r1, r5
 8003cb0:	6161      	str	r1, [r4, #20]
 8003cb2:	6991      	ldr	r1, [r2, #24]
 8003cb4:	0389      	lsls	r1, r1, #14
 8003cb6:	d505      	bpl.n	8003cc4 <FLASH_SetErrorCode+0x88>
 8003cb8:	2020      	movs	r0, #32
 8003cba:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003cbc:	4303      	orrs	r3, r0
 8003cbe:	6961      	ldr	r1, [r4, #20]
 8003cc0:	4301      	orrs	r1, r0
 8003cc2:	6161      	str	r1, [r4, #20]
 8003cc4:	2080      	movs	r0, #128	; 0x80
 8003cc6:	6991      	ldr	r1, [r2, #24]
 8003cc8:	0240      	lsls	r0, r0, #9
 8003cca:	4201      	tst	r1, r0
 8003ccc:	d005      	beq.n	8003cda <FLASH_SetErrorCode+0x9e>
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	4c04      	ldr	r4, [pc, #16]	; (8003ce4 <FLASH_SetErrorCode+0xa8>)
 8003cd2:	4303      	orrs	r3, r0
 8003cd4:	6965      	ldr	r5, [r4, #20]
 8003cd6:	4329      	orrs	r1, r5
 8003cd8:	6161      	str	r1, [r4, #20]
 8003cda:	6193      	str	r3, [r2, #24]
 8003cdc:	bd30      	pop	{r4, r5, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	20000de4 	.word	0x20000de4

08003ce8 <FLASH_WaitForLastOperation>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	0004      	movs	r4, r0
 8003cec:	f7ff fbd6 	bl	800349c <HAL_GetTick>
 8003cf0:	2601      	movs	r6, #1
 8003cf2:	0005      	movs	r5, r0
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <FLASH_WaitForLastOperation+0x70>)
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	4232      	tst	r2, r6
 8003cfa:	d121      	bne.n	8003d40 <FLASH_WaitForLastOperation+0x58>
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	6999      	ldr	r1, [r3, #24]
 8003d00:	4211      	tst	r1, r2
 8003d02:	d000      	beq.n	8003d06 <FLASH_WaitForLastOperation+0x1e>
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	05d2      	lsls	r2, r2, #23
 8003d0a:	d415      	bmi.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	0592      	lsls	r2, r2, #22
 8003d10:	d412      	bmi.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	0552      	lsls	r2, r2, #21
 8003d16:	d40f      	bmi.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	0512      	lsls	r2, r2, #20
 8003d1c:	d40c      	bmi.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	0492      	lsls	r2, r2, #18
 8003d22:	d409      	bmi.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	0008      	movs	r0, r1
 8003d2a:	0292      	lsls	r2, r2, #10
 8003d2c:	4010      	ands	r0, r2
 8003d2e:	4211      	tst	r1, r2
 8003d30:	d102      	bne.n	8003d38 <FLASH_WaitForLastOperation+0x50>
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	03db      	lsls	r3, r3, #15
 8003d36:	d508      	bpl.n	8003d4a <FLASH_WaitForLastOperation+0x62>
 8003d38:	f7ff ff80 	bl	8003c3c <FLASH_SetErrorCode>
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	e004      	b.n	8003d4a <FLASH_WaitForLastOperation+0x62>
 8003d40:	1c62      	adds	r2, r4, #1
 8003d42:	d0d8      	beq.n	8003cf6 <FLASH_WaitForLastOperation+0xe>
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d101      	bne.n	8003d4c <FLASH_WaitForLastOperation+0x64>
 8003d48:	2003      	movs	r0, #3
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f7ff fba6 	bl	800349c <HAL_GetTick>
 8003d50:	1b40      	subs	r0, r0, r5
 8003d52:	42a0      	cmp	r0, r4
 8003d54:	d9ce      	bls.n	8003cf4 <FLASH_WaitForLastOperation+0xc>
 8003d56:	e7f7      	b.n	8003d48 <FLASH_WaitForLastOperation+0x60>
 8003d58:	40022000 	.word	0x40022000

08003d5c <HAL_FLASHEx_DATAEEPROM_Unlock>:
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 8003d60:	2000      	movs	r0, #0
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	4211      	tst	r1, r2
 8003d66:	d00a      	beq.n	8003d7e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 8003d68:	f3ef 8110 	mrs	r1, PRIMASK
 8003d6c:	b672      	cpsid	i
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003d70:	60d8      	str	r0, [r3, #12]
 8003d72:	4805      	ldr	r0, [pc, #20]	; (8003d88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003d74:	60d8      	str	r0, [r3, #12]
 8003d76:	f381 8810 	msr	PRIMASK, r1
 8003d7a:	6858      	ldr	r0, [r3, #4]
 8003d7c:	4010      	ands	r0, r2
 8003d7e:	4770      	bx	lr
 8003d80:	40022000 	.word	0x40022000
 8003d84:	89abcdef 	.word	0x89abcdef
 8003d88:	02030405 	.word	0x02030405

08003d8c <HAL_FLASHEx_DATAEEPROM_Lock>:
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8003d90:	2000      	movs	r0, #0
 8003d92:	6851      	ldr	r1, [r2, #4]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6053      	str	r3, [r2, #4]
 8003d98:	4770      	bx	lr
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	40022000 	.word	0x40022000

08003da0 <HAL_FLASHEx_DATAEEPROM_Program>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	4f12      	ldr	r7, [pc, #72]	; (8003dec <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
 8003da4:	0006      	movs	r6, r0
 8003da6:	7c3b      	ldrb	r3, [r7, #16]
 8003da8:	000d      	movs	r5, r1
 8003daa:	0014      	movs	r4, r2
 8003dac:	2002      	movs	r0, #2
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d00c      	beq.n	8003dcc <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003db2:	2301      	movs	r3, #1
 8003db4:	480e      	ldr	r0, [pc, #56]	; (8003df0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003db6:	743b      	strb	r3, [r7, #16]
 8003db8:	f7ff ff96 	bl	8003ce8 <FLASH_WaitForLastOperation>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003dc0:	6178      	str	r0, [r7, #20]
 8003dc2:	2e02      	cmp	r6, #2
 8003dc4:	d103      	bne.n	8003dce <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
 8003dc6:	602c      	str	r4, [r5, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	743b      	strb	r3, [r7, #16]
 8003dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dce:	2e01      	cmp	r6, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
 8003dd2:	b2a4      	uxth	r4, r4
 8003dd4:	802c      	strh	r4, [r5, #0]
 8003dd6:	e7f7      	b.n	8003dc8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003dd8:	2e00      	cmp	r6, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
 8003ddc:	4804      	ldr	r0, [pc, #16]	; (8003df0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003dde:	f7ff ff83 	bl	8003ce8 <FLASH_WaitForLastOperation>
 8003de2:	e7f1      	b.n	8003dc8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003de4:	b2e4      	uxtb	r4, r4
 8003de6:	702c      	strb	r4, [r5, #0]
 8003de8:	e7ee      	b.n	8003dc8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20000de4 	.word	0x20000de4
 8003df0:	0000c350 	.word	0x0000c350

08003df4 <HAL_GPIO_Init>:
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_GPIO_Init+0x164>)
 8003df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df8:	1882      	adds	r2, r0, r2
 8003dfa:	1e54      	subs	r4, r2, #1
 8003dfc:	41a2      	sbcs	r2, r4
 8003dfe:	2300      	movs	r3, #0
 8003e00:	b087      	sub	sp, #28
 8003e02:	3205      	adds	r2, #5
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	9205      	str	r2, [sp, #20]
 8003e08:	9a03      	ldr	r2, [sp, #12]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	0014      	movs	r4, r2
 8003e0e:	40dc      	lsrs	r4, r3
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x22>
 8003e12:	b007      	add	sp, #28
 8003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e16:	2101      	movs	r1, #1
 8003e18:	000d      	movs	r5, r1
 8003e1a:	0014      	movs	r4, r2
 8003e1c:	409d      	lsls	r5, r3
 8003e1e:	402c      	ands	r4, r5
 8003e20:	468c      	mov	ip, r1
 8003e22:	9402      	str	r4, [sp, #8]
 8003e24:	422a      	tst	r2, r5
 8003e26:	d100      	bne.n	8003e2a <HAL_GPIO_Init+0x36>
 8003e28:	e094      	b.n	8003f54 <HAL_GPIO_Init+0x160>
 8003e2a:	2403      	movs	r4, #3
 8003e2c:	9a03      	ldr	r2, [sp, #12]
 8003e2e:	005e      	lsls	r6, r3, #1
 8003e30:	6852      	ldr	r2, [r2, #4]
 8003e32:	9201      	str	r2, [sp, #4]
 8003e34:	4022      	ands	r2, r4
 8003e36:	40b4      	lsls	r4, r6
 8003e38:	43e1      	mvns	r1, r4
 8003e3a:	1e54      	subs	r4, r2, #1
 8003e3c:	9104      	str	r1, [sp, #16]
 8003e3e:	4564      	cmp	r4, ip
 8003e40:	d82a      	bhi.n	8003e98 <HAL_GPIO_Init+0xa4>
 8003e42:	6887      	ldr	r7, [r0, #8]
 8003e44:	400f      	ands	r7, r1
 8003e46:	9903      	ldr	r1, [sp, #12]
 8003e48:	68cc      	ldr	r4, [r1, #12]
 8003e4a:	9901      	ldr	r1, [sp, #4]
 8003e4c:	40b4      	lsls	r4, r6
 8003e4e:	433c      	orrs	r4, r7
 8003e50:	6084      	str	r4, [r0, #8]
 8003e52:	6844      	ldr	r4, [r0, #4]
 8003e54:	43ac      	bics	r4, r5
 8003e56:	0025      	movs	r5, r4
 8003e58:	090c      	lsrs	r4, r1, #4
 8003e5a:	4661      	mov	r1, ip
 8003e5c:	400c      	ands	r4, r1
 8003e5e:	409c      	lsls	r4, r3
 8003e60:	432c      	orrs	r4, r5
 8003e62:	6044      	str	r4, [r0, #4]
 8003e64:	68c5      	ldr	r5, [r0, #12]
 8003e66:	9904      	ldr	r1, [sp, #16]
 8003e68:	400d      	ands	r5, r1
 8003e6a:	9903      	ldr	r1, [sp, #12]
 8003e6c:	688c      	ldr	r4, [r1, #8]
 8003e6e:	40b4      	lsls	r4, r6
 8003e70:	432c      	orrs	r4, r5
 8003e72:	60c4      	str	r4, [r0, #12]
 8003e74:	2a02      	cmp	r2, #2
 8003e76:	d111      	bne.n	8003e9c <HAL_GPIO_Init+0xa8>
 8003e78:	2507      	movs	r5, #7
 8003e7a:	210f      	movs	r1, #15
 8003e7c:	401d      	ands	r5, r3
 8003e7e:	00ad      	lsls	r5, r5, #2
 8003e80:	40a9      	lsls	r1, r5
 8003e82:	08dc      	lsrs	r4, r3, #3
 8003e84:	00a4      	lsls	r4, r4, #2
 8003e86:	1904      	adds	r4, r0, r4
 8003e88:	6a27      	ldr	r7, [r4, #32]
 8003e8a:	438f      	bics	r7, r1
 8003e8c:	9903      	ldr	r1, [sp, #12]
 8003e8e:	6909      	ldr	r1, [r1, #16]
 8003e90:	40a9      	lsls	r1, r5
 8003e92:	430f      	orrs	r7, r1
 8003e94:	6227      	str	r7, [r4, #32]
 8003e96:	e001      	b.n	8003e9c <HAL_GPIO_Init+0xa8>
 8003e98:	2a03      	cmp	r2, #3
 8003e9a:	d1e3      	bne.n	8003e64 <HAL_GPIO_Init+0x70>
 8003e9c:	40b2      	lsls	r2, r6
 8003e9e:	6804      	ldr	r4, [r0, #0]
 8003ea0:	9904      	ldr	r1, [sp, #16]
 8003ea2:	4021      	ands	r1, r4
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	6002      	str	r2, [r0, #0]
 8003ea8:	22c0      	movs	r2, #192	; 0xc0
 8003eaa:	9901      	ldr	r1, [sp, #4]
 8003eac:	0292      	lsls	r2, r2, #10
 8003eae:	4211      	tst	r1, r2
 8003eb0:	d050      	beq.n	8003f54 <HAL_GPIO_Init+0x160>
 8003eb2:	2701      	movs	r7, #1
 8003eb4:	4c29      	ldr	r4, [pc, #164]	; (8003f5c <HAL_GPIO_Init+0x168>)
 8003eb6:	2603      	movs	r6, #3
 8003eb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003eba:	001d      	movs	r5, r3
 8003ebc:	433a      	orrs	r2, r7
 8003ebe:	6362      	str	r2, [r4, #52]	; 0x34
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_GPIO_Init+0x16c>)
 8003ec2:	089c      	lsrs	r4, r3, #2
 8003ec4:	00a4      	lsls	r4, r4, #2
 8003ec6:	18a4      	adds	r4, r4, r2
 8003ec8:	68a2      	ldr	r2, [r4, #8]
 8003eca:	4035      	ands	r5, r6
 8003ecc:	4694      	mov	ip, r2
 8003ece:	220f      	movs	r2, #15
 8003ed0:	00ad      	lsls	r5, r5, #2
 8003ed2:	40aa      	lsls	r2, r5
 8003ed4:	4661      	mov	r1, ip
 8003ed6:	4391      	bics	r1, r2
 8003ed8:	22a0      	movs	r2, #160	; 0xa0
 8003eda:	05d2      	lsls	r2, r2, #23
 8003edc:	4694      	mov	ip, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4560      	cmp	r0, ip
 8003ee2:	d00d      	beq.n	8003f00 <HAL_GPIO_Init+0x10c>
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_GPIO_Init+0x170>)
 8003ee6:	4694      	mov	ip, r2
 8003ee8:	003a      	movs	r2, r7
 8003eea:	4560      	cmp	r0, ip
 8003eec:	d008      	beq.n	8003f00 <HAL_GPIO_Init+0x10c>
 8003eee:	4f1e      	ldr	r7, [pc, #120]	; (8003f68 <HAL_GPIO_Init+0x174>)
 8003ef0:	1892      	adds	r2, r2, r2
 8003ef2:	42b8      	cmp	r0, r7
 8003ef4:	d004      	beq.n	8003f00 <HAL_GPIO_Init+0x10c>
 8003ef6:	4f1d      	ldr	r7, [pc, #116]	; (8003f6c <HAL_GPIO_Init+0x178>)
 8003ef8:	0032      	movs	r2, r6
 8003efa:	42b8      	cmp	r0, r7
 8003efc:	d000      	beq.n	8003f00 <HAL_GPIO_Init+0x10c>
 8003efe:	9a05      	ldr	r2, [sp, #20]
 8003f00:	40aa      	lsls	r2, r5
 8003f02:	430a      	orrs	r2, r1
 8003f04:	9902      	ldr	r1, [sp, #8]
 8003f06:	60a2      	str	r2, [r4, #8]
 8003f08:	000d      	movs	r5, r1
 8003f0a:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_GPIO_Init+0x17c>)
 8003f0c:	43cc      	mvns	r4, r1
 8003f0e:	6816      	ldr	r6, [r2, #0]
 8003f10:	9901      	ldr	r1, [sp, #4]
 8003f12:	4335      	orrs	r5, r6
 8003f14:	03c9      	lsls	r1, r1, #15
 8003f16:	d401      	bmi.n	8003f1c <HAL_GPIO_Init+0x128>
 8003f18:	0035      	movs	r5, r6
 8003f1a:	4025      	ands	r5, r4
 8003f1c:	6015      	str	r5, [r2, #0]
 8003f1e:	6856      	ldr	r6, [r2, #4]
 8003f20:	9d02      	ldr	r5, [sp, #8]
 8003f22:	9901      	ldr	r1, [sp, #4]
 8003f24:	4335      	orrs	r5, r6
 8003f26:	0389      	lsls	r1, r1, #14
 8003f28:	d401      	bmi.n	8003f2e <HAL_GPIO_Init+0x13a>
 8003f2a:	0035      	movs	r5, r6
 8003f2c:	4025      	ands	r5, r4
 8003f2e:	6055      	str	r5, [r2, #4]
 8003f30:	6896      	ldr	r6, [r2, #8]
 8003f32:	9d02      	ldr	r5, [sp, #8]
 8003f34:	9901      	ldr	r1, [sp, #4]
 8003f36:	4335      	orrs	r5, r6
 8003f38:	02c9      	lsls	r1, r1, #11
 8003f3a:	d401      	bmi.n	8003f40 <HAL_GPIO_Init+0x14c>
 8003f3c:	0035      	movs	r5, r6
 8003f3e:	4025      	ands	r5, r4
 8003f40:	6095      	str	r5, [r2, #8]
 8003f42:	68d5      	ldr	r5, [r2, #12]
 8003f44:	9e02      	ldr	r6, [sp, #8]
 8003f46:	9901      	ldr	r1, [sp, #4]
 8003f48:	432e      	orrs	r6, r5
 8003f4a:	0289      	lsls	r1, r1, #10
 8003f4c:	d401      	bmi.n	8003f52 <HAL_GPIO_Init+0x15e>
 8003f4e:	4025      	ands	r5, r4
 8003f50:	002e      	movs	r6, r5
 8003f52:	60d6      	str	r6, [r2, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	e757      	b.n	8003e08 <HAL_GPIO_Init+0x14>
 8003f58:	afffe400 	.word	0xafffe400
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40010000 	.word	0x40010000
 8003f64:	50000400 	.word	0x50000400
 8003f68:	50000800 	.word	0x50000800
 8003f6c:	50000c00 	.word	0x50000c00
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_ReadPin>:
 8003f74:	6900      	ldr	r0, [r0, #16]
 8003f76:	4008      	ands	r0, r1
 8003f78:	1e43      	subs	r3, r0, #1
 8003f7a:	4198      	sbcs	r0, r3
 8003f7c:	b2c0      	uxtb	r0, r0
 8003f7e:	4770      	bx	lr

08003f80 <HAL_GPIO_WritePin>:
 8003f80:	2a00      	cmp	r2, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_GPIO_WritePin+0x8>
 8003f84:	6181      	str	r1, [r0, #24]
 8003f86:	4770      	bx	lr
 8003f88:	6281      	str	r1, [r0, #40]	; 0x28
 8003f8a:	e7fc      	b.n	8003f86 <HAL_GPIO_WritePin+0x6>

08003f8c <I2C_Flush_TXDR>:
 8003f8c:	6803      	ldr	r3, [r0, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	0792      	lsls	r2, r2, #30
 8003f92:	d501      	bpl.n	8003f98 <I2C_Flush_TXDR+0xc>
 8003f94:	2200      	movs	r2, #0
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	2201      	movs	r2, #1
 8003f9a:	6999      	ldr	r1, [r3, #24]
 8003f9c:	4211      	tst	r1, r2
 8003f9e:	d102      	bne.n	8003fa6 <I2C_Flush_TXDR+0x1a>
 8003fa0:	6999      	ldr	r1, [r3, #24]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	619a      	str	r2, [r3, #24]
 8003fa6:	4770      	bx	lr

08003fa8 <I2C_TransferConfig>:
 8003fa8:	b530      	push	{r4, r5, lr}
 8003faa:	9c03      	ldr	r4, [sp, #12]
 8003fac:	0412      	lsls	r2, r2, #16
 8003fae:	6800      	ldr	r0, [r0, #0]
 8003fb0:	4322      	orrs	r2, r4
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <I2C_TransferConfig+0x24>)
 8003fb6:	6845      	ldr	r5, [r0, #4]
 8003fb8:	0589      	lsls	r1, r1, #22
 8003fba:	0d64      	lsrs	r4, r4, #21
 8003fbc:	0d89      	lsrs	r1, r1, #22
 8003fbe:	431c      	orrs	r4, r3
 8003fc0:	43a5      	bics	r5, r4
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	432a      	orrs	r2, r5
 8003fc6:	6042      	str	r2, [r0, #4]
 8003fc8:	bd30      	pop	{r4, r5, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	03ff63ff 	.word	0x03ff63ff

08003fd0 <I2C_IsAcknowledgeFailed>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	0016      	movs	r6, r2
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	0004      	movs	r4, r0
 8003fda:	000d      	movs	r5, r1
 8003fdc:	2000      	movs	r0, #0
 8003fde:	06d2      	lsls	r2, r2, #27
 8003fe0:	d536      	bpl.n	8004050 <I2C_IsAcknowledgeFailed+0x80>
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	0192      	lsls	r2, r2, #6
 8003fe6:	d404      	bmi.n	8003ff2 <I2C_IsAcknowledgeFailed+0x22>
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	01d2      	lsls	r2, r2, #7
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	2720      	movs	r7, #32
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	423a      	tst	r2, r7
 8003ffa:	d012      	beq.n	8004022 <I2C_IsAcknowledgeFailed+0x52>
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	0020      	movs	r0, r4
 8004000:	61da      	str	r2, [r3, #28]
 8004002:	61df      	str	r7, [r3, #28]
 8004004:	f7ff ffc2 	bl	8003f8c <I2C_Flush_TXDR>
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	4912      	ldr	r1, [pc, #72]	; (8004054 <I2C_IsAcknowledgeFailed+0x84>)
 800400c:	6853      	ldr	r3, [r2, #4]
 800400e:	400b      	ands	r3, r1
 8004010:	6053      	str	r3, [r2, #4]
 8004012:	2304      	movs	r3, #4
 8004014:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004016:	4313      	orrs	r3, r2
 8004018:	6463      	str	r3, [r4, #68]	; 0x44
 800401a:	0023      	movs	r3, r4
 800401c:	3341      	adds	r3, #65	; 0x41
 800401e:	701f      	strb	r7, [r3, #0]
 8004020:	e00f      	b.n	8004042 <I2C_IsAcknowledgeFailed+0x72>
 8004022:	1c6a      	adds	r2, r5, #1
 8004024:	d0e7      	beq.n	8003ff6 <I2C_IsAcknowledgeFailed+0x26>
 8004026:	f7ff fa39 	bl	800349c <HAL_GetTick>
 800402a:	1b80      	subs	r0, r0, r6
 800402c:	4285      	cmp	r5, r0
 800402e:	d301      	bcc.n	8004034 <I2C_IsAcknowledgeFailed+0x64>
 8004030:	2d00      	cmp	r5, #0
 8004032:	d1df      	bne.n	8003ff4 <I2C_IsAcknowledgeFailed+0x24>
 8004034:	2220      	movs	r2, #32
 8004036:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004038:	4313      	orrs	r3, r2
 800403a:	6463      	str	r3, [r4, #68]	; 0x44
 800403c:	0023      	movs	r3, r4
 800403e:	3341      	adds	r3, #65	; 0x41
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	0022      	movs	r2, r4
 8004044:	2300      	movs	r3, #0
 8004046:	2001      	movs	r0, #1
 8004048:	3242      	adds	r2, #66	; 0x42
 800404a:	3440      	adds	r4, #64	; 0x40
 800404c:	7013      	strb	r3, [r2, #0]
 800404e:	7023      	strb	r3, [r4, #0]
 8004050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	fe00e800 	.word	0xfe00e800

08004058 <I2C_WaitOnTXISFlagUntilTimeout>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	0004      	movs	r4, r0
 800405c:	000d      	movs	r5, r1
 800405e:	0016      	movs	r6, r2
 8004060:	2702      	movs	r7, #2
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	423b      	tst	r3, r7
 8004068:	d001      	beq.n	800406e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
 800406a:	2000      	movs	r0, #0
 800406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406e:	0032      	movs	r2, r6
 8004070:	0029      	movs	r1, r5
 8004072:	0020      	movs	r0, r4
 8004074:	f7ff ffac 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 8004078:	2800      	cmp	r0, #0
 800407a:	d115      	bne.n	80040a8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
 800407c:	1c6b      	adds	r3, r5, #1
 800407e:	d0f0      	beq.n	8004062 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8004080:	f7ff fa0c 	bl	800349c <HAL_GetTick>
 8004084:	1b80      	subs	r0, r0, r6
 8004086:	42a8      	cmp	r0, r5
 8004088:	d801      	bhi.n	800408e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800408a:	2d00      	cmp	r5, #0
 800408c:	d1e9      	bne.n	8004062 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 800408e:	2220      	movs	r2, #32
 8004090:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004092:	4313      	orrs	r3, r2
 8004094:	6463      	str	r3, [r4, #68]	; 0x44
 8004096:	0023      	movs	r3, r4
 8004098:	3341      	adds	r3, #65	; 0x41
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	0022      	movs	r2, r4
 800409e:	2300      	movs	r3, #0
 80040a0:	3242      	adds	r2, #66	; 0x42
 80040a2:	3440      	adds	r4, #64	; 0x40
 80040a4:	7013      	strb	r3, [r2, #0]
 80040a6:	7023      	strb	r3, [r4, #0]
 80040a8:	2001      	movs	r0, #1
 80040aa:	e7df      	b.n	800406c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080040ac <I2C_WaitOnRXNEFlagUntilTimeout>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	0004      	movs	r4, r0
 80040b0:	000d      	movs	r5, r1
 80040b2:	0016      	movs	r6, r2
 80040b4:	2720      	movs	r7, #32
 80040b6:	2204      	movs	r2, #4
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4213      	tst	r3, r2
 80040be:	d111      	bne.n	80040e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 80040c0:	0032      	movs	r2, r6
 80040c2:	0029      	movs	r1, r5
 80040c4:	0020      	movs	r0, r4
 80040c6:	f7ff ff83 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d119      	bne.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	423a      	tst	r2, r7
 80040d4:	d017      	beq.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
 80040d6:	2104      	movs	r1, #4
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	420a      	tst	r2, r1
 80040dc:	d004      	beq.n	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 80040de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 80040e4:	2000      	movs	r0, #0
 80040e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e8:	61df      	str	r7, [r3, #28]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	490e      	ldr	r1, [pc, #56]	; (8004128 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	0022      	movs	r2, r4
 80040f4:	2300      	movs	r3, #0
 80040f6:	3241      	adds	r2, #65	; 0x41
 80040f8:	6463      	str	r3, [r4, #68]	; 0x44
 80040fa:	7017      	strb	r7, [r2, #0]
 80040fc:	3440      	adds	r4, #64	; 0x40
 80040fe:	7053      	strb	r3, [r2, #1]
 8004100:	7023      	strb	r3, [r4, #0]
 8004102:	2001      	movs	r0, #1
 8004104:	e7ef      	b.n	80040e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8004106:	f7ff f9c9 	bl	800349c <HAL_GetTick>
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	42a8      	cmp	r0, r5
 800410e:	d801      	bhi.n	8004114 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8004110:	2d00      	cmp	r5, #0
 8004112:	d1d0      	bne.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 8004114:	2220      	movs	r2, #32
 8004116:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004118:	4313      	orrs	r3, r2
 800411a:	6463      	str	r3, [r4, #68]	; 0x44
 800411c:	0023      	movs	r3, r4
 800411e:	3341      	adds	r3, #65	; 0x41
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	3440      	adds	r4, #64	; 0x40
 8004124:	2300      	movs	r3, #0
 8004126:	e7eb      	b.n	8004100 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004128:	fe00e800 	.word	0xfe00e800

0800412c <I2C_WaitOnFlagUntilTimeout>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	0004      	movs	r4, r0
 8004130:	000e      	movs	r6, r1
 8004132:	0017      	movs	r7, r2
 8004134:	001d      	movs	r5, r3
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	6993      	ldr	r3, [r2, #24]
 800413a:	4033      	ands	r3, r6
 800413c:	1b9b      	subs	r3, r3, r6
 800413e:	4259      	negs	r1, r3
 8004140:	414b      	adcs	r3, r1
 8004142:	42bb      	cmp	r3, r7
 8004144:	d001      	beq.n	800414a <I2C_WaitOnFlagUntilTimeout+0x1e>
 8004146:	2000      	movs	r0, #0
 8004148:	e017      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x4e>
 800414a:	1c6b      	adds	r3, r5, #1
 800414c:	d0f4      	beq.n	8004138 <I2C_WaitOnFlagUntilTimeout+0xc>
 800414e:	f7ff f9a5 	bl	800349c <HAL_GetTick>
 8004152:	9b06      	ldr	r3, [sp, #24]
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	42a8      	cmp	r0, r5
 8004158:	d801      	bhi.n	800415e <I2C_WaitOnFlagUntilTimeout+0x32>
 800415a:	2d00      	cmp	r5, #0
 800415c:	d1eb      	bne.n	8004136 <I2C_WaitOnFlagUntilTimeout+0xa>
 800415e:	2220      	movs	r2, #32
 8004160:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004162:	2001      	movs	r0, #1
 8004164:	4313      	orrs	r3, r2
 8004166:	6463      	str	r3, [r4, #68]	; 0x44
 8004168:	0023      	movs	r3, r4
 800416a:	3341      	adds	r3, #65	; 0x41
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	0022      	movs	r2, r4
 8004170:	2300      	movs	r3, #0
 8004172:	3242      	adds	r2, #66	; 0x42
 8004174:	3440      	adds	r4, #64	; 0x40
 8004176:	7013      	strb	r3, [r2, #0]
 8004178:	7023      	strb	r3, [r4, #0]
 800417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800417c <I2C_WaitOnSTOPFlagUntilTimeout>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	0004      	movs	r4, r0
 8004180:	000d      	movs	r5, r1
 8004182:	0016      	movs	r6, r2
 8004184:	2720      	movs	r7, #32
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	423b      	tst	r3, r7
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800418e:	2000      	movs	r0, #0
 8004190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004192:	0032      	movs	r2, r6
 8004194:	0029      	movs	r1, r5
 8004196:	0020      	movs	r0, r4
 8004198:	f7ff ff1a 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 800419c:	2800      	cmp	r0, #0
 800419e:	d113      	bne.n	80041c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
 80041a0:	f7ff f97c 	bl	800349c <HAL_GetTick>
 80041a4:	1b80      	subs	r0, r0, r6
 80041a6:	42a8      	cmp	r0, r5
 80041a8:	d801      	bhi.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	d1eb      	bne.n	8004186 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80041ae:	2220      	movs	r2, #32
 80041b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041b2:	4313      	orrs	r3, r2
 80041b4:	6463      	str	r3, [r4, #68]	; 0x44
 80041b6:	0023      	movs	r3, r4
 80041b8:	3341      	adds	r3, #65	; 0x41
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	0022      	movs	r2, r4
 80041be:	2300      	movs	r3, #0
 80041c0:	3242      	adds	r2, #66	; 0x42
 80041c2:	3440      	adds	r4, #64	; 0x40
 80041c4:	7013      	strb	r3, [r2, #0]
 80041c6:	7023      	strb	r3, [r4, #0]
 80041c8:	2001      	movs	r0, #1
 80041ca:	e7e1      	b.n	8004190 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080041cc <HAL_I2C_Init>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	0004      	movs	r4, r0
 80041d0:	2001      	movs	r0, #1
 80041d2:	2c00      	cmp	r4, #0
 80041d4:	d03f      	beq.n	8004256 <HAL_I2C_Init+0x8a>
 80041d6:	0025      	movs	r5, r4
 80041d8:	3541      	adds	r5, #65	; 0x41
 80041da:	782b      	ldrb	r3, [r5, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_I2C_Init+0x22>
 80041e2:	0023      	movs	r3, r4
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	0020      	movs	r0, r4
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	f7fc ff49 	bl	8001080 <HAL_I2C_MspInit>
 80041ee:	2324      	movs	r3, #36	; 0x24
 80041f0:	2101      	movs	r1, #1
 80041f2:	702b      	strb	r3, [r5, #0]
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	481d      	ldr	r0, [pc, #116]	; (800426c <HAL_I2C_Init+0xa0>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68a6      	ldr	r6, [r4, #8]
 80041fc:	438a      	bics	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	6861      	ldr	r1, [r4, #4]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_I2C_Init+0xa4>)
 8004204:	400a      	ands	r2, r1
 8004206:	611a      	str	r2, [r3, #16]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	4002      	ands	r2, r0
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	68e2      	ldr	r2, [r4, #12]
 8004210:	2a01      	cmp	r2, #1
 8004212:	d121      	bne.n	8004258 <HAL_I2C_Init+0x8c>
 8004214:	2180      	movs	r1, #128	; 0x80
 8004216:	0209      	lsls	r1, r1, #8
 8004218:	4331      	orrs	r1, r6
 800421a:	6099      	str	r1, [r3, #8]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4915      	ldr	r1, [pc, #84]	; (8004274 <HAL_I2C_Init+0xa8>)
 8004220:	4311      	orrs	r1, r2
 8004222:	6059      	str	r1, [r3, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	6961      	ldr	r1, [r4, #20]
 8004228:	4002      	ands	r2, r0
 800422a:	60da      	str	r2, [r3, #12]
 800422c:	6922      	ldr	r2, [r4, #16]
 800422e:	2000      	movs	r0, #0
 8004230:	430a      	orrs	r2, r1
 8004232:	69a1      	ldr	r1, [r4, #24]
 8004234:	0209      	lsls	r1, r1, #8
 8004236:	430a      	orrs	r2, r1
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	6a21      	ldr	r1, [r4, #32]
 800423c:	69e2      	ldr	r2, [r4, #28]
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	2320      	movs	r3, #32
 800424c:	6460      	str	r0, [r4, #68]	; 0x44
 800424e:	702b      	strb	r3, [r5, #0]
 8004250:	6320      	str	r0, [r4, #48]	; 0x30
 8004252:	3442      	adds	r4, #66	; 0x42
 8004254:	7020      	strb	r0, [r4, #0]
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	2184      	movs	r1, #132	; 0x84
 800425a:	0209      	lsls	r1, r1, #8
 800425c:	4331      	orrs	r1, r6
 800425e:	6099      	str	r1, [r3, #8]
 8004260:	2a02      	cmp	r2, #2
 8004262:	d1db      	bne.n	800421c <HAL_I2C_Init+0x50>
 8004264:	2280      	movs	r2, #128	; 0x80
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	e7d7      	b.n	800421c <HAL_I2C_Init+0x50>
 800426c:	ffff7fff 	.word	0xffff7fff
 8004270:	f0ffffff 	.word	0xf0ffffff
 8004274:	02008000 	.word	0x02008000

08004278 <HAL_I2C_Master_Transmit>:
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	9305      	str	r3, [sp, #20]
 800427e:	0003      	movs	r3, r0
 8004280:	3341      	adds	r3, #65	; 0x41
 8004282:	9204      	str	r2, [sp, #16]
 8004284:	9303      	str	r3, [sp, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	0004      	movs	r4, r0
 800428a:	000f      	movs	r7, r1
 800428c:	2002      	movs	r0, #2
 800428e:	2b20      	cmp	r3, #32
 8004290:	d114      	bne.n	80042bc <HAL_I2C_Master_Transmit+0x44>
 8004292:	0023      	movs	r3, r4
 8004294:	3340      	adds	r3, #64	; 0x40
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	2a01      	cmp	r2, #1
 800429a:	d00f      	beq.n	80042bc <HAL_I2C_Master_Transmit+0x44>
 800429c:	2601      	movs	r6, #1
 800429e:	701e      	strb	r6, [r3, #0]
 80042a0:	f7ff f8fc 	bl	800349c <HAL_GetTick>
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	0005      	movs	r5, r0
 80042a8:	9000      	str	r0, [sp, #0]
 80042aa:	2319      	movs	r3, #25
 80042ac:	0032      	movs	r2, r6
 80042ae:	0020      	movs	r0, r4
 80042b0:	0209      	lsls	r1, r1, #8
 80042b2:	f7ff ff3b 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_I2C_Master_Transmit+0x48>
 80042ba:	2001      	movs	r0, #1
 80042bc:	b007      	add	sp, #28
 80042be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c0:	2321      	movs	r3, #33	; 0x21
 80042c2:	0026      	movs	r6, r4
 80042c4:	9a03      	ldr	r2, [sp, #12]
 80042c6:	3642      	adds	r6, #66	; 0x42
 80042c8:	7013      	strb	r3, [r2, #0]
 80042ca:	3b11      	subs	r3, #17
 80042cc:	7033      	strb	r3, [r6, #0]
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	6460      	str	r0, [r4, #68]	; 0x44
 80042d2:	6263      	str	r3, [r4, #36]	; 0x24
 80042d4:	9b05      	ldr	r3, [sp, #20]
 80042d6:	6360      	str	r0, [r4, #52]	; 0x34
 80042d8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80042da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_I2C_Master_Transmit+0x11c>)
 80042de:	2aff      	cmp	r2, #255	; 0xff
 80042e0:	d920      	bls.n	8004324 <HAL_I2C_Master_Transmit+0xac>
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	8522      	strh	r2, [r4, #40]	; 0x28
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	045b      	lsls	r3, r3, #17
 80042ec:	0039      	movs	r1, r7
 80042ee:	0020      	movs	r0, r4
 80042f0:	f7ff fe5a 	bl	8003fa8 <I2C_TransferConfig>
 80042f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042f6:	002a      	movs	r2, r5
 80042f8:	0020      	movs	r0, r4
 80042fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d119      	bne.n	8004334 <HAL_I2C_Master_Transmit+0xbc>
 8004300:	f7ff ff3c 	bl	800417c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004304:	2800      	cmp	r0, #0
 8004306:	d1d8      	bne.n	80042ba <HAL_I2C_Master_Transmit+0x42>
 8004308:	2120      	movs	r1, #32
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	4d22      	ldr	r5, [pc, #136]	; (8004398 <HAL_I2C_Master_Transmit+0x120>)
 800430e:	61d9      	str	r1, [r3, #28]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	402a      	ands	r2, r5
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	0023      	movs	r3, r4
 8004318:	3440      	adds	r4, #64	; 0x40
 800431a:	3341      	adds	r3, #65	; 0x41
 800431c:	7019      	strb	r1, [r3, #0]
 800431e:	7030      	strb	r0, [r6, #0]
 8004320:	7020      	strb	r0, [r4, #0]
 8004322:	e7cb      	b.n	80042bc <HAL_I2C_Master_Transmit+0x44>
 8004324:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004326:	b292      	uxth	r2, r2
 8004328:	8522      	strh	r2, [r4, #40]	; 0x28
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	049b      	lsls	r3, r3, #18
 8004332:	e7db      	b.n	80042ec <HAL_I2C_Master_Transmit+0x74>
 8004334:	f7ff fe90 	bl	8004058 <I2C_WaitOnTXISFlagUntilTimeout>
 8004338:	2800      	cmp	r0, #0
 800433a:	d1be      	bne.n	80042ba <HAL_I2C_Master_Transmit+0x42>
 800433c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	7819      	ldrb	r1, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	6291      	str	r1, [r2, #40]	; 0x28
 8004346:	6263      	str	r3, [r4, #36]	; 0x24
 8004348:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800434a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004352:	3a01      	subs	r2, #1
 8004354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004356:	b292      	uxth	r2, r2
 8004358:	8522      	strh	r2, [r4, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ca      	beq.n	80042f4 <HAL_I2C_Master_Transmit+0x7c>
 800435e:	2a00      	cmp	r2, #0
 8004360:	d1c8      	bne.n	80042f4 <HAL_I2C_Master_Transmit+0x7c>
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0020      	movs	r0, r4
 8004366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004368:	9500      	str	r5, [sp, #0]
 800436a:	f7ff fedf 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 800436e:	2800      	cmp	r0, #0
 8004370:	d1a3      	bne.n	80042ba <HAL_I2C_Master_Transmit+0x42>
 8004372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004374:	2bff      	cmp	r3, #255	; 0xff
 8004376:	d906      	bls.n	8004386 <HAL_I2C_Master_Transmit+0x10e>
 8004378:	23ff      	movs	r3, #255	; 0xff
 800437a:	8523      	strh	r3, [r4, #40]	; 0x28
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	9000      	str	r0, [sp, #0]
 8004382:	045b      	lsls	r3, r3, #17
 8004384:	e7b2      	b.n	80042ec <HAL_I2C_Master_Transmit+0x74>
 8004386:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004388:	b292      	uxth	r2, r2
 800438a:	8522      	strh	r2, [r4, #40]	; 0x28
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	9000      	str	r0, [sp, #0]
 8004390:	e7cd      	b.n	800432e <HAL_I2C_Master_Transmit+0xb6>
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	80002000 	.word	0x80002000
 8004398:	fe00e800 	.word	0xfe00e800

0800439c <HAL_I2C_Master_Receive>:
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b087      	sub	sp, #28
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	0003      	movs	r3, r0
 80043a4:	3341      	adds	r3, #65	; 0x41
 80043a6:	9204      	str	r2, [sp, #16]
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	0004      	movs	r4, r0
 80043ae:	000f      	movs	r7, r1
 80043b0:	2002      	movs	r0, #2
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d114      	bne.n	80043e0 <HAL_I2C_Master_Receive+0x44>
 80043b6:	0023      	movs	r3, r4
 80043b8:	3340      	adds	r3, #64	; 0x40
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	2a01      	cmp	r2, #1
 80043be:	d00f      	beq.n	80043e0 <HAL_I2C_Master_Receive+0x44>
 80043c0:	2601      	movs	r6, #1
 80043c2:	701e      	strb	r6, [r3, #0]
 80043c4:	f7ff f86a 	bl	800349c <HAL_GetTick>
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0005      	movs	r5, r0
 80043cc:	9000      	str	r0, [sp, #0]
 80043ce:	2319      	movs	r3, #25
 80043d0:	0032      	movs	r2, r6
 80043d2:	0020      	movs	r0, r4
 80043d4:	0209      	lsls	r1, r1, #8
 80043d6:	f7ff fea9 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_I2C_Master_Receive+0x48>
 80043de:	2001      	movs	r0, #1
 80043e0:	b007      	add	sp, #28
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	2322      	movs	r3, #34	; 0x22
 80043e6:	0026      	movs	r6, r4
 80043e8:	9a03      	ldr	r2, [sp, #12]
 80043ea:	3642      	adds	r6, #66	; 0x42
 80043ec:	7013      	strb	r3, [r2, #0]
 80043ee:	3b12      	subs	r3, #18
 80043f0:	7033      	strb	r3, [r6, #0]
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	6460      	str	r0, [r4, #68]	; 0x44
 80043f6:	6263      	str	r3, [r4, #36]	; 0x24
 80043f8:	9b05      	ldr	r3, [sp, #20]
 80043fa:	6360      	str	r0, [r4, #52]	; 0x34
 80043fc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80043fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_I2C_Master_Receive+0x11c>)
 8004402:	2aff      	cmp	r2, #255	; 0xff
 8004404:	d920      	bls.n	8004448 <HAL_I2C_Master_Receive+0xac>
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	8522      	strh	r2, [r4, #40]	; 0x28
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	045b      	lsls	r3, r3, #17
 8004410:	0039      	movs	r1, r7
 8004412:	0020      	movs	r0, r4
 8004414:	f7ff fdc8 	bl	8003fa8 <I2C_TransferConfig>
 8004418:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800441a:	002a      	movs	r2, r5
 800441c:	0020      	movs	r0, r4
 800441e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d119      	bne.n	8004458 <HAL_I2C_Master_Receive+0xbc>
 8004424:	f7ff feaa 	bl	800417c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004428:	2800      	cmp	r0, #0
 800442a:	d1d8      	bne.n	80043de <HAL_I2C_Master_Receive+0x42>
 800442c:	2120      	movs	r1, #32
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	4d22      	ldr	r5, [pc, #136]	; (80044bc <HAL_I2C_Master_Receive+0x120>)
 8004432:	61d9      	str	r1, [r3, #28]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	402a      	ands	r2, r5
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	0023      	movs	r3, r4
 800443c:	3440      	adds	r4, #64	; 0x40
 800443e:	3341      	adds	r3, #65	; 0x41
 8004440:	7019      	strb	r1, [r3, #0]
 8004442:	7030      	strb	r0, [r6, #0]
 8004444:	7020      	strb	r0, [r4, #0]
 8004446:	e7cb      	b.n	80043e0 <HAL_I2C_Master_Receive+0x44>
 8004448:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800444a:	b292      	uxth	r2, r2
 800444c:	8522      	strh	r2, [r4, #40]	; 0x28
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	049b      	lsls	r3, r3, #18
 8004456:	e7db      	b.n	8004410 <HAL_I2C_Master_Receive+0x74>
 8004458:	f7ff fe28 	bl	80040ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800445c:	2800      	cmp	r0, #0
 800445e:	d1be      	bne.n	80043de <HAL_I2C_Master_Receive+0x42>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	7013      	strb	r3, [r2, #0]
 8004468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800446c:	3301      	adds	r3, #1
 800446e:	6263      	str	r3, [r4, #36]	; 0x24
 8004470:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004472:	3a01      	subs	r2, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	8563      	strh	r3, [r4, #42]	; 0x2a
 800447a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800447c:	b292      	uxth	r2, r2
 800447e:	8522      	strh	r2, [r4, #40]	; 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0c9      	beq.n	8004418 <HAL_I2C_Master_Receive+0x7c>
 8004484:	2a00      	cmp	r2, #0
 8004486:	d1c7      	bne.n	8004418 <HAL_I2C_Master_Receive+0x7c>
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0020      	movs	r0, r4
 800448c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800448e:	9500      	str	r5, [sp, #0]
 8004490:	f7ff fe4c 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8004494:	2800      	cmp	r0, #0
 8004496:	d1a2      	bne.n	80043de <HAL_I2C_Master_Receive+0x42>
 8004498:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	d906      	bls.n	80044ac <HAL_I2C_Master_Receive+0x110>
 800449e:	23ff      	movs	r3, #255	; 0xff
 80044a0:	8523      	strh	r3, [r4, #40]	; 0x28
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	9000      	str	r0, [sp, #0]
 80044a8:	045b      	lsls	r3, r3, #17
 80044aa:	e7b1      	b.n	8004410 <HAL_I2C_Master_Receive+0x74>
 80044ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80044ae:	b292      	uxth	r2, r2
 80044b0:	8522      	strh	r2, [r4, #40]	; 0x28
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	9000      	str	r0, [sp, #0]
 80044b6:	e7cc      	b.n	8004452 <HAL_I2C_Master_Receive+0xb6>
 80044b8:	80002400 	.word	0x80002400
 80044bc:	fe00e800 	.word	0xfe00e800

080044c0 <HAL_I2C_IsDeviceReady>:
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	001e      	movs	r6, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	9307      	str	r3, [sp, #28]
 80044ca:	0003      	movs	r3, r0
 80044cc:	9205      	str	r2, [sp, #20]
 80044ce:	3341      	adds	r3, #65	; 0x41
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	0004      	movs	r4, r0
 80044d4:	2502      	movs	r5, #2
 80044d6:	2a20      	cmp	r2, #32
 80044d8:	d15b      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 80044da:	6802      	ldr	r2, [r0, #0]
 80044dc:	6997      	ldr	r7, [r2, #24]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	0038      	movs	r0, r7
 80044e2:	0212      	lsls	r2, r2, #8
 80044e4:	4010      	ands	r0, r2
 80044e6:	4217      	tst	r7, r2
 80044e8:	d153      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 80044ea:	0022      	movs	r2, r4
 80044ec:	3240      	adds	r2, #64	; 0x40
 80044ee:	7817      	ldrb	r7, [r2, #0]
 80044f0:	2f01      	cmp	r7, #1
 80044f2:	d04e      	beq.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 80044f4:	3d01      	subs	r5, #1
 80044f6:	7015      	strb	r5, [r2, #0]
 80044f8:	2224      	movs	r2, #36	; 0x24
 80044fa:	0589      	lsls	r1, r1, #22
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	0d8b      	lsrs	r3, r1, #22
 8004500:	6460      	str	r0, [r4, #68]	; 0x44
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	68e3      	ldr	r3, [r4, #12]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d12b      	bne.n	8004562 <HAL_I2C_IsDeviceReady+0xa2>
 800450a:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_I2C_IsDeviceReady+0x144>)
 800450c:	9a04      	ldr	r2, [sp, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	6053      	str	r3, [r2, #4]
 8004514:	f7fe ffc2 	bl	800349c <HAL_GetTick>
 8004518:	9003      	str	r0, [sp, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	699d      	ldr	r5, [r3, #24]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	096d      	lsrs	r5, r5, #5
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	4015      	ands	r5, r2
 8004528:	4013      	ands	r3, r2
 800452a:	431d      	orrs	r5, r3
 800452c:	d01c      	beq.n	8004568 <HAL_I2C_IsDeviceReady+0xa8>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	2710      	movs	r7, #16
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	001a      	movs	r2, r3
 8004536:	403a      	ands	r2, r7
 8004538:	423b      	tst	r3, r7
 800453a:	d12d      	bne.n	8004598 <HAL_I2C_IsDeviceReady+0xd8>
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	2120      	movs	r1, #32
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	0020      	movs	r0, r4
 8004544:	0033      	movs	r3, r6
 8004546:	f7ff fdf1 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 800454a:	2800      	cmp	r0, #0
 800454c:	d121      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 800454e:	2320      	movs	r3, #32
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	0005      	movs	r5, r0
 8004554:	61d3      	str	r3, [r2, #28]
 8004556:	0022      	movs	r2, r4
 8004558:	3440      	adds	r4, #64	; 0x40
 800455a:	3241      	adds	r2, #65	; 0x41
 800455c:	7013      	strb	r3, [r2, #0]
 800455e:	7020      	strb	r0, [r4, #0]
 8004560:	e017      	b.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 8004562:	23a0      	movs	r3, #160	; 0xa0
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	e7d1      	b.n	800450c <HAL_I2C_IsDeviceReady+0x4c>
 8004568:	1c73      	adds	r3, r6, #1
 800456a:	d0d6      	beq.n	800451a <HAL_I2C_IsDeviceReady+0x5a>
 800456c:	f7fe ff96 	bl	800349c <HAL_GetTick>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	1ac0      	subs	r0, r0, r3
 8004574:	42b0      	cmp	r0, r6
 8004576:	d801      	bhi.n	800457c <HAL_I2C_IsDeviceReady+0xbc>
 8004578:	2e00      	cmp	r6, #0
 800457a:	d1ce      	bne.n	800451a <HAL_I2C_IsDeviceReady+0x5a>
 800457c:	0022      	movs	r2, r4
 800457e:	2320      	movs	r3, #32
 8004580:	3241      	adds	r2, #65	; 0x41
 8004582:	7013      	strb	r3, [r2, #0]
 8004584:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004586:	2501      	movs	r5, #1
 8004588:	4313      	orrs	r3, r2
 800458a:	6463      	str	r3, [r4, #68]	; 0x44
 800458c:	2300      	movs	r3, #0
 800458e:	3440      	adds	r4, #64	; 0x40
 8004590:	7023      	strb	r3, [r4, #0]
 8004592:	0028      	movs	r0, r5
 8004594:	b009      	add	sp, #36	; 0x24
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2120      	movs	r1, #32
 80045a0:	0033      	movs	r3, r6
 80045a2:	0020      	movs	r0, r4
 80045a4:	f7ff fdc2 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80045a8:	1e02      	subs	r2, r0, #0
 80045aa:	d1f2      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	9805      	ldr	r0, [sp, #20]
 80045b0:	61df      	str	r7, [r3, #28]
 80045b2:	2720      	movs	r7, #32
 80045b4:	61df      	str	r7, [r3, #28]
 80045b6:	9907      	ldr	r1, [sp, #28]
 80045b8:	4281      	cmp	r1, r0
 80045ba:	d10f      	bne.n	80045dc <HAL_I2C_IsDeviceReady+0x11c>
 80045bc:	2180      	movs	r1, #128	; 0x80
 80045be:	6858      	ldr	r0, [r3, #4]
 80045c0:	01c9      	lsls	r1, r1, #7
 80045c2:	4301      	orrs	r1, r0
 80045c4:	6059      	str	r1, [r3, #4]
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	0039      	movs	r1, r7
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	0020      	movs	r0, r4
 80045ce:	0033      	movs	r3, r6
 80045d0:	f7ff fdac 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d1dc      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	61df      	str	r7, [r3, #28]
 80045dc:	9b07      	ldr	r3, [sp, #28]
 80045de:	9a05      	ldr	r2, [sp, #20]
 80045e0:	3301      	adds	r3, #1
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d200      	bcs.n	80045ec <HAL_I2C_IsDeviceReady+0x12c>
 80045ea:	e78b      	b.n	8004504 <HAL_I2C_IsDeviceReady+0x44>
 80045ec:	0022      	movs	r2, r4
 80045ee:	2320      	movs	r3, #32
 80045f0:	3241      	adds	r2, #65	; 0x41
 80045f2:	7013      	strb	r3, [r2, #0]
 80045f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80045f6:	3440      	adds	r4, #64	; 0x40
 80045f8:	4313      	orrs	r3, r2
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	7023      	strb	r3, [r4, #0]
 8004600:	e7c7      	b.n	8004592 <HAL_I2C_IsDeviceReady+0xd2>
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	02002000 	.word	0x02002000

08004608 <HAL_I2CEx_ConfigAnalogFilter>:
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	0004      	movs	r4, r0
 800460c:	3441      	adds	r4, #65	; 0x41
 800460e:	7822      	ldrb	r2, [r4, #0]
 8004610:	0003      	movs	r3, r0
 8004612:	000f      	movs	r7, r1
 8004614:	2002      	movs	r0, #2
 8004616:	b2d6      	uxtb	r6, r2
 8004618:	2a20      	cmp	r2, #32
 800461a:	d118      	bne.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800461c:	001d      	movs	r5, r3
 800461e:	3540      	adds	r5, #64	; 0x40
 8004620:	782a      	ldrb	r2, [r5, #0]
 8004622:	2a01      	cmp	r2, #1
 8004624:	d013      	beq.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	7022      	strb	r2, [r4, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3a23      	subs	r2, #35	; 0x23
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	4807      	ldr	r0, [pc, #28]	; (8004650 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8004632:	4391      	bics	r1, r2
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	4001      	ands	r1, r0
 800463a:	2000      	movs	r0, #0
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	4339      	orrs	r1, r7
 8004642:	6019      	str	r1, [r3, #0]
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	7026      	strb	r6, [r4, #0]
 800464c:	7028      	strb	r0, [r5, #0]
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004650:	ffffefff 	.word	0xffffefff

08004654 <HAL_I2CEx_ConfigDigitalFilter>:
 8004654:	0002      	movs	r2, r0
 8004656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004658:	3241      	adds	r2, #65	; 0x41
 800465a:	7814      	ldrb	r4, [r2, #0]
 800465c:	0003      	movs	r3, r0
 800465e:	b2e5      	uxtb	r5, r4
 8004660:	2002      	movs	r0, #2
 8004662:	2c20      	cmp	r4, #32
 8004664:	d117      	bne.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8004666:	001c      	movs	r4, r3
 8004668:	3440      	adds	r4, #64	; 0x40
 800466a:	7826      	ldrb	r6, [r4, #0]
 800466c:	2e01      	cmp	r6, #1
 800466e:	d012      	beq.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8004670:	3022      	adds	r0, #34	; 0x22
 8004672:	7010      	strb	r0, [r2, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3823      	subs	r0, #35	; 0x23
 8004678:	681e      	ldr	r6, [r3, #0]
 800467a:	4f07      	ldr	r7, [pc, #28]	; (8004698 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
 800467c:	4386      	bics	r6, r0
 800467e:	601e      	str	r6, [r3, #0]
 8004680:	681e      	ldr	r6, [r3, #0]
 8004682:	0209      	lsls	r1, r1, #8
 8004684:	403e      	ands	r6, r7
 8004686:	4331      	orrs	r1, r6
 8004688:	6019      	str	r1, [r3, #0]
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	4308      	orrs	r0, r1
 800468e:	6018      	str	r0, [r3, #0]
 8004690:	2000      	movs	r0, #0
 8004692:	7015      	strb	r5, [r2, #0]
 8004694:	7020      	strb	r0, [r4, #0]
 8004696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004698:	fffff0ff 	.word	0xfffff0ff

0800469c <HAL_RCC_GetSysClockFreq>:
 800469c:	220c      	movs	r2, #12
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_RCC_GetSysClockFreq+0x78>)
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	68dc      	ldr	r4, [r3, #12]
 80046a4:	4022      	ands	r2, r4
 80046a6:	2a08      	cmp	r2, #8
 80046a8:	d031      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x72>
 80046aa:	2a0c      	cmp	r2, #12
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x26>
 80046ae:	2a04      	cmp	r2, #4
 80046b0:	d125      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0x62>
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_RCC_GetSysClockFreq+0x7c>)
 80046b6:	06c0      	lsls	r0, r0, #27
 80046b8:	17c0      	asrs	r0, r0, #31
 80046ba:	4018      	ands	r0, r3
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <HAL_RCC_GetSysClockFreq+0x80>)
 80046be:	18c0      	adds	r0, r0, r3
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
 80046c2:	02a2      	lsls	r2, r4, #10
 80046c4:	4816      	ldr	r0, [pc, #88]	; (8004720 <HAL_RCC_GetSysClockFreq+0x84>)
 80046c6:	0f12      	lsrs	r2, r2, #28
 80046c8:	5c80      	ldrb	r0, [r0, r2]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	0224      	lsls	r4, r4, #8
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	0fa4      	lsrs	r4, r4, #30
 80046d2:	0252      	lsls	r2, r2, #9
 80046d4:	3401      	adds	r4, #1
 80046d6:	4211      	tst	r1, r2
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x52>
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_RCC_GetSysClockFreq+0x88>)
 80046dc:	2300      	movs	r3, #0
 80046de:	2100      	movs	r1, #0
 80046e0:	f7fb fddc 	bl	800029c <__aeabi_lmul>
 80046e4:	0022      	movs	r2, r4
 80046e6:	2300      	movs	r3, #0
 80046e8:	f7fb fdb8 	bl	800025c <__aeabi_uldivmod>
 80046ec:	e7e8      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x24>
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2310      	movs	r3, #16
 80046f2:	421a      	tst	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x5e>
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <HAL_RCC_GetSysClockFreq+0x8c>)
 80046f8:	e7f0      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x40>
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <HAL_RCC_GetSysClockFreq+0x80>)
 80046fc:	e7ee      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x40>
 80046fe:	2080      	movs	r0, #128	; 0x80
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0200      	lsls	r0, r0, #8
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	0f5b      	lsrs	r3, r3, #29
 8004708:	3301      	adds	r3, #1
 800470a:	4098      	lsls	r0, r3
 800470c:	e7d8      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x24>
 800470e:	4805      	ldr	r0, [pc, #20]	; (8004724 <HAL_RCC_GetSysClockFreq+0x88>)
 8004710:	e7d6      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x24>
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40021000 	.word	0x40021000
 8004718:	ff48e500 	.word	0xff48e500
 800471c:	00f42400 	.word	0x00f42400
 8004720:	08006a80 	.word	0x08006a80
 8004724:	007a1200 	.word	0x007a1200
 8004728:	003d0900 	.word	0x003d0900

0800472c <HAL_RCC_OscConfig>:
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472e:	0005      	movs	r5, r0
 8004730:	b085      	sub	sp, #20
 8004732:	2800      	cmp	r0, #0
 8004734:	d05a      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 8004736:	230c      	movs	r3, #12
 8004738:	4cbe      	ldr	r4, [pc, #760]	; (8004a34 <HAL_RCC_OscConfig+0x308>)
 800473a:	6802      	ldr	r2, [r0, #0]
 800473c:	68e6      	ldr	r6, [r4, #12]
 800473e:	68e7      	ldr	r7, [r4, #12]
 8004740:	401e      	ands	r6, r3
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	0019      	movs	r1, r3
 8004748:	401f      	ands	r7, r3
 800474a:	07d2      	lsls	r2, r2, #31
 800474c:	d442      	bmi.n	80047d4 <HAL_RCC_OscConfig+0xa8>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d500      	bpl.n	8004756 <HAL_RCC_OscConfig+0x2a>
 8004754:	e08b      	b.n	800486e <HAL_RCC_OscConfig+0x142>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	06db      	lsls	r3, r3, #27
 800475a:	d529      	bpl.n	80047b0 <HAL_RCC_OscConfig+0x84>
 800475c:	2e00      	cmp	r6, #0
 800475e:	d000      	beq.n	8004762 <HAL_RCC_OscConfig+0x36>
 8004760:	e0dc      	b.n	800491c <HAL_RCC_OscConfig+0x1f0>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	d502      	bpl.n	800476e <HAL_RCC_OscConfig+0x42>
 8004768:	69eb      	ldr	r3, [r5, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d03e      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 800476e:	6862      	ldr	r2, [r4, #4]
 8004770:	49b1      	ldr	r1, [pc, #708]	; (8004a38 <HAL_RCC_OscConfig+0x30c>)
 8004772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004774:	400a      	ands	r2, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	6062      	str	r2, [r4, #4]
 800477a:	6861      	ldr	r1, [r4, #4]
 800477c:	6a2a      	ldr	r2, [r5, #32]
 800477e:	0209      	lsls	r1, r1, #8
 8004780:	0a09      	lsrs	r1, r1, #8
 8004782:	0612      	lsls	r2, r2, #24
 8004784:	430a      	orrs	r2, r1
 8004786:	6062      	str	r2, [r4, #4]
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	0b5b      	lsrs	r3, r3, #13
 800478c:	3301      	adds	r3, #1
 800478e:	0212      	lsls	r2, r2, #8
 8004790:	409a      	lsls	r2, r3
 8004792:	0013      	movs	r3, r2
 8004794:	68e1      	ldr	r1, [r4, #12]
 8004796:	060a      	lsls	r2, r1, #24
 8004798:	49a8      	ldr	r1, [pc, #672]	; (8004a3c <HAL_RCC_OscConfig+0x310>)
 800479a:	0f12      	lsrs	r2, r2, #28
 800479c:	5c8a      	ldrb	r2, [r1, r2]
 800479e:	40d3      	lsrs	r3, r2
 80047a0:	4aa7      	ldr	r2, [pc, #668]	; (8004a40 <HAL_RCC_OscConfig+0x314>)
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4ba7      	ldr	r3, [pc, #668]	; (8004a44 <HAL_RCC_OscConfig+0x318>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	f7fe fe34 	bl	8003414 <HAL_InitTick>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d134      	bne.n	800481a <HAL_RCC_OscConfig+0xee>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	071b      	lsls	r3, r3, #28
 80047b4:	d500      	bpl.n	80047b8 <HAL_RCC_OscConfig+0x8c>
 80047b6:	e0e8      	b.n	800498a <HAL_RCC_OscConfig+0x25e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	075b      	lsls	r3, r3, #29
 80047bc:	d500      	bpl.n	80047c0 <HAL_RCC_OscConfig+0x94>
 80047be:	e10a      	b.n	80049d6 <HAL_RCC_OscConfig+0x2aa>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	069b      	lsls	r3, r3, #26
 80047c4:	d500      	bpl.n	80047c8 <HAL_RCC_OscConfig+0x9c>
 80047c6:	e18e      	b.n	8004ae6 <HAL_RCC_OscConfig+0x3ba>
 80047c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d000      	beq.n	80047d0 <HAL_RCC_OscConfig+0xa4>
 80047ce:	e1bd      	b.n	8004b4c <HAL_RCC_OscConfig+0x420>
 80047d0:	2000      	movs	r0, #0
 80047d2:	e022      	b.n	800481a <HAL_RCC_OscConfig+0xee>
 80047d4:	2e08      	cmp	r6, #8
 80047d6:	d003      	beq.n	80047e0 <HAL_RCC_OscConfig+0xb4>
 80047d8:	2e0c      	cmp	r6, #12
 80047da:	d109      	bne.n	80047f0 <HAL_RCC_OscConfig+0xc4>
 80047dc:	2f00      	cmp	r7, #0
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_OscConfig+0xc4>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	039b      	lsls	r3, r3, #14
 80047e4:	d5b3      	bpl.n	800474e <HAL_RCC_OscConfig+0x22>
 80047e6:	686b      	ldr	r3, [r5, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1b0      	bne.n	800474e <HAL_RCC_OscConfig+0x22>
 80047ec:	2001      	movs	r0, #1
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0xee>
 80047f0:	686a      	ldr	r2, [r5, #4]
 80047f2:	428a      	cmp	r2, r1
 80047f4:	d113      	bne.n	800481e <HAL_RCC_OscConfig+0xf2>
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	f7fe fe4e 	bl	800349c <HAL_GetTick>
 8004800:	9000      	str	r0, [sp, #0]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	0292      	lsls	r2, r2, #10
 8004808:	4213      	tst	r3, r2
 800480a:	d1a0      	bne.n	800474e <HAL_RCC_OscConfig+0x22>
 800480c:	f7fe fe46 	bl	800349c <HAL_GetTick>
 8004810:	9b00      	ldr	r3, [sp, #0]
 8004812:	1ac0      	subs	r0, r0, r3
 8004814:	2864      	cmp	r0, #100	; 0x64
 8004816:	d9f4      	bls.n	8004802 <HAL_RCC_OscConfig+0xd6>
 8004818:	2003      	movs	r0, #3
 800481a:	b005      	add	sp, #20
 800481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481e:	21a0      	movs	r1, #160	; 0xa0
 8004820:	02c9      	lsls	r1, r1, #11
 8004822:	428a      	cmp	r2, r1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x106>
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	6821      	ldr	r1, [r4, #0]
 800482a:	02d2      	lsls	r2, r2, #11
 800482c:	430a      	orrs	r2, r1
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	e7e1      	b.n	80047f6 <HAL_RCC_OscConfig+0xca>
 8004832:	6821      	ldr	r1, [r4, #0]
 8004834:	4884      	ldr	r0, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x31c>)
 8004836:	4001      	ands	r1, r0
 8004838:	6021      	str	r1, [r4, #0]
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	400b      	ands	r3, r1
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	4982      	ldr	r1, [pc, #520]	; (8004a4c <HAL_RCC_OscConfig+0x320>)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	400b      	ands	r3, r1
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	2a00      	cmp	r2, #0
 800484c:	d1d6      	bne.n	80047fc <HAL_RCC_OscConfig+0xd0>
 800484e:	f7fe fe25 	bl	800349c <HAL_GetTick>
 8004852:	9000      	str	r0, [sp, #0]
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	0292      	lsls	r2, r2, #10
 800485a:	4213      	tst	r3, r2
 800485c:	d100      	bne.n	8004860 <HAL_RCC_OscConfig+0x134>
 800485e:	e776      	b.n	800474e <HAL_RCC_OscConfig+0x22>
 8004860:	f7fe fe1c 	bl	800349c <HAL_GetTick>
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	1ac0      	subs	r0, r0, r3
 8004868:	2864      	cmp	r0, #100	; 0x64
 800486a:	d9f3      	bls.n	8004854 <HAL_RCC_OscConfig+0x128>
 800486c:	e7d4      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 800486e:	68ea      	ldr	r2, [r5, #12]
 8004870:	2e04      	cmp	r6, #4
 8004872:	d003      	beq.n	800487c <HAL_RCC_OscConfig+0x150>
 8004874:	2e0c      	cmp	r6, #12
 8004876:	d124      	bne.n	80048c2 <HAL_RCC_OscConfig+0x196>
 8004878:	2f00      	cmp	r7, #0
 800487a:	d122      	bne.n	80048c2 <HAL_RCC_OscConfig+0x196>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	075b      	lsls	r3, r3, #29
 8004880:	d501      	bpl.n	8004886 <HAL_RCC_OscConfig+0x15a>
 8004882:	2a00      	cmp	r2, #0
 8004884:	d0b2      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 8004886:	6861      	ldr	r1, [r4, #4]
 8004888:	692b      	ldr	r3, [r5, #16]
 800488a:	4871      	ldr	r0, [pc, #452]	; (8004a50 <HAL_RCC_OscConfig+0x324>)
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	4001      	ands	r1, r0
 8004890:	430b      	orrs	r3, r1
 8004892:	2109      	movs	r1, #9
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	438b      	bics	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	f7ff fefd 	bl	800469c <HAL_RCC_GetSysClockFreq>
 80048a2:	68e3      	ldr	r3, [r4, #12]
 80048a4:	4a65      	ldr	r2, [pc, #404]	; (8004a3c <HAL_RCC_OscConfig+0x310>)
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	0f1b      	lsrs	r3, r3, #28
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	40d8      	lsrs	r0, r3
 80048ae:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_RCC_OscConfig+0x314>)
 80048b0:	6018      	str	r0, [r3, #0]
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <HAL_RCC_OscConfig+0x318>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7fe fdad 	bl	8003414 <HAL_InitTick>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d100      	bne.n	80048c0 <HAL_RCC_OscConfig+0x194>
 80048be:	e74a      	b.n	8004756 <HAL_RCC_OscConfig+0x2a>
 80048c0:	e7ab      	b.n	800481a <HAL_RCC_OscConfig+0xee>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d018      	beq.n	80048fa <HAL_RCC_OscConfig+0x1ce>
 80048c8:	2109      	movs	r1, #9
 80048ca:	438b      	bics	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	f7fe fde4 	bl	800349c <HAL_GetTick>
 80048d4:	0007      	movs	r7, r0
 80048d6:	2204      	movs	r2, #4
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	4213      	tst	r3, r2
 80048dc:	d007      	beq.n	80048ee <HAL_RCC_OscConfig+0x1c2>
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	692b      	ldr	r3, [r5, #16]
 80048e2:	495b      	ldr	r1, [pc, #364]	; (8004a50 <HAL_RCC_OscConfig+0x324>)
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	400a      	ands	r2, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	e733      	b.n	8004756 <HAL_RCC_OscConfig+0x2a>
 80048ee:	f7fe fdd5 	bl	800349c <HAL_GetTick>
 80048f2:	1bc0      	subs	r0, r0, r7
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d9ee      	bls.n	80048d6 <HAL_RCC_OscConfig+0x1aa>
 80048f8:	e78e      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 80048fa:	2201      	movs	r2, #1
 80048fc:	4393      	bics	r3, r2
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	f7fe fdcc 	bl	800349c <HAL_GetTick>
 8004904:	0007      	movs	r7, r0
 8004906:	2204      	movs	r2, #4
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	4213      	tst	r3, r2
 800490c:	d100      	bne.n	8004910 <HAL_RCC_OscConfig+0x1e4>
 800490e:	e722      	b.n	8004756 <HAL_RCC_OscConfig+0x2a>
 8004910:	f7fe fdc4 	bl	800349c <HAL_GetTick>
 8004914:	1bc0      	subs	r0, r0, r7
 8004916:	2802      	cmp	r0, #2
 8004918:	d9f5      	bls.n	8004906 <HAL_RCC_OscConfig+0x1da>
 800491a:	e77d      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 800491c:	69eb      	ldr	r3, [r5, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d020      	beq.n	8004964 <HAL_RCC_OscConfig+0x238>
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4313      	orrs	r3, r2
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fe fdb6 	bl	800349c <HAL_GetTick>
 8004930:	0007      	movs	r7, r0
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	0092      	lsls	r2, r2, #2
 8004938:	4213      	tst	r3, r2
 800493a:	d00d      	beq.n	8004958 <HAL_RCC_OscConfig+0x22c>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <HAL_RCC_OscConfig+0x30c>)
 8004940:	4013      	ands	r3, r2
 8004942:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004944:	4313      	orrs	r3, r2
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6862      	ldr	r2, [r4, #4]
 800494a:	6a2b      	ldr	r3, [r5, #32]
 800494c:	0212      	lsls	r2, r2, #8
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	0a12      	lsrs	r2, r2, #8
 8004952:	4313      	orrs	r3, r2
 8004954:	6063      	str	r3, [r4, #4]
 8004956:	e72b      	b.n	80047b0 <HAL_RCC_OscConfig+0x84>
 8004958:	f7fe fda0 	bl	800349c <HAL_GetTick>
 800495c:	1bc0      	subs	r0, r0, r7
 800495e:	2802      	cmp	r0, #2
 8004960:	d9e7      	bls.n	8004932 <HAL_RCC_OscConfig+0x206>
 8004962:	e759      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <HAL_RCC_OscConfig+0x328>)
 8004968:	4013      	ands	r3, r2
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	f7fe fd96 	bl	800349c <HAL_GetTick>
 8004970:	0007      	movs	r7, r0
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	0092      	lsls	r2, r2, #2
 8004978:	4213      	tst	r3, r2
 800497a:	d100      	bne.n	800497e <HAL_RCC_OscConfig+0x252>
 800497c:	e718      	b.n	80047b0 <HAL_RCC_OscConfig+0x84>
 800497e:	f7fe fd8d 	bl	800349c <HAL_GetTick>
 8004982:	1bc0      	subs	r0, r0, r7
 8004984:	2802      	cmp	r0, #2
 8004986:	d9f4      	bls.n	8004972 <HAL_RCC_OscConfig+0x246>
 8004988:	e746      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 800498a:	696a      	ldr	r2, [r5, #20]
 800498c:	2301      	movs	r3, #1
 800498e:	2a00      	cmp	r2, #0
 8004990:	d010      	beq.n	80049b4 <HAL_RCC_OscConfig+0x288>
 8004992:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004994:	4313      	orrs	r3, r2
 8004996:	6523      	str	r3, [r4, #80]	; 0x50
 8004998:	f7fe fd80 	bl	800349c <HAL_GetTick>
 800499c:	0007      	movs	r7, r0
 800499e:	2202      	movs	r2, #2
 80049a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049a2:	4213      	tst	r3, r2
 80049a4:	d000      	beq.n	80049a8 <HAL_RCC_OscConfig+0x27c>
 80049a6:	e707      	b.n	80047b8 <HAL_RCC_OscConfig+0x8c>
 80049a8:	f7fe fd78 	bl	800349c <HAL_GetTick>
 80049ac:	1bc0      	subs	r0, r0, r7
 80049ae:	2802      	cmp	r0, #2
 80049b0:	d9f5      	bls.n	800499e <HAL_RCC_OscConfig+0x272>
 80049b2:	e731      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 80049b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049b6:	439a      	bics	r2, r3
 80049b8:	6522      	str	r2, [r4, #80]	; 0x50
 80049ba:	f7fe fd6f 	bl	800349c <HAL_GetTick>
 80049be:	0007      	movs	r7, r0
 80049c0:	2202      	movs	r2, #2
 80049c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049c4:	4213      	tst	r3, r2
 80049c6:	d100      	bne.n	80049ca <HAL_RCC_OscConfig+0x29e>
 80049c8:	e6f6      	b.n	80047b8 <HAL_RCC_OscConfig+0x8c>
 80049ca:	f7fe fd67 	bl	800349c <HAL_GetTick>
 80049ce:	1bc0      	subs	r0, r0, r7
 80049d0:	2802      	cmp	r0, #2
 80049d2:	d9f5      	bls.n	80049c0 <HAL_RCC_OscConfig+0x294>
 80049d4:	e720      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	2100      	movs	r1, #0
 80049da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049dc:	055b      	lsls	r3, r3, #21
 80049de:	9100      	str	r1, [sp, #0]
 80049e0:	421a      	tst	r2, r3
 80049e2:	d104      	bne.n	80049ee <HAL_RCC_OscConfig+0x2c2>
 80049e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049e6:	4313      	orrs	r3, r2
 80049e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80049ea:	2301      	movs	r3, #1
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	4f19      	ldr	r7, [pc, #100]	; (8004a58 <HAL_RCC_OscConfig+0x32c>)
 80049f2:	0052      	lsls	r2, r2, #1
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4213      	tst	r3, r2
 80049f8:	d008      	beq.n	8004a0c <HAL_RCC_OscConfig+0x2e0>
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	68ab      	ldr	r3, [r5, #8]
 80049fe:	0052      	lsls	r2, r2, #1
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d12b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x330>
 8004a04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a06:	4313      	orrs	r3, r2
 8004a08:	6523      	str	r3, [r4, #80]	; 0x50
 8004a0a:	e04c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x37a>
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	0052      	lsls	r2, r2, #1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	f7fe fd41 	bl	800349c <HAL_GetTick>
 8004a1a:	9001      	str	r0, [sp, #4]
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	0052      	lsls	r2, r2, #1
 8004a22:	4213      	tst	r3, r2
 8004a24:	d1e9      	bne.n	80049fa <HAL_RCC_OscConfig+0x2ce>
 8004a26:	f7fe fd39 	bl	800349c <HAL_GetTick>
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	1ac0      	subs	r0, r0, r3
 8004a2e:	2864      	cmp	r0, #100	; 0x64
 8004a30:	d9f4      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
 8004a32:	e6f1      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004a34:	40021000 	.word	0x40021000
 8004a38:	ffff1fff 	.word	0xffff1fff
 8004a3c:	08006a70 	.word	0x08006a70
 8004a40:	20000008 	.word	0x20000008
 8004a44:	200000a0 	.word	0x200000a0
 8004a48:	fffeffff 	.word	0xfffeffff
 8004a4c:	fffbffff 	.word	0xfffbffff
 8004a50:	ffffe0ff 	.word	0xffffe0ff
 8004a54:	fffffeff 	.word	0xfffffeff
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <HAL_RCC_OscConfig+0x362>
 8004a60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a62:	4a6b      	ldr	r2, [pc, #428]	; (8004c10 <HAL_RCC_OscConfig+0x4e4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	6523      	str	r3, [r4, #80]	; 0x50
 8004a68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a6a:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <HAL_RCC_OscConfig+0x4e8>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	6523      	str	r3, [r4, #80]	; 0x50
 8004a70:	f7fe fd14 	bl	800349c <HAL_GetTick>
 8004a74:	0007      	movs	r7, r0
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a7a:	0092      	lsls	r2, r2, #2
 8004a7c:	4213      	tst	r3, r2
 8004a7e:	d01a      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x38a>
 8004a80:	f7fe fd0c 	bl	800349c <HAL_GetTick>
 8004a84:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x4ec>)
 8004a86:	1bc0      	subs	r0, r0, r7
 8004a88:	4298      	cmp	r0, r3
 8004a8a:	d9f4      	bls.n	8004a76 <HAL_RCC_OscConfig+0x34a>
 8004a8c:	e6c4      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004a8e:	21a0      	movs	r1, #160	; 0xa0
 8004a90:	00c9      	lsls	r1, r1, #3
 8004a92:	428b      	cmp	r3, r1
 8004a94:	d118      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x39c>
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6523      	str	r3, [r4, #80]	; 0x50
 8004aa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	6522      	str	r2, [r4, #80]	; 0x50
 8004aa6:	f7fe fcf9 	bl	800349c <HAL_GetTick>
 8004aaa:	0007      	movs	r7, r0
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4213      	tst	r3, r2
 8004ab4:	d010      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x3ac>
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d000      	beq.n	8004abe <HAL_RCC_OscConfig+0x392>
 8004abc:	e680      	b.n	80047c0 <HAL_RCC_OscConfig+0x94>
 8004abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ac0:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_RCC_OscConfig+0x4f0>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ac6:	e67b      	b.n	80047c0 <HAL_RCC_OscConfig+0x94>
 8004ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004aca:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_RCC_OscConfig+0x4e4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	6523      	str	r3, [r4, #80]	; 0x50
 8004ad0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ad2:	4a50      	ldr	r2, [pc, #320]	; (8004c14 <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	e797      	b.n	8004a08 <HAL_RCC_OscConfig+0x2dc>
 8004ad8:	f7fe fce0 	bl	800349c <HAL_GetTick>
 8004adc:	4b4e      	ldr	r3, [pc, #312]	; (8004c18 <HAL_RCC_OscConfig+0x4ec>)
 8004ade:	1bc0      	subs	r0, r0, r7
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	d9e3      	bls.n	8004aac <HAL_RCC_OscConfig+0x380>
 8004ae4:	e698      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004ae6:	69a9      	ldr	r1, [r5, #24]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4a4d      	ldr	r2, [pc, #308]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004aec:	2900      	cmp	r1, #0
 8004aee:	d018      	beq.n	8004b22 <HAL_RCC_OscConfig+0x3f6>
 8004af0:	68a1      	ldr	r1, [r4, #8]
 8004af2:	4319      	orrs	r1, r3
 8004af4:	60a1      	str	r1, [r4, #8]
 8004af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6363      	str	r3, [r4, #52]	; 0x34
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	6a11      	ldr	r1, [r2, #32]
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	f7fe fcc9 	bl	800349c <HAL_GetTick>
 8004b0a:	0007      	movs	r7, r0
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	4213      	tst	r3, r2
 8004b12:	d000      	beq.n	8004b16 <HAL_RCC_OscConfig+0x3ea>
 8004b14:	e658      	b.n	80047c8 <HAL_RCC_OscConfig+0x9c>
 8004b16:	f7fe fcc1 	bl	800349c <HAL_GetTick>
 8004b1a:	1bc0      	subs	r0, r0, r7
 8004b1c:	2802      	cmp	r0, #2
 8004b1e:	d9f5      	bls.n	8004b0c <HAL_RCC_OscConfig+0x3e0>
 8004b20:	e67a      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004b22:	68a1      	ldr	r1, [r4, #8]
 8004b24:	4399      	bics	r1, r3
 8004b26:	60a1      	str	r1, [r4, #8]
 8004b28:	6a13      	ldr	r3, [r2, #32]
 8004b2a:	493e      	ldr	r1, [pc, #248]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	6213      	str	r3, [r2, #32]
 8004b30:	f7fe fcb4 	bl	800349c <HAL_GetTick>
 8004b34:	0007      	movs	r7, r0
 8004b36:	2202      	movs	r2, #2
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	4213      	tst	r3, r2
 8004b3c:	d100      	bne.n	8004b40 <HAL_RCC_OscConfig+0x414>
 8004b3e:	e643      	b.n	80047c8 <HAL_RCC_OscConfig+0x9c>
 8004b40:	f7fe fcac 	bl	800349c <HAL_GetTick>
 8004b44:	1bc0      	subs	r0, r0, r7
 8004b46:	2802      	cmp	r0, #2
 8004b48:	d9f5      	bls.n	8004b36 <HAL_RCC_OscConfig+0x40a>
 8004b4a:	e665      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004b4c:	2e0c      	cmp	r6, #12
 8004b4e:	d043      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4ac>
 8004b50:	4a35      	ldr	r2, [pc, #212]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d12e      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x488>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	2780      	movs	r7, #128	; 0x80
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	f7fe fc9d 	bl	800349c <HAL_GetTick>
 8004b62:	0006      	movs	r6, r0
 8004b64:	04bf      	lsls	r7, r7, #18
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	423b      	tst	r3, r7
 8004b6a:	d11d      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
 8004b6c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004b6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b70:	68e2      	ldr	r2, [r4, #12]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	492d      	ldr	r1, [pc, #180]	; (8004c2c <HAL_RCC_OscConfig+0x500>)
 8004b76:	2680      	movs	r6, #128	; 0x80
 8004b78:	400a      	ands	r2, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004b7e:	04b6      	lsls	r6, r6, #18
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60e3      	str	r3, [r4, #12]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	6822      	ldr	r2, [r4, #0]
 8004b88:	045b      	lsls	r3, r3, #17
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	f7fe fc85 	bl	800349c <HAL_GetTick>
 8004b92:	0005      	movs	r5, r0
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	4233      	tst	r3, r6
 8004b98:	d000      	beq.n	8004b9c <HAL_RCC_OscConfig+0x470>
 8004b9a:	e619      	b.n	80047d0 <HAL_RCC_OscConfig+0xa4>
 8004b9c:	f7fe fc7e 	bl	800349c <HAL_GetTick>
 8004ba0:	1b40      	subs	r0, r0, r5
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	d9f6      	bls.n	8004b94 <HAL_RCC_OscConfig+0x468>
 8004ba6:	e637      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004ba8:	f7fe fc78 	bl	800349c <HAL_GetTick>
 8004bac:	1b80      	subs	r0, r0, r6
 8004bae:	2802      	cmp	r0, #2
 8004bb0:	d9d9      	bls.n	8004b66 <HAL_RCC_OscConfig+0x43a>
 8004bb2:	e631      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	2680      	movs	r6, #128	; 0x80
 8004bb8:	4013      	ands	r3, r2
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	f7fe fc6e 	bl	800349c <HAL_GetTick>
 8004bc0:	0005      	movs	r5, r0
 8004bc2:	04b6      	lsls	r6, r6, #18
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	4233      	tst	r3, r6
 8004bc8:	d100      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4a0>
 8004bca:	e601      	b.n	80047d0 <HAL_RCC_OscConfig+0xa4>
 8004bcc:	f7fe fc66 	bl	800349c <HAL_GetTick>
 8004bd0:	1b40      	subs	r0, r0, r5
 8004bd2:	2802      	cmp	r0, #2
 8004bd4:	d9f6      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x498>
 8004bd6:	e61f      	b.n	8004818 <HAL_RCC_OscConfig+0xec>
 8004bd8:	0018      	movs	r0, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d100      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4b4>
 8004bde:	e61c      	b.n	800481a <HAL_RCC_OscConfig+0xee>
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	68e3      	ldr	r3, [r4, #12]
 8004be4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004be6:	0252      	lsls	r2, r2, #9
 8004be8:	401a      	ands	r2, r3
 8004bea:	428a      	cmp	r2, r1
 8004bec:	d000      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x4c4>
 8004bee:	e5fd      	b.n	80047ec <HAL_RCC_OscConfig+0xc0>
 8004bf0:	22f0      	movs	r2, #240	; 0xf0
 8004bf2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004bf4:	0392      	lsls	r2, r2, #14
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	d000      	beq.n	8004bfe <HAL_RCC_OscConfig+0x4d2>
 8004bfc:	e5f6      	b.n	80047ec <HAL_RCC_OscConfig+0xc0>
 8004bfe:	22c0      	movs	r2, #192	; 0xc0
 8004c00:	0412      	lsls	r2, r2, #16
 8004c02:	4013      	ands	r3, r2
 8004c04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d100      	bne.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
 8004c0a:	e5e1      	b.n	80047d0 <HAL_RCC_OscConfig+0xa4>
 8004c0c:	e5ee      	b.n	80047ec <HAL_RCC_OscConfig+0xc0>
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffbff 	.word	0xfffffbff
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	efffffff 	.word	0xefffffff
 8004c20:	40010000 	.word	0x40010000
 8004c24:	ffffdfff 	.word	0xffffdfff
 8004c28:	feffffff 	.word	0xfeffffff
 8004c2c:	ff02ffff 	.word	0xff02ffff

08004c30 <HAL_RCC_ClockConfig>:
 8004c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c32:	1e04      	subs	r4, r0, #0
 8004c34:	9101      	str	r1, [sp, #4]
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xc>
 8004c38:	2001      	movs	r0, #1
 8004c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c3c:	2501      	movs	r5, #1
 8004c3e:	4e5b      	ldr	r6, [pc, #364]	; (8004dac <HAL_RCC_ClockConfig+0x17c>)
 8004c40:	9a01      	ldr	r2, [sp, #4]
 8004c42:	6833      	ldr	r3, [r6, #0]
 8004c44:	402b      	ands	r3, r5
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d331      	bcc.n	8004cae <HAL_RCC_ClockConfig+0x7e>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	0793      	lsls	r3, r2, #30
 8004c4e:	d443      	bmi.n	8004cd8 <HAL_RCC_ClockConfig+0xa8>
 8004c50:	07d3      	lsls	r3, r2, #31
 8004c52:	d449      	bmi.n	8004ce8 <HAL_RCC_ClockConfig+0xb8>
 8004c54:	2501      	movs	r5, #1
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	9a01      	ldr	r2, [sp, #4]
 8004c5a:	402b      	ands	r3, r5
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d909      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x44>
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	43ab      	bics	r3, r5
 8004c64:	6033      	str	r3, [r6, #0]
 8004c66:	f7fe fc19 	bl	800349c <HAL_GetTick>
 8004c6a:	0007      	movs	r7, r0
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	422b      	tst	r3, r5
 8004c70:	d000      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x44>
 8004c72:	e08c      	b.n	8004d8e <HAL_RCC_ClockConfig+0x15e>
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	4d4e      	ldr	r5, [pc, #312]	; (8004db0 <HAL_RCC_ClockConfig+0x180>)
 8004c78:	0753      	lsls	r3, r2, #29
 8004c7a:	d500      	bpl.n	8004c7e <HAL_RCC_ClockConfig+0x4e>
 8004c7c:	e08f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x16e>
 8004c7e:	0713      	lsls	r3, r2, #28
 8004c80:	d506      	bpl.n	8004c90 <HAL_RCC_ClockConfig+0x60>
 8004c82:	68e9      	ldr	r1, [r5, #12]
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	4a4b      	ldr	r2, [pc, #300]	; (8004db4 <HAL_RCC_ClockConfig+0x184>)
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60eb      	str	r3, [r5, #12]
 8004c90:	f7ff fd04 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004c94:	68eb      	ldr	r3, [r5, #12]
 8004c96:	4a48      	ldr	r2, [pc, #288]	; (8004db8 <HAL_RCC_ClockConfig+0x188>)
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	0f1b      	lsrs	r3, r3, #28
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	40d8      	lsrs	r0, r3
 8004ca0:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <HAL_RCC_ClockConfig+0x18c>)
 8004ca2:	6018      	str	r0, [r3, #0]
 8004ca4:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_RCC_ClockConfig+0x190>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f7fe fbb4 	bl	8003414 <HAL_InitTick>
 8004cac:	e7c5      	b.n	8004c3a <HAL_RCC_ClockConfig+0xa>
 8004cae:	6833      	ldr	r3, [r6, #0]
 8004cb0:	9a01      	ldr	r2, [sp, #4]
 8004cb2:	43ab      	bics	r3, r5
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	6033      	str	r3, [r6, #0]
 8004cb8:	f7fe fbf0 	bl	800349c <HAL_GetTick>
 8004cbc:	0007      	movs	r7, r0
 8004cbe:	6833      	ldr	r3, [r6, #0]
 8004cc0:	9a01      	ldr	r2, [sp, #4]
 8004cc2:	402b      	ands	r3, r5
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d0c0      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x1a>
 8004cc8:	f7fe fbe8 	bl	800349c <HAL_GetTick>
 8004ccc:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004cce:	1bc0      	subs	r0, r0, r7
 8004cd0:	4298      	cmp	r0, r3
 8004cd2:	d9f4      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x8e>
 8004cd4:	2003      	movs	r0, #3
 8004cd6:	e7b0      	b.n	8004c3a <HAL_RCC_ClockConfig+0xa>
 8004cd8:	20f0      	movs	r0, #240	; 0xf0
 8004cda:	4935      	ldr	r1, [pc, #212]	; (8004db0 <HAL_RCC_ClockConfig+0x180>)
 8004cdc:	68cb      	ldr	r3, [r1, #12]
 8004cde:	4383      	bics	r3, r0
 8004ce0:	68a0      	ldr	r0, [r4, #8]
 8004ce2:	4303      	orrs	r3, r0
 8004ce4:	60cb      	str	r3, [r1, #12]
 8004ce6:	e7b3      	b.n	8004c50 <HAL_RCC_ClockConfig+0x20>
 8004ce8:	4d31      	ldr	r5, [pc, #196]	; (8004db0 <HAL_RCC_ClockConfig+0x180>)
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	2a02      	cmp	r2, #2
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf4>
 8004cf2:	039b      	lsls	r3, r3, #14
 8004cf4:	d5a0      	bpl.n	8004c38 <HAL_RCC_ClockConfig+0x8>
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	68eb      	ldr	r3, [r5, #12]
 8004cfa:	438b      	bics	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60eb      	str	r3, [r5, #12]
 8004d00:	f7fe fbcc 	bl	800349c <HAL_GetTick>
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	0007      	movs	r7, r0
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d118      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	68eb      	ldr	r3, [r5, #12]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d09e      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x24>
 8004d16:	f7fe fbc1 	bl	800349c <HAL_GetTick>
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004d1c:	1bc0      	subs	r0, r0, r7
 8004d1e:	4298      	cmp	r0, r3
 8004d20:	d9f4      	bls.n	8004d0c <HAL_RCC_ClockConfig+0xdc>
 8004d22:	e7d7      	b.n	8004cd4 <HAL_RCC_ClockConfig+0xa4>
 8004d24:	2a03      	cmp	r2, #3
 8004d26:	d102      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xfe>
 8004d28:	019b      	lsls	r3, r3, #6
 8004d2a:	d4e4      	bmi.n	8004cf6 <HAL_RCC_ClockConfig+0xc6>
 8004d2c:	e784      	b.n	8004c38 <HAL_RCC_ClockConfig+0x8>
 8004d2e:	2a01      	cmp	r2, #1
 8004d30:	d102      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x108>
 8004d32:	075b      	lsls	r3, r3, #29
 8004d34:	d4df      	bmi.n	8004cf6 <HAL_RCC_ClockConfig+0xc6>
 8004d36:	e77f      	b.n	8004c38 <HAL_RCC_ClockConfig+0x8>
 8004d38:	059b      	lsls	r3, r3, #22
 8004d3a:	d4dc      	bmi.n	8004cf6 <HAL_RCC_ClockConfig+0xc6>
 8004d3c:	e77c      	b.n	8004c38 <HAL_RCC_ClockConfig+0x8>
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d10b      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x12a>
 8004d42:	220c      	movs	r2, #12
 8004d44:	68eb      	ldr	r3, [r5, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d083      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x24>
 8004d4c:	f7fe fba6 	bl	800349c <HAL_GetTick>
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004d52:	1bc0      	subs	r0, r0, r7
 8004d54:	4298      	cmp	r0, r3
 8004d56:	d9f4      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x112>
 8004d58:	e7bc      	b.n	8004cd4 <HAL_RCC_ClockConfig+0xa4>
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d011      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x152>
 8004d5e:	220c      	movs	r2, #12
 8004d60:	68eb      	ldr	r3, [r5, #12]
 8004d62:	4213      	tst	r3, r2
 8004d64:	d100      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x138>
 8004d66:	e775      	b.n	8004c54 <HAL_RCC_ClockConfig+0x24>
 8004d68:	f7fe fb98 	bl	800349c <HAL_GetTick>
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004d6e:	1bc0      	subs	r0, r0, r7
 8004d70:	4298      	cmp	r0, r3
 8004d72:	d9f4      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x12e>
 8004d74:	e7ae      	b.n	8004cd4 <HAL_RCC_ClockConfig+0xa4>
 8004d76:	f7fe fb91 	bl	800349c <HAL_GetTick>
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004d7c:	1bc0      	subs	r0, r0, r7
 8004d7e:	4298      	cmp	r0, r3
 8004d80:	d8a8      	bhi.n	8004cd4 <HAL_RCC_ClockConfig+0xa4>
 8004d82:	220c      	movs	r2, #12
 8004d84:	68eb      	ldr	r3, [r5, #12]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d1f4      	bne.n	8004d76 <HAL_RCC_ClockConfig+0x146>
 8004d8c:	e762      	b.n	8004c54 <HAL_RCC_ClockConfig+0x24>
 8004d8e:	f7fe fb85 	bl	800349c <HAL_GetTick>
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_RCC_ClockConfig+0x194>)
 8004d94:	1bc0      	subs	r0, r0, r7
 8004d96:	4298      	cmp	r0, r3
 8004d98:	d800      	bhi.n	8004d9c <HAL_RCC_ClockConfig+0x16c>
 8004d9a:	e767      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
 8004d9c:	e79a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0xa4>
 8004d9e:	68eb      	ldr	r3, [r5, #12]
 8004da0:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <HAL_RCC_ClockConfig+0x198>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	68e1      	ldr	r1, [r4, #12]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	60eb      	str	r3, [r5, #12]
 8004daa:	e768      	b.n	8004c7e <HAL_RCC_ClockConfig+0x4e>
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40021000 	.word	0x40021000
 8004db4:	ffffc7ff 	.word	0xffffc7ff
 8004db8:	08006a70 	.word	0x08006a70
 8004dbc:	20000008 	.word	0x20000008
 8004dc0:	200000a0 	.word	0x200000a0
 8004dc4:	00001388 	.word	0x00001388
 8004dc8:	fffff8ff 	.word	0xfffff8ff

08004dcc <HAL_RCCEx_PeriphCLKConfig>:
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd0:	0005      	movs	r5, r0
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	d53c      	bpl.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4c5a      	ldr	r4, [pc, #360]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004ddc:	055b      	lsls	r3, r3, #21
 8004dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004de0:	9100      	str	r1, [sp, #0]
 8004de2:	421a      	tst	r2, r3
 8004de4:	d104      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004de6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004de8:	4313      	orrs	r3, r2
 8004dea:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dec:	2301      	movs	r3, #1
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2780      	movs	r7, #128	; 0x80
 8004df2:	4e55      	ldr	r6, [pc, #340]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004df4:	007f      	lsls	r7, r7, #1
 8004df6:	6833      	ldr	r3, [r6, #0]
 8004df8:	423b      	tst	r3, r7
 8004dfa:	d062      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004dfc:	686a      	ldr	r2, [r5, #4]
 8004dfe:	23c0      	movs	r3, #192	; 0xc0
 8004e00:	20c0      	movs	r0, #192	; 0xc0
 8004e02:	0016      	movs	r6, r2
 8004e04:	6821      	ldr	r1, [r4, #0]
 8004e06:	0380      	lsls	r0, r0, #14
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	401e      	ands	r6, r3
 8004e0c:	4002      	ands	r2, r0
 8004e0e:	4001      	ands	r1, r0
 8004e10:	428a      	cmp	r2, r1
 8004e12:	d167      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004e14:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004e16:	0011      	movs	r1, r2
 8004e18:	4019      	ands	r1, r3
 8004e1a:	421a      	tst	r2, r3
 8004e1c:	d16a      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004e1e:	6869      	ldr	r1, [r5, #4]
 8004e20:	23c0      	movs	r3, #192	; 0xc0
 8004e22:	000a      	movs	r2, r1
 8004e24:	029b      	lsls	r3, r3, #10
 8004e26:	401a      	ands	r2, r3
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	4847      	ldr	r0, [pc, #284]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004e30:	4003      	ands	r3, r0
 8004e32:	20c0      	movs	r0, #192	; 0xc0
 8004e34:	0380      	lsls	r0, r0, #14
 8004e36:	4001      	ands	r1, r0
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	9b00      	ldr	r3, [sp, #0]
 8004e42:	6522      	str	r2, [r4, #80]	; 0x50
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d103      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e4a:	4a41      	ldr	r2, [pc, #260]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	d506      	bpl.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e56:	2003      	movs	r0, #3
 8004e58:	493a      	ldr	r1, [pc, #232]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e5c:	4382      	bics	r2, r0
 8004e5e:	68a8      	ldr	r0, [r5, #8]
 8004e60:	4302      	orrs	r2, r0
 8004e62:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004e64:	079a      	lsls	r2, r3, #30
 8004e66:	d506      	bpl.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8004e68:	200c      	movs	r0, #12
 8004e6a:	4936      	ldr	r1, [pc, #216]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e6e:	4382      	bics	r2, r0
 8004e70:	68e8      	ldr	r0, [r5, #12]
 8004e72:	4302      	orrs	r2, r0
 8004e74:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004e76:	075a      	lsls	r2, r3, #29
 8004e78:	d506      	bpl.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8004e7a:	4932      	ldr	r1, [pc, #200]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e7c:	4835      	ldr	r0, [pc, #212]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004e7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e80:	4002      	ands	r2, r0
 8004e82:	6928      	ldr	r0, [r5, #16]
 8004e84:	4302      	orrs	r2, r0
 8004e86:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004e88:	071a      	lsls	r2, r3, #28
 8004e8a:	d506      	bpl.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004e8c:	492d      	ldr	r1, [pc, #180]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e8e:	4832      	ldr	r0, [pc, #200]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e92:	4002      	ands	r2, r0
 8004e94:	6968      	ldr	r0, [r5, #20]
 8004e96:	4302      	orrs	r2, r0
 8004e98:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004e9a:	065a      	lsls	r2, r3, #25
 8004e9c:	d506      	bpl.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004e9e:	4929      	ldr	r1, [pc, #164]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004ea0:	482e      	ldr	r0, [pc, #184]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004ea2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004ea4:	4002      	ands	r2, r0
 8004ea6:	69e8      	ldr	r0, [r5, #28]
 8004ea8:	4302      	orrs	r2, r0
 8004eaa:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004eac:	2000      	movs	r0, #0
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	d517      	bpl.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004eb4:	492a      	ldr	r1, [pc, #168]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004eb6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004eb8:	400b      	ands	r3, r1
 8004eba:	69a9      	ldr	r1, [r5, #24]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ec0:	e00f      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	433b      	orrs	r3, r7
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	f7fe fae8 	bl	800349c <HAL_GetTick>
 8004ecc:	9001      	str	r0, [sp, #4]
 8004ece:	6833      	ldr	r3, [r6, #0]
 8004ed0:	423b      	tst	r3, r7
 8004ed2:	d193      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004ed4:	f7fe fae2 	bl	800349c <HAL_GetTick>
 8004ed8:	9b01      	ldr	r3, [sp, #4]
 8004eda:	1ac0      	subs	r0, r0, r3
 8004edc:	2864      	cmp	r0, #100	; 0x64
 8004ede:	d9f6      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004ee0:	2003      	movs	r0, #3
 8004ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ee4:	429e      	cmp	r6, r3
 8004ee6:	d195      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	2001      	movs	r0, #1
 8004eec:	0392      	lsls	r2, r2, #14
 8004eee:	d400      	bmi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004ef0:	e790      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004ef2:	e7f6      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ef4:	42b1      	cmp	r1, r6
 8004ef6:	d100      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004ef8:	e791      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	069b      	lsls	r3, r3, #26
 8004efe:	d400      	bmi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f00:	e78d      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004f06:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004f08:	0312      	lsls	r2, r2, #12
 8004f0a:	4302      	orrs	r2, r0
 8004f0c:	6522      	str	r2, [r4, #80]	; 0x50
 8004f0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004f12:	4815      	ldr	r0, [pc, #84]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004f14:	400b      	ands	r3, r1
 8004f16:	4002      	ands	r2, r0
 8004f18:	6522      	str	r2, [r4, #80]	; 0x50
 8004f1a:	6523      	str	r3, [r4, #80]	; 0x50
 8004f1c:	05cb      	lsls	r3, r1, #23
 8004f1e:	d400      	bmi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004f20:	e77d      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f22:	f7fe fabb 	bl	800349c <HAL_GetTick>
 8004f26:	2780      	movs	r7, #128	; 0x80
 8004f28:	0006      	movs	r6, r0
 8004f2a:	00bf      	lsls	r7, r7, #2
 8004f2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f2e:	423b      	tst	r3, r7
 8004f30:	d000      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f32:	e774      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f34:	f7fe fab2 	bl	800349c <HAL_GetTick>
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004f3a:	1b80      	subs	r0, r0, r6
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	d9f5      	bls.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f40:	e7ce      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	ffcfffff 	.word	0xffcfffff
 8004f50:	efffffff 	.word	0xefffffff
 8004f54:	fffff3ff 	.word	0xfffff3ff
 8004f58:	ffffcfff 	.word	0xffffcfff
 8004f5c:	fbffffff 	.word	0xfbffffff
 8004f60:	fff3ffff 	.word	0xfff3ffff
 8004f64:	fffcffff 	.word	0xfffcffff
 8004f68:	fff7ffff 	.word	0xfff7ffff
 8004f6c:	00001388 	.word	0x00001388

08004f70 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	001d      	movs	r5, r3
 8004f74:	0017      	movs	r7, r2
 8004f76:	b085      	sub	sp, #20
 8004f78:	000e      	movs	r6, r1
 8004f7a:	0004      	movs	r4, r0
 8004f7c:	f7fe fa8e 	bl	800349c <HAL_GetTick>
 8004f80:	19ed      	adds	r5, r5, r7
 8004f82:	1a2d      	subs	r5, r5, r0
 8004f84:	f7fe fa8a 	bl	800349c <HAL_GetTick>
 8004f88:	4b25      	ldr	r3, [pc, #148]	; (8005020 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
 8004f8a:	9001      	str	r0, [sp, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	436b      	muls	r3, r5
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	4033      	ands	r3, r6
 8004f9c:	429e      	cmp	r6, r3
 8004f9e:	d001      	beq.n	8004fa4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e032      	b.n	800500a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
 8004fa4:	1c7b      	adds	r3, r7, #1
 8004fa6:	d0f7      	beq.n	8004f98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
 8004fa8:	f7fe fa78 	bl	800349c <HAL_GetTick>
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	1ac0      	subs	r0, r0, r3
 8004fb0:	42a8      	cmp	r0, r5
 8004fb2:	d32c      	bcc.n	800500e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
 8004fb4:	21e0      	movs	r1, #224	; 0xe0
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	438a      	bics	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	2282      	movs	r2, #130	; 0x82
 8004fc0:	6861      	ldr	r1, [r4, #4]
 8004fc2:	0052      	lsls	r2, r2, #1
 8004fc4:	4291      	cmp	r1, r2
 8004fc6:	d10c      	bne.n	8004fe2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	68a2      	ldr	r2, [r4, #8]
 8004fcc:	0209      	lsls	r1, r1, #8
 8004fce:	428a      	cmp	r2, r1
 8004fd0:	d003      	beq.n	8004fda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	00c9      	lsls	r1, r1, #3
 8004fd6:	428a      	cmp	r2, r1
 8004fd8:	d103      	bne.n	8004fe2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004fda:	2140      	movs	r1, #64	; 0x40
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	438a      	bics	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	2180      	movs	r1, #128	; 0x80
 8004fe4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004fe6:	0189      	lsls	r1, r1, #6
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	d106      	bne.n	8004ffa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	480d      	ldr	r0, [pc, #52]	; (8005024 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004ff0:	4001      	ands	r1, r0
 8004ff2:	6019      	str	r1, [r3, #0]
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	0023      	movs	r3, r4
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	3351      	adds	r3, #81	; 0x51
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	2003      	movs	r0, #3
 8005006:	3450      	adds	r4, #80	; 0x50
 8005008:	7023      	strb	r3, [r4, #0]
 800500a:	b005      	add	sp, #20
 800500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	4193      	sbcs	r3, r2
 8005014:	425b      	negs	r3, r3
 8005016:	401d      	ands	r5, r3
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	e7ba      	b.n	8004f94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	20000008 	.word	0x20000008
 8005024:	ffffdfff 	.word	0xffffdfff

08005028 <SPI_EndRxTxTransaction>:
 8005028:	4b16      	ldr	r3, [pc, #88]	; (8005084 <SPI_EndRxTxTransaction+0x5c>)
 800502a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800502c:	0004      	movs	r4, r0
 800502e:	000d      	movs	r5, r1
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	4915      	ldr	r1, [pc, #84]	; (8005088 <SPI_EndRxTxTransaction+0x60>)
 8005034:	0016      	movs	r6, r2
 8005036:	f7fb f885 	bl	8000144 <__udivsi3>
 800503a:	23fa      	movs	r3, #250	; 0xfa
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4343      	muls	r3, r0
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	2382      	movs	r3, #130	; 0x82
 8005044:	6861      	ldr	r1, [r4, #4]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4299      	cmp	r1, r3
 800504c:	d10d      	bne.n	800506a <SPI_EndRxTxTransaction+0x42>
 800504e:	0033      	movs	r3, r6
 8005050:	002a      	movs	r2, r5
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	0020      	movs	r0, r4
 8005056:	f7ff ff8b 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800505a:	2800      	cmp	r0, #0
 800505c:	d00f      	beq.n	800507e <SPI_EndRxTxTransaction+0x56>
 800505e:	2320      	movs	r3, #32
 8005060:	2003      	movs	r0, #3
 8005062:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005064:	4313      	orrs	r3, r2
 8005066:	6563      	str	r3, [r4, #84]	; 0x54
 8005068:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <SPI_EndRxTxTransaction+0x56>
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	3b01      	subs	r3, #1
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4213      	tst	r3, r2
 800507c:	d1f5      	bne.n	800506a <SPI_EndRxTxTransaction+0x42>
 800507e:	2000      	movs	r0, #0
 8005080:	e7f2      	b.n	8005068 <SPI_EndRxTxTransaction+0x40>
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	20000008 	.word	0x20000008
 8005088:	016e3600 	.word	0x016e3600

0800508c <HAL_SPI_Init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	0004      	movs	r4, r0
 8005090:	2001      	movs	r0, #1
 8005092:	2c00      	cmp	r4, #0
 8005094:	d054      	beq.n	8005140 <HAL_SPI_Init+0xb4>
 8005096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d152      	bne.n	8005142 <HAL_SPI_Init+0xb6>
 800509c:	2282      	movs	r2, #130	; 0x82
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	0052      	lsls	r2, r2, #1
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d000      	beq.n	80050a8 <HAL_SPI_Init+0x1c>
 80050a6:	61e3      	str	r3, [r4, #28]
 80050a8:	2300      	movs	r3, #0
 80050aa:	0025      	movs	r5, r4
 80050ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ae:	3551      	adds	r5, #81	; 0x51
 80050b0:	782b      	ldrb	r3, [r5, #0]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_SPI_Init+0x38>
 80050b8:	0023      	movs	r3, r4
 80050ba:	3350      	adds	r3, #80	; 0x50
 80050bc:	0020      	movs	r0, r4
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	f7fc f80c 	bl	80010dc <HAL_SPI_MspInit>
 80050c4:	2002      	movs	r0, #2
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	7028      	strb	r0, [r5, #0]
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	6866      	ldr	r6, [r4, #4]
 80050ce:	680b      	ldr	r3, [r1, #0]
 80050d0:	68a7      	ldr	r7, [r4, #8]
 80050d2:	4393      	bics	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
 80050d6:	2382      	movs	r3, #130	; 0x82
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4033      	ands	r3, r6
 80050dc:	2684      	movs	r6, #132	; 0x84
 80050de:	0236      	lsls	r6, r6, #8
 80050e0:	403e      	ands	r6, r7
 80050e2:	4333      	orrs	r3, r6
 80050e4:	2680      	movs	r6, #128	; 0x80
 80050e6:	68e7      	ldr	r7, [r4, #12]
 80050e8:	0136      	lsls	r6, r6, #4
 80050ea:	403e      	ands	r6, r7
 80050ec:	4333      	orrs	r3, r6
 80050ee:	6926      	ldr	r6, [r4, #16]
 80050f0:	69a2      	ldr	r2, [r4, #24]
 80050f2:	4030      	ands	r0, r6
 80050f4:	2601      	movs	r6, #1
 80050f6:	4303      	orrs	r3, r0
 80050f8:	6960      	ldr	r0, [r4, #20]
 80050fa:	69e7      	ldr	r7, [r4, #28]
 80050fc:	4030      	ands	r0, r6
 80050fe:	4303      	orrs	r3, r0
 8005100:	2080      	movs	r0, #128	; 0x80
 8005102:	0080      	lsls	r0, r0, #2
 8005104:	4010      	ands	r0, r2
 8005106:	4303      	orrs	r3, r0
 8005108:	2038      	movs	r0, #56	; 0x38
 800510a:	4038      	ands	r0, r7
 800510c:	4303      	orrs	r3, r0
 800510e:	2080      	movs	r0, #128	; 0x80
 8005110:	6a27      	ldr	r7, [r4, #32]
 8005112:	0c12      	lsrs	r2, r2, #16
 8005114:	4038      	ands	r0, r7
 8005116:	4303      	orrs	r3, r0
 8005118:	2080      	movs	r0, #128	; 0x80
 800511a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800511c:	0180      	lsls	r0, r0, #6
 800511e:	4038      	ands	r0, r7
 8005120:	4303      	orrs	r3, r0
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	2304      	movs	r3, #4
 8005126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005128:	401a      	ands	r2, r3
 800512a:	330c      	adds	r3, #12
 800512c:	4003      	ands	r3, r0
 800512e:	2000      	movs	r0, #0
 8005130:	431a      	orrs	r2, r3
 8005132:	604a      	str	r2, [r1, #4]
 8005134:	69cb      	ldr	r3, [r1, #28]
 8005136:	4a05      	ldr	r2, [pc, #20]	; (800514c <HAL_SPI_Init+0xc0>)
 8005138:	4013      	ands	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]
 800513c:	6560      	str	r0, [r4, #84]	; 0x54
 800513e:	702e      	strb	r6, [r5, #0]
 8005140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005142:	2300      	movs	r3, #0
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	6163      	str	r3, [r4, #20]
 8005148:	e7ae      	b.n	80050a8 <HAL_SPI_Init+0x1c>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	fffff7ff 	.word	0xfffff7ff

08005150 <HAL_SPI_Transmit_DMA>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	0006      	movs	r6, r0
 8005154:	3650      	adds	r6, #80	; 0x50
 8005156:	7833      	ldrb	r3, [r6, #0]
 8005158:	0004      	movs	r4, r0
 800515a:	2502      	movs	r5, #2
 800515c:	2b01      	cmp	r3, #1
 800515e:	d03e      	beq.n	80051de <HAL_SPI_Transmit_DMA+0x8e>
 8005160:	2301      	movs	r3, #1
 8005162:	0007      	movs	r7, r0
 8005164:	7033      	strb	r3, [r6, #0]
 8005166:	3751      	adds	r7, #81	; 0x51
 8005168:	783b      	ldrb	r3, [r7, #0]
 800516a:	b2dd      	uxtb	r5, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d14a      	bne.n	8005206 <HAL_SPI_Transmit_DMA+0xb6>
 8005170:	2900      	cmp	r1, #0
 8005172:	d032      	beq.n	80051da <HAL_SPI_Transmit_DMA+0x8a>
 8005174:	2a00      	cmp	r2, #0
 8005176:	d030      	beq.n	80051da <HAL_SPI_Transmit_DMA+0x8a>
 8005178:	3302      	adds	r3, #2
 800517a:	703b      	strb	r3, [r7, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	6543      	str	r3, [r0, #84]	; 0x54
 8005180:	6383      	str	r3, [r0, #56]	; 0x38
 8005182:	86c2      	strh	r2, [r0, #54]	; 0x36
 8005184:	6443      	str	r3, [r0, #68]	; 0x44
 8005186:	6403      	str	r3, [r0, #64]	; 0x40
 8005188:	8783      	strh	r3, [r0, #60]	; 0x3c
 800518a:	87c3      	strh	r3, [r0, #62]	; 0x3e
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	8682      	strh	r2, [r0, #52]	; 0x34
 8005190:	6301      	str	r1, [r0, #48]	; 0x30
 8005192:	6802      	ldr	r2, [r0, #0]
 8005194:	6880      	ldr	r0, [r0, #8]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	4298      	cmp	r0, r3
 800519a:	d108      	bne.n	80051ae <HAL_SPI_Transmit_DMA+0x5e>
 800519c:	2040      	movs	r0, #64	; 0x40
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	4383      	bics	r3, r0
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	6810      	ldr	r0, [r2, #0]
 80051a8:	01db      	lsls	r3, r3, #7
 80051aa:	4303      	orrs	r3, r0
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80051b0:	4b16      	ldr	r3, [pc, #88]	; (800520c <HAL_SPI_Transmit_DMA+0xbc>)
 80051b2:	320c      	adds	r2, #12
 80051b4:	6303      	str	r3, [r0, #48]	; 0x30
 80051b6:	4b16      	ldr	r3, [pc, #88]	; (8005210 <HAL_SPI_Transmit_DMA+0xc0>)
 80051b8:	62c3      	str	r3, [r0, #44]	; 0x2c
 80051ba:	4b16      	ldr	r3, [pc, #88]	; (8005214 <HAL_SPI_Transmit_DMA+0xc4>)
 80051bc:	6343      	str	r3, [r0, #52]	; 0x34
 80051be:	2300      	movs	r3, #0
 80051c0:	6383      	str	r3, [r0, #56]	; 0x38
 80051c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f7fe fcad 	bl	8003b24 <HAL_DMA_Start_IT>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_SPI_Transmit_DMA+0x92>
 80051ce:	2310      	movs	r3, #16
 80051d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051d2:	4313      	orrs	r3, r2
 80051d4:	6563      	str	r3, [r4, #84]	; 0x54
 80051d6:	2301      	movs	r3, #1
 80051d8:	703b      	strb	r3, [r7, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	7033      	strb	r3, [r6, #0]
 80051de:	0028      	movs	r0, r5
 80051e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e2:	2240      	movs	r2, #64	; 0x40
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	4211      	tst	r1, r2
 80051ea:	d102      	bne.n	80051f2 <HAL_SPI_Transmit_DMA+0xa2>
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	2220      	movs	r2, #32
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	2500      	movs	r5, #0
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	e7e9      	b.n	80051da <HAL_SPI_Transmit_DMA+0x8a>
 8005206:	2502      	movs	r5, #2
 8005208:	e7e7      	b.n	80051da <HAL_SPI_Transmit_DMA+0x8a>
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800524d 	.word	0x0800524d
 8005214:	08005229 	.word	0x08005229

08005218 <HAL_SPI_TxCpltCallback>:
 8005218:	4770      	bx	lr

0800521a <HAL_SPI_TxHalfCpltCallback>:
 800521a:	4770      	bx	lr

0800521c <SPI_DMAHalfTransmitCplt>:
 800521c:	b510      	push	{r4, lr}
 800521e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005220:	f7ff fffb 	bl	800521a <HAL_SPI_TxHalfCpltCallback>
 8005224:	bd10      	pop	{r4, pc}

08005226 <HAL_SPI_ErrorCallback>:
 8005226:	4770      	bx	lr

08005228 <SPI_DMAError>:
 8005228:	2103      	movs	r1, #3
 800522a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800522c:	b510      	push	{r4, lr}
 800522e:	6802      	ldr	r2, [r0, #0]
 8005230:	6853      	ldr	r3, [r2, #4]
 8005232:	438b      	bics	r3, r1
 8005234:	6053      	str	r3, [r2, #4]
 8005236:	2310      	movs	r3, #16
 8005238:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800523a:	4313      	orrs	r3, r2
 800523c:	6543      	str	r3, [r0, #84]	; 0x54
 800523e:	0003      	movs	r3, r0
 8005240:	2201      	movs	r2, #1
 8005242:	3351      	adds	r3, #81	; 0x51
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	f7ff ffee 	bl	8005226 <HAL_SPI_ErrorCallback>
 800524a:	bd10      	pop	{r4, pc}

0800524c <SPI_DMATransmitCplt>:
 800524c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524e:	0005      	movs	r5, r0
 8005250:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005252:	f7fe f923 	bl	800349c <HAL_GetTick>
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	2520      	movs	r5, #32
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0002      	movs	r2, r0
 800525e:	422b      	tst	r3, r5
 8005260:	d127      	bne.n	80052b2 <SPI_DMATransmitCplt+0x66>
 8005262:	2002      	movs	r0, #2
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	43a9      	bics	r1, r5
 800526a:	6059      	str	r1, [r3, #4]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	4381      	bics	r1, r0
 8005270:	6059      	str	r1, [r3, #4]
 8005272:	0020      	movs	r0, r4
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	f7ff fed7 	bl	8005028 <SPI_EndRxTxTransaction>
 800527a:	2800      	cmp	r0, #0
 800527c:	d002      	beq.n	8005284 <SPI_DMATransmitCplt+0x38>
 800527e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005280:	431d      	orrs	r5, r3
 8005282:	6565      	str	r5, [r4, #84]	; 0x54
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <SPI_DMATransmitCplt+0x4c>
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	9201      	str	r2, [sp, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	2300      	movs	r3, #0
 800529a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800529c:	0023      	movs	r3, r4
 800529e:	2201      	movs	r2, #1
 80052a0:	3351      	adds	r3, #81	; 0x51
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <SPI_DMATransmitCplt+0x66>
 80052aa:	0020      	movs	r0, r4
 80052ac:	f7ff ffbb 	bl	8005226 <HAL_SPI_ErrorCallback>
 80052b0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80052b2:	0020      	movs	r0, r4
 80052b4:	f7ff ffb0 	bl	8005218 <HAL_SPI_TxCpltCallback>
 80052b8:	e7fa      	b.n	80052b0 <SPI_DMATransmitCplt+0x64>
	...

080052bc <TIM_Base_SetConfig>:
 80052bc:	2280      	movs	r2, #128	; 0x80
 80052be:	b510      	push	{r4, lr}
 80052c0:	6803      	ldr	r3, [r0, #0]
 80052c2:	05d2      	lsls	r2, r2, #23
 80052c4:	4290      	cmp	r0, r2
 80052c6:	d005      	beq.n	80052d4 <TIM_Base_SetConfig+0x18>
 80052c8:	4c10      	ldr	r4, [pc, #64]	; (800530c <TIM_Base_SetConfig+0x50>)
 80052ca:	42a0      	cmp	r0, r4
 80052cc:	d002      	beq.n	80052d4 <TIM_Base_SetConfig+0x18>
 80052ce:	4c10      	ldr	r4, [pc, #64]	; (8005310 <TIM_Base_SetConfig+0x54>)
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d10f      	bne.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052d4:	2470      	movs	r4, #112	; 0x70
 80052d6:	43a3      	bics	r3, r4
 80052d8:	684c      	ldr	r4, [r1, #4]
 80052da:	4323      	orrs	r3, r4
 80052dc:	4290      	cmp	r0, r2
 80052de:	d005      	beq.n	80052ec <TIM_Base_SetConfig+0x30>
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <TIM_Base_SetConfig+0x50>)
 80052e2:	4290      	cmp	r0, r2
 80052e4:	d002      	beq.n	80052ec <TIM_Base_SetConfig+0x30>
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <TIM_Base_SetConfig+0x54>)
 80052e8:	4290      	cmp	r0, r2
 80052ea:	d103      	bne.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052ec:	4a09      	ldr	r2, [pc, #36]	; (8005314 <TIM_Base_SetConfig+0x58>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ca      	ldr	r2, [r1, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	4393      	bics	r3, r2
 80052f8:	690a      	ldr	r2, [r1, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	6003      	str	r3, [r0, #0]
 80052fe:	688b      	ldr	r3, [r1, #8]
 8005300:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	6283      	str	r3, [r0, #40]	; 0x28
 8005306:	2301      	movs	r3, #1
 8005308:	6143      	str	r3, [r0, #20]
 800530a:	bd10      	pop	{r4, pc}
 800530c:	40010800 	.word	0x40010800
 8005310:	40011400 	.word	0x40011400
 8005314:	fffffcff 	.word	0xfffffcff

08005318 <HAL_TIM_Base_Init>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	0004      	movs	r4, r0
 800531c:	2001      	movs	r0, #1
 800531e:	2c00      	cmp	r4, #0
 8005320:	d01d      	beq.n	800535e <HAL_TIM_Base_Init+0x46>
 8005322:	0025      	movs	r5, r4
 8005324:	3539      	adds	r5, #57	; 0x39
 8005326:	782b      	ldrb	r3, [r5, #0]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <HAL_TIM_Base_Init+0x22>
 800532e:	0023      	movs	r3, r4
 8005330:	3338      	adds	r3, #56	; 0x38
 8005332:	0020      	movs	r0, r4
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	f7fb ff17 	bl	8001168 <HAL_TIM_Base_MspInit>
 800533a:	2302      	movs	r3, #2
 800533c:	702b      	strb	r3, [r5, #0]
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	1d21      	adds	r1, r4, #4
 8005342:	f7ff ffbb 	bl	80052bc <TIM_Base_SetConfig>
 8005346:	0022      	movs	r2, r4
 8005348:	2301      	movs	r3, #1
 800534a:	2000      	movs	r0, #0
 800534c:	323e      	adds	r2, #62	; 0x3e
 800534e:	7013      	strb	r3, [r2, #0]
 8005350:	343d      	adds	r4, #61	; 0x3d
 8005352:	3a04      	subs	r2, #4
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	7053      	strb	r3, [r2, #1]
 8005358:	7093      	strb	r3, [r2, #2]
 800535a:	7023      	strb	r3, [r4, #0]
 800535c:	702b      	strb	r3, [r5, #0]
 800535e:	bd70      	pop	{r4, r5, r6, pc}

08005360 <HAL_TIM_Base_Start_IT>:
 8005360:	0002      	movs	r2, r0
 8005362:	0003      	movs	r3, r0
 8005364:	2001      	movs	r0, #1
 8005366:	3239      	adds	r2, #57	; 0x39
 8005368:	7811      	ldrb	r1, [r2, #0]
 800536a:	4281      	cmp	r1, r0
 800536c:	d119      	bne.n	80053a2 <HAL_TIM_Base_Start_IT+0x42>
 800536e:	2102      	movs	r1, #2
 8005370:	7011      	strb	r1, [r2, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	4302      	orrs	r2, r0
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	2280      	movs	r2, #128	; 0x80
 800537c:	05d2      	lsls	r2, r2, #23
 800537e:	4293      	cmp	r3, r2
 8005380:	d005      	beq.n	800538e <HAL_TIM_Base_Start_IT+0x2e>
 8005382:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <HAL_TIM_Base_Start_IT+0x50>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d002      	beq.n	800538e <HAL_TIM_Base_Start_IT+0x2e>
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <HAL_TIM_Base_Start_IT+0x54>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10a      	bne.n	80053a4 <HAL_TIM_Base_Start_IT+0x44>
 800538e:	2107      	movs	r1, #7
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	2000      	movs	r0, #0
 8005394:	400a      	ands	r2, r1
 8005396:	2a06      	cmp	r2, #6
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_Base_Start_IT+0x42>
 800539a:	2201      	movs	r2, #1
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	4770      	bx	lr
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4310      	orrs	r0, r2
 80053a8:	6018      	str	r0, [r3, #0]
 80053aa:	2000      	movs	r0, #0
 80053ac:	e7f9      	b.n	80053a2 <HAL_TIM_Base_Start_IT+0x42>
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	40010800 	.word	0x40010800
 80053b4:	40011400 	.word	0x40011400

080053b8 <HAL_TIM_ConfigClockSource>:
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	0005      	movs	r5, r0
 80053bc:	2202      	movs	r2, #2
 80053be:	3538      	adds	r5, #56	; 0x38
 80053c0:	782c      	ldrb	r4, [r5, #0]
 80053c2:	0003      	movs	r3, r0
 80053c4:	0010      	movs	r0, r2
 80053c6:	2c01      	cmp	r4, #1
 80053c8:	d01d      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x4e>
 80053ca:	001e      	movs	r6, r3
 80053cc:	2401      	movs	r4, #1
 80053ce:	3639      	adds	r6, #57	; 0x39
 80053d0:	702c      	strb	r4, [r5, #0]
 80053d2:	7032      	strb	r2, [r6, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	484c      	ldr	r0, [pc, #304]	; (8005508 <HAL_TIM_ConfigClockSource+0x150>)
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	4002      	ands	r2, r0
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	680a      	ldr	r2, [r1, #0]
 80053e0:	2a60      	cmp	r2, #96	; 0x60
 80053e2:	d05f      	beq.n	80054a4 <HAL_TIM_ConfigClockSource+0xec>
 80053e4:	d832      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x94>
 80053e6:	2a40      	cmp	r2, #64	; 0x40
 80053e8:	d100      	bne.n	80053ec <HAL_TIM_ConfigClockSource+0x34>
 80053ea:	e074      	b.n	80054d6 <HAL_TIM_ConfigClockSource+0x11e>
 80053ec:	d814      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x60>
 80053ee:	2a20      	cmp	r2, #32
 80053f0:	d00c      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x54>
 80053f2:	d809      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x50>
 80053f4:	2110      	movs	r1, #16
 80053f6:	0010      	movs	r0, r2
 80053f8:	4388      	bics	r0, r1
 80053fa:	d007      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x54>
 80053fc:	0020      	movs	r0, r4
 80053fe:	2301      	movs	r3, #1
 8005400:	7033      	strb	r3, [r6, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	702b      	strb	r3, [r5, #0]
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	2a30      	cmp	r2, #48	; 0x30
 800540a:	d1f7      	bne.n	80053fc <HAL_TIM_ConfigClockSource+0x44>
 800540c:	2070      	movs	r0, #112	; 0x70
 800540e:	6899      	ldr	r1, [r3, #8]
 8005410:	4381      	bics	r1, r0
 8005412:	430a      	orrs	r2, r1
 8005414:	2107      	movs	r1, #7
 8005416:	e032      	b.n	800547e <HAL_TIM_ConfigClockSource+0xc6>
 8005418:	2a50      	cmp	r2, #80	; 0x50
 800541a:	d1ef      	bne.n	80053fc <HAL_TIM_ConfigClockSource+0x44>
 800541c:	6a1f      	ldr	r7, [r3, #32]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	6848      	ldr	r0, [r1, #4]
 8005422:	43a2      	bics	r2, r4
 8005424:	24f0      	movs	r4, #240	; 0xf0
 8005426:	68c9      	ldr	r1, [r1, #12]
 8005428:	621a      	str	r2, [r3, #32]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	43a2      	bics	r2, r4
 800542e:	0014      	movs	r4, r2
 8005430:	010a      	lsls	r2, r1, #4
 8005432:	210a      	movs	r1, #10
 8005434:	438f      	bics	r7, r1
 8005436:	0039      	movs	r1, r7
 8005438:	4322      	orrs	r2, r4
 800543a:	4301      	orrs	r1, r0
 800543c:	619a      	str	r2, [r3, #24]
 800543e:	6219      	str	r1, [r3, #32]
 8005440:	2170      	movs	r1, #112	; 0x70
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	438a      	bics	r2, r1
 8005446:	0011      	movs	r1, r2
 8005448:	2257      	movs	r2, #87	; 0x57
 800544a:	e018      	b.n	800547e <HAL_TIM_ConfigClockSource+0xc6>
 800544c:	2780      	movs	r7, #128	; 0x80
 800544e:	2000      	movs	r0, #0
 8005450:	017f      	lsls	r7, r7, #5
 8005452:	42ba      	cmp	r2, r7
 8005454:	d0d3      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x46>
 8005456:	2080      	movs	r0, #128	; 0x80
 8005458:	0180      	lsls	r0, r0, #6
 800545a:	4282      	cmp	r2, r0
 800545c:	d013      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xce>
 800545e:	0020      	movs	r0, r4
 8005460:	2a70      	cmp	r2, #112	; 0x70
 8005462:	d1cc      	bne.n	80053fe <HAL_TIM_ConfigClockSource+0x46>
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	4829      	ldr	r0, [pc, #164]	; (800550c <HAL_TIM_ConfigClockSource+0x154>)
 8005468:	684c      	ldr	r4, [r1, #4]
 800546a:	4010      	ands	r0, r2
 800546c:	688a      	ldr	r2, [r1, #8]
 800546e:	68c9      	ldr	r1, [r1, #12]
 8005470:	4322      	orrs	r2, r4
 8005472:	0209      	lsls	r1, r1, #8
 8005474:	430a      	orrs	r2, r1
 8005476:	4302      	orrs	r2, r0
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	2277      	movs	r2, #119	; 0x77
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	430a      	orrs	r2, r1
 8005480:	2000      	movs	r0, #0
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	e7bb      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x46>
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	4820      	ldr	r0, [pc, #128]	; (800550c <HAL_TIM_ConfigClockSource+0x154>)
 800548a:	684c      	ldr	r4, [r1, #4]
 800548c:	4010      	ands	r0, r2
 800548e:	688a      	ldr	r2, [r1, #8]
 8005490:	68c9      	ldr	r1, [r1, #12]
 8005492:	4322      	orrs	r2, r4
 8005494:	0209      	lsls	r1, r1, #8
 8005496:	430a      	orrs	r2, r1
 8005498:	4302      	orrs	r2, r0
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	2280      	movs	r2, #128	; 0x80
 800549e:	6899      	ldr	r1, [r3, #8]
 80054a0:	01d2      	lsls	r2, r2, #7
 80054a2:	e7ec      	b.n	800547e <HAL_TIM_ConfigClockSource+0xc6>
 80054a4:	6848      	ldr	r0, [r1, #4]
 80054a6:	68cf      	ldr	r7, [r1, #12]
 80054a8:	2110      	movs	r1, #16
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	4c18      	ldr	r4, [pc, #96]	; (8005510 <HAL_TIM_ConfigClockSource+0x158>)
 80054ae:	438a      	bics	r2, r1
 80054b0:	621a      	str	r2, [r3, #32]
 80054b2:	6999      	ldr	r1, [r3, #24]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	4021      	ands	r1, r4
 80054b8:	24a0      	movs	r4, #160	; 0xa0
 80054ba:	43a2      	bics	r2, r4
 80054bc:	0014      	movs	r4, r2
 80054be:	033f      	lsls	r7, r7, #12
 80054c0:	4339      	orrs	r1, r7
 80054c2:	6199      	str	r1, [r3, #24]
 80054c4:	2170      	movs	r1, #112	; 0x70
 80054c6:	0102      	lsls	r2, r0, #4
 80054c8:	4322      	orrs	r2, r4
 80054ca:	621a      	str	r2, [r3, #32]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	438a      	bics	r2, r1
 80054d0:	0011      	movs	r1, r2
 80054d2:	2267      	movs	r2, #103	; 0x67
 80054d4:	e7d3      	b.n	800547e <HAL_TIM_ConfigClockSource+0xc6>
 80054d6:	6a1f      	ldr	r7, [r3, #32]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	6848      	ldr	r0, [r1, #4]
 80054dc:	43a2      	bics	r2, r4
 80054de:	24f0      	movs	r4, #240	; 0xf0
 80054e0:	68c9      	ldr	r1, [r1, #12]
 80054e2:	621a      	str	r2, [r3, #32]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	43a2      	bics	r2, r4
 80054e8:	0014      	movs	r4, r2
 80054ea:	010a      	lsls	r2, r1, #4
 80054ec:	210a      	movs	r1, #10
 80054ee:	438f      	bics	r7, r1
 80054f0:	0039      	movs	r1, r7
 80054f2:	4322      	orrs	r2, r4
 80054f4:	4301      	orrs	r1, r0
 80054f6:	619a      	str	r2, [r3, #24]
 80054f8:	6219      	str	r1, [r3, #32]
 80054fa:	2170      	movs	r1, #112	; 0x70
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	438a      	bics	r2, r1
 8005500:	0011      	movs	r1, r2
 8005502:	2247      	movs	r2, #71	; 0x47
 8005504:	e7bb      	b.n	800547e <HAL_TIM_ConfigClockSource+0xc6>
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	ffff0088 	.word	0xffff0088
 800550c:	ffff00ff 	.word	0xffff00ff
 8005510:	ffff0fff 	.word	0xffff0fff

08005514 <HAL_TIM_OC_DelayElapsedCallback>:
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_IC_CaptureCallback>:
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_TriggerCallback>:
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_IRQHandler>:
 800551c:	2202      	movs	r2, #2
 800551e:	6803      	ldr	r3, [r0, #0]
 8005520:	b510      	push	{r4, lr}
 8005522:	6919      	ldr	r1, [r3, #16]
 8005524:	0004      	movs	r4, r0
 8005526:	4211      	tst	r1, r2
 8005528:	d00d      	beq.n	8005546 <HAL_TIM_IRQHandler+0x2a>
 800552a:	68d9      	ldr	r1, [r3, #12]
 800552c:	4211      	tst	r1, r2
 800552e:	d00a      	beq.n	8005546 <HAL_TIM_IRQHandler+0x2a>
 8005530:	3a05      	subs	r2, #5
 8005532:	611a      	str	r2, [r3, #16]
 8005534:	3204      	adds	r2, #4
 8005536:	7602      	strb	r2, [r0, #24]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	079b      	lsls	r3, r3, #30
 800553c:	d05e      	beq.n	80055fc <HAL_TIM_IRQHandler+0xe0>
 800553e:	f7ff ffea 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005542:	2300      	movs	r3, #0
 8005544:	7623      	strb	r3, [r4, #24]
 8005546:	2204      	movs	r2, #4
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	6919      	ldr	r1, [r3, #16]
 800554c:	4211      	tst	r1, r2
 800554e:	d010      	beq.n	8005572 <HAL_TIM_IRQHandler+0x56>
 8005550:	68d9      	ldr	r1, [r3, #12]
 8005552:	4211      	tst	r1, r2
 8005554:	d00d      	beq.n	8005572 <HAL_TIM_IRQHandler+0x56>
 8005556:	3a09      	subs	r2, #9
 8005558:	611a      	str	r2, [r3, #16]
 800555a:	3207      	adds	r2, #7
 800555c:	7622      	strb	r2, [r4, #24]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	23c0      	movs	r3, #192	; 0xc0
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	0020      	movs	r0, r4
 8005566:	421a      	tst	r2, r3
 8005568:	d04e      	beq.n	8005608 <HAL_TIM_IRQHandler+0xec>
 800556a:	f7ff ffd4 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 800556e:	2300      	movs	r3, #0
 8005570:	7623      	strb	r3, [r4, #24]
 8005572:	2208      	movs	r2, #8
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	6919      	ldr	r1, [r3, #16]
 8005578:	4211      	tst	r1, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIM_IRQHandler+0x7e>
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	4211      	tst	r1, r2
 8005580:	d00b      	beq.n	800559a <HAL_TIM_IRQHandler+0x7e>
 8005582:	3a11      	subs	r2, #17
 8005584:	611a      	str	r2, [r3, #16]
 8005586:	320d      	adds	r2, #13
 8005588:	7622      	strb	r2, [r4, #24]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	0020      	movs	r0, r4
 800558e:	079b      	lsls	r3, r3, #30
 8005590:	d040      	beq.n	8005614 <HAL_TIM_IRQHandler+0xf8>
 8005592:	f7ff ffc0 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005596:	2300      	movs	r3, #0
 8005598:	7623      	strb	r3, [r4, #24]
 800559a:	2210      	movs	r2, #16
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	6919      	ldr	r1, [r3, #16]
 80055a0:	4211      	tst	r1, r2
 80055a2:	d010      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xaa>
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	4211      	tst	r1, r2
 80055a8:	d00d      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xaa>
 80055aa:	3a21      	subs	r2, #33	; 0x21
 80055ac:	611a      	str	r2, [r3, #16]
 80055ae:	3219      	adds	r2, #25
 80055b0:	7622      	strb	r2, [r4, #24]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	23c0      	movs	r3, #192	; 0xc0
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	0020      	movs	r0, r4
 80055ba:	421a      	tst	r2, r3
 80055bc:	d030      	beq.n	8005620 <HAL_TIM_IRQHandler+0x104>
 80055be:	f7ff ffaa 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 80055c2:	2300      	movs	r3, #0
 80055c4:	7623      	strb	r3, [r4, #24]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	6919      	ldr	r1, [r3, #16]
 80055cc:	4211      	tst	r1, r2
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xc4>
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	4211      	tst	r1, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xc4>
 80055d6:	3a03      	subs	r2, #3
 80055d8:	0020      	movs	r0, r4
 80055da:	611a      	str	r2, [r3, #16]
 80055dc:	f7fd fe80 	bl	80032e0 <HAL_TIM_PeriodElapsedCallback>
 80055e0:	2240      	movs	r2, #64	; 0x40
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	6919      	ldr	r1, [r3, #16]
 80055e6:	4211      	tst	r1, r2
 80055e8:	d007      	beq.n	80055fa <HAL_TIM_IRQHandler+0xde>
 80055ea:	68d9      	ldr	r1, [r3, #12]
 80055ec:	4211      	tst	r1, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_IRQHandler+0xde>
 80055f0:	3a81      	subs	r2, #129	; 0x81
 80055f2:	0020      	movs	r0, r4
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	f7ff ff90 	bl	800551a <HAL_TIM_TriggerCallback>
 80055fa:	bd10      	pop	{r4, pc}
 80055fc:	f7ff ff8a 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
 8005600:	0020      	movs	r0, r4
 8005602:	f7ff ff89 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 8005606:	e79c      	b.n	8005542 <HAL_TIM_IRQHandler+0x26>
 8005608:	f7ff ff84 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
 800560c:	0020      	movs	r0, r4
 800560e:	f7ff ff83 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 8005612:	e7ac      	b.n	800556e <HAL_TIM_IRQHandler+0x52>
 8005614:	f7ff ff7e 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
 8005618:	0020      	movs	r0, r4
 800561a:	f7ff ff7d 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 800561e:	e7ba      	b.n	8005596 <HAL_TIM_IRQHandler+0x7a>
 8005620:	f7ff ff78 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
 8005624:	0020      	movs	r0, r4
 8005626:	f7ff ff77 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 800562a:	e7ca      	b.n	80055c2 <HAL_TIM_IRQHandler+0xa6>

0800562c <HAL_TIMEx_MasterConfigSynchronization>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	0004      	movs	r4, r0
 8005630:	2202      	movs	r2, #2
 8005632:	3438      	adds	r4, #56	; 0x38
 8005634:	7825      	ldrb	r5, [r4, #0]
 8005636:	0003      	movs	r3, r0
 8005638:	0010      	movs	r0, r2
 800563a:	2d01      	cmp	r5, #1
 800563c:	d01d      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800563e:	001d      	movs	r5, r3
 8005640:	2670      	movs	r6, #112	; 0x70
 8005642:	3539      	adds	r5, #57	; 0x39
 8005644:	702a      	strb	r2, [r5, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6858      	ldr	r0, [r3, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	43b0      	bics	r0, r6
 800564e:	680e      	ldr	r6, [r1, #0]
 8005650:	4330      	orrs	r0, r6
 8005652:	6058      	str	r0, [r3, #4]
 8005654:	2080      	movs	r0, #128	; 0x80
 8005656:	05c0      	lsls	r0, r0, #23
 8005658:	4283      	cmp	r3, r0
 800565a:	d005      	beq.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800565c:	4807      	ldr	r0, [pc, #28]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800565e:	4283      	cmp	r3, r0
 8005660:	d002      	beq.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005662:	4807      	ldr	r0, [pc, #28]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005664:	4283      	cmp	r3, r0
 8005666:	d104      	bne.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005668:	2080      	movs	r0, #128	; 0x80
 800566a:	6849      	ldr	r1, [r1, #4]
 800566c:	4382      	bics	r2, r0
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	2301      	movs	r3, #1
 8005674:	2000      	movs	r0, #0
 8005676:	702b      	strb	r3, [r5, #0]
 8005678:	7020      	strb	r0, [r4, #0]
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	40010800 	.word	0x40010800
 8005680:	40011400 	.word	0x40011400

08005684 <calloc>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4b03      	ldr	r3, [pc, #12]	; (8005694 <calloc+0x10>)
 8005688:	000a      	movs	r2, r1
 800568a:	0001      	movs	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f000 f85b 	bl	8005748 <_calloc_r>
 8005692:	bd10      	pop	{r4, pc}
 8005694:	200000a4 	.word	0x200000a4

08005698 <__errno>:
 8005698:	4b01      	ldr	r3, [pc, #4]	; (80056a0 <__errno+0x8>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	4770      	bx	lr
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	200000a4 	.word	0x200000a4

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	2600      	movs	r6, #0
 80056a8:	4d0c      	ldr	r5, [pc, #48]	; (80056dc <__libc_init_array+0x38>)
 80056aa:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	2600      	movs	r6, #0
 80056b6:	f000 fcc7 	bl	8006048 <_init>
 80056ba:	4d0a      	ldr	r5, [pc, #40]	; (80056e4 <__libc_init_array+0x40>)
 80056bc:	4c0a      	ldr	r4, [pc, #40]	; (80056e8 <__libc_init_array+0x44>)
 80056be:	1b64      	subs	r4, r4, r5
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	00b3      	lsls	r3, r6, #2
 80056ca:	58eb      	ldr	r3, [r5, r3]
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	00b3      	lsls	r3, r6, #2
 80056d4:	58eb      	ldr	r3, [r5, r3]
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	08006e58 	.word	0x08006e58
 80056e0:	08006e58 	.word	0x08006e58
 80056e4:	08006e58 	.word	0x08006e58
 80056e8:	08006e5c 	.word	0x08006e5c

080056ec <free>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <free+0x10>)
 80056f0:	0001      	movs	r1, r0
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f000 f854 	bl	80057a0 <_free_r>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	200000a4 	.word	0x200000a4

08005700 <memcpy>:
 8005700:	2300      	movs	r3, #0
 8005702:	b510      	push	{r4, lr}
 8005704:	429a      	cmp	r2, r3
 8005706:	d100      	bne.n	800570a <memcpy+0xa>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	5ccc      	ldrb	r4, [r1, r3]
 800570c:	54c4      	strb	r4, [r0, r3]
 800570e:	3301      	adds	r3, #1
 8005710:	e7f8      	b.n	8005704 <memcpy+0x4>

08005712 <memmove>:
 8005712:	b510      	push	{r4, lr}
 8005714:	4288      	cmp	r0, r1
 8005716:	d902      	bls.n	800571e <memmove+0xc>
 8005718:	188b      	adds	r3, r1, r2
 800571a:	4298      	cmp	r0, r3
 800571c:	d303      	bcc.n	8005726 <memmove+0x14>
 800571e:	2300      	movs	r3, #0
 8005720:	e007      	b.n	8005732 <memmove+0x20>
 8005722:	5c8b      	ldrb	r3, [r1, r2]
 8005724:	5483      	strb	r3, [r0, r2]
 8005726:	3a01      	subs	r2, #1
 8005728:	d2fb      	bcs.n	8005722 <memmove+0x10>
 800572a:	bd10      	pop	{r4, pc}
 800572c:	5ccc      	ldrb	r4, [r1, r3]
 800572e:	54c4      	strb	r4, [r0, r3]
 8005730:	3301      	adds	r3, #1
 8005732:	429a      	cmp	r2, r3
 8005734:	d1fa      	bne.n	800572c <memmove+0x1a>
 8005736:	e7f8      	b.n	800572a <memmove+0x18>

08005738 <memset>:
 8005738:	0003      	movs	r3, r0
 800573a:	1882      	adds	r2, r0, r2
 800573c:	4293      	cmp	r3, r2
 800573e:	d100      	bne.n	8005742 <memset+0xa>
 8005740:	4770      	bx	lr
 8005742:	7019      	strb	r1, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	e7f9      	b.n	800573c <memset+0x4>

08005748 <_calloc_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	0c13      	lsrs	r3, r2, #16
 800574c:	0c0d      	lsrs	r5, r1, #16
 800574e:	d11e      	bne.n	800578e <_calloc_r+0x46>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10c      	bne.n	800576e <_calloc_r+0x26>
 8005754:	b289      	uxth	r1, r1
 8005756:	b294      	uxth	r4, r2
 8005758:	434c      	muls	r4, r1
 800575a:	0021      	movs	r1, r4
 800575c:	f000 f88c 	bl	8005878 <_malloc_r>
 8005760:	1e05      	subs	r5, r0, #0
 8005762:	d01b      	beq.n	800579c <_calloc_r+0x54>
 8005764:	0022      	movs	r2, r4
 8005766:	2100      	movs	r1, #0
 8005768:	f7ff ffe6 	bl	8005738 <memset>
 800576c:	e016      	b.n	800579c <_calloc_r+0x54>
 800576e:	1c1d      	adds	r5, r3, #0
 8005770:	1c0b      	adds	r3, r1, #0
 8005772:	b292      	uxth	r2, r2
 8005774:	b289      	uxth	r1, r1
 8005776:	b29c      	uxth	r4, r3
 8005778:	4351      	muls	r1, r2
 800577a:	b2ab      	uxth	r3, r5
 800577c:	4363      	muls	r3, r4
 800577e:	0c0c      	lsrs	r4, r1, #16
 8005780:	191c      	adds	r4, r3, r4
 8005782:	0c22      	lsrs	r2, r4, #16
 8005784:	d107      	bne.n	8005796 <_calloc_r+0x4e>
 8005786:	0424      	lsls	r4, r4, #16
 8005788:	b289      	uxth	r1, r1
 800578a:	430c      	orrs	r4, r1
 800578c:	e7e5      	b.n	800575a <_calloc_r+0x12>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <_calloc_r+0x4e>
 8005792:	1c13      	adds	r3, r2, #0
 8005794:	e7ed      	b.n	8005772 <_calloc_r+0x2a>
 8005796:	230c      	movs	r3, #12
 8005798:	2500      	movs	r5, #0
 800579a:	6003      	str	r3, [r0, #0]
 800579c:	0028      	movs	r0, r5
 800579e:	bd70      	pop	{r4, r5, r6, pc}

080057a0 <_free_r>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	0005      	movs	r5, r0
 80057a4:	2900      	cmp	r1, #0
 80057a6:	d010      	beq.n	80057ca <_free_r+0x2a>
 80057a8:	1f0c      	subs	r4, r1, #4
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da00      	bge.n	80057b2 <_free_r+0x12>
 80057b0:	18e4      	adds	r4, r4, r3
 80057b2:	0028      	movs	r0, r5
 80057b4:	f000 f910 	bl	80059d8 <__malloc_lock>
 80057b8:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <_free_r+0x90>)
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <_free_r+0x2c>
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	6014      	str	r4, [r2, #0]
 80057c4:	0028      	movs	r0, r5
 80057c6:	f000 f90f 	bl	80059e8 <__malloc_unlock>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x42>
 80057d0:	6821      	ldr	r1, [r4, #0]
 80057d2:	1860      	adds	r0, r4, r1
 80057d4:	4283      	cmp	r3, r0
 80057d6:	d1f3      	bne.n	80057c0 <_free_r+0x20>
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	1841      	adds	r1, r0, r1
 80057de:	6021      	str	r1, [r4, #0]
 80057e0:	e7ee      	b.n	80057c0 <_free_r+0x20>
 80057e2:	001a      	movs	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <_free_r+0x4e>
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	d9f9      	bls.n	80057e2 <_free_r+0x42>
 80057ee:	6811      	ldr	r1, [r2, #0]
 80057f0:	1850      	adds	r0, r2, r1
 80057f2:	42a0      	cmp	r0, r4
 80057f4:	d10b      	bne.n	800580e <_free_r+0x6e>
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	1809      	adds	r1, r1, r0
 80057fa:	1850      	adds	r0, r2, r1
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	4283      	cmp	r3, r0
 8005800:	d1e0      	bne.n	80057c4 <_free_r+0x24>
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	1841      	adds	r1, r0, r1
 8005808:	6011      	str	r1, [r2, #0]
 800580a:	6053      	str	r3, [r2, #4]
 800580c:	e7da      	b.n	80057c4 <_free_r+0x24>
 800580e:	42a0      	cmp	r0, r4
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	e7d5      	b.n	80057c4 <_free_r+0x24>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	1860      	adds	r0, r4, r1
 800581c:	4283      	cmp	r3, r0
 800581e:	d103      	bne.n	8005828 <_free_r+0x88>
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	1841      	adds	r1, r0, r1
 8005826:	6021      	str	r1, [r4, #0]
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	6054      	str	r4, [r2, #4]
 800582c:	e7ca      	b.n	80057c4 <_free_r+0x24>
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	20000dfc 	.word	0x20000dfc

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0f      	ldr	r6, [pc, #60]	; (8005874 <sbrk_aligned+0x40>)
 8005838:	000d      	movs	r5, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	0004      	movs	r4, r0
 800583e:	2900      	cmp	r1, #0
 8005840:	d102      	bne.n	8005848 <sbrk_aligned+0x14>
 8005842:	f000 f88f 	bl	8005964 <_sbrk_r>
 8005846:	6030      	str	r0, [r6, #0]
 8005848:	0029      	movs	r1, r5
 800584a:	0020      	movs	r0, r4
 800584c:	f000 f88a 	bl	8005964 <_sbrk_r>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d00a      	beq.n	800586a <sbrk_aligned+0x36>
 8005854:	2303      	movs	r3, #3
 8005856:	1cc5      	adds	r5, r0, #3
 8005858:	439d      	bics	r5, r3
 800585a:	42a8      	cmp	r0, r5
 800585c:	d007      	beq.n	800586e <sbrk_aligned+0x3a>
 800585e:	1a29      	subs	r1, r5, r0
 8005860:	0020      	movs	r0, r4
 8005862:	f000 f87f 	bl	8005964 <_sbrk_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d101      	bne.n	800586e <sbrk_aligned+0x3a>
 800586a:	2501      	movs	r5, #1
 800586c:	426d      	negs	r5, r5
 800586e:	0028      	movs	r0, r5
 8005870:	bd70      	pop	{r4, r5, r6, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	20000e00 	.word	0x20000e00

08005878 <_malloc_r>:
 8005878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800587a:	2203      	movs	r2, #3
 800587c:	1ccb      	adds	r3, r1, #3
 800587e:	4393      	bics	r3, r2
 8005880:	3308      	adds	r3, #8
 8005882:	0006      	movs	r6, r0
 8005884:	001f      	movs	r7, r3
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d232      	bcs.n	80058f0 <_malloc_r+0x78>
 800588a:	270c      	movs	r7, #12
 800588c:	42b9      	cmp	r1, r7
 800588e:	d831      	bhi.n	80058f4 <_malloc_r+0x7c>
 8005890:	0030      	movs	r0, r6
 8005892:	f000 f8a1 	bl	80059d8 <__malloc_lock>
 8005896:	4d32      	ldr	r5, [pc, #200]	; (8005960 <_malloc_r+0xe8>)
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	001c      	movs	r4, r3
 800589c:	2c00      	cmp	r4, #0
 800589e:	d12e      	bne.n	80058fe <_malloc_r+0x86>
 80058a0:	0039      	movs	r1, r7
 80058a2:	0030      	movs	r0, r6
 80058a4:	f7ff ffc6 	bl	8005834 <sbrk_aligned>
 80058a8:	0004      	movs	r4, r0
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d11e      	bne.n	80058ec <_malloc_r+0x74>
 80058ae:	682c      	ldr	r4, [r5, #0]
 80058b0:	0025      	movs	r5, r4
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	d14a      	bne.n	800594c <_malloc_r+0xd4>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	0029      	movs	r1, r5
 80058ba:	18e3      	adds	r3, r4, r3
 80058bc:	0030      	movs	r0, r6
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f000 f850 	bl	8005964 <_sbrk_r>
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	4283      	cmp	r3, r0
 80058c8:	d143      	bne.n	8005952 <_malloc_r+0xda>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	3703      	adds	r7, #3
 80058ce:	1aff      	subs	r7, r7, r3
 80058d0:	2303      	movs	r3, #3
 80058d2:	439f      	bics	r7, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	2f0c      	cmp	r7, #12
 80058d8:	d200      	bcs.n	80058dc <_malloc_r+0x64>
 80058da:	270c      	movs	r7, #12
 80058dc:	0039      	movs	r1, r7
 80058de:	0030      	movs	r0, r6
 80058e0:	f7ff ffa8 	bl	8005834 <sbrk_aligned>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d034      	beq.n	8005952 <_malloc_r+0xda>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	19df      	adds	r7, r3, r7
 80058ec:	6027      	str	r7, [r4, #0]
 80058ee:	e013      	b.n	8005918 <_malloc_r+0xa0>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dacb      	bge.n	800588c <_malloc_r+0x14>
 80058f4:	230c      	movs	r3, #12
 80058f6:	2500      	movs	r5, #0
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	0028      	movs	r0, r5
 80058fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	1bd1      	subs	r1, r2, r7
 8005902:	d420      	bmi.n	8005946 <_malloc_r+0xce>
 8005904:	290b      	cmp	r1, #11
 8005906:	d917      	bls.n	8005938 <_malloc_r+0xc0>
 8005908:	19e2      	adds	r2, r4, r7
 800590a:	6027      	str	r7, [r4, #0]
 800590c:	42a3      	cmp	r3, r4
 800590e:	d111      	bne.n	8005934 <_malloc_r+0xbc>
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	6053      	str	r3, [r2, #4]
 8005918:	0030      	movs	r0, r6
 800591a:	0025      	movs	r5, r4
 800591c:	f000 f864 	bl	80059e8 <__malloc_unlock>
 8005920:	2207      	movs	r2, #7
 8005922:	350b      	adds	r5, #11
 8005924:	1d23      	adds	r3, r4, #4
 8005926:	4395      	bics	r5, r2
 8005928:	1aea      	subs	r2, r5, r3
 800592a:	429d      	cmp	r5, r3
 800592c:	d0e5      	beq.n	80058fa <_malloc_r+0x82>
 800592e:	1b5b      	subs	r3, r3, r5
 8005930:	50a3      	str	r3, [r4, r2]
 8005932:	e7e2      	b.n	80058fa <_malloc_r+0x82>
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	e7ec      	b.n	8005912 <_malloc_r+0x9a>
 8005938:	6862      	ldr	r2, [r4, #4]
 800593a:	42a3      	cmp	r3, r4
 800593c:	d101      	bne.n	8005942 <_malloc_r+0xca>
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	e7ea      	b.n	8005918 <_malloc_r+0xa0>
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	e7e8      	b.n	8005918 <_malloc_r+0xa0>
 8005946:	0023      	movs	r3, r4
 8005948:	6864      	ldr	r4, [r4, #4]
 800594a:	e7a7      	b.n	800589c <_malloc_r+0x24>
 800594c:	002c      	movs	r4, r5
 800594e:	686d      	ldr	r5, [r5, #4]
 8005950:	e7af      	b.n	80058b2 <_malloc_r+0x3a>
 8005952:	230c      	movs	r3, #12
 8005954:	0030      	movs	r0, r6
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	f000 f846 	bl	80059e8 <__malloc_unlock>
 800595c:	e7cd      	b.n	80058fa <_malloc_r+0x82>
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	20000dfc 	.word	0x20000dfc

08005964 <_sbrk_r>:
 8005964:	2300      	movs	r3, #0
 8005966:	b570      	push	{r4, r5, r6, lr}
 8005968:	4d06      	ldr	r5, [pc, #24]	; (8005984 <_sbrk_r+0x20>)
 800596a:	0004      	movs	r4, r0
 800596c:	0008      	movs	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb fc20 	bl	80011b4 <_sbrk>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d103      	bne.n	8005980 <_sbrk_r+0x1c>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d000      	beq.n	8005980 <_sbrk_r+0x1c>
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	20000e04 	.word	0x20000e04

08005988 <siprintf>:
 8005988:	b40e      	push	{r1, r2, r3}
 800598a:	b500      	push	{lr}
 800598c:	490b      	ldr	r1, [pc, #44]	; (80059bc <siprintf+0x34>)
 800598e:	b09c      	sub	sp, #112	; 0x70
 8005990:	ab1d      	add	r3, sp, #116	; 0x74
 8005992:	9002      	str	r0, [sp, #8]
 8005994:	9006      	str	r0, [sp, #24]
 8005996:	9107      	str	r1, [sp, #28]
 8005998:	9104      	str	r1, [sp, #16]
 800599a:	4809      	ldr	r0, [pc, #36]	; (80059c0 <siprintf+0x38>)
 800599c:	4909      	ldr	r1, [pc, #36]	; (80059c4 <siprintf+0x3c>)
 800599e:	cb04      	ldmia	r3!, {r2}
 80059a0:	9105      	str	r1, [sp, #20]
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	a902      	add	r1, sp, #8
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f000 f888 	bl	8005abc <_svfiprintf_r>
 80059ac:	2300      	movs	r3, #0
 80059ae:	9a02      	ldr	r2, [sp, #8]
 80059b0:	7013      	strb	r3, [r2, #0]
 80059b2:	b01c      	add	sp, #112	; 0x70
 80059b4:	bc08      	pop	{r3}
 80059b6:	b003      	add	sp, #12
 80059b8:	4718      	bx	r3
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	7fffffff 	.word	0x7fffffff
 80059c0:	200000a4 	.word	0x200000a4
 80059c4:	ffff0208 	.word	0xffff0208

080059c8 <strcpy>:
 80059c8:	0003      	movs	r3, r0
 80059ca:	780a      	ldrb	r2, [r1, #0]
 80059cc:	3101      	adds	r1, #1
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	d1f9      	bne.n	80059ca <strcpy+0x2>
 80059d6:	4770      	bx	lr

080059d8 <__malloc_lock>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	4802      	ldr	r0, [pc, #8]	; (80059e4 <__malloc_lock+0xc>)
 80059dc:	f000 faf0 	bl	8005fc0 <__retarget_lock_acquire_recursive>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	20000e08 	.word	0x20000e08

080059e8 <__malloc_unlock>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4802      	ldr	r0, [pc, #8]	; (80059f4 <__malloc_unlock+0xc>)
 80059ec:	f000 fae9 	bl	8005fc2 <__retarget_lock_release_recursive>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	20000e08 	.word	0x20000e08

080059f8 <__ssputs_r>:
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	688e      	ldr	r6, [r1, #8]
 80059fc:	b085      	sub	sp, #20
 80059fe:	0007      	movs	r7, r0
 8005a00:	000c      	movs	r4, r1
 8005a02:	9203      	str	r2, [sp, #12]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	429e      	cmp	r6, r3
 8005a08:	d83c      	bhi.n	8005a84 <__ssputs_r+0x8c>
 8005a0a:	2390      	movs	r3, #144	; 0x90
 8005a0c:	898a      	ldrh	r2, [r1, #12]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	421a      	tst	r2, r3
 8005a12:	d034      	beq.n	8005a7e <__ssputs_r+0x86>
 8005a14:	6909      	ldr	r1, [r1, #16]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6960      	ldr	r0, [r4, #20]
 8005a1a:	1a5b      	subs	r3, r3, r1
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	2303      	movs	r3, #3
 8005a20:	4343      	muls	r3, r0
 8005a22:	0fdd      	lsrs	r5, r3, #31
 8005a24:	18ed      	adds	r5, r5, r3
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	9802      	ldr	r0, [sp, #8]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	181b      	adds	r3, r3, r0
 8005a2e:	106d      	asrs	r5, r5, #1
 8005a30:	42ab      	cmp	r3, r5
 8005a32:	d900      	bls.n	8005a36 <__ssputs_r+0x3e>
 8005a34:	001d      	movs	r5, r3
 8005a36:	0553      	lsls	r3, r2, #21
 8005a38:	d532      	bpl.n	8005aa0 <__ssputs_r+0xa8>
 8005a3a:	0029      	movs	r1, r5
 8005a3c:	0038      	movs	r0, r7
 8005a3e:	f7ff ff1b 	bl	8005878 <_malloc_r>
 8005a42:	1e06      	subs	r6, r0, #0
 8005a44:	d109      	bne.n	8005a5a <__ssputs_r+0x62>
 8005a46:	230c      	movs	r3, #12
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	89a2      	ldrh	r2, [r4, #12]
 8005a50:	4240      	negs	r0, r0
 8005a52:	4313      	orrs	r3, r2
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	b005      	add	sp, #20
 8005a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a5a:	9a02      	ldr	r2, [sp, #8]
 8005a5c:	6921      	ldr	r1, [r4, #16]
 8005a5e:	f7ff fe4f 	bl	8005700 <memcpy>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <__ssputs_r+0xc0>)
 8005a66:	401a      	ands	r2, r3
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	9b02      	ldr	r3, [sp, #8]
 8005a70:	6126      	str	r6, [r4, #16]
 8005a72:	18f6      	adds	r6, r6, r3
 8005a74:	6026      	str	r6, [r4, #0]
 8005a76:	6165      	str	r5, [r4, #20]
 8005a78:	9e01      	ldr	r6, [sp, #4]
 8005a7a:	1aed      	subs	r5, r5, r3
 8005a7c:	60a5      	str	r5, [r4, #8]
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	429e      	cmp	r6, r3
 8005a82:	d900      	bls.n	8005a86 <__ssputs_r+0x8e>
 8005a84:	9e01      	ldr	r6, [sp, #4]
 8005a86:	0032      	movs	r2, r6
 8005a88:	9903      	ldr	r1, [sp, #12]
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	f7ff fe41 	bl	8005712 <memmove>
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	2000      	movs	r0, #0
 8005a94:	1b9b      	subs	r3, r3, r6
 8005a96:	60a3      	str	r3, [r4, #8]
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	199e      	adds	r6, r3, r6
 8005a9c:	6026      	str	r6, [r4, #0]
 8005a9e:	e7da      	b.n	8005a56 <__ssputs_r+0x5e>
 8005aa0:	002a      	movs	r2, r5
 8005aa2:	0038      	movs	r0, r7
 8005aa4:	f000 fa99 	bl	8005fda <_realloc_r>
 8005aa8:	1e06      	subs	r6, r0, #0
 8005aaa:	d1e0      	bne.n	8005a6e <__ssputs_r+0x76>
 8005aac:	0038      	movs	r0, r7
 8005aae:	6921      	ldr	r1, [r4, #16]
 8005ab0:	f7ff fe76 	bl	80057a0 <_free_r>
 8005ab4:	e7c7      	b.n	8005a46 <__ssputs_r+0x4e>
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	fffffb7f 	.word	0xfffffb7f

08005abc <_svfiprintf_r>:
 8005abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005abe:	b0a1      	sub	sp, #132	; 0x84
 8005ac0:	9003      	str	r0, [sp, #12]
 8005ac2:	001d      	movs	r5, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	000f      	movs	r7, r1
 8005ac8:	0016      	movs	r6, r2
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	d511      	bpl.n	8005af2 <_svfiprintf_r+0x36>
 8005ace:	690b      	ldr	r3, [r1, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10e      	bne.n	8005af2 <_svfiprintf_r+0x36>
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	f7ff fecf 	bl	8005878 <_malloc_r>
 8005ada:	6038      	str	r0, [r7, #0]
 8005adc:	6138      	str	r0, [r7, #16]
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d105      	bne.n	8005aee <_svfiprintf_r+0x32>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	9a03      	ldr	r2, [sp, #12]
 8005ae6:	3801      	subs	r0, #1
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	b021      	add	sp, #132	; 0x84
 8005aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	2300      	movs	r3, #0
 8005af4:	ac08      	add	r4, sp, #32
 8005af6:	6163      	str	r3, [r4, #20]
 8005af8:	3320      	adds	r3, #32
 8005afa:	7663      	strb	r3, [r4, #25]
 8005afc:	3310      	adds	r3, #16
 8005afe:	76a3      	strb	r3, [r4, #26]
 8005b00:	9507      	str	r5, [sp, #28]
 8005b02:	0035      	movs	r5, r6
 8005b04:	782b      	ldrb	r3, [r5, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <_svfiprintf_r+0x52>
 8005b0a:	2b25      	cmp	r3, #37	; 0x25
 8005b0c:	d147      	bne.n	8005b9e <_svfiprintf_r+0xe2>
 8005b0e:	1bab      	subs	r3, r5, r6
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	d00c      	beq.n	8005b30 <_svfiprintf_r+0x74>
 8005b16:	0032      	movs	r2, r6
 8005b18:	0039      	movs	r1, r7
 8005b1a:	9803      	ldr	r0, [sp, #12]
 8005b1c:	f7ff ff6c 	bl	80059f8 <__ssputs_r>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d100      	bne.n	8005b26 <_svfiprintf_r+0x6a>
 8005b24:	e0ae      	b.n	8005c84 <_svfiprintf_r+0x1c8>
 8005b26:	6962      	ldr	r2, [r4, #20]
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	4694      	mov	ip, r2
 8005b2c:	4463      	add	r3, ip
 8005b2e:	6163      	str	r3, [r4, #20]
 8005b30:	782b      	ldrb	r3, [r5, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d100      	bne.n	8005b38 <_svfiprintf_r+0x7c>
 8005b36:	e0a5      	b.n	8005c84 <_svfiprintf_r+0x1c8>
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4252      	negs	r2, r2
 8005b3e:	6062      	str	r2, [r4, #4]
 8005b40:	a904      	add	r1, sp, #16
 8005b42:	3254      	adds	r2, #84	; 0x54
 8005b44:	1852      	adds	r2, r2, r1
 8005b46:	1c6e      	adds	r6, r5, #1
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	60e3      	str	r3, [r4, #12]
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	7013      	strb	r3, [r2, #0]
 8005b50:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b52:	2205      	movs	r2, #5
 8005b54:	7831      	ldrb	r1, [r6, #0]
 8005b56:	4854      	ldr	r0, [pc, #336]	; (8005ca8 <_svfiprintf_r+0x1ec>)
 8005b58:	f000 fa34 	bl	8005fc4 <memchr>
 8005b5c:	1c75      	adds	r5, r6, #1
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d11f      	bne.n	8005ba2 <_svfiprintf_r+0xe6>
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	06d3      	lsls	r3, r2, #27
 8005b66:	d504      	bpl.n	8005b72 <_svfiprintf_r+0xb6>
 8005b68:	2353      	movs	r3, #83	; 0x53
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	185b      	adds	r3, r3, r1
 8005b6e:	2120      	movs	r1, #32
 8005b70:	7019      	strb	r1, [r3, #0]
 8005b72:	0713      	lsls	r3, r2, #28
 8005b74:	d504      	bpl.n	8005b80 <_svfiprintf_r+0xc4>
 8005b76:	2353      	movs	r3, #83	; 0x53
 8005b78:	a904      	add	r1, sp, #16
 8005b7a:	185b      	adds	r3, r3, r1
 8005b7c:	212b      	movs	r1, #43	; 0x2b
 8005b7e:	7019      	strb	r1, [r3, #0]
 8005b80:	7833      	ldrb	r3, [r6, #0]
 8005b82:	2b2a      	cmp	r3, #42	; 0x2a
 8005b84:	d016      	beq.n	8005bb4 <_svfiprintf_r+0xf8>
 8005b86:	0035      	movs	r5, r6
 8005b88:	2100      	movs	r1, #0
 8005b8a:	200a      	movs	r0, #10
 8005b8c:	68e3      	ldr	r3, [r4, #12]
 8005b8e:	782a      	ldrb	r2, [r5, #0]
 8005b90:	1c6e      	adds	r6, r5, #1
 8005b92:	3a30      	subs	r2, #48	; 0x30
 8005b94:	2a09      	cmp	r2, #9
 8005b96:	d94e      	bls.n	8005c36 <_svfiprintf_r+0x17a>
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	d111      	bne.n	8005bc0 <_svfiprintf_r+0x104>
 8005b9c:	e017      	b.n	8005bce <_svfiprintf_r+0x112>
 8005b9e:	3501      	adds	r5, #1
 8005ba0:	e7b0      	b.n	8005b04 <_svfiprintf_r+0x48>
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <_svfiprintf_r+0x1ec>)
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	1ac0      	subs	r0, r0, r3
 8005ba8:	2301      	movs	r3, #1
 8005baa:	4083      	lsls	r3, r0
 8005bac:	4313      	orrs	r3, r2
 8005bae:	002e      	movs	r6, r5
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	e7ce      	b.n	8005b52 <_svfiprintf_r+0x96>
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	1d19      	adds	r1, r3, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	9107      	str	r1, [sp, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	db01      	blt.n	8005bc4 <_svfiprintf_r+0x108>
 8005bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc2:	e004      	b.n	8005bce <_svfiprintf_r+0x112>
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	60e3      	str	r3, [r4, #12]
 8005bc8:	2302      	movs	r3, #2
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	782b      	ldrb	r3, [r5, #0]
 8005bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd2:	d10a      	bne.n	8005bea <_svfiprintf_r+0x12e>
 8005bd4:	786b      	ldrb	r3, [r5, #1]
 8005bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd8:	d135      	bne.n	8005c46 <_svfiprintf_r+0x18a>
 8005bda:	9b07      	ldr	r3, [sp, #28]
 8005bdc:	3502      	adds	r5, #2
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	9207      	str	r2, [sp, #28]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	db2b      	blt.n	8005c40 <_svfiprintf_r+0x184>
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	4e30      	ldr	r6, [pc, #192]	; (8005cac <_svfiprintf_r+0x1f0>)
 8005bec:	2203      	movs	r2, #3
 8005bee:	0030      	movs	r0, r6
 8005bf0:	7829      	ldrb	r1, [r5, #0]
 8005bf2:	f000 f9e7 	bl	8005fc4 <memchr>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d006      	beq.n	8005c08 <_svfiprintf_r+0x14c>
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	1b80      	subs	r0, r0, r6
 8005bfe:	4083      	lsls	r3, r0
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	3501      	adds	r5, #1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	7829      	ldrb	r1, [r5, #0]
 8005c0a:	2206      	movs	r2, #6
 8005c0c:	4828      	ldr	r0, [pc, #160]	; (8005cb0 <_svfiprintf_r+0x1f4>)
 8005c0e:	1c6e      	adds	r6, r5, #1
 8005c10:	7621      	strb	r1, [r4, #24]
 8005c12:	f000 f9d7 	bl	8005fc4 <memchr>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d03c      	beq.n	8005c94 <_svfiprintf_r+0x1d8>
 8005c1a:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <_svfiprintf_r+0x1f8>)
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d125      	bne.n	8005c6c <_svfiprintf_r+0x1b0>
 8005c20:	2207      	movs	r2, #7
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	3307      	adds	r3, #7
 8005c26:	4393      	bics	r3, r2
 8005c28:	3308      	adds	r3, #8
 8005c2a:	9307      	str	r3, [sp, #28]
 8005c2c:	6963      	ldr	r3, [r4, #20]
 8005c2e:	9a04      	ldr	r2, [sp, #16]
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	6163      	str	r3, [r4, #20]
 8005c34:	e765      	b.n	8005b02 <_svfiprintf_r+0x46>
 8005c36:	4343      	muls	r3, r0
 8005c38:	0035      	movs	r5, r6
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	189b      	adds	r3, r3, r2
 8005c3e:	e7a6      	b.n	8005b8e <_svfiprintf_r+0xd2>
 8005c40:	2301      	movs	r3, #1
 8005c42:	425b      	negs	r3, r3
 8005c44:	e7d0      	b.n	8005be8 <_svfiprintf_r+0x12c>
 8005c46:	2300      	movs	r3, #0
 8005c48:	200a      	movs	r0, #10
 8005c4a:	001a      	movs	r2, r3
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	7829      	ldrb	r1, [r5, #0]
 8005c52:	1c6e      	adds	r6, r5, #1
 8005c54:	3930      	subs	r1, #48	; 0x30
 8005c56:	2909      	cmp	r1, #9
 8005c58:	d903      	bls.n	8005c62 <_svfiprintf_r+0x1a6>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c5      	beq.n	8005bea <_svfiprintf_r+0x12e>
 8005c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c60:	e7c3      	b.n	8005bea <_svfiprintf_r+0x12e>
 8005c62:	4342      	muls	r2, r0
 8005c64:	0035      	movs	r5, r6
 8005c66:	2301      	movs	r3, #1
 8005c68:	1852      	adds	r2, r2, r1
 8005c6a:	e7f1      	b.n	8005c50 <_svfiprintf_r+0x194>
 8005c6c:	ab07      	add	r3, sp, #28
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	003a      	movs	r2, r7
 8005c72:	0021      	movs	r1, r4
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <_svfiprintf_r+0x1fc>)
 8005c76:	9803      	ldr	r0, [sp, #12]
 8005c78:	e000      	b.n	8005c7c <_svfiprintf_r+0x1c0>
 8005c7a:	bf00      	nop
 8005c7c:	9004      	str	r0, [sp, #16]
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	3301      	adds	r3, #1
 8005c82:	d1d3      	bne.n	8005c2c <_svfiprintf_r+0x170>
 8005c84:	89bb      	ldrh	r3, [r7, #12]
 8005c86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c88:	065b      	lsls	r3, r3, #25
 8005c8a:	d400      	bmi.n	8005c8e <_svfiprintf_r+0x1d2>
 8005c8c:	e72d      	b.n	8005aea <_svfiprintf_r+0x2e>
 8005c8e:	2001      	movs	r0, #1
 8005c90:	4240      	negs	r0, r0
 8005c92:	e72a      	b.n	8005aea <_svfiprintf_r+0x2e>
 8005c94:	ab07      	add	r3, sp, #28
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	003a      	movs	r2, r7
 8005c9a:	0021      	movs	r1, r4
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <_svfiprintf_r+0x1fc>)
 8005c9e:	9803      	ldr	r0, [sp, #12]
 8005ca0:	f000 f87c 	bl	8005d9c <_printf_i>
 8005ca4:	e7ea      	b.n	8005c7c <_svfiprintf_r+0x1c0>
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	08006e1c 	.word	0x08006e1c
 8005cac:	08006e22 	.word	0x08006e22
 8005cb0:	08006e26 	.word	0x08006e26
 8005cb4:	00000000 	.word	0x00000000
 8005cb8:	080059f9 	.word	0x080059f9

08005cbc <_printf_common>:
 8005cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cbe:	0015      	movs	r5, r2
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	688a      	ldr	r2, [r1, #8]
 8005cc4:	690b      	ldr	r3, [r1, #16]
 8005cc6:	000c      	movs	r4, r1
 8005cc8:	9000      	str	r0, [sp, #0]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	da00      	bge.n	8005cd0 <_printf_common+0x14>
 8005cce:	0013      	movs	r3, r2
 8005cd0:	0022      	movs	r2, r4
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	3243      	adds	r2, #67	; 0x43
 8005cd6:	7812      	ldrb	r2, [r2, #0]
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	d001      	beq.n	8005ce0 <_printf_common+0x24>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	069b      	lsls	r3, r3, #26
 8005ce4:	d502      	bpl.n	8005cec <_printf_common+0x30>
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	2306      	movs	r3, #6
 8005cf0:	0017      	movs	r7, r2
 8005cf2:	401f      	ands	r7, r3
 8005cf4:	421a      	tst	r2, r3
 8005cf6:	d027      	beq.n	8005d48 <_printf_common+0x8c>
 8005cf8:	0023      	movs	r3, r4
 8005cfa:	3343      	adds	r3, #67	; 0x43
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	1e5a      	subs	r2, r3, #1
 8005d00:	4193      	sbcs	r3, r2
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	0692      	lsls	r2, r2, #26
 8005d06:	d430      	bmi.n	8005d6a <_printf_common+0xae>
 8005d08:	0022      	movs	r2, r4
 8005d0a:	9901      	ldr	r1, [sp, #4]
 8005d0c:	9800      	ldr	r0, [sp, #0]
 8005d0e:	9e08      	ldr	r6, [sp, #32]
 8005d10:	3243      	adds	r2, #67	; 0x43
 8005d12:	47b0      	blx	r6
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d025      	beq.n	8005d64 <_printf_common+0xa8>
 8005d18:	2306      	movs	r3, #6
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	682a      	ldr	r2, [r5, #0]
 8005d1e:	68e1      	ldr	r1, [r4, #12]
 8005d20:	2500      	movs	r5, #0
 8005d22:	4003      	ands	r3, r0
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d103      	bne.n	8005d30 <_printf_common+0x74>
 8005d28:	1a8d      	subs	r5, r1, r2
 8005d2a:	43eb      	mvns	r3, r5
 8005d2c:	17db      	asrs	r3, r3, #31
 8005d2e:	401d      	ands	r5, r3
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	6922      	ldr	r2, [r4, #16]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	dd01      	ble.n	8005d3c <_printf_common+0x80>
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	18ed      	adds	r5, r5, r3
 8005d3c:	2700      	movs	r7, #0
 8005d3e:	42bd      	cmp	r5, r7
 8005d40:	d120      	bne.n	8005d84 <_printf_common+0xc8>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e010      	b.n	8005d68 <_printf_common+0xac>
 8005d46:	3701      	adds	r7, #1
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	682a      	ldr	r2, [r5, #0]
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	42bb      	cmp	r3, r7
 8005d50:	ddd2      	ble.n	8005cf8 <_printf_common+0x3c>
 8005d52:	0022      	movs	r2, r4
 8005d54:	2301      	movs	r3, #1
 8005d56:	9901      	ldr	r1, [sp, #4]
 8005d58:	9800      	ldr	r0, [sp, #0]
 8005d5a:	9e08      	ldr	r6, [sp, #32]
 8005d5c:	3219      	adds	r2, #25
 8005d5e:	47b0      	blx	r6
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d1f0      	bne.n	8005d46 <_printf_common+0x8a>
 8005d64:	2001      	movs	r0, #1
 8005d66:	4240      	negs	r0, r0
 8005d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d6a:	2030      	movs	r0, #48	; 0x30
 8005d6c:	18e1      	adds	r1, r4, r3
 8005d6e:	3143      	adds	r1, #67	; 0x43
 8005d70:	7008      	strb	r0, [r1, #0]
 8005d72:	0021      	movs	r1, r4
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	3145      	adds	r1, #69	; 0x45
 8005d78:	7809      	ldrb	r1, [r1, #0]
 8005d7a:	18a2      	adds	r2, r4, r2
 8005d7c:	3243      	adds	r2, #67	; 0x43
 8005d7e:	3302      	adds	r3, #2
 8005d80:	7011      	strb	r1, [r2, #0]
 8005d82:	e7c1      	b.n	8005d08 <_printf_common+0x4c>
 8005d84:	0022      	movs	r2, r4
 8005d86:	2301      	movs	r3, #1
 8005d88:	9901      	ldr	r1, [sp, #4]
 8005d8a:	9800      	ldr	r0, [sp, #0]
 8005d8c:	9e08      	ldr	r6, [sp, #32]
 8005d8e:	321a      	adds	r2, #26
 8005d90:	47b0      	blx	r6
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa8>
 8005d96:	3701      	adds	r7, #1
 8005d98:	e7d1      	b.n	8005d3e <_printf_common+0x82>
	...

08005d9c <_printf_i>:
 8005d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9e:	b08b      	sub	sp, #44	; 0x2c
 8005da0:	9206      	str	r2, [sp, #24]
 8005da2:	000a      	movs	r2, r1
 8005da4:	3243      	adds	r2, #67	; 0x43
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	9005      	str	r0, [sp, #20]
 8005daa:	9204      	str	r2, [sp, #16]
 8005dac:	7e0a      	ldrb	r2, [r1, #24]
 8005dae:	000c      	movs	r4, r1
 8005db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005db2:	2a78      	cmp	r2, #120	; 0x78
 8005db4:	d807      	bhi.n	8005dc6 <_printf_i+0x2a>
 8005db6:	2a62      	cmp	r2, #98	; 0x62
 8005db8:	d809      	bhi.n	8005dce <_printf_i+0x32>
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	d100      	bne.n	8005dc0 <_printf_i+0x24>
 8005dbe:	e0c1      	b.n	8005f44 <_printf_i+0x1a8>
 8005dc0:	2a58      	cmp	r2, #88	; 0x58
 8005dc2:	d100      	bne.n	8005dc6 <_printf_i+0x2a>
 8005dc4:	e08c      	b.n	8005ee0 <_printf_i+0x144>
 8005dc6:	0026      	movs	r6, r4
 8005dc8:	3642      	adds	r6, #66	; 0x42
 8005dca:	7032      	strb	r2, [r6, #0]
 8005dcc:	e022      	b.n	8005e14 <_printf_i+0x78>
 8005dce:	0010      	movs	r0, r2
 8005dd0:	3863      	subs	r0, #99	; 0x63
 8005dd2:	2815      	cmp	r0, #21
 8005dd4:	d8f7      	bhi.n	8005dc6 <_printf_i+0x2a>
 8005dd6:	f7fa f9ab 	bl	8000130 <__gnu_thumb1_case_shi>
 8005dda:	0016      	.short	0x0016
 8005ddc:	fff6001f 	.word	0xfff6001f
 8005de0:	fff6fff6 	.word	0xfff6fff6
 8005de4:	001ffff6 	.word	0x001ffff6
 8005de8:	fff6fff6 	.word	0xfff6fff6
 8005dec:	fff6fff6 	.word	0xfff6fff6
 8005df0:	003600a8 	.word	0x003600a8
 8005df4:	fff6009a 	.word	0xfff6009a
 8005df8:	00b9fff6 	.word	0x00b9fff6
 8005dfc:	0036fff6 	.word	0x0036fff6
 8005e00:	fff6fff6 	.word	0xfff6fff6
 8005e04:	009e      	.short	0x009e
 8005e06:	0026      	movs	r6, r4
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	3642      	adds	r6, #66	; 0x42
 8005e0c:	1d11      	adds	r1, r2, #4
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	7033      	strb	r3, [r6, #0]
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0a7      	b.n	8005f68 <_printf_i+0x1cc>
 8005e18:	6808      	ldr	r0, [r1, #0]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	1d0a      	adds	r2, r1, #4
 8005e1e:	0605      	lsls	r5, r0, #24
 8005e20:	d50b      	bpl.n	8005e3a <_printf_i+0x9e>
 8005e22:	680d      	ldr	r5, [r1, #0]
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	da03      	bge.n	8005e32 <_printf_i+0x96>
 8005e2a:	232d      	movs	r3, #45	; 0x2d
 8005e2c:	9a04      	ldr	r2, [sp, #16]
 8005e2e:	426d      	negs	r5, r5
 8005e30:	7013      	strb	r3, [r2, #0]
 8005e32:	4b61      	ldr	r3, [pc, #388]	; (8005fb8 <_printf_i+0x21c>)
 8005e34:	270a      	movs	r7, #10
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	e01b      	b.n	8005e72 <_printf_i+0xd6>
 8005e3a:	680d      	ldr	r5, [r1, #0]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	0641      	lsls	r1, r0, #25
 8005e40:	d5f1      	bpl.n	8005e26 <_printf_i+0x8a>
 8005e42:	b22d      	sxth	r5, r5
 8005e44:	e7ef      	b.n	8005e26 <_printf_i+0x8a>
 8005e46:	680d      	ldr	r5, [r1, #0]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	1d08      	adds	r0, r1, #4
 8005e4c:	6018      	str	r0, [r3, #0]
 8005e4e:	062e      	lsls	r6, r5, #24
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0xba>
 8005e52:	680d      	ldr	r5, [r1, #0]
 8005e54:	e003      	b.n	8005e5e <_printf_i+0xc2>
 8005e56:	066d      	lsls	r5, r5, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0xb6>
 8005e5a:	680d      	ldr	r5, [r1, #0]
 8005e5c:	b2ad      	uxth	r5, r5
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <_printf_i+0x21c>)
 8005e60:	2708      	movs	r7, #8
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	2a6f      	cmp	r2, #111	; 0x6f
 8005e66:	d000      	beq.n	8005e6a <_printf_i+0xce>
 8005e68:	3702      	adds	r7, #2
 8005e6a:	0023      	movs	r3, r4
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	3343      	adds	r3, #67	; 0x43
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db03      	blt.n	8005e82 <_printf_i+0xe6>
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	6821      	ldr	r1, [r4, #0]
 8005e7e:	4391      	bics	r1, r2
 8005e80:	6021      	str	r1, [r4, #0]
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	d102      	bne.n	8005e8c <_printf_i+0xf0>
 8005e86:	9e04      	ldr	r6, [sp, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00c      	beq.n	8005ea6 <_printf_i+0x10a>
 8005e8c:	9e04      	ldr	r6, [sp, #16]
 8005e8e:	0028      	movs	r0, r5
 8005e90:	0039      	movs	r1, r7
 8005e92:	f7fa f9dd 	bl	8000250 <__aeabi_uidivmod>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	3e01      	subs	r6, #1
 8005e9a:	5c5b      	ldrb	r3, [r3, r1]
 8005e9c:	7033      	strb	r3, [r6, #0]
 8005e9e:	002b      	movs	r3, r5
 8005ea0:	0005      	movs	r5, r0
 8005ea2:	429f      	cmp	r7, r3
 8005ea4:	d9f3      	bls.n	8005e8e <_printf_i+0xf2>
 8005ea6:	2f08      	cmp	r7, #8
 8005ea8:	d109      	bne.n	8005ebe <_printf_i+0x122>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d506      	bpl.n	8005ebe <_printf_i+0x122>
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	dc02      	bgt.n	8005ebe <_printf_i+0x122>
 8005eb8:	2330      	movs	r3, #48	; 0x30
 8005eba:	3e01      	subs	r6, #1
 8005ebc:	7033      	strb	r3, [r6, #0]
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	1b9b      	subs	r3, r3, r6
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	0021      	movs	r1, r4
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	9805      	ldr	r0, [sp, #20]
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	aa09      	add	r2, sp, #36	; 0x24
 8005ed0:	f7ff fef4 	bl	8005cbc <_printf_common>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d14c      	bne.n	8005f72 <_printf_i+0x1d6>
 8005ed8:	2001      	movs	r0, #1
 8005eda:	4240      	negs	r0, r0
 8005edc:	b00b      	add	sp, #44	; 0x2c
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	3145      	adds	r1, #69	; 0x45
 8005ee2:	700a      	strb	r2, [r1, #0]
 8005ee4:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <_printf_i+0x21c>)
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	6821      	ldr	r1, [r4, #0]
 8005eec:	ca20      	ldmia	r2!, {r5}
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	0608      	lsls	r0, r1, #24
 8005ef2:	d516      	bpl.n	8005f22 <_printf_i+0x186>
 8005ef4:	07cb      	lsls	r3, r1, #31
 8005ef6:	d502      	bpl.n	8005efe <_printf_i+0x162>
 8005ef8:	2320      	movs	r3, #32
 8005efa:	4319      	orrs	r1, r3
 8005efc:	6021      	str	r1, [r4, #0]
 8005efe:	2710      	movs	r7, #16
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	d1b2      	bne.n	8005e6a <_printf_i+0xce>
 8005f04:	2320      	movs	r3, #32
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	439a      	bics	r2, r3
 8005f0a:	6022      	str	r2, [r4, #0]
 8005f0c:	e7ad      	b.n	8005e6a <_printf_i+0xce>
 8005f0e:	2220      	movs	r2, #32
 8005f10:	6809      	ldr	r1, [r1, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	6022      	str	r2, [r4, #0]
 8005f16:	0022      	movs	r2, r4
 8005f18:	2178      	movs	r1, #120	; 0x78
 8005f1a:	3245      	adds	r2, #69	; 0x45
 8005f1c:	7011      	strb	r1, [r2, #0]
 8005f1e:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <_printf_i+0x220>)
 8005f20:	e7e1      	b.n	8005ee6 <_printf_i+0x14a>
 8005f22:	0648      	lsls	r0, r1, #25
 8005f24:	d5e6      	bpl.n	8005ef4 <_printf_i+0x158>
 8005f26:	b2ad      	uxth	r5, r5
 8005f28:	e7e4      	b.n	8005ef4 <_printf_i+0x158>
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	680d      	ldr	r5, [r1, #0]
 8005f2e:	1d10      	adds	r0, r2, #4
 8005f30:	6949      	ldr	r1, [r1, #20]
 8005f32:	6018      	str	r0, [r3, #0]
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	062e      	lsls	r6, r5, #24
 8005f38:	d501      	bpl.n	8005f3e <_printf_i+0x1a2>
 8005f3a:	6019      	str	r1, [r3, #0]
 8005f3c:	e002      	b.n	8005f44 <_printf_i+0x1a8>
 8005f3e:	066d      	lsls	r5, r5, #25
 8005f40:	d5fb      	bpl.n	8005f3a <_printf_i+0x19e>
 8005f42:	8019      	strh	r1, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	9e04      	ldr	r6, [sp, #16]
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	e7bb      	b.n	8005ec4 <_printf_i+0x128>
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	1d11      	adds	r1, r2, #4
 8005f50:	6019      	str	r1, [r3, #0]
 8005f52:	6816      	ldr	r6, [r2, #0]
 8005f54:	2100      	movs	r1, #0
 8005f56:	0030      	movs	r0, r6
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	f000 f833 	bl	8005fc4 <memchr>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d001      	beq.n	8005f66 <_printf_i+0x1ca>
 8005f62:	1b80      	subs	r0, r0, r6
 8005f64:	6060      	str	r0, [r4, #4]
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9a04      	ldr	r2, [sp, #16]
 8005f6e:	7013      	strb	r3, [r2, #0]
 8005f70:	e7a8      	b.n	8005ec4 <_printf_i+0x128>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	0032      	movs	r2, r6
 8005f76:	9906      	ldr	r1, [sp, #24]
 8005f78:	9805      	ldr	r0, [sp, #20]
 8005f7a:	9d07      	ldr	r5, [sp, #28]
 8005f7c:	47a8      	blx	r5
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d0aa      	beq.n	8005ed8 <_printf_i+0x13c>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	079b      	lsls	r3, r3, #30
 8005f86:	d415      	bmi.n	8005fb4 <_printf_i+0x218>
 8005f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8a:	68e0      	ldr	r0, [r4, #12]
 8005f8c:	4298      	cmp	r0, r3
 8005f8e:	daa5      	bge.n	8005edc <_printf_i+0x140>
 8005f90:	0018      	movs	r0, r3
 8005f92:	e7a3      	b.n	8005edc <_printf_i+0x140>
 8005f94:	0022      	movs	r2, r4
 8005f96:	2301      	movs	r3, #1
 8005f98:	9906      	ldr	r1, [sp, #24]
 8005f9a:	9805      	ldr	r0, [sp, #20]
 8005f9c:	9e07      	ldr	r6, [sp, #28]
 8005f9e:	3219      	adds	r2, #25
 8005fa0:	47b0      	blx	r6
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d098      	beq.n	8005ed8 <_printf_i+0x13c>
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	42ab      	cmp	r3, r5
 8005fb0:	dcf0      	bgt.n	8005f94 <_printf_i+0x1f8>
 8005fb2:	e7e9      	b.n	8005f88 <_printf_i+0x1ec>
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	e7f7      	b.n	8005fa8 <_printf_i+0x20c>
 8005fb8:	08006e2d 	.word	0x08006e2d
 8005fbc:	08006e3e 	.word	0x08006e3e

08005fc0 <__retarget_lock_acquire_recursive>:
 8005fc0:	4770      	bx	lr

08005fc2 <__retarget_lock_release_recursive>:
 8005fc2:	4770      	bx	lr

08005fc4 <memchr>:
 8005fc4:	b2c9      	uxtb	r1, r1
 8005fc6:	1882      	adds	r2, r0, r2
 8005fc8:	4290      	cmp	r0, r2
 8005fca:	d101      	bne.n	8005fd0 <memchr+0xc>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	4770      	bx	lr
 8005fd0:	7803      	ldrb	r3, [r0, #0]
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d0fb      	beq.n	8005fce <memchr+0xa>
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	e7f6      	b.n	8005fc8 <memchr+0x4>

08005fda <_realloc_r>:
 8005fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fdc:	0007      	movs	r7, r0
 8005fde:	000e      	movs	r6, r1
 8005fe0:	0014      	movs	r4, r2
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d105      	bne.n	8005ff2 <_realloc_r+0x18>
 8005fe6:	0011      	movs	r1, r2
 8005fe8:	f7ff fc46 	bl	8005878 <_malloc_r>
 8005fec:	0005      	movs	r5, r0
 8005fee:	0028      	movs	r0, r5
 8005ff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d103      	bne.n	8005ffe <_realloc_r+0x24>
 8005ff6:	f7ff fbd3 	bl	80057a0 <_free_r>
 8005ffa:	0025      	movs	r5, r4
 8005ffc:	e7f7      	b.n	8005fee <_realloc_r+0x14>
 8005ffe:	f000 f81b 	bl	8006038 <_malloc_usable_size_r>
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	4284      	cmp	r4, r0
 8006006:	d803      	bhi.n	8006010 <_realloc_r+0x36>
 8006008:	0035      	movs	r5, r6
 800600a:	0843      	lsrs	r3, r0, #1
 800600c:	42a3      	cmp	r3, r4
 800600e:	d3ee      	bcc.n	8005fee <_realloc_r+0x14>
 8006010:	0021      	movs	r1, r4
 8006012:	0038      	movs	r0, r7
 8006014:	f7ff fc30 	bl	8005878 <_malloc_r>
 8006018:	1e05      	subs	r5, r0, #0
 800601a:	d0e8      	beq.n	8005fee <_realloc_r+0x14>
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	0022      	movs	r2, r4
 8006020:	429c      	cmp	r4, r3
 8006022:	d900      	bls.n	8006026 <_realloc_r+0x4c>
 8006024:	001a      	movs	r2, r3
 8006026:	0031      	movs	r1, r6
 8006028:	0028      	movs	r0, r5
 800602a:	f7ff fb69 	bl	8005700 <memcpy>
 800602e:	0031      	movs	r1, r6
 8006030:	0038      	movs	r0, r7
 8006032:	f7ff fbb5 	bl	80057a0 <_free_r>
 8006036:	e7da      	b.n	8005fee <_realloc_r+0x14>

08006038 <_malloc_usable_size_r>:
 8006038:	1f0b      	subs	r3, r1, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	1f18      	subs	r0, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	da01      	bge.n	8006046 <_malloc_usable_size_r+0xe>
 8006042:	580b      	ldr	r3, [r1, r0]
 8006044:	18c0      	adds	r0, r0, r3
 8006046:	4770      	bx	lr

08006048 <_init>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr

08006054 <_fini>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr
