
Parts_Storage_Drawers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e14  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc8  08006cc8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd0  08006cd0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  200000a8  08006d80  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08006d80  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6ec  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004002  00000000  00000000  0003c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011c1e  00000000  00000000  000407be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  000523e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d28  00000000  00000000  00053420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016696  00000000  00000000  00055148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9f7  00000000  00000000  0006b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f86  00000000  00000000  0008b1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c15b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003778  00000000  00000000  0010c1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e9c 	.word	0x08005e9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	08005e9c 	.word	0x08005e9c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:
 80004e4:	2300      	movs	r3, #0
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
 80004ea:	ac05      	add	r4, sp, #20
 80004ec:	000e      	movs	r6, r1
 80004ee:	210a      	movs	r1, #10
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
 80004f4:	7023      	strb	r3, [r4, #0]
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
 8000508:	0030      	movs	r0, r6
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
 800051e:	0028      	movs	r0, r5
 8000520:	187f      	adds	r7, r7, r1
 8000522:	210a      	movs	r1, #10
 8000524:	70a7      	strb	r7, [r4, #2]
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fdc0 	bl	80040cc <HAL_I2C_Master_Transmit>
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004cc 	.word	0x200004cc

08000554 <DS3231_get_time>:
 8000554:	2300      	movs	r3, #0
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
 800055c:	aa02      	add	r2, sp, #8
 800055e:	2564      	movs	r5, #100	; 0x64
 8000560:	73d3      	strb	r3, [r2, #15]
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
 8000566:	9103      	str	r1, [sp, #12]
 8000568:	a902      	add	r1, sp, #8
 800056a:	9002      	str	r0, [sp, #8]
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fda9 	bl	80040cc <HAL_I2C_Master_Transmit>
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fe34 	bl	80041f0 <HAL_I2C_Master_Receive>
 8000588:	2701      	movs	r7, #1
 800058a:	220f      	movs	r2, #15
 800058c:	ab02      	add	r3, sp, #8
 800058e:	a902      	add	r1, sp, #8
 8000590:	73df      	strb	r7, [r3, #15]
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fd96 	bl	80040cc <HAL_I2C_Master_Transmit>
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 fe21 	bl	80041f0 <HAL_I2C_Master_Receive>
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fd83 	bl	80040cc <HAL_I2C_Master_Transmit>
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fe0e 	bl	80041f0 <HAL_I2C_Master_Receive>
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004cc 	.word	0x200004cc

08000610 <DS3231_set_date>:
 8000610:	2304      	movs	r3, #4
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
 8000616:	ac05      	add	r4, sp, #20
 8000618:	000e      	movs	r6, r1
 800061a:	210a      	movs	r1, #10
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
 8000620:	7023      	strb	r3, [r4, #0]
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
 8000634:	0030      	movs	r0, r6
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
 800064a:	0028      	movs	r0, r5
 800064c:	187f      	adds	r7, r7, r1
 800064e:	210a      	movs	r1, #10
 8000650:	70a7      	strb	r7, [r4, #2]
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fd2a 	bl	80040cc <HAL_I2C_Master_Transmit>
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004cc 	.word	0x200004cc

08000680 <DS3231_get_date>:
 8000680:	2304      	movs	r3, #4
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
 8000688:	aa02      	add	r2, sp, #8
 800068a:	2564      	movs	r5, #100	; 0x64
 800068c:	73d3      	strb	r3, [r2, #15]
 800068e:	220f      	movs	r2, #15
 8000690:	0007      	movs	r7, r0
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
 8000694:	000e      	movs	r6, r1
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fd13 	bl	80040cc <HAL_I2C_Master_Transmit>
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fd9e 	bl	80041f0 <HAL_I2C_Master_Receive>
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fd00 	bl	80040cc <HAL_I2C_Master_Transmit>
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fd8b 	bl	80041f0 <HAL_I2C_Master_Receive>
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fced 	bl	80040cc <HAL_I2C_Master_Transmit>
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fd78 	bl	80041f0 <HAL_I2C_Master_Receive>
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004cc 	.word	0x200004cc

08000738 <led_color>:
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
 8000746:	60a3      	str	r3, [r4, #8]
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000c4 	.word	0x200000c4

08000750 <led_update>:
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
 800075e:	3001      	adds	r0, #1
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
 800076e:	6895      	ldr	r5, [r2, #8]
 8000770:	320c      	adds	r2, #12
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 fc0a 	bl	8004fa4 <HAL_SPI_Transmit_DMA>
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000274 	.word	0x20000274
 8000798:	200000c4 	.word	0x200000c4
 800079c:	08005ed4 	.word	0x08005ed4
 80007a0:	20000518 	.word	0x20000518

080007a4 <led_clear>:
 80007a4:	22d8      	movs	r2, #216	; 0xd8
 80007a6:	b510      	push	{r4, lr}
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 feed 	bl	800558c <memset>
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000c4 	.word	0x200000c4

080007b8 <led_cmp>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	260c      	movs	r6, #12
 80007bc:	0035      	movs	r5, r6
 80007be:	4345      	muls	r5, r0
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <led_cmp+0x38>)
 80007c2:	4370      	muls	r0, r6
 80007c4:	592f      	ldr	r7, [r5, r4]
 80007c6:	1965      	adds	r5, r4, r5
 80007c8:	686d      	ldr	r5, [r5, #4]
 80007ca:	1aba      	subs	r2, r7, r2
 80007cc:	1a6d      	subs	r5, r5, r1
 80007ce:	4257      	negs	r7, r2
 80007d0:	417a      	adcs	r2, r7
 80007d2:	4269      	negs	r1, r5
 80007d4:	414d      	adcs	r5, r1
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	68a1      	ldr	r1, [r4, #8]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	1952      	adds	r2, r2, r5
 80007de:	4299      	cmp	r1, r3
 80007e0:	d101      	bne.n	80007e6 <led_cmp+0x2e>
 80007e2:	3201      	adds	r2, #1
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	3a03      	subs	r2, #3
 80007e8:	4253      	negs	r3, r2
 80007ea:	415a      	adcs	r2, r3
 80007ec:	b2d0      	uxtb	r0, r2
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	200000c4 	.word	0x200000c4

080007f4 <SystemClock_Config>:
 80007f4:	b510      	push	{r4, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	2224      	movs	r2, #36	; 0x24
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80f      	add	r0, sp, #60	; 0x3c
 80007fe:	f004 fec5 	bl	800558c <memset>
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a801      	add	r0, sp, #4
 8000808:	f004 fec0 	bl	800558c <memset>
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	a806      	add	r0, sp, #24
 8000812:	f004 febb 	bl	800558c <memset>
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <SystemClock_Config+0x90>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0x94>)
 800081a:	680b      	ldr	r3, [r1, #0]
 800081c:	2401      	movs	r4, #1
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4313      	orrs	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	; 0x38
 800082c:	9318      	str	r3, [sp, #96]	; 0x60
 800082e:	2300      	movs	r3, #0
 8000830:	9319      	str	r3, [sp, #100]	; 0x64
 8000832:	931a      	str	r3, [sp, #104]	; 0x68
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	2210      	movs	r2, #16
 8000838:	03db      	lsls	r3, r3, #15
 800083a:	a80e      	add	r0, sp, #56	; 0x38
 800083c:	9411      	str	r4, [sp, #68]	; 0x44
 800083e:	9212      	str	r2, [sp, #72]	; 0x48
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
 8000842:	f003 fe9d 	bl	8004580 <HAL_RCC_OscConfig>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5a>
 800084a:	b672      	cpsid	i
 800084c:	e7fe      	b.n	800084c <SystemClock_Config+0x58>
 800084e:	230f      	movs	r3, #15
 8000850:	9003      	str	r0, [sp, #12]
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9004      	str	r0, [sp, #16]
 8000856:	3b0c      	subs	r3, #12
 8000858:	9005      	str	r0, [sp, #20]
 800085a:	0021      	movs	r1, r4
 800085c:	a801      	add	r0, sp, #4
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f004 f910 	bl	8004a84 <HAL_RCC_ClockConfig>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x78>
 8000868:	b672      	cpsid	i
 800086a:	e7fe      	b.n	800086a <SystemClock_Config+0x76>
 800086c:	2308      	movs	r3, #8
 800086e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000870:	a806      	add	r0, sp, #24
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	f004 f9d4 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x8c>
 800087c:	b672      	cpsid	i
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x8a>
 8000880:	b01c      	add	sp, #112	; 0x70
 8000882:	bd10      	pop	{r4, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <main>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	2601      	movs	r6, #1
 8000890:	b08b      	sub	sp, #44	; 0x2c
 8000892:	f002 fd0d 	bl	80032b0 <HAL_Init>
 8000896:	f7ff ffad 	bl	80007f4 <SystemClock_Config>
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f004 fe74 	bl	800558c <memset>
 80008a4:	2102      	movs	r1, #2
 80008a6:	20a0      	movs	r0, #160	; 0xa0
 80008a8:	4f7a      	ldr	r7, [pc, #488]	; (8000a94 <main+0x208>)
 80008aa:	05c0      	lsls	r0, r0, #23
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	2500      	movs	r5, #0
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	4033      	ands	r3, r6
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	430a      	orrs	r2, r1
 80008c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	2200      	movs	r2, #0
 80008c6:	400b      	ands	r3, r1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	3106      	adds	r1, #6
 80008cc:	9b02      	ldr	r3, [sp, #8]
 80008ce:	f003 fa81 	bl	8003dd4 <HAL_GPIO_WritePin>
 80008d2:	2200      	movs	r2, #0
 80008d4:	0031      	movs	r1, r6
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <main+0x20c>)
 80008d8:	f003 fa7c 	bl	8003dd4 <HAL_GPIO_WritePin>
 80008dc:	20a0      	movs	r0, #160	; 0xa0
 80008de:	2304      	movs	r3, #4
 80008e0:	a905      	add	r1, sp, #20
 80008e2:	05c0      	lsls	r0, r0, #23
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	9506      	str	r5, [sp, #24]
 80008e8:	9607      	str	r6, [sp, #28]
 80008ea:	f003 f9ad 	bl	8003c48 <HAL_GPIO_Init>
 80008ee:	20a0      	movs	r0, #160	; 0xa0
 80008f0:	2208      	movs	r2, #8
 80008f2:	a905      	add	r1, sp, #20
 80008f4:	05c0      	lsls	r0, r0, #23
 80008f6:	9205      	str	r2, [sp, #20]
 80008f8:	9606      	str	r6, [sp, #24]
 80008fa:	9507      	str	r5, [sp, #28]
 80008fc:	9508      	str	r5, [sp, #32]
 80008fe:	f003 f9a3 	bl	8003c48 <HAL_GPIO_Init>
 8000902:	4865      	ldr	r0, [pc, #404]	; (8000a98 <main+0x20c>)
 8000904:	a905      	add	r1, sp, #20
 8000906:	9605      	str	r6, [sp, #20]
 8000908:	9606      	str	r6, [sp, #24]
 800090a:	9507      	str	r5, [sp, #28]
 800090c:	9508      	str	r5, [sp, #32]
 800090e:	f003 f99b 	bl	8003c48 <HAL_GPIO_Init>
 8000912:	2208      	movs	r2, #8
 8000914:	0029      	movs	r1, r5
 8000916:	a805      	add	r0, sp, #20
 8000918:	f004 fe38 	bl	800558c <memset>
 800091c:	2306      	movs	r3, #6
 800091e:	4c5f      	ldr	r4, [pc, #380]	; (8000a9c <main+0x210>)
 8000920:	63a3      	str	r3, [r4, #56]	; 0x38
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	33ff      	adds	r3, #255	; 0xff
 8000926:	6263      	str	r3, [r4, #36]	; 0x24
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x214>)
 800092a:	0022      	movs	r2, r4
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	2304      	movs	r3, #4
 8000930:	322c      	adds	r2, #44	; 0x2c
 8000932:	0020      	movs	r0, r4
 8000934:	8425      	strh	r5, [r4, #32]
 8000936:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000938:	62a5      	str	r5, [r4, #40]	; 0x28
 800093a:	7015      	strb	r5, [r2, #0]
 800093c:	6325      	str	r5, [r4, #48]	; 0x30
 800093e:	6365      	str	r5, [r4, #52]	; 0x34
 8000940:	6065      	str	r5, [r4, #4]
 8000942:	60a5      	str	r5, [r4, #8]
 8000944:	60e5      	str	r5, [r4, #12]
 8000946:	6126      	str	r6, [r4, #16]
 8000948:	6163      	str	r3, [r4, #20]
 800094a:	61a5      	str	r5, [r4, #24]
 800094c:	61e5      	str	r5, [r4, #28]
 800094e:	f002 fd9f 	bl	8003490 <HAL_ADC_Init>
 8000952:	42a8      	cmp	r0, r5
 8000954:	d001      	beq.n	800095a <main+0xce>
 8000956:	b672      	cpsid	i
 8000958:	e7fe      	b.n	8000958 <main+0xcc>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	0020      	movs	r0, r4
 800095e:	015b      	lsls	r3, r3, #5
 8000960:	a905      	add	r1, sp, #20
 8000962:	9605      	str	r6, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	f002 ff1f 	bl	80037a8 <HAL_ADC_ConfigChannel>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <main+0xe6>
 800096e:	b672      	cpsid	i
 8000970:	e7fe      	b.n	8000970 <main+0xe4>
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x218>)
 8000974:	0020      	movs	r0, r4
 8000976:	a905      	add	r1, sp, #20
 8000978:	9305      	str	r3, [sp, #20]
 800097a:	f002 ff15 	bl	80037a8 <HAL_ADC_ConfigChannel>
 800097e:	1e04      	subs	r4, r0, #0
 8000980:	d001      	beq.n	8000986 <main+0xfa>
 8000982:	b672      	cpsid	i
 8000984:	e7fe      	b.n	8000984 <main+0xf8>
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	0001      	movs	r1, r0
 800098a:	4333      	orrs	r3, r6
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	0002      	movs	r2, r0
 8000992:	4033      	ands	r3, r6
 8000994:	200a      	movs	r0, #10
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	9b00      	ldr	r3, [sp, #0]
 800099a:	f002 ff59 	bl	8003850 <HAL_NVIC_SetPriority>
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 ff80 	bl	80038a4 <HAL_NVIC_EnableIRQ>
 80009a4:	4d40      	ldr	r5, [pc, #256]	; (8000aa8 <main+0x21c>)
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x220>)
 80009a8:	0028      	movs	r0, r5
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <main+0x224>)
 80009ae:	60ac      	str	r4, [r5, #8]
 80009b0:	606b      	str	r3, [r5, #4]
 80009b2:	60ee      	str	r6, [r5, #12]
 80009b4:	612c      	str	r4, [r5, #16]
 80009b6:	616c      	str	r4, [r5, #20]
 80009b8:	61ac      	str	r4, [r5, #24]
 80009ba:	61ec      	str	r4, [r5, #28]
 80009bc:	622c      	str	r4, [r5, #32]
 80009be:	f003 fb2f 	bl	8004020 <HAL_I2C_Init>
 80009c2:	1e01      	subs	r1, r0, #0
 80009c4:	d001      	beq.n	80009ca <main+0x13e>
 80009c6:	b672      	cpsid	i
 80009c8:	e7fe      	b.n	80009c8 <main+0x13c>
 80009ca:	0028      	movs	r0, r5
 80009cc:	f003 fd46 	bl	800445c <HAL_I2CEx_ConfigAnalogFilter>
 80009d0:	1e01      	subs	r1, r0, #0
 80009d2:	d001      	beq.n	80009d8 <main+0x14c>
 80009d4:	b672      	cpsid	i
 80009d6:	e7fe      	b.n	80009d6 <main+0x14a>
 80009d8:	0028      	movs	r0, r5
 80009da:	f003 fd65 	bl	80044a8 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x15a>
 80009e2:	b672      	cpsid	i
 80009e4:	e7fe      	b.n	80009e4 <main+0x158>
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <main+0x228>)
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <main+0x22c>)
 80009ea:	6083      	str	r3, [r0, #8]
 80009ec:	6002      	str	r2, [r0, #0]
 80009ee:	2282      	movs	r2, #130	; 0x82
 80009f0:	60c3      	str	r3, [r0, #12]
 80009f2:	6103      	str	r3, [r0, #16]
 80009f4:	6143      	str	r3, [r0, #20]
 80009f6:	6203      	str	r3, [r0, #32]
 80009f8:	6243      	str	r3, [r0, #36]	; 0x24
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
 80009fc:	2410      	movs	r4, #16
 80009fe:	2307      	movs	r3, #7
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	6042      	str	r2, [r0, #4]
 8000a04:	32fc      	adds	r2, #252	; 0xfc
 8000a06:	6182      	str	r2, [r0, #24]
 8000a08:	61c4      	str	r4, [r0, #28]
 8000a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000a0c:	f004 fa68 	bl	8004ee0 <HAL_SPI_Init>
 8000a10:	1e05      	subs	r5, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x18c>
 8000a14:	b672      	cpsid	i
 8000a16:	e7fe      	b.n	8000a16 <main+0x18a>
 8000a18:	0022      	movs	r2, r4
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	a805      	add	r0, sp, #20
 8000a1e:	f004 fdb5 	bl	800558c <memset>
 8000a22:	2208      	movs	r2, #8
 8000a24:	0029      	movs	r1, r5
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f004 fdb0 	bl	800558c <memset>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	4c23      	ldr	r4, [pc, #140]	; (8000abc <main+0x230>)
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	231f      	movs	r3, #31
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <main+0x234>)
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	60a5      	str	r5, [r4, #8]
 8000a3e:	60e3      	str	r3, [r4, #12]
 8000a40:	6125      	str	r5, [r4, #16]
 8000a42:	6165      	str	r5, [r4, #20]
 8000a44:	f004 fb92 	bl	800516c <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1c4>
 8000a4c:	b672      	cpsid	i
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1c2>
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	0020      	movs	r0, r4
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	a905      	add	r1, sp, #20
 8000a58:	9305      	str	r3, [sp, #20]
 8000a5a:	f004 fbd7 	bl	800520c <HAL_TIM_ConfigClockSource>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x1da>
 8000a62:	b672      	cpsid	i
 8000a64:	e7fe      	b.n	8000a64 <main+0x1d8>
 8000a66:	9003      	str	r0, [sp, #12]
 8000a68:	9004      	str	r0, [sp, #16]
 8000a6a:	a903      	add	r1, sp, #12
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f004 fd07 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x1ee>
 8000a76:	b672      	cpsid	i
 8000a78:	e7fe      	b.n	8000a78 <main+0x1ec>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	0011      	movs	r1, r2
 8000a80:	f002 fee6 	bl	8003850 <HAL_NVIC_SetPriority>
 8000a84:	200f      	movs	r0, #15
 8000a86:	f002 ff0d 	bl	80038a4 <HAL_NVIC_EnableIRQ>
 8000a8a:	f002 fb35 	bl	80030f8 <PSDrawers_Initialized>
 8000a8e:	f002 fb45 	bl	800311c <PSDrawers_Main>
 8000a92:	e7fe      	b.n	8000a92 <main+0x206>
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	20000428 	.word	0x20000428
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	04000002 	.word	0x04000002
 8000aa8:	200004cc 	.word	0x200004cc
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00200c28 	.word	0x00200c28
 8000ab4:	20000518 	.word	0x20000518
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	20000570 	.word	0x20000570
 8000ac0:	000003e7 	.word	0x000003e7

08000ac4 <Error_Handler>:
 8000ac4:	b672      	cpsid	i
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x2>

08000ac8 <SSD1306_Fill>:
 8000ac8:	2100      	movs	r1, #0
 8000aca:	b510      	push	{r4, lr}
 8000acc:	4288      	cmp	r0, r1
 8000ace:	d000      	beq.n	8000ad2 <SSD1306_Fill+0xa>
 8000ad0:	31ff      	adds	r1, #255	; 0xff
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SSD1306_Fill+0x18>)
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	f004 fd58 	bl	800558c <memset>
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200005b6 	.word	0x200005b6

08000ae4 <SSD1306_DrawPixel>:
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	0004      	movs	r4, r0
 8000ae8:	287f      	cmp	r0, #127	; 0x7f
 8000aea:	d812      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000aec:	293f      	cmp	r1, #63	; 0x3f
 8000aee:	d810      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0x48>)
 8000af2:	4d0f      	ldr	r5, [pc, #60]	; (8000b30 <SSD1306_DrawPixel+0x4c>)
 8000af4:	7918      	ldrb	r0, [r3, #4]
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d00b      	beq.n	8000b14 <SSD1306_DrawPixel+0x30>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d10b      	bne.n	8000b18 <SSD1306_DrawPixel+0x34>
 8000b00:	01d8      	lsls	r0, r3, #7
 8000b02:	2307      	movs	r3, #7
 8000b04:	4019      	ands	r1, r3
 8000b06:	3b06      	subs	r3, #6
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1900      	adds	r0, r0, r4
 8000b0c:	5c2a      	ldrb	r2, [r5, r0]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	542b      	strb	r3, [r5, r0]
 8000b12:	bd30      	pop	{r4, r5, pc}
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d0f3      	beq.n	8000b00 <SSD1306_DrawPixel+0x1c>
 8000b18:	01d8      	lsls	r0, r3, #7
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4019      	ands	r1, r3
 8000b20:	408a      	lsls	r2, r1
 8000b22:	1900      	adds	r0, r0, r4
 8000b24:	5c2b      	ldrb	r3, [r5, r0]
 8000b26:	4393      	bics	r3, r2
 8000b28:	e7f2      	b.n	8000b10 <SSD1306_DrawPixel+0x2c>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200005b0 	.word	0x200005b0
 8000b30:	200005b6 	.word	0x200005b6

08000b34 <SSD1306_GotoXY>:
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <SSD1306_GotoXY+0x8>)
 8000b36:	8018      	strh	r0, [r3, #0]
 8000b38:	8059      	strh	r1, [r3, #2]
 8000b3a:	4770      	bx	lr
 8000b3c:	200005b0 	.word	0x200005b0

08000b40 <SSD1306_Putc>:
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b42:	0007      	movs	r7, r0
 8000b44:	000c      	movs	r4, r1
 8000b46:	2500      	movs	r5, #0
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	7863      	ldrb	r3, [r4, #1]
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d806      	bhi.n	8000b5e <SSD1306_Putc+0x1e>
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b52:	7823      	ldrb	r3, [r4, #0]
 8000b54:	8811      	ldrh	r1, [r2, #0]
 8000b56:	0038      	movs	r0, r7
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	8013      	strh	r3, [r2, #0]
 8000b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000b5e:	003a      	movs	r2, r7
 8000b60:	2600      	movs	r6, #0
 8000b62:	3a20      	subs	r2, #32
 8000b64:	4353      	muls	r3, r2
 8000b66:	6862      	ldr	r2, [r4, #4]
 8000b68:	195b      	adds	r3, r3, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	5a9b      	ldrh	r3, [r3, r2]
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b72:	7822      	ldrb	r2, [r4, #0]
 8000b74:	8818      	ldrh	r0, [r3, #0]
 8000b76:	42b2      	cmp	r2, r6
 8000b78:	d801      	bhi.n	8000b7e <SSD1306_Putc+0x3e>
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7e5      	b.n	8000b4a <SSD1306_Putc+0xa>
 8000b7e:	8859      	ldrh	r1, [r3, #2]
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	40b3      	lsls	r3, r6
 8000b86:	1980      	adds	r0, r0, r6
 8000b88:	1949      	adds	r1, r1, r5
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	4213      	tst	r3, r2
 8000b92:	d004      	beq.n	8000b9e <SSD1306_Putc+0x5e>
 8000b94:	9a00      	ldr	r2, [sp, #0]
 8000b96:	f7ff ffa5 	bl	8000ae4 <SSD1306_DrawPixel>
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7e8      	b.n	8000b70 <SSD1306_Putc+0x30>
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	425a      	negs	r2, r3
 8000ba2:	415a      	adcs	r2, r3
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	e7f6      	b.n	8000b96 <SSD1306_Putc+0x56>
 8000ba8:	200005b0 	.word	0x200005b0

08000bac <SSD1306_Puts>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <SSD1306_Puts+0x10>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	f7ff ffbe 	bl	8000b40 <SSD1306_Putc>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	7820      	ldrb	r0, [r4, #0]
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	d1f6      	bne.n	8000bba <SSD1306_Puts+0xe>
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7f1      	b.n	8000bb4 <SSD1306_Puts+0x8>

08000bd0 <SSD1306_DrawLine>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	ac0c      	add	r4, sp, #48	; 0x30
 8000bd6:	7824      	ldrb	r4, [r4, #0]
 8000bd8:	9405      	str	r4, [sp, #20]
 8000bda:	1c04      	adds	r4, r0, #0
 8000bdc:	287f      	cmp	r0, #127	; 0x7f
 8000bde:	d900      	bls.n	8000be2 <SSD1306_DrawLine+0x12>
 8000be0:	247f      	movs	r4, #127	; 0x7f
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	1c16      	adds	r6, r2, #0
 8000be6:	2a7f      	cmp	r2, #127	; 0x7f
 8000be8:	d900      	bls.n	8000bec <SSD1306_DrawLine+0x1c>
 8000bea:	267f      	movs	r6, #127	; 0x7f
 8000bec:	b2b6      	uxth	r6, r6
 8000bee:	1c0d      	adds	r5, r1, #0
 8000bf0:	293f      	cmp	r1, #63	; 0x3f
 8000bf2:	d900      	bls.n	8000bf6 <SSD1306_DrawLine+0x26>
 8000bf4:	253f      	movs	r5, #63	; 0x3f
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	1c1f      	adds	r7, r3, #0
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d900      	bls.n	8000c00 <SSD1306_DrawLine+0x30>
 8000bfe:	273f      	movs	r7, #63	; 0x3f
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	1b33      	subs	r3, r6, r4
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d800      	bhi.n	8000c0a <SSD1306_DrawLine+0x3a>
 8000c08:	1ba3      	subs	r3, r4, r6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d224      	bcs.n	8000c5c <SSD1306_DrawLine+0x8c>
 8000c12:	1b7b      	subs	r3, r7, r5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d801      	bhi.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd23      	ble.n	8000c76 <SSD1306_DrawLine+0xa6>
 8000c2e:	9a00      	ldr	r2, [sp, #0]
 8000c30:	0fdb      	lsrs	r3, r3, #31
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12b      	bne.n	8000c96 <SSD1306_DrawLine+0xc6>
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	d902      	bls.n	8000c48 <SSD1306_DrawLine+0x78>
 8000c42:	002b      	movs	r3, r5
 8000c44:	003d      	movs	r5, r7
 8000c46:	001f      	movs	r7, r3
 8000c48:	1c33      	adds	r3, r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d900      	bls.n	8000c50 <SSD1306_DrawLine+0x80>
 8000c4e:	1c23      	adds	r3, r4, #0
 8000c50:	b29c      	uxth	r4, r3
 8000c52:	b22d      	sxth	r5, r5
 8000c54:	42bd      	cmp	r5, r7
 8000c56:	dd16      	ble.n	8000c86 <SSD1306_DrawLine+0xb6>
 8000c58:	b007      	add	sp, #28
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	1beb      	subs	r3, r5, r7
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2301      	movs	r3, #1
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d903      	bls.n	8000c70 <SSD1306_DrawLine+0xa0>
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7da      	b.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c70:	425b      	negs	r3, r3
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	e7fa      	b.n	8000c6c <SSD1306_DrawLine+0x9c>
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0fdb      	lsrs	r3, r3, #31
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	e7d7      	b.n	8000c36 <SSD1306_DrawLine+0x66>
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	0029      	movs	r1, r5
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	9a05      	ldr	r2, [sp, #20]
 8000c8e:	f7ff ff29 	bl	8000ae4 <SSD1306_DrawPixel>
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7dd      	b.n	8000c52 <SSD1306_DrawLine+0x82>
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d115      	bne.n	8000cc8 <SSD1306_DrawLine+0xf8>
 8000c9c:	1c2b      	adds	r3, r5, #0
 8000c9e:	42bd      	cmp	r5, r7
 8000ca0:	d900      	bls.n	8000ca4 <SSD1306_DrawLine+0xd4>
 8000ca2:	1c3b      	adds	r3, r7, #0
 8000ca4:	b29d      	uxth	r5, r3
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d202      	bcs.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000caa:	0023      	movs	r3, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	001e      	movs	r6, r3
 8000cb0:	b224      	sxth	r4, r4
 8000cb2:	42b4      	cmp	r4, r6
 8000cb4:	dcd0      	bgt.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	0020      	movs	r0, r4
 8000cba:	0029      	movs	r1, r5
 8000cbc:	9a05      	ldr	r2, [sp, #20]
 8000cbe:	f7ff ff11 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	e7f4      	b.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	0029      	movs	r1, r5
 8000cca:	0020      	movs	r0, r4
 8000ccc:	9a05      	ldr	r2, [sp, #20]
 8000cce:	f7ff ff09 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d101      	bne.n	8000cda <SSD1306_DrawLine+0x10a>
 8000cd6:	42bd      	cmp	r5, r7
 8000cd8:	d0be      	beq.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	425a      	negs	r2, r3
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd05      	ble.n	8000cf0 <SSD1306_DrawLine+0x120>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	9a03      	ldr	r2, [sp, #12]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	18a4      	adds	r4, r4, r2
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	9a02      	ldr	r2, [sp, #8]
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	dae6      	bge.n	8000cc6 <SSD1306_DrawLine+0xf6>
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	9a04      	ldr	r2, [sp, #16]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	e7df      	b.n	8000cc6 <SSD1306_DrawLine+0xf6>

08000d06 <SSD1306_DrawRectangle>:
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0007      	movs	r7, r0
 8000d12:	000e      	movs	r6, r1
 8000d14:	9303      	str	r3, [sp, #12]
 8000d16:	287f      	cmp	r0, #127	; 0x7f
 8000d18:	d831      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1a:	293f      	cmp	r1, #63	; 0x3f
 8000d1c:	d82f      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1e:	1883      	adds	r3, r0, r2
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dd02      	ble.n	8000d2a <SSD1306_DrawRectangle+0x24>
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	1973      	adds	r3, r6, r5
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd02      	ble.n	8000d36 <SSD1306_DrawRectangle+0x30>
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1bad      	subs	r5, r5, r6
 8000d34:	b2ad      	uxth	r5, r5
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	19d2      	adds	r2, r2, r7
 8000d3a:	b294      	uxth	r4, r2
 8000d3c:	0022      	movs	r2, r4
 8000d3e:	0031      	movs	r1, r6
 8000d40:	0038      	movs	r0, r7
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0033      	movs	r3, r6
 8000d46:	f7ff ff43 	bl	8000bd0 <SSD1306_DrawLine>
 8000d4a:	19ad      	adds	r5, r5, r6
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	0022      	movs	r2, r4
 8000d52:	0029      	movs	r1, r5
 8000d54:	0038      	movs	r0, r7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	f7ff ff39 	bl	8000bd0 <SSD1306_DrawLine>
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	003a      	movs	r2, r7
 8000d62:	0031      	movs	r1, r6
 8000d64:	0038      	movs	r0, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	002b      	movs	r3, r5
 8000d6a:	f7ff ff31 	bl	8000bd0 <SSD1306_DrawLine>
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	0022      	movs	r2, r4
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0031      	movs	r1, r6
 8000d76:	002b      	movs	r3, r5
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff ff29 	bl	8000bd0 <SSD1306_DrawLine>
 8000d7e:	b005      	add	sp, #20
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <SSD1306_DrawFilledRectangle>:
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	ab0a      	add	r3, sp, #40	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000f      	movs	r7, r1
 8000d90:	0014      	movs	r4, r2
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	287f      	cmp	r0, #127	; 0x7f
 8000d96:	d814      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d98:	293f      	cmp	r1, #63	; 0x3f
 8000d9a:	d812      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d9c:	1883      	adds	r3, r0, r2
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	dd02      	ble.n	8000da8 <SSD1306_DrawFilledRectangle+0x26>
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	1a24      	subs	r4, r4, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	9b02      	ldr	r3, [sp, #8]
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	dd03      	ble.n	8000db8 <SSD1306_DrawFilledRectangle+0x36>
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2600      	movs	r6, #0
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	b2b1      	uxth	r1, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawFilledRectangle+0x44>
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	19c9      	adds	r1, r1, r7
 8000dca:	b289      	uxth	r1, r1
 8000dcc:	1962      	adds	r2, r4, r5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	3601      	adds	r6, #1
 8000dd8:	f7ff fefa 	bl	8000bd0 <SSD1306_DrawLine>
 8000ddc:	b2f6      	uxtb	r6, r6
 8000dde:	e7ec      	b.n	8000dba <SSD1306_DrawFilledRectangle+0x38>

08000de0 <SSD1306_Clear>:
 8000de0:	b510      	push	{r4, lr}
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe70 	bl	8000ac8 <SSD1306_Fill>
 8000de8:	bd10      	pop	{r4, pc}
	...

08000dec <ssd1306_I2C_WriteMulti>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	2400      	movs	r4, #0
 8000df0:	b0c2      	sub	sp, #264	; 0x108
 8000df2:	0015      	movs	r5, r2
 8000df4:	aa02      	add	r2, sp, #8
 8000df6:	7011      	strb	r1, [r2, #0]
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d309      	bcc.n	8000e10 <ssd1306_I2C_WriteMulti+0x24>
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	200a      	movs	r0, #10
 8000e00:	3301      	adds	r3, #1
 8000e02:	9000      	str	r0, [sp, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <ssd1306_I2C_WriteMulti+0x30>)
 8000e08:	f003 f960 	bl	80040cc <HAL_I2C_Master_Transmit>
 8000e0c:	b042      	add	sp, #264	; 0x108
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	5d2e      	ldrb	r6, [r5, r4]
 8000e12:	1911      	adds	r1, r2, r4
 8000e14:	3401      	adds	r4, #1
 8000e16:	704e      	strb	r6, [r1, #1]
 8000e18:	b2e4      	uxtb	r4, r4
 8000e1a:	e7ed      	b.n	8000df8 <ssd1306_I2C_WriteMulti+0xc>
 8000e1c:	200004cc 	.word	0x200004cc

08000e20 <ssd1306_I2C_Write>:
 8000e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e22:	466b      	mov	r3, sp
 8000e24:	7319      	strb	r1, [r3, #12]
 8000e26:	735a      	strb	r2, [r3, #13]
 8000e28:	230a      	movs	r3, #10
 8000e2a:	0001      	movs	r1, r0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	aa03      	add	r2, sp, #12
 8000e30:	3b08      	subs	r3, #8
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ssd1306_I2C_Write+0x1c>)
 8000e34:	f003 f94a 	bl	80040cc <HAL_I2C_Master_Transmit>
 8000e38:	b005      	add	sp, #20
 8000e3a:	bd00      	pop	{pc}
 8000e3c:	200004cc 	.word	0x200004cc

08000e40 <SSD1306_UpdateScreen>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	24b0      	movs	r4, #176	; 0xb0
 8000e44:	2578      	movs	r5, #120	; 0x78
 8000e46:	4e0e      	ldr	r6, [pc, #56]	; (8000e80 <SSD1306_UpdateScreen+0x40>)
 8000e48:	0022      	movs	r2, r4
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	f7ff ffe7 	bl	8000e20 <ssd1306_I2C_Write>
 8000e52:	2200      	movs	r2, #0
 8000e54:	0028      	movs	r0, r5
 8000e56:	0011      	movs	r1, r2
 8000e58:	f7ff ffe2 	bl	8000e20 <ssd1306_I2C_Write>
 8000e5c:	3401      	adds	r4, #1
 8000e5e:	2210      	movs	r2, #16
 8000e60:	2100      	movs	r1, #0
 8000e62:	0028      	movs	r0, r5
 8000e64:	f7ff ffdc 	bl	8000e20 <ssd1306_I2C_Write>
 8000e68:	b2e4      	uxtb	r4, r4
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	0028      	movs	r0, r5
 8000e72:	f7ff ffbb 	bl	8000dec <ssd1306_I2C_WriteMulti>
 8000e76:	3680      	adds	r6, #128	; 0x80
 8000e78:	2cb8      	cmp	r4, #184	; 0xb8
 8000e7a:	d1e5      	bne.n	8000e48 <SSD1306_UpdateScreen+0x8>
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	200005b6 	.word	0x200005b6

08000e84 <SSD1306_Init>:
 8000e84:	b510      	push	{r4, lr}
 8000e86:	2201      	movs	r2, #1
 8000e88:	2178      	movs	r1, #120	; 0x78
 8000e8a:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <SSD1306_Init+0x150>)
 8000e8c:	4852      	ldr	r0, [pc, #328]	; (8000fd8 <SSD1306_Init+0x154>)
 8000e8e:	f003 fa41 	bl	8004314 <HAL_I2C_IsDeviceReady>
 8000e92:	2400      	movs	r4, #0
 8000e94:	42a0      	cmp	r0, r4
 8000e96:	d000      	beq.n	8000e9a <SSD1306_Init+0x16>
 8000e98:	e09a      	b.n	8000fd0 <SSD1306_Init+0x14c>
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	22ae      	movs	r2, #174	; 0xae
 8000e9e:	2078      	movs	r0, #120	; 0x78
 8000ea0:	f7ff ffbe 	bl	8000e20 <ssd1306_I2C_Write>
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2078      	movs	r0, #120	; 0x78
 8000eaa:	f7ff ffb9 	bl	8000e20 <ssd1306_I2C_Write>
 8000eae:	0021      	movs	r1, r4
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f7ff ffb4 	bl	8000e20 <ssd1306_I2C_Write>
 8000eb8:	0021      	movs	r1, r4
 8000eba:	22b0      	movs	r2, #176	; 0xb0
 8000ebc:	2078      	movs	r0, #120	; 0x78
 8000ebe:	f7ff ffaf 	bl	8000e20 <ssd1306_I2C_Write>
 8000ec2:	0021      	movs	r1, r4
 8000ec4:	22c8      	movs	r2, #200	; 0xc8
 8000ec6:	2078      	movs	r0, #120	; 0x78
 8000ec8:	f7ff ffaa 	bl	8000e20 <ssd1306_I2C_Write>
 8000ecc:	0022      	movs	r2, r4
 8000ece:	0021      	movs	r1, r4
 8000ed0:	2078      	movs	r0, #120	; 0x78
 8000ed2:	f7ff ffa5 	bl	8000e20 <ssd1306_I2C_Write>
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	2210      	movs	r2, #16
 8000eda:	2078      	movs	r0, #120	; 0x78
 8000edc:	f7ff ffa0 	bl	8000e20 <ssd1306_I2C_Write>
 8000ee0:	0021      	movs	r1, r4
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	2078      	movs	r0, #120	; 0x78
 8000ee6:	f7ff ff9b 	bl	8000e20 <ssd1306_I2C_Write>
 8000eea:	0021      	movs	r1, r4
 8000eec:	2281      	movs	r2, #129	; 0x81
 8000eee:	2078      	movs	r0, #120	; 0x78
 8000ef0:	f7ff ff96 	bl	8000e20 <ssd1306_I2C_Write>
 8000ef4:	0021      	movs	r1, r4
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f7ff ff91 	bl	8000e20 <ssd1306_I2C_Write>
 8000efe:	0021      	movs	r1, r4
 8000f00:	22a1      	movs	r2, #161	; 0xa1
 8000f02:	2078      	movs	r0, #120	; 0x78
 8000f04:	f7ff ff8c 	bl	8000e20 <ssd1306_I2C_Write>
 8000f08:	0021      	movs	r1, r4
 8000f0a:	22a6      	movs	r2, #166	; 0xa6
 8000f0c:	2078      	movs	r0, #120	; 0x78
 8000f0e:	f7ff ff87 	bl	8000e20 <ssd1306_I2C_Write>
 8000f12:	0021      	movs	r1, r4
 8000f14:	22a8      	movs	r2, #168	; 0xa8
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f7ff ff82 	bl	8000e20 <ssd1306_I2C_Write>
 8000f1c:	0021      	movs	r1, r4
 8000f1e:	223f      	movs	r2, #63	; 0x3f
 8000f20:	2078      	movs	r0, #120	; 0x78
 8000f22:	f7ff ff7d 	bl	8000e20 <ssd1306_I2C_Write>
 8000f26:	0021      	movs	r1, r4
 8000f28:	22a4      	movs	r2, #164	; 0xa4
 8000f2a:	2078      	movs	r0, #120	; 0x78
 8000f2c:	f7ff ff78 	bl	8000e20 <ssd1306_I2C_Write>
 8000f30:	0021      	movs	r1, r4
 8000f32:	22d3      	movs	r2, #211	; 0xd3
 8000f34:	2078      	movs	r0, #120	; 0x78
 8000f36:	f7ff ff73 	bl	8000e20 <ssd1306_I2C_Write>
 8000f3a:	0022      	movs	r2, r4
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	2078      	movs	r0, #120	; 0x78
 8000f40:	f7ff ff6e 	bl	8000e20 <ssd1306_I2C_Write>
 8000f44:	0021      	movs	r1, r4
 8000f46:	22d5      	movs	r2, #213	; 0xd5
 8000f48:	2078      	movs	r0, #120	; 0x78
 8000f4a:	f7ff ff69 	bl	8000e20 <ssd1306_I2C_Write>
 8000f4e:	0021      	movs	r1, r4
 8000f50:	22f0      	movs	r2, #240	; 0xf0
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f7ff ff64 	bl	8000e20 <ssd1306_I2C_Write>
 8000f58:	0021      	movs	r1, r4
 8000f5a:	22d9      	movs	r2, #217	; 0xd9
 8000f5c:	2078      	movs	r0, #120	; 0x78
 8000f5e:	f7ff ff5f 	bl	8000e20 <ssd1306_I2C_Write>
 8000f62:	0021      	movs	r1, r4
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	2078      	movs	r0, #120	; 0x78
 8000f68:	f7ff ff5a 	bl	8000e20 <ssd1306_I2C_Write>
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	22da      	movs	r2, #218	; 0xda
 8000f70:	2078      	movs	r0, #120	; 0x78
 8000f72:	f7ff ff55 	bl	8000e20 <ssd1306_I2C_Write>
 8000f76:	0021      	movs	r1, r4
 8000f78:	2212      	movs	r2, #18
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f7ff ff50 	bl	8000e20 <ssd1306_I2C_Write>
 8000f80:	0021      	movs	r1, r4
 8000f82:	22db      	movs	r2, #219	; 0xdb
 8000f84:	2078      	movs	r0, #120	; 0x78
 8000f86:	f7ff ff4b 	bl	8000e20 <ssd1306_I2C_Write>
 8000f8a:	0021      	movs	r1, r4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2078      	movs	r0, #120	; 0x78
 8000f90:	f7ff ff46 	bl	8000e20 <ssd1306_I2C_Write>
 8000f94:	0021      	movs	r1, r4
 8000f96:	228d      	movs	r2, #141	; 0x8d
 8000f98:	2078      	movs	r0, #120	; 0x78
 8000f9a:	f7ff ff41 	bl	8000e20 <ssd1306_I2C_Write>
 8000f9e:	0021      	movs	r1, r4
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f7ff ff3c 	bl	8000e20 <ssd1306_I2C_Write>
 8000fa8:	0021      	movs	r1, r4
 8000faa:	22af      	movs	r2, #175	; 0xaf
 8000fac:	2078      	movs	r0, #120	; 0x78
 8000fae:	f7ff ff37 	bl	8000e20 <ssd1306_I2C_Write>
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	222e      	movs	r2, #46	; 0x2e
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f7ff ff32 	bl	8000e20 <ssd1306_I2C_Write>
 8000fbc:	0020      	movs	r0, r4
 8000fbe:	f7ff fd83 	bl	8000ac8 <SSD1306_Fill>
 8000fc2:	f7ff ff3d 	bl	8000e40 <SSD1306_UpdateScreen>
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SSD1306_Init+0x158>)
 8000fc8:	801c      	strh	r4, [r3, #0]
 8000fca:	805c      	strh	r4, [r3, #2]
 8000fcc:	3401      	adds	r4, #1
 8000fce:	715c      	strb	r4, [r3, #5]
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	bd10      	pop	{r4, pc}
 8000fd4:	00004e20 	.word	0x00004e20
 8000fd8:	200004cc 	.word	0x200004cc
 8000fdc:	200005b0 	.word	0x200005b0

08000fe0 <eepWriteData>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	000d      	movs	r5, r1
 8000fe4:	0004      	movs	r4, r0
 8000fe6:	f002 fde3 	bl	8003bb0 <HAL_FLASHEx_DATAEEPROM_Unlock>
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <eepWriteData+0x1c>)
 8000fec:	002a      	movs	r2, r5
 8000fee:	18e1      	adds	r1, r4, r3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f002 fdff 	bl	8003bf4 <HAL_FLASHEx_DATAEEPROM_Program>
 8000ff6:	f002 fdf3 	bl	8003be0 <HAL_FLASHEx_DATAEEPROM_Lock>
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	08080000 	.word	0x08080000

08001000 <eepReadData>:
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <eepReadData+0xc>)
 8001002:	18c0      	adds	r0, r0, r3
 8001004:	7800      	ldrb	r0, [r0, #0]
 8001006:	b2c0      	uxtb	r0, r0
 8001008:	4770      	bx	lr
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	08080000 	.word	0x08080000

08001010 <HAL_MspInit>:
 8001010:	2201      	movs	r2, #1
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_MspInit+0x18>)
 8001014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800101e:	0552      	lsls	r2, r2, #21
 8001020:	430a      	orrs	r2, r1
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
 8001024:	4770      	bx	lr
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_ADC_MspInit>:
 800102c:	b510      	push	{r4, lr}
 800102e:	0004      	movs	r4, r0
 8001030:	b086      	sub	sp, #24
 8001032:	2214      	movs	r2, #20
 8001034:	2100      	movs	r1, #0
 8001036:	a801      	add	r0, sp, #4
 8001038:	f004 faa8 	bl	800558c <memset>
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_ADC_MspInit+0x48>)
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d115      	bne.n	8001070 <HAL_ADC_MspInit+0x44>
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_ADC_MspInit+0x4c>)
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800104c:	20a0      	movs	r0, #160	; 0xa0
 800104e:	430a      	orrs	r2, r1
 8001050:	2101      	movs	r1, #1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
 8001054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001056:	05c0      	lsls	r0, r0, #23
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	400b      	ands	r3, r1
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	2303      	movs	r3, #3
 8001066:	a901      	add	r1, sp, #4
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	f002 fdec 	bl	8003c48 <HAL_GPIO_Init>
 8001070:	b006      	add	sp, #24
 8001072:	bd10      	pop	{r4, pc}
 8001074:	40012400 	.word	0x40012400
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_I2C_MspInit>:
 800107c:	b510      	push	{r4, lr}
 800107e:	0004      	movs	r4, r0
 8001080:	b086      	sub	sp, #24
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	a801      	add	r0, sp, #4
 8001088:	f004 fa80 	bl	800558c <memset>
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_I2C_MspInit+0x50>)
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d119      	bne.n	80010c8 <HAL_I2C_MspInit+0x4c>
 8001094:	2102      	movs	r1, #2
 8001096:	4c0e      	ldr	r4, [pc, #56]	; (80010d0 <HAL_I2C_MspInit+0x54>)
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0x58>)
 800109a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800109c:	430a      	orrs	r2, r1
 800109e:	62e2      	str	r2, [r4, #44]	; 0x2c
 80010a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a2:	400b      	ands	r3, r1
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	23c0      	movs	r3, #192	; 0xc0
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	3bae      	subs	r3, #174	; 0xae
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	3b0f      	subs	r3, #15
 80010b2:	9304      	str	r3, [sp, #16]
 80010b4:	a901      	add	r1, sp, #4
 80010b6:	3b02      	subs	r3, #2
 80010b8:	9305      	str	r3, [sp, #20]
 80010ba:	f002 fdc5 	bl	8003c48 <HAL_GPIO_Init>
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c2:	039b      	lsls	r3, r3, #14
 80010c4:	4313      	orrs	r3, r2
 80010c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80010c8:	b006      	add	sp, #24
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	50000400 	.word	0x50000400

080010d8 <HAL_SPI_MspInit>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	0005      	movs	r5, r0
 80010dc:	b086      	sub	sp, #24
 80010de:	2214      	movs	r2, #20
 80010e0:	2100      	movs	r1, #0
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f004 fa52 	bl	800558c <memset>
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_SPI_MspInit+0x7c>)
 80010ea:	682a      	ldr	r2, [r5, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d12f      	bne.n	8001150 <HAL_SPI_MspInit+0x78>
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	2601      	movs	r6, #1
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_SPI_MspInit+0x80>)
 80010f6:	0152      	lsls	r2, r2, #5
 80010f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010fa:	20a0      	movs	r0, #160	; 0xa0
 80010fc:	430a      	orrs	r2, r1
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001102:	05c0      	lsls	r0, r0, #23
 8001104:	4332      	orrs	r2, r6
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	a901      	add	r1, sp, #4
 800110c:	4033      	ands	r3, r6
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	9b00      	ldr	r3, [sp, #0]
 8001112:	23a0      	movs	r3, #160	; 0xa0
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	3b9e      	subs	r3, #158	; 0x9e
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	199b      	adds	r3, r3, r6
 800111c:	9304      	str	r3, [sp, #16]
 800111e:	f002 fd93 	bl	8003c48 <HAL_GPIO_Init>
 8001122:	4c0e      	ldr	r4, [pc, #56]	; (800115c <HAL_SPI_MspInit+0x84>)
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	2310      	movs	r3, #16
 800112c:	60a3      	str	r3, [r4, #8]
 800112e:	2300      	movs	r3, #0
 8001130:	0020      	movs	r0, r4
 8001132:	6066      	str	r6, [r4, #4]
 8001134:	60e3      	str	r3, [r4, #12]
 8001136:	6122      	str	r2, [r4, #16]
 8001138:	6163      	str	r3, [r4, #20]
 800113a:	61a3      	str	r3, [r4, #24]
 800113c:	61e3      	str	r3, [r4, #28]
 800113e:	6223      	str	r3, [r4, #32]
 8001140:	f002 fbd6 	bl	80038f0 <HAL_DMA_Init>
 8001144:	2800      	cmp	r0, #0
 8001146:	d001      	beq.n	800114c <HAL_SPI_MspInit+0x74>
 8001148:	f7ff fcbc 	bl	8000ac4 <Error_Handler>
 800114c:	64ac      	str	r4, [r5, #72]	; 0x48
 800114e:	62a5      	str	r5, [r4, #40]	; 0x28
 8001150:	b006      	add	sp, #24
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	40013000 	.word	0x40013000
 8001158:	40021000 	.word	0x40021000
 800115c:	20000484 	.word	0x20000484
 8001160:	40020030 	.word	0x40020030

08001164 <HAL_TIM_Base_MspInit>:
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	429a      	cmp	r2, r3
 800116c:	d104      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x14>
 800116e:	2301      	movs	r3, #1
 8001170:	4a02      	ldr	r2, [pc, #8]	; (800117c <HAL_TIM_Base_MspInit+0x18>)
 8001172:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001174:	430b      	orrs	r3, r1
 8001176:	6393      	str	r3, [r2, #56]	; 0x38
 8001178:	4770      	bx	lr
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
 8001180:	e7fe      	b.n	8001180 <NMI_Handler>

08001182 <HardFault_Handler>:
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler>

08001184 <SVC_Handler>:
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:
 8001188:	b510      	push	{r4, lr}
 800118a:	f002 f8a5 	bl	80032d8 <HAL_IncTick>
 800118e:	bd10      	pop	{r4, pc}

08001190 <DMA1_Channel2_3_IRQHandler>:
 8001190:	b510      	push	{r4, lr}
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA1_Channel2_3_IRQHandler+0xc>)
 8001194:	f002 fc30 	bl	80039f8 <HAL_DMA_IRQHandler>
 8001198:	bd10      	pop	{r4, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	20000484 	.word	0x20000484

080011a0 <TIM2_IRQHandler>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0xc>)
 80011a4:	f004 f8e4 	bl	8005370 <HAL_TIM_IRQHandler>
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000570 	.word	0x20000570

080011b0 <_sbrk>:
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <_sbrk+0x30>)
 80011b2:	490c      	ldr	r1, [pc, #48]	; (80011e4 <_sbrk+0x34>)
 80011b4:	0003      	movs	r3, r0
 80011b6:	1a89      	subs	r1, r1, r2
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <_sbrk+0x38>)
 80011ba:	b510      	push	{r4, lr}
 80011bc:	6810      	ldr	r0, [r2, #0]
 80011be:	2800      	cmp	r0, #0
 80011c0:	d101      	bne.n	80011c6 <_sbrk+0x16>
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <_sbrk+0x3c>)
 80011c4:	6010      	str	r0, [r2, #0]
 80011c6:	6810      	ldr	r0, [r2, #0]
 80011c8:	18c3      	adds	r3, r0, r3
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d906      	bls.n	80011dc <_sbrk+0x2c>
 80011ce:	f004 f98d 	bl	80054ec <__errno>
 80011d2:	230c      	movs	r3, #12
 80011d4:	6003      	str	r3, [r0, #0]
 80011d6:	2001      	movs	r0, #1
 80011d8:	4240      	negs	r0, r0
 80011da:	bd10      	pop	{r4, pc}
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e7fc      	b.n	80011da <_sbrk+0x2a>
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20002000 	.word	0x20002000
 80011e8:	200009b8 	.word	0x200009b8
 80011ec:	20000e40 	.word	0x20000e40

080011f0 <SystemInit>:
 80011f0:	4770      	bx	lr
	...

080011f4 <curxy>:
SORT_STATE standard;

/* Functions */

__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
__STATIC_INLINE uint8_t curxy(void) { return temp.x + ((5 - temp.y) * 6); }
 80011f4:	2005      	movs	r0, #5
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <curxy+0x14>)
 80011f8:	7853      	ldrb	r3, [r2, #1]
 80011fa:	1ac3      	subs	r3, r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	4358      	muls	r0, r3
 8001200:	7813      	ldrb	r3, [r2, #0]
 8001202:	18c0      	adds	r0, r0, r3
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	4770      	bx	lr
 8001208:	20000e0f 	.word	0x20000e0f

0800120c <init_value>:
__STATIC_INLINE void init_value(void) { firF = sel = ModeF = temp.x = temp.y = joy_result = 0; }
 800120c:	2300      	movs	r3, #0
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <init_value+0x1c>)
 8001210:	7013      	strb	r3, [r2, #0]
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <init_value+0x20>)
 8001214:	7013      	strb	r3, [r2, #0]
 8001216:	7053      	strb	r3, [r2, #1]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <init_value+0x24>)
 800121a:	7013      	strb	r3, [r2, #0]
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <init_value+0x28>)
 800121e:	7013      	strb	r3, [r2, #0]
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <init_value+0x2c>)
 8001222:	7013      	strb	r3, [r2, #0]
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200009dc 	.word	0x200009dc
 800122c:	20000e0f 	.word	0x20000e0f
 8001230:	200009bc 	.word	0x200009bc
 8001234:	20000dfb 	.word	0x20000dfb
 8001238:	20000018 	.word	0x20000018

0800123c <cate_compare>:
	return res;
}

volatile int8_t cate_compare(struct Part* a, struct Part* b){
	int8_t res = 0;
	uint8_t a_pos = 0, b_pos = 0;
 800123c:	2300      	movs	r3, #0
volatile int8_t cate_compare(struct Part* a, struct Part* b){
 800123e:	b510      	push	{r4, lr}
	while(a->cate != standard.sortCateprior[a_pos]) a_pos++;
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <cate_compare+0x30>)
 8001242:	7904      	ldrb	r4, [r0, #4]
 8001244:	18d0      	adds	r0, r2, r3
 8001246:	7980      	ldrb	r0, [r0, #6]
 8001248:	42a0      	cmp	r0, r4
 800124a:	d108      	bne.n	800125e <cate_compare+0x22>
	uint8_t a_pos = 0, b_pos = 0;
 800124c:	2000      	movs	r0, #0
	while(b->cate != standard.sortCateprior[b_pos]) b_pos++;
 800124e:	7909      	ldrb	r1, [r1, #4]
 8001250:	1814      	adds	r4, r2, r0
 8001252:	79a4      	ldrb	r4, [r4, #6]
 8001254:	428c      	cmp	r4, r1
 8001256:	d105      	bne.n	8001264 <cate_compare+0x28>
	res = b_pos - a_pos;
 8001258:	1ac0      	subs	r0, r0, r3
	return res;
 800125a:	b240      	sxtb	r0, r0
}
 800125c:	bd10      	pop	{r4, pc}
	while(a->cate != standard.sortCateprior[a_pos]) a_pos++;
 800125e:	3301      	adds	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e7ef      	b.n	8001244 <cate_compare+0x8>
	while(b->cate != standard.sortCateprior[b_pos]) b_pos++;
 8001264:	3001      	adds	r0, #1
 8001266:	b2c0      	uxtb	r0, r0
 8001268:	e7f2      	b.n	8001250 <cate_compare+0x14>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000e03 	.word	0x20000e03

08001270 <store_compare>:

volatile int8_t store_compare(struct Part* a, struct Part* b){
	int8_t res = 0;
	res = a->store - b->store;
 8001270:	798a      	ldrb	r2, [r1, #6]
	if(!standard.sortStoreF) res *= -1;
 8001272:	4905      	ldr	r1, [pc, #20]	; (8001288 <store_compare+0x18>)
	res = a->store - b->store;
 8001274:	7983      	ldrb	r3, [r0, #6]
	if(!standard.sortStoreF) res *= -1;
 8001276:	7849      	ldrb	r1, [r1, #1]
 8001278:	1ad0      	subs	r0, r2, r3
 800127a:	b2c0      	uxtb	r0, r0
 800127c:	2900      	cmp	r1, #0
 800127e:	d001      	beq.n	8001284 <store_compare+0x14>
	res = a->store - b->store;
 8001280:	1a98      	subs	r0, r3, r2
 8001282:	b2c0      	uxtb	r0, r0
	return res;
 8001284:	b240      	sxtb	r0, r0
}
 8001286:	4770      	bx	lr
 8001288:	20000e03 	.word	0x20000e03

0800128c <get_time>:
__STATIC_INLINE void get_time(void){
 800128c:	b510      	push	{r4, lr}
	DS3231_get_date(&time.day, &time.month, &time.year);
 800128e:	4c06      	ldr	r4, [pc, #24]	; (80012a8 <get_time+0x1c>)
 8001290:	0022      	movs	r2, r4
 8001292:	1c61      	adds	r1, r4, #1
 8001294:	1ca0      	adds	r0, r4, #2
 8001296:	f7ff f9f3 	bl	8000680 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 800129a:	1ce2      	adds	r2, r4, #3
 800129c:	1d21      	adds	r1, r4, #4
 800129e:	1d60      	adds	r0, r4, #5
 80012a0:	f7ff f958 	bl	8000554 <DS3231_get_time>
}
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	20000039 	.word	0x20000039

080012ac <name_compare>:
volatile int8_t name_compare(struct Part* a, struct Part* b){
 80012ac:	b510      	push	{r4, lr}
	res = strcmp(a->name, b->name);
 80012ae:	6809      	ldr	r1, [r1, #0]
 80012b0:	6800      	ldr	r0, [r0, #0]
 80012b2:	f7fe ff29 	bl	8000108 <strcmp>
	if(!standard.sortNameF) res *= -1;
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <name_compare+0x1c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <name_compare+0x16>
 80012be:	b240      	sxtb	r0, r0
}
 80012c0:	bd10      	pop	{r4, pc}
	if(!standard.sortNameF) res *= -1;
 80012c2:	4240      	negs	r0, r0
 80012c4:	e7fb      	b.n	80012be <name_compare+0x12>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	20000e03 	.word	0x20000e03

080012cc <part_swap>:
volatile void part_swap(struct Part* a, struct Part* b){
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	b085      	sub	sp, #20
	temp = *a;
 80012d0:	466b      	mov	r3, sp
 80012d2:	0004      	movs	r4, r0
 80012d4:	001a      	movs	r2, r3
 80012d6:	cce0      	ldmia	r4!, {r5, r6, r7}
 80012d8:	c2e0      	stmia	r2!, {r5, r6, r7}
 80012da:	6822      	ldr	r2, [r4, #0]
 80012dc:	4694      	mov	ip, r2
	*a = *b;
 80012de:	000a      	movs	r2, r1
 80012e0:	cae0      	ldmia	r2!, {r5, r6, r7}
 80012e2:	c0e0      	stmia	r0!, {r5, r6, r7}
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6020      	str	r0, [r4, #0]
	*b = temp;
 80012e8:	cb31      	ldmia	r3!, {r0, r4, r5}
 80012ea:	c131      	stmia	r1!, {r0, r4, r5}
 80012ec:	4663      	mov	r3, ip
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	b005      	add	sp, #20
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f4 <ssd1306_putsXY>:
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80012f8:	2306      	movs	r3, #6
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80012fa:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80012fc:	4358      	muls	r0, r3
 80012fe:	00c9      	lsls	r1, r1, #3
 8001300:	f7ff fc18 	bl	8000b34 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 8001304:	002a      	movs	r2, r5
 8001306:	0020      	movs	r0, r4
 8001308:	4901      	ldr	r1, [pc, #4]	; (8001310 <ssd1306_putsXY+0x1c>)
 800130a:	f7ff fc4f 	bl	8000bac <SSD1306_Puts>
}
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	20000000 	.word	0x20000000

08001314 <array_puts>:
void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	001e      	movs	r6, r3
 800131a:	ab0a      	add	r3, sp, #40	; 0x28
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	000f      	movs	r7, r1
 8001320:	0004      	movs	r4, r0
 8001322:	0015      	movs	r5, r2
 8001324:	9303      	str	r3, [sp, #12]
	SSD1306_Clear();
 8001326:	f7ff fd5b 	bl	8000de0 <SSD1306_Clear>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 800132a:	2100      	movs	r1, #0
 800132c:	2301      	movs	r3, #1
 800132e:	0008      	movs	r0, r1
 8001330:	227f      	movs	r2, #127	; 0x7f
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	3306      	adds	r3, #6
 8001336:	f7ff fd24 	bl	8000d82 <SSD1306_DrawFilledRectangle>
	ssd1306_putsXY(0, 0, title, 0);
 800133a:	2300      	movs	r3, #0
 800133c:	003a      	movs	r2, r7
 800133e:	0019      	movs	r1, r3
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ffd7 	bl	80012f4 <ssd1306_putsXY>
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001346:	9b03      	ldr	r3, [sp, #12]
 8001348:	005f      	lsls	r7, r3, #1
 800134a:	19e7      	adds	r7, r4, r7
 800134c:	42bc      	cmp	r4, r7
 800134e:	d101      	bne.n	8001354 <array_puts+0x40>
}
 8001350:	b005      	add	sp, #20
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001354:	7861      	ldrb	r1, [r4, #1]
 8001356:	7820      	ldrb	r0, [r4, #0]
 8001358:	0033      	movs	r3, r6
 800135a:	cd04      	ldmia	r5!, {r2}
 800135c:	f7ff ffca 	bl	80012f4 <ssd1306_putsXY>
 8001360:	3402      	adds	r4, #2
 8001362:	e7f3      	b.n	800134c <array_puts+0x38>

08001364 <get_adc>:
void get_adc(void){
 8001364:	b510      	push	{r4, lr}
	uint32_t now_tick = HAL_GetTick();
 8001366:	f001 ffc3 	bl	80032f0 <HAL_GetTick>
	if(now_tick - frev_tick > 150){
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <get_adc+0x48>)
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	1ac3      	subs	r3, r0, r3
 8001370:	2b96      	cmp	r3, #150	; 0x96
 8001372:	d910      	bls.n	8001396 <get_adc+0x32>
		frev_tick = now_tick;
 8001374:	2196      	movs	r1, #150	; 0x96
 8001376:	6010      	str	r0, [r2, #0]
		if(JOY_U) joy_result = up;
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <get_adc+0x4c>)
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <get_adc+0x50>)
 800137c:	8850      	ldrh	r0, [r2, #2]
 800137e:	0049      	lsls	r1, r1, #1
 8001380:	4298      	cmp	r0, r3
 8001382:	d909      	bls.n	8001398 <get_adc+0x34>
 8001384:	2403      	movs	r4, #3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <get_adc+0x54>)
		if(JOY_D) joy_result = down;
 8001388:	7004      	strb	r4, [r0, #0]
		if(JOY_L) joy_result = left;
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	428a      	cmp	r2, r1
 800138e:	d208      	bcs.n	80013a2 <get_adc+0x3e>
 8001390:	2201      	movs	r2, #1
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <get_adc+0x54>)
		if(JOY_R) joy_result = right;
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bd10      	pop	{r4, pc}
		if(JOY_D) joy_result = down;
 8001398:	4288      	cmp	r0, r1
 800139a:	d2f6      	bcs.n	800138a <get_adc+0x26>
 800139c:	2404      	movs	r4, #4
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <get_adc+0x54>)
 80013a0:	e7f2      	b.n	8001388 <get_adc+0x24>
		if(JOY_R) joy_result = right;
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d9f7      	bls.n	8001396 <get_adc+0x32>
 80013a6:	2202      	movs	r2, #2
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <get_adc+0x54>)
 80013aa:	e7f3      	b.n	8001394 <get_adc+0x30>
 80013ac:	200009d4 	.word	0x200009d4
 80013b0:	200009be 	.word	0x200009be
 80013b4:	00000dac 	.word	0x00000dac
 80013b8:	200009dc 	.word	0x200009dc

080013bc <get_sel>:
void get_sel(uint8_t* sel, uint8_t max, uint8_t min, uint8_t state){
 80013bc:	b510      	push	{r4, lr}
	switch(state){
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d015      	beq.n	80013ee <get_sel+0x32>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d020      	beq.n	8001408 <get_sel+0x4c>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11d      	bne.n	8001406 <get_sel+0x4a>
		if(joy_result == up) { if(*sel < max) *sel += 1; }
 80013ca:	4c16      	ldr	r4, [pc, #88]	; (8001424 <get_sel+0x68>)
 80013cc:	7823      	ldrb	r3, [r4, #0]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d104      	bne.n	80013dc <get_sel+0x20>
 80013d2:	7803      	ldrb	r3, [r0, #0]
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d216      	bcs.n	8001406 <get_sel+0x4a>
 80013d8:	3301      	adds	r3, #1
 80013da:	7003      	strb	r3, [r0, #0]
		if(joy_result == down) { if(*sel > min) *sel -= 1; }
 80013dc:	7823      	ldrb	r3, [r4, #0]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d111      	bne.n	8001406 <get_sel+0x4a>
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 80013e2:	7803      	ldrb	r3, [r0, #0]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d90e      	bls.n	8001406 <get_sel+0x4a>
 80013e8:	3b01      	subs	r3, #1
 80013ea:	7003      	strb	r3, [r0, #0]
}
 80013ec:	e00b      	b.n	8001406 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
 80013ee:	4c0d      	ldr	r4, [pc, #52]	; (8001424 <get_sel+0x68>)
 80013f0:	7823      	ldrb	r3, [r4, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d104      	bne.n	8001400 <get_sel+0x44>
 80013f6:	7803      	ldrb	r3, [r0, #0]
 80013f8:	428b      	cmp	r3, r1
 80013fa:	d204      	bcs.n	8001406 <get_sel+0x4a>
 80013fc:	3301      	adds	r3, #1
 80013fe:	7003      	strb	r3, [r0, #0]
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
 8001400:	7823      	ldrb	r3, [r4, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d0ed      	beq.n	80013e2 <get_sel+0x26>
}
 8001406:	bd10      	pop	{r4, pc}
		if(joy_result == down) { if(*sel < max) *sel += 1; }
 8001408:	4c06      	ldr	r4, [pc, #24]	; (8001424 <get_sel+0x68>)
 800140a:	7823      	ldrb	r3, [r4, #0]
 800140c:	2b04      	cmp	r3, #4
 800140e:	d104      	bne.n	800141a <get_sel+0x5e>
 8001410:	7803      	ldrb	r3, [r0, #0]
 8001412:	428b      	cmp	r3, r1
 8001414:	d2f7      	bcs.n	8001406 <get_sel+0x4a>
 8001416:	3301      	adds	r3, #1
 8001418:	7003      	strb	r3, [r0, #0]
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 800141a:	7823      	ldrb	r3, [r4, #0]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d1f2      	bne.n	8001406 <get_sel+0x4a>
 8001420:	e7df      	b.n	80013e2 <get_sel+0x26>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	200009dc 	.word	0x200009dc

08001428 <read_sw>:
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001428:	20a0      	movs	r0, #160	; 0xa0
uint8_t read_sw(void){
 800142a:	b510      	push	{r4, lr}
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 800142c:	2104      	movs	r1, #4
 800142e:	05c0      	lsls	r0, r0, #23
 8001430:	f002 fcca 	bl	8003dc8 <HAL_GPIO_ReadPin>
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <read_sw+0x38>)
 8001436:	7823      	ldrb	r3, [r4, #0]
 8001438:	4318      	orrs	r0, r3
 800143a:	b2c0      	uxtb	r0, r0
 800143c:	2800      	cmp	r0, #0
 800143e:	d102      	bne.n	8001446 <read_sw+0x1e>
 8001440:	3001      	adds	r0, #1
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001442:	7020      	strb	r0, [r4, #0]
}
 8001444:	bd10      	pop	{r4, pc}
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001446:	20a0      	movs	r0, #160	; 0xa0
 8001448:	2104      	movs	r1, #4
 800144a:	05c0      	lsls	r0, r0, #23
 800144c:	f002 fcbc 	bl	8003dc8 <HAL_GPIO_ReadPin>
 8001450:	2800      	cmp	r0, #0
 8001452:	d0f7      	beq.n	8001444 <read_sw+0x1c>
 8001454:	7820      	ldrb	r0, [r4, #0]
 8001456:	2800      	cmp	r0, #0
 8001458:	d0f4      	beq.n	8001444 <read_sw+0x1c>
 800145a:	2000      	movs	r0, #0
 800145c:	e7f1      	b.n	8001442 <read_sw+0x1a>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	200009e6 	.word	0x200009e6

08001464 <led_display>:
void led_display(struct Part* a, uint8_t i){
 8001464:	b510      	push	{r4, lr}
	switch(a->cate){
 8001466:	7900      	ldrb	r0, [r0, #4]
void led_display(struct Part* a, uint8_t i){
 8001468:	000c      	movs	r4, r1
	switch(a->cate){
 800146a:	3801      	subs	r0, #1
 800146c:	2803      	cmp	r0, #3
 800146e:	d809      	bhi.n	8001484 <led_display+0x20>
 8001470:	f7fe fe54 	bl	800011c <__gnu_thumb1_case_uqi>
 8001474:	110d0902 	.word	0x110d0902
	case 1: led_color(i, 4, 1, 0); break;
 8001478:	2300      	movs	r3, #0
 800147a:	2201      	movs	r2, #1
 800147c:	2104      	movs	r1, #4
	case 4: led_color(i, 0, 4, 4); break;
 800147e:	0020      	movs	r0, r4
 8001480:	f7ff f95a 	bl	8000738 <led_color>
}
 8001484:	bd10      	pop	{r4, pc}
	case 2: led_color(i, 1, 0, 4); break;
 8001486:	2304      	movs	r3, #4
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	e7f7      	b.n	800147e <led_display+0x1a>
	case 3: led_color(i, 4, 4, 0); break;
 800148e:	2204      	movs	r2, #4
 8001490:	2300      	movs	r3, #0
 8001492:	0011      	movs	r1, r2
 8001494:	e7f3      	b.n	800147e <led_display+0x1a>
	case 4: led_color(i, 0, 4, 4); break;
 8001496:	2304      	movs	r3, #4
 8001498:	2100      	movs	r1, #0
 800149a:	001a      	movs	r2, r3
 800149c:	e7ef      	b.n	800147e <led_display+0x1a>
	...

080014a0 <main_menu>:
void main_menu(void){
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <main_menu+0x150>)
void main_menu(void){
 80014a4:	b09b      	sub	sp, #108	; 0x6c
	if(!firF){
 80014a6:	781c      	ldrb	r4, [r3, #0]
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d119      	bne.n	80014e0 <main_menu+0x40>
		firF = 1;
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
		led_clear();
 80014b0:	f7ff f978 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <main_menu+0x154>)
 80014b6:	0120      	lsls	r0, r4, #4
 80014b8:	b2e1      	uxtb	r1, r4
 80014ba:	18c0      	adds	r0, r0, r3
 80014bc:	3401      	adds	r4, #1
 80014be:	f7ff ffd1 	bl	8001464 <led_display>
 80014c2:	2c24      	cmp	r4, #36	; 0x24
 80014c4:	d1f6      	bne.n	80014b4 <main_menu+0x14>
		led_update();
 80014c6:	f7ff f943 	bl	8000750 <led_update>
		for(uint8_t i = 0 ; i < 36 ; i++)
 80014ca:	2190      	movs	r1, #144	; 0x90
		led_update();
 80014cc:	2300      	movs	r3, #0
			if(pt[i].cate != 0) { check = 1; break; }
 80014ce:	484a      	ldr	r0, [pc, #296]	; (80015f8 <main_menu+0x158>)
		for(uint8_t i = 0 ; i < 36 ; i++)
 80014d0:	0089      	lsls	r1, r1, #2
			if(pt[i].cate != 0) { check = 1; break; }
 80014d2:	5cc2      	ldrb	r2, [r0, r3]
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d100      	bne.n	80014da <main_menu+0x3a>
 80014d8:	e081      	b.n	80015de <main_menu+0x13e>
 80014da:	2201      	movs	r2, #1
 80014dc:	4b47      	ldr	r3, [pc, #284]	; (80015fc <main_menu+0x15c>)
 80014de:	701a      	strb	r2, [r3, #0]
	get_time();
 80014e0:	f7ff fed4 	bl	800128c <get_time>
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 80014e4:	2300      	movs	r3, #0
 80014e6:	4f46      	ldr	r7, [pc, #280]	; (8001600 <main_menu+0x160>)
 80014e8:	ac02      	add	r4, sp, #8
 80014ea:	7023      	strb	r3, [r4, #0]
 80014ec:	783b      	ldrb	r3, [r7, #0]
 80014ee:	2102      	movs	r1, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	7063      	strb	r3, [r4, #1]
 80014f4:	2303      	movs	r3, #3
 80014f6:	2501      	movs	r5, #1
 80014f8:	2204      	movs	r2, #4
 80014fa:	70e1      	strb	r1, [r4, #3]
 80014fc:	18c9      	adds	r1, r1, r3
 80014fe:	7261      	strb	r1, [r4, #9]
 8001500:	1949      	adds	r1, r1, r5
 8001502:	72e1      	strb	r1, [r4, #11]
 8001504:	1949      	adds	r1, r1, r5
 8001506:	7361      	strb	r1, [r4, #13]
 8001508:	1889      	adds	r1, r1, r2
 800150a:	73a1      	strb	r1, [r4, #14]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800150c:	21fa      	movs	r1, #250	; 0xfa
 800150e:	4e3d      	ldr	r6, [pc, #244]	; (8001604 <main_menu+0x164>)
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 8001510:	7163      	strb	r3, [r4, #5]
 8001512:	71e2      	strb	r2, [r4, #7]
 8001514:	73e3      	strb	r3, [r4, #15]
 8001516:	7462      	strb	r2, [r4, #17]
 8001518:	330a      	adds	r3, #10
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800151a:	7832      	ldrb	r2, [r6, #0]
	POS pos[9] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {11, 3}, {13, 4}};
 800151c:	70a5      	strb	r5, [r4, #2]
 800151e:	7125      	strb	r5, [r4, #4]
 8001520:	71a5      	strb	r5, [r4, #6]
 8001522:	7225      	strb	r5, [r4, #8]
 8001524:	72a5      	strb	r5, [r4, #10]
 8001526:	7325      	strb	r5, [r4, #12]
 8001528:	7423      	strb	r3, [r4, #16]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800152a:	00c9      	lsls	r1, r1, #3
 800152c:	1852      	adds	r2, r2, r1
 800152e:	78b1      	ldrb	r1, [r6, #2]
 8001530:	7873      	ldrb	r3, [r6, #1]
 8001532:	a810      	add	r0, sp, #64	; 0x40
 8001534:	9100      	str	r1, [sp, #0]
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <main_menu+0x168>)
 8001538:	f004 f950 	bl	80057dc <siprintf>
	sprintf(bf[1], "%02d:%02d:%02d", time.hour, time.min, time.sec);
 800153c:	7971      	ldrb	r1, [r6, #5]
 800153e:	7933      	ldrb	r3, [r6, #4]
 8001540:	78f2      	ldrb	r2, [r6, #3]
 8001542:	a815      	add	r0, sp, #84	; 0x54
 8001544:	9100      	str	r1, [sp, #0]
 8001546:	4931      	ldr	r1, [pc, #196]	; (800160c <main_menu+0x16c>)
 8001548:	f004 f948 	bl	80057dc <siprintf>
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <main_menu+0x170>)
 800154e:	a910      	add	r1, sp, #64	; 0x40
 8001550:	9307      	str	r3, [sp, #28]
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <main_menu+0x174>)
 8001554:	910e      	str	r1, [sp, #56]	; 0x38
 8001556:	9308      	str	r3, [sp, #32]
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <main_menu+0x178>)
 800155a:	a915      	add	r1, sp, #84	; 0x54
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <main_menu+0x17c>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001560:	0020      	movs	r0, r4
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <main_menu+0x180>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001566:	aa07      	add	r2, sp, #28
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001568:	930b      	str	r3, [sp, #44]	; 0x2c
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <main_menu+0x184>)
 800156c:	910f      	str	r1, [sp, #60]	; 0x3c
 800156e:	930c      	str	r3, [sp, #48]	; 0x30
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <main_menu+0x188>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001572:	492e      	ldr	r1, [pc, #184]	; (800162c <main_menu+0x18c>)
	char* array[9] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", "Part sort", bf[0], bf[1] };
 8001574:	930d      	str	r3, [sp, #52]	; 0x34
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 8001576:	2309      	movs	r3, #9
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	002b      	movs	r3, r5
 800157c:	f7ff feca 	bl	8001314 <array_puts>
	SSD1306_UpdateScreen();
 8001580:	f7ff fc5e 	bl	8000e40 <SSD1306_UpdateScreen>
	get_adc();
 8001584:	f7ff feee 	bl	8001364 <get_adc>
	get_sel(&sel, 5, 0, 2);
 8001588:	2302      	movs	r3, #2
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	0038      	movs	r0, r7
 8001590:	f7ff ff14 	bl	80013bc <get_sel>
	joy_result = basic;
 8001594:	2200      	movs	r2, #0
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <main_menu+0x190>)
 8001598:	701a      	strb	r2, [r3, #0]
	if(read_sw()){
 800159a:	f7ff ff45 	bl	8001428 <read_sw>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d01b      	beq.n	80015da <main_menu+0x13a>
		if(sel == 0) { led_clear(); led_update(); start_check++; }
 80015a2:	783b      	ldrb	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <main_menu+0x118>
 80015a8:	f7ff f8fc 	bl	80007a4 <led_clear>
 80015ac:	f7ff f8d0 	bl	8000750 <led_update>
 80015b0:	4a20      	ldr	r2, [pc, #128]	; (8001634 <main_menu+0x194>)
 80015b2:	7813      	ldrb	r3, [r2, #0]
 80015b4:	195b      	adds	r3, r3, r5
 80015b6:	7013      	strb	r3, [r2, #0]
		firF = 0;
 80015b8:	2000      	movs	r0, #0
		ModeF = sel + 1;
 80015ba:	783b      	ldrb	r3, [r7, #0]
 80015bc:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <main_menu+0x198>)
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	7011      	strb	r1, [r2, #0]
		firF = 0;
 80015c2:	490b      	ldr	r1, [pc, #44]	; (80015f0 <main_menu+0x150>)
 80015c4:	7008      	strb	r0, [r1, #0]
		if(sel != 0 && !check) { buzM = 1; ModeF = 0; }
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d00f      	beq.n	80015ea <main_menu+0x14a>
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <main_menu+0x15c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4283      	cmp	r3, r0
 80015d0:	d10b      	bne.n	80015ea <main_menu+0x14a>
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <main_menu+0x19c>)
 80015d4:	3001      	adds	r0, #1
 80015d6:	7008      	strb	r0, [r1, #0]
 80015d8:	7013      	strb	r3, [r2, #0]
}
 80015da:	b01b      	add	sp, #108	; 0x6c
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0 ; i < 36 ; i++)
 80015de:	3310      	adds	r3, #16
 80015e0:	428b      	cmp	r3, r1
 80015e2:	d000      	beq.n	80015e6 <main_menu+0x146>
 80015e4:	e775      	b.n	80014d2 <main_menu+0x32>
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <main_menu+0x15c>)
 80015e8:	e779      	b.n	80014de <main_menu+0x3e>
		else { sel = 0; }
 80015ea:	2300      	movs	r3, #0
 80015ec:	703b      	strb	r3, [r7, #0]
}
 80015ee:	e7f4      	b.n	80015da <main_menu+0x13a>
 80015f0:	20000018 	.word	0x20000018
 80015f4:	200009e8 	.word	0x200009e8
 80015f8:	200009ec 	.word	0x200009ec
 80015fc:	200009c8 	.word	0x200009c8
 8001600:	20000dfb 	.word	0x20000dfb
 8001604:	20000039 	.word	0x20000039
 8001608:	080068dd 	.word	0x080068dd
 800160c:	080068ec 	.word	0x080068ec
 8001610:	080068fb 	.word	0x080068fb
 8001614:	080068fd 	.word	0x080068fd
 8001618:	08006907 	.word	0x08006907
 800161c:	08006910 	.word	0x08006910
 8001620:	08006afc 	.word	0x08006afc
 8001624:	0800691a 	.word	0x0800691a
 8001628:	08006923 	.word	0x08006923
 800162c:	0800692d 	.word	0x0800692d
 8001630:	200009dc 	.word	0x200009dc
 8001634:	20000e0d 	.word	0x20000e0d
 8001638:	200009bc 	.word	0x200009bc
 800163c:	200009c4 	.word	0x200009c4

08001640 <input_string>:
char* input_string(char* str){
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t input_sel = 0;
 8001642:	2700      	movs	r7, #0
char* input_string(char* str){
 8001644:	b08f      	sub	sp, #60	; 0x3c
 8001646:	9007      	str	r0, [sp, #28]
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 8001648:	210b      	movs	r1, #11
 800164a:	2001      	movs	r0, #1
 800164c:	f003 ff44 	bl	80054d8 <calloc>
	uint8_t keyX = 0, keyY = 0;
 8001650:	003c      	movs	r4, r7
 8001652:	003d      	movs	r5, r7
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 8001654:	9003      	str	r0, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 8001656:	2201      	movs	r2, #1
 8001658:	18bb      	adds	r3, r7, r2
 800165a:	a809      	add	r0, sp, #36	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	7083      	strb	r3, [r0, #2]
 8001660:	9304      	str	r3, [sp, #16]
 8001662:	2302      	movs	r3, #2
 8001664:	70c3      	strb	r3, [r0, #3]
		char* array[3] = { ">", "^", input_keyboard };
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <input_string+0x18c>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 8001668:	2600      	movs	r6, #0
		char* array[3] = { ">", "^", input_keyboard };
 800166a:	930b      	str	r3, [sp, #44]	; 0x2c
 800166c:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <input_string+0x190>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800166e:	7042      	strb	r2, [r0, #1]
		char* array[3] = { ">", "^", input_keyboard };
 8001670:	930c      	str	r3, [sp, #48]	; 0x30
 8001672:	9b03      	ldr	r3, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 8001674:	7102      	strb	r2, [r0, #4]
		char* array[3] = { ">", "^", input_keyboard };
 8001676:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 8001678:	2303      	movs	r3, #3
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800167a:	7142      	strb	r2, [r0, #5]
 800167c:	7006      	strb	r6, [r0, #0]
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 800167e:	9907      	ldr	r1, [sp, #28]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	0013      	movs	r3, r2
 8001684:	aa0b      	add	r2, sp, #44	; 0x2c
 8001686:	f7ff fe45 	bl	8001314 <array_puts>
				SSD1306_GotoXY(14 + j * 10, (4 * 8) + (i * 8));
 800168a:	00f3      	lsls	r3, r6, #3
 800168c:	3320      	adds	r3, #32
 800168e:	b29b      	uxth	r3, r3
 8001690:	9305      	str	r3, [sp, #20]
 8001692:	230b      	movs	r3, #11
 8001694:	4373      	muls	r3, r6
 8001696:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <input_string+0x194>)
 8001698:	18d3      	adds	r3, r2, r3
 800169a:	9306      	str	r3, [sp, #24]
 800169c:	2300      	movs	r3, #0
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	200a      	movs	r0, #10
 80016a2:	9b02      	ldr	r3, [sp, #8]
 80016a4:	9905      	ldr	r1, [sp, #20]
 80016a6:	4358      	muls	r0, r3
 80016a8:	300e      	adds	r0, #14
 80016aa:	b280      	uxth	r0, r0
 80016ac:	f7ff fa42 	bl	8000b34 <SSD1306_GotoXY>
				SSD1306_Putc(keyboard[i][j], &Font_6x8, !(keyX == j && keyY == i));
 80016b0:	9b06      	ldr	r3, [sp, #24]
 80016b2:	9a02      	ldr	r2, [sp, #8]
 80016b4:	5c98      	ldrb	r0, [r3, r2]
 80016b6:	466b      	mov	r3, sp
 80016b8:	7a1b      	ldrb	r3, [r3, #8]
 80016ba:	2201      	movs	r2, #1
 80016bc:	429d      	cmp	r5, r3
 80016be:	d103      	bne.n	80016c8 <input_string+0x88>
 80016c0:	b2f2      	uxtb	r2, r6
 80016c2:	1b12      	subs	r2, r2, r4
 80016c4:	1e53      	subs	r3, r2, #1
 80016c6:	419a      	sbcs	r2, r3
 80016c8:	4943      	ldr	r1, [pc, #268]	; (80017d8 <input_string+0x198>)
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f7ff fa38 	bl	8000b40 <SSD1306_Putc>
			for(uint8_t j = 0 ; j < 10 ; j++){
 80016d0:	9b02      	ldr	r3, [sp, #8]
 80016d2:	3301      	adds	r3, #1
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d1e2      	bne.n	80016a0 <input_string+0x60>
		for(uint8_t i = 0 ; i < 4 ; i++)
 80016da:	3601      	adds	r6, #1
 80016dc:	2e04      	cmp	r6, #4
 80016de:	d1d4      	bne.n	800168a <input_string+0x4a>
		ssd1306_putsXY(19, 4, "&", !(keyX == 10 && keyY == 0));
 80016e0:	2301      	movs	r3, #1
 80016e2:	2d0a      	cmp	r5, #10
 80016e4:	d102      	bne.n	80016ec <input_string+0xac>
 80016e6:	0023      	movs	r3, r4
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	4193      	sbcs	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2104      	movs	r1, #4
 80016f0:	2013      	movs	r0, #19
 80016f2:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <input_string+0x19c>)
 80016f4:	f7ff fdfe 	bl	80012f4 <ssd1306_putsXY>
		ssd1306_putsXY(19, 6, "*", !(keyX == 10 && keyY == 2));
 80016f8:	2301      	movs	r3, #1
 80016fa:	2d0a      	cmp	r5, #10
 80016fc:	d102      	bne.n	8001704 <input_string+0xc4>
 80016fe:	1ea3      	subs	r3, r4, #2
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	4193      	sbcs	r3, r2
 8001704:	2106      	movs	r1, #6
 8001706:	2013      	movs	r0, #19
 8001708:	4a35      	ldr	r2, [pc, #212]	; (80017e0 <input_string+0x1a0>)
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f7ff fdf2 	bl	80012f4 <ssd1306_putsXY>
		if(keyY == 0 || keyY == 2) limitX = 10;
 8001710:	260a      	movs	r6, #10
		SSD1306_UpdateScreen();
 8001712:	f7ff fb95 	bl	8000e40 <SSD1306_UpdateScreen>
		if(keyY == 0 || keyY == 2) limitX = 10;
 8001716:	2c00      	cmp	r4, #0
 8001718:	d003      	beq.n	8001722 <input_string+0xe2>
 800171a:	1ea6      	subs	r6, r4, #2
 800171c:	4273      	negs	r3, r6
 800171e:	415e      	adcs	r6, r3
 8001720:	3609      	adds	r6, #9
		get_adc();
 8001722:	f7ff fe1f 	bl	8001364 <get_adc>
		if(joy_result == left) { keyX = keyX > 0 ? keyX - 1 : limitX; }
 8001726:	4a2f      	ldr	r2, [pc, #188]	; (80017e4 <input_string+0x1a4>)
 8001728:	7813      	ldrb	r3, [r2, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <input_string+0xfa>
 800172e:	2d00      	cmp	r5, #0
 8001730:	d001      	beq.n	8001736 <input_string+0xf6>
 8001732:	3d01      	subs	r5, #1
 8001734:	b2ee      	uxtb	r6, r5
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001736:	0035      	movs	r5, r6
 8001738:	e00f      	b.n	800175a <input_string+0x11a>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 800173a:	2b02      	cmp	r3, #2
 800173c:	d009      	beq.n	8001752 <input_string+0x112>
		if(joy_result == up){
 800173e:	2b03      	cmp	r3, #3
 8001740:	d020      	beq.n	8001784 <input_string+0x144>
		if(joy_result == down){
 8001742:	2b04      	cmp	r3, #4
 8001744:	d109      	bne.n	800175a <input_string+0x11a>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001746:	2d0a      	cmp	r5, #10
 8001748:	d01e      	beq.n	8001788 <input_string+0x148>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 800174a:	2c03      	cmp	r4, #3
 800174c:	d027      	beq.n	800179e <input_string+0x15e>
 800174e:	3401      	adds	r4, #1
 8001750:	e021      	b.n	8001796 <input_string+0x156>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001752:	42b5      	cmp	r5, r6
 8001754:	d238      	bcs.n	80017c8 <input_string+0x188>
 8001756:	3501      	adds	r5, #1
 8001758:	b2ed      	uxtb	r5, r5
		joy_result = basic;
 800175a:	2300      	movs	r3, #0
 800175c:	7013      	strb	r3, [r2, #0]
		if(read_sw()){
 800175e:	f7ff fe63 	bl	8001428 <read_sw>
 8001762:	2800      	cmp	r0, #0
 8001764:	d100      	bne.n	8001768 <input_string+0x128>
 8001766:	e776      	b.n	8001656 <input_string+0x16>
			if(keyX < 10) input_keyboard[input_sel++] = keyboard[keyY][keyX];
 8001768:	2d0a      	cmp	r5, #10
 800176a:	d01a      	beq.n	80017a2 <input_string+0x162>
 800176c:	220b      	movs	r2, #11
 800176e:	4362      	muls	r2, r4
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <input_string+0x194>)
 8001772:	189b      	adds	r3, r3, r2
 8001774:	5d5b      	ldrb	r3, [r3, r5]
 8001776:	9a03      	ldr	r2, [sp, #12]
 8001778:	55d3      	strb	r3, [r2, r7]
		if(input_sel >= 10) break;
 800177a:	9b04      	ldr	r3, [sp, #16]
 800177c:	2b0a      	cmp	r3, #10
 800177e:	d01d      	beq.n	80017bc <input_string+0x17c>
 8001780:	001f      	movs	r7, r3
 8001782:	e768      	b.n	8001656 <input_string+0x16>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001784:	2d0a      	cmp	r5, #10
 8001786:	d103      	bne.n	8001790 <input_string+0x150>
 8001788:	4263      	negs	r3, r4
 800178a:	415c      	adcs	r4, r3
 800178c:	0064      	lsls	r4, r4, #1
 800178e:	e7e4      	b.n	800175a <input_string+0x11a>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 8001790:	2c00      	cmp	r4, #0
 8001792:	d002      	beq.n	800179a <input_string+0x15a>
 8001794:	3c01      	subs	r4, #1
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 8001796:	b2e4      	uxtb	r4, r4
 8001798:	e7df      	b.n	800175a <input_string+0x11a>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 800179a:	001c      	movs	r4, r3
 800179c:	e7dd      	b.n	800175a <input_string+0x11a>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 800179e:	2400      	movs	r4, #0
 80017a0:	e7db      	b.n	800175a <input_string+0x11a>
				if(keyY == 0) input_keyboard[input_sel > 0 ? --input_sel : 0] = '\0';
 80017a2:	2c00      	cmp	r4, #0
 80017a4:	d107      	bne.n	80017b6 <input_string+0x176>
 80017a6:	2f00      	cmp	r7, #0
 80017a8:	d001      	beq.n	80017ae <input_string+0x16e>
 80017aa:	3f01      	subs	r7, #1
 80017ac:	b2ff      	uxtb	r7, r7
 80017ae:	2300      	movs	r3, #0
 80017b0:	9a03      	ldr	r2, [sp, #12]
 80017b2:	55d3      	strb	r3, [r2, r7]
				if(keyY == 2) break;
 80017b4:	e74f      	b.n	8001656 <input_string+0x16>
 80017b6:	2c02      	cmp	r4, #2
 80017b8:	d000      	beq.n	80017bc <input_string+0x17c>
 80017ba:	e74c      	b.n	8001656 <input_string+0x16>
	firF = 0;
 80017bc:	2200      	movs	r2, #0
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <input_string+0x1a8>)
}
 80017c0:	9803      	ldr	r0, [sp, #12]
	firF = 0;
 80017c2:	701a      	strb	r2, [r3, #0]
}
 80017c4:	b00f      	add	sp, #60	; 0x3c
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 80017c8:	2500      	movs	r5, #0
		if(joy_result == down){
 80017ca:	e7c6      	b.n	800175a <input_string+0x11a>
 80017cc:	080068fb 	.word	0x080068fb
 80017d0:	08006933 	.word	0x08006933
 80017d4:	08006bd6 	.word	0x08006bd6
 80017d8:	20000000 	.word	0x20000000
 80017dc:	08006935 	.word	0x08006935
 80017e0:	08006937 	.word	0x08006937
 80017e4:	200009dc 	.word	0x200009dc
 80017e8:	20000018 	.word	0x20000018

080017ec <logShift>:
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017ec:	234a      	movs	r3, #74	; 0x4a
 80017ee:	214a      	movs	r1, #74	; 0x4a
 80017f0:	001a      	movs	r2, r3
void logShift(uint8_t workCate){
 80017f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017f4:	4f45      	ldr	r7, [pc, #276]	; (800190c <logShift+0x120>)
 80017f6:	4249      	negs	r1, r1
 80017f8:	783c      	ldrb	r4, [r7, #0]
void logShift(uint8_t workCate){
 80017fa:	0005      	movs	r5, r0
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017fc:	4361      	muls	r1, r4
 80017fe:	1e60      	subs	r0, r4, #1
 8001800:	18c9      	adds	r1, r1, r3
 8001802:	4343      	muls	r3, r0
 8001804:	4e42      	ldr	r6, [pc, #264]	; (8001910 <logShift+0x124>)
 8001806:	18c9      	adds	r1, r1, r3
void logShift(uint8_t workCate){
 8001808:	b085      	sub	sp, #20
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800180a:	4362      	muls	r2, r4
 800180c:	4841      	ldr	r0, [pc, #260]	; (8001914 <logShift+0x128>)
 800180e:	1989      	adds	r1, r1, r6
 8001810:	f003 fea9 	bl	8005566 <memmove>
	if(work_cnt < 5) work_cnt++;
 8001814:	2c04      	cmp	r4, #4
 8001816:	d801      	bhi.n	800181c <logShift+0x30>
 8001818:	3401      	adds	r4, #1
 800181a:	703c      	strb	r4, [r7, #0]
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 800181c:	2405      	movs	r4, #5
 800181e:	436c      	muls	r4, r5
	get_time();
 8001820:	f7ff fd34 	bl	800128c <get_time>
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001824:	483c      	ldr	r0, [pc, #240]	; (8001918 <logShift+0x12c>)
 8001826:	493d      	ldr	r1, [pc, #244]	; (800191c <logShift+0x130>)
 8001828:	1900      	adds	r0, r0, r4
 800182a:	784b      	ldrb	r3, [r1, #1]
 800182c:	780a      	ldrb	r2, [r1, #0]
 800182e:	9003      	str	r0, [sp, #12]
 8001830:	7908      	ldrb	r0, [r1, #4]
 8001832:	9002      	str	r0, [sp, #8]
 8001834:	78c8      	ldrb	r0, [r1, #3]
 8001836:	9001      	str	r0, [sp, #4]
 8001838:	7889      	ldrb	r1, [r1, #2]
 800183a:	0030      	movs	r0, r6
 800183c:	9100      	str	r1, [sp, #0]
 800183e:	4938      	ldr	r1, [pc, #224]	; (8001920 <logShift+0x134>)
 8001840:	f003 ffcc 	bl	80057dc <siprintf>
	switch(workCate){
 8001844:	2d03      	cmp	r5, #3
 8001846:	d824      	bhi.n	8001892 <logShift+0xa6>
 8001848:	0028      	movs	r0, r5
 800184a:	4e36      	ldr	r6, [pc, #216]	; (8001924 <logShift+0x138>)
 800184c:	4d36      	ldr	r5, [pc, #216]	; (8001928 <logShift+0x13c>)
 800184e:	f7fe fc65 	bl	800011c <__gnu_thumb1_case_uqi>
 8001852:	2202      	.short	0x2202
 8001854:	483b      	.short	0x483b
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 8001856:	f7ff fccd 	bl	80011f4 <curxy>
 800185a:	4c34      	ldr	r4, [pc, #208]	; (800192c <logShift+0x140>)
 800185c:	0100      	lsls	r0, r0, #4
 800185e:	1823      	adds	r3, r4, r0
 8001860:	791a      	ldrb	r2, [r3, #4]
 8001862:	2305      	movs	r3, #5
 8001864:	3a01      	subs	r2, #1
 8001866:	435a      	muls	r2, r3
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <logShift+0x144>)
 800186a:	4932      	ldr	r1, [pc, #200]	; (8001934 <logShift+0x148>)
 800186c:	189b      	adds	r3, r3, r2
 800186e:	5902      	ldr	r2, [r0, r4]
 8001870:	0030      	movs	r0, r6
 8001872:	f003 ffb3 	bl	80057dc <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", pt[curxy()].store, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001876:	f7ff fcbd 	bl	80011f4 <curxy>
 800187a:	0100      	lsls	r0, r0, #4
 800187c:	1824      	adds	r4, r4, r0
 800187e:	7ae3      	ldrb	r3, [r4, #11]
 8001880:	88e2      	ldrh	r2, [r4, #6]
 8001882:	3301      	adds	r3, #1
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001884:	7b21      	ldrb	r1, [r4, #12]
 8001886:	0028      	movs	r0, r5
 8001888:	3101      	adds	r1, #1
 800188a:	9100      	str	r1, [sp, #0]
 800188c:	492a      	ldr	r1, [pc, #168]	; (8001938 <logShift+0x14c>)
 800188e:	f003 ffa5 	bl	80057dc <siprintf>
}
 8001892:	b005      	add	sp, #20
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 8001896:	f7ff fcad 	bl	80011f4 <curxy>
 800189a:	4c24      	ldr	r4, [pc, #144]	; (800192c <logShift+0x140>)
 800189c:	0100      	lsls	r0, r0, #4
 800189e:	1823      	adds	r3, r4, r0
 80018a0:	791a      	ldrb	r2, [r3, #4]
 80018a2:	2305      	movs	r3, #5
 80018a4:	3a01      	subs	r2, #1
 80018a6:	435a      	muls	r2, r3
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <logShift+0x144>)
 80018aa:	4922      	ldr	r1, [pc, #136]	; (8001934 <logShift+0x148>)
 80018ac:	189b      	adds	r3, r3, r2
 80018ae:	5902      	ldr	r2, [r0, r4]
 80018b0:	0030      	movs	r0, r6
 80018b2:	f003 ff93 	bl	80057dc <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 80018b6:	f7ff fc9d 	bl	80011f4 <curxy>
 80018ba:	0100      	lsls	r0, r0, #4
 80018bc:	1824      	adds	r4, r4, r0
 80018be:	7ae3      	ldrb	r3, [r4, #11]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <logShift+0x150>)
 80018c2:	3301      	adds	r3, #1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	e7dd      	b.n	8001884 <logShift+0x98>
		sprintf(ptLog[0].content1, "Sear:%s", find_name);
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <logShift+0x154>)
 80018ca:	491e      	ldr	r1, [pc, #120]	; (8001944 <logShift+0x158>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	0030      	movs	r0, r6
 80018d0:	f003 ff84 	bl	80057dc <siprintf>
		sprintf(ptLog[0].content2, "Num of Find:%d", findC);
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <logShift+0x15c>)
 80018d6:	491d      	ldr	r1, [pc, #116]	; (800194c <logShift+0x160>)
 80018d8:	781a      	ldrb	r2, [r3, #0]
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 80018da:	0028      	movs	r0, r5
 80018dc:	f003 ff7e 	bl	80057dc <siprintf>
}
 80018e0:	e7d7      	b.n	8001892 <logShift+0xa6>
		sprintf(ptLog[0].content1, "S(%d,%d) E(%d,%d)", ptionS.x + 1, ptionS.y + 1, ptionE.x + 1, ptionE.y + 1);
 80018e2:	481b      	ldr	r0, [pc, #108]	; (8001950 <logShift+0x164>)
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <logShift+0x168>)
 80018e6:	7841      	ldrb	r1, [r0, #1]
 80018e8:	7853      	ldrb	r3, [r2, #1]
 80018ea:	3101      	adds	r1, #1
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	7801      	ldrb	r1, [r0, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	3101      	adds	r1, #1
 80018f6:	3201      	adds	r2, #1
 80018f8:	9100      	str	r1, [sp, #0]
 80018fa:	0030      	movs	r0, r6
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <logShift+0x16c>)
 80018fe:	f003 ff6d 	bl	80057dc <siprintf>
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <logShift+0x170>)
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <logShift+0x174>)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	e7e7      	b.n	80018da <logShift+0xee>
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	20000e12 	.word	0x20000e12
 8001910:	20000c28 	.word	0x20000c28
 8001914:	20000c72 	.word	0x20000c72
 8001918:	08006c80 	.word	0x08006c80
 800191c:	20000039 	.word	0x20000039
 8001920:	08006939 	.word	0x08006939
 8001924:	20000c46 	.word	0x20000c46
 8001928:	20000c5c 	.word	0x20000c5c
 800192c:	200009e8 	.word	0x200009e8
 8001930:	08006c20 	.word	0x08006c20
 8001934:	08006955 	.word	0x08006955
 8001938:	0800695b 	.word	0x0800695b
 800193c:	20000e11 	.word	0x20000e11
 8001940:	200009d0 	.word	0x200009d0
 8001944:	08006969 	.word	0x08006969
 8001948:	200009cc 	.word	0x200009cc
 800194c:	08006971 	.word	0x08006971
 8001950:	20000df5 	.word	0x20000df5
 8001954:	20000df7 	.word	0x20000df7
 8001958:	08006980 	.word	0x08006980
 800195c:	20000df4 	.word	0x20000df4
 8001960:	08006992 	.word	0x08006992

08001964 <start>:
uint8_t start(void){
 8001964:	b570      	push	{r4, r5, r6, lr}
	led_clear();
 8001966:	f7fe ff1d 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++)
 800196a:	2400      	movs	r4, #0
		if(i / 6 == 0 || i / 6 == 3) led_color(i, 4, 0, 0);
 800196c:	2c05      	cmp	r4, #5
 800196e:	d903      	bls.n	8001978 <start+0x14>
 8001970:	0023      	movs	r3, r4
 8001972:	3b12      	subs	r3, #18
 8001974:	2b05      	cmp	r3, #5
 8001976:	d83b      	bhi.n	80019f0 <start+0x8c>
 8001978:	2300      	movs	r3, #0
 800197a:	2104      	movs	r1, #4
 800197c:	001a      	movs	r2, r3
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 800197e:	0020      	movs	r0, r4
 8001980:	f7fe feda 	bl	8000738 <led_color>
	for(uint8_t i = 0 ; i < 36 ; i++)
 8001984:	3401      	adds	r4, #1
 8001986:	b2e4      	uxtb	r4, r4
 8001988:	2c24      	cmp	r4, #36	; 0x24
 800198a:	d1ef      	bne.n	800196c <start+0x8>
	led_update();
 800198c:	f7fe fee0 	bl	8000750 <led_update>
 8001990:	3c0c      	subs	r4, #12
		SSD1306_GotoXY(43, 24 + i);
 8001992:	0021      	movs	r1, r4
 8001994:	202b      	movs	r0, #43	; 0x2b
 8001996:	f7ff f8cd 	bl	8000b34 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 800199a:	4d20      	ldr	r5, [pc, #128]	; (8001a1c <start+0xb8>)
 800199c:	2200      	movs	r2, #0
 800199e:	0029      	movs	r1, r5
 80019a0:	481f      	ldr	r0, [pc, #124]	; (8001a20 <start+0xbc>)
 80019a2:	f7ff f903 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY(39, 24);
 80019a6:	2118      	movs	r1, #24
 80019a8:	2027      	movs	r0, #39	; 0x27
 80019aa:	f7ff f8c3 	bl	8000b34 <SSD1306_GotoXY>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019ae:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	0029      	movs	r1, r5
 80019b4:	481b      	ldr	r0, [pc, #108]	; (8001a24 <start+0xc0>)
 80019b6:	f7ff f8f9 	bl	8000bac <SSD1306_Puts>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019ba:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 80019bc:	f7ff fa40 	bl	8000e40 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 80019c0:	20c8      	movs	r0, #200	; 0xc8
 80019c2:	f001 fc9b 	bl	80032fc <HAL_Delay>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019c6:	2c21      	cmp	r4, #33	; 0x21
 80019c8:	d1e3      	bne.n	8001992 <start+0x2e>
	HAL_Delay(1000);
 80019ca:	20fa      	movs	r0, #250	; 0xfa
 80019cc:	0080      	lsls	r0, r0, #2
 80019ce:	f001 fc95 	bl	80032fc <HAL_Delay>
	led_clear();
 80019d2:	f7fe fee7 	bl	80007a4 <led_clear>
	led_update();
 80019d6:	f7fe febb 	bl	8000750 <led_update>
	SSD1306_Clear();
 80019da:	f7ff fa01 	bl	8000de0 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80019de:	f7ff fa2f 	bl	8000e40 <SSD1306_UpdateScreen>
	if(!eepReadData(0)) return 1;
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fb0c 	bl	8001000 <eepReadData>
 80019e8:	4243      	negs	r3, r0
 80019ea:	4158      	adcs	r0, r3
}
 80019ec:	b2c0      	uxtb	r0, r0
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
		else if(i / 6 == 1 || i / 6 == 4) led_color(i, 0, 4, 0);
 80019f0:	1fa3      	subs	r3, r4, #6
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d902      	bls.n	80019fc <start+0x98>
 80019f6:	3b12      	subs	r3, #18
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d803      	bhi.n	8001a04 <start+0xa0>
 80019fc:	2300      	movs	r3, #0
 80019fe:	2204      	movs	r2, #4
 8001a00:	0019      	movs	r1, r3
 8001a02:	e7bc      	b.n	800197e <start+0x1a>
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 8001a04:	0023      	movs	r3, r4
 8001a06:	3b0c      	subs	r3, #12
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d902      	bls.n	8001a12 <start+0xae>
 8001a0c:	3b12      	subs	r3, #18
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d8b8      	bhi.n	8001984 <start+0x20>
 8001a12:	2200      	movs	r2, #0
 8001a14:	2304      	movs	r3, #4
 8001a16:	0011      	movs	r1, r2
 8001a18:	e7b1      	b.n	800197e <start+0x1a>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	080069a3 	.word	0x080069a3
 8001a24:	080069aa 	.word	0x080069aa

08001a28 <time_setting>:
void time_setting(void){
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
	while(!read_sw()){
 8001a2c:	f7ff fcfc 	bl	8001428 <read_sw>
 8001a30:	4c49      	ldr	r4, [pc, #292]	; (8001b58 <time_setting+0x130>)
 8001a32:	1e05      	subs	r5, r0, #0
 8001a34:	d00f      	beq.n	8001a56 <time_setting+0x2e>
	DS3231_set_date(time.day, time.month, time.year);
 8001a36:	7822      	ldrb	r2, [r4, #0]
 8001a38:	7861      	ldrb	r1, [r4, #1]
 8001a3a:	78a0      	ldrb	r0, [r4, #2]
 8001a3c:	f7fe fde8 	bl	8000610 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 8001a40:	78e2      	ldrb	r2, [r4, #3]
 8001a42:	7921      	ldrb	r1, [r4, #4]
 8001a44:	7960      	ldrb	r0, [r4, #5]
 8001a46:	f7fe fd4d 	bl	80004e4 <DS3231_set_time>
	eepWriteData(0, 1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fac7 	bl	8000fe0 <eepWriteData>
}
 8001a52:	b00b      	add	sp, #44	; 0x2c
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		get_adc();
 8001a56:	f7ff fc85 	bl	8001364 <get_adc>
		get_sel(&sel, 5, 0, 1);
 8001a5a:	4e40      	ldr	r6, [pc, #256]	; (8001b5c <time_setting+0x134>)
 8001a5c:	002a      	movs	r2, r5
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2105      	movs	r1, #5
 8001a62:	0030      	movs	r0, r6
 8001a64:	f7ff fcaa 	bl	80013bc <get_sel>
		if(sel == 0) get_sel(&time.year, 99, 0, 0);
 8001a68:	7832      	ldrb	r2, [r6, #0]
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d104      	bne.n	8001a78 <time_setting+0x50>
 8001a6e:	0013      	movs	r3, r2
 8001a70:	2163      	movs	r1, #99	; 0x63
 8001a72:	0020      	movs	r0, r4
 8001a74:	f7ff fca2 	bl	80013bc <get_sel>
		if(sel == 1) get_sel(&time.month, 12, 1, 0);
 8001a78:	7832      	ldrb	r2, [r6, #0]
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	d104      	bne.n	8001a88 <time_setting+0x60>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	210c      	movs	r1, #12
 8001a82:	1c60      	adds	r0, r4, #1
 8001a84:	f7ff fc9a 	bl	80013bc <get_sel>
		if(sel == 2) get_sel(&time.day, lastDay[time.month - 1], 1, 0);
 8001a88:	7833      	ldrb	r3, [r6, #0]
 8001a8a:	4f35      	ldr	r7, [pc, #212]	; (8001b60 <time_setting+0x138>)
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d108      	bne.n	8001aa2 <time_setting+0x7a>
 8001a90:	7863      	ldrb	r3, [r4, #1]
 8001a92:	2201      	movs	r2, #1
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	7819      	ldrb	r1, [r3, #0]
 8001a9a:	1ca0      	adds	r0, r4, #2
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f7ff fc8d 	bl	80013bc <get_sel>
		if(sel == 3) get_sel(&time.hour, 23, 0, 0);
 8001aa2:	7833      	ldrb	r3, [r6, #0]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d105      	bne.n	8001ab4 <time_setting+0x8c>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2117      	movs	r1, #23
 8001aac:	001a      	movs	r2, r3
 8001aae:	1ce0      	adds	r0, r4, #3
 8001ab0:	f7ff fc84 	bl	80013bc <get_sel>
		if(sel == 4) get_sel(&time.min, 59, 0, 0);
 8001ab4:	7833      	ldrb	r3, [r6, #0]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d105      	bne.n	8001ac6 <time_setting+0x9e>
 8001aba:	2300      	movs	r3, #0
 8001abc:	213b      	movs	r1, #59	; 0x3b
 8001abe:	001a      	movs	r2, r3
 8001ac0:	1d20      	adds	r0, r4, #4
 8001ac2:	f7ff fc7b 	bl	80013bc <get_sel>
		if(sel == 5) get_sel(&time.sec, 59, 0, 0);
 8001ac6:	7833      	ldrb	r3, [r6, #0]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d105      	bne.n	8001ad8 <time_setting+0xb0>
 8001acc:	2300      	movs	r3, #0
 8001ace:	213b      	movs	r1, #59	; 0x3b
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	1d60      	adds	r0, r4, #5
 8001ad4:	f7ff fc72 	bl	80013bc <get_sel>
		if(time.day > lastDay[time.month - 1]) time.day = lastDay[time.month - 1];
 8001ad8:	7865      	ldrb	r5, [r4, #1]
 8001ada:	78a2      	ldrb	r2, [r4, #2]
 8001adc:	197f      	adds	r7, r7, r5
 8001ade:	3f01      	subs	r7, #1
 8001ae0:	783b      	ldrb	r3, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d900      	bls.n	8001ae8 <time_setting+0xc0>
 8001ae6:	70a3      	strb	r3, [r4, #2]
		joy_result = basic;
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <time_setting+0x13c>)
		POS pos[2] = {{0, 2}, {0, 4}};
 8001aec:	491e      	ldr	r1, [pc, #120]	; (8001b68 <time_setting+0x140>)
		joy_result = basic;
 8001aee:	701a      	strb	r2, [r3, #0]
		POS pos[2] = {{0, 2}, {0, 4}};
 8001af0:	a802      	add	r0, sp, #8
 8001af2:	3204      	adds	r2, #4
 8001af4:	f003 fd2e 	bl	8005554 <memcpy>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001af8:	2106      	movs	r1, #6
 8001afa:	7833      	ldrb	r3, [r6, #0]
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <time_setting+0x144>)
 8001afe:	4359      	muls	r1, r3
 8001b00:	1852      	adds	r2, r2, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d117      	bne.n	8001b36 <time_setting+0x10e>
 8001b06:	23fa      	movs	r3, #250	; 0xfa
 8001b08:	7825      	ldrb	r5, [r4, #0]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	18ed      	adds	r5, r5, r3
 8001b0e:	ac05      	add	r4, sp, #20
 8001b10:	002b      	movs	r3, r5
 8001b12:	0020      	movs	r0, r4
 8001b14:	4916      	ldr	r1, [pc, #88]	; (8001b70 <time_setting+0x148>)
 8001b16:	f003 fe61 	bl	80057dc <siprintf>
		char* array[2] = { "RTC Time setting", bf };
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <time_setting+0x14c>)
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <time_setting+0x150>)
		char* array[2] = { "RTC Time setting", bf };
 8001b1e:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b20:	2302      	movs	r3, #2
 8001b22:	aa03      	add	r2, sp, #12
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	a802      	add	r0, sp, #8
 8001b28:	3b01      	subs	r3, #1
		char* array[2] = { "RTC Time setting", bf };
 8001b2a:	9404      	str	r4, [sp, #16]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b2c:	f7ff fbf2 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8001b30:	f7ff f986 	bl	8000e40 <SSD1306_UpdateScreen>
 8001b34:	e77a      	b.n	8001a2c <time_setting+0x4>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d0e9      	beq.n	8001b0e <time_setting+0xe6>
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d101      	bne.n	8001b42 <time_setting+0x11a>
 8001b3e:	78a5      	ldrb	r5, [r4, #2]
 8001b40:	e7e5      	b.n	8001b0e <time_setting+0xe6>
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d101      	bne.n	8001b4a <time_setting+0x122>
 8001b46:	78e5      	ldrb	r5, [r4, #3]
 8001b48:	e7e1      	b.n	8001b0e <time_setting+0xe6>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d101      	bne.n	8001b52 <time_setting+0x12a>
 8001b4e:	7925      	ldrb	r5, [r4, #4]
 8001b50:	e7dd      	b.n	8001b0e <time_setting+0xe6>
 8001b52:	7965      	ldrb	r5, [r4, #5]
 8001b54:	e7db      	b.n	8001b0e <time_setting+0xe6>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000039 	.word	0x20000039
 8001b5c:	20000dfb 	.word	0x20000dfb
 8001b60:	08006c02 	.word	0x08006c02
 8001b64:	200009dc 	.word	0x200009dc
 8001b68:	08005eb4 	.word	0x08005eb4
 8001b6c:	08006c5c 	.word	0x08006c5c
 8001b70:	080069b2 	.word	0x080069b2
 8001b74:	080069ba 	.word	0x080069ba
 8001b78:	080069cb 	.word	0x080069cb

08001b7c <position_set>:
void position_set(void){
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS new = temp;
 8001b7e:	4f54      	ldr	r7, [pc, #336]	; (8001cd0 <position_set+0x154>)
void position_set(void){
 8001b80:	b089      	sub	sp, #36	; 0x24
	POS new = temp;
 8001b82:	783c      	ldrb	r4, [r7, #0]
 8001b84:	787e      	ldrb	r6, [r7, #1]
	while(!read_sw()){
 8001b86:	f7ff fc4f 	bl	8001428 <read_sw>
 8001b8a:	1e05      	subs	r5, r0, #0
 8001b8c:	d004      	beq.n	8001b98 <position_set+0x1c>
	firF = 0;
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <position_set+0x158>)
 8001b92:	701a      	strb	r2, [r3, #0]
}
 8001b94:	b009      	add	sp, #36	; 0x24
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	783a      	ldrb	r2, [r7, #0]
 8001b9c:	494e      	ldr	r1, [pc, #312]	; (8001cd8 <position_set+0x15c>)
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	3201      	adds	r2, #1
 8001ba2:	a803      	add	r0, sp, #12
 8001ba4:	f003 fe1a 	bl	80057dc <siprintf>
		ssd1306_putsXY(pos.x, pos.y, bf, 0);
 8001ba8:	002b      	movs	r3, r5
 8001baa:	2106      	movs	r1, #6
 8001bac:	2001      	movs	r0, #1
 8001bae:	aa03      	add	r2, sp, #12
 8001bb0:	f7ff fba0 	bl	80012f4 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8001bb4:	f7ff f944 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 8001bb8:	f7fe fdf4 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <position_set+0x160>)
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
 8001bc2:	7919      	ldrb	r1, [r3, #4]
 8001bc4:	2900      	cmp	r1, #0
 8001bc6:	d100      	bne.n	8001bca <position_set+0x4e>
 8001bc8:	e07e      	b.n	8001cc8 <position_set+0x14c>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2104      	movs	r1, #4
 8001bce:	001a      	movs	r2, r3
 8001bd0:	0028      	movs	r0, r5
 8001bd2:	f7fe fdb1 	bl	8000738 <led_color>
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	3501      	adds	r5, #1
 8001bda:	3310      	adds	r3, #16
 8001bdc:	b2ed      	uxtb	r5, r5
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2d24      	cmp	r5, #36	; 0x24
 8001be2:	d1ed      	bne.n	8001bc0 <position_set+0x44>
		led_color(curxy(), 4, 4, 4);
 8001be4:	f7ff fb06 	bl	80011f4 <curxy>
 8001be8:	2304      	movs	r3, #4
 8001bea:	001a      	movs	r2, r3
 8001bec:	0019      	movs	r1, r3
 8001bee:	f7fe fda3 	bl	8000738 <led_color>
		led_update();
 8001bf2:	f7fe fdad 	bl	8000750 <led_update>
		if(cnt > 150){
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <position_set+0x164>)
 8001bf8:	881a      	ldrh	r2, [r3, #0]
 8001bfa:	2a96      	cmp	r2, #150	; 0x96
 8001bfc:	d95b      	bls.n	8001cb6 <position_set+0x13a>
			cnt = 0;
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]
			if(JOY_U) do{ new.y++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <position_set+0x168>)
 8001c04:	4a38      	ldr	r2, [pc, #224]	; (8001ce8 <position_set+0x16c>)
 8001c06:	885b      	ldrh	r3, [r3, #2]
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d911      	bls.n	8001c30 <position_set+0xb4>
 8001c0c:	3601      	adds	r6, #1
 8001c0e:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c10:	2305      	movs	r3, #5
 8001c12:	1b58      	subs	r0, r3, r5
 8001c14:	3301      	adds	r3, #1
 8001c16:	4358      	muls	r0, r3
			if(JOY_U) do{ new.y++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c18:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c1a:	1820      	adds	r0, r4, r0
			if(JOY_U) do{ new.y++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2104      	movs	r1, #4
 8001c20:	b2c0      	uxtb	r0, r0
 8001c22:	f7fe fdc9 	bl	80007b8 <led_cmp>
 8001c26:	002e      	movs	r6, r5
 8001c28:	3501      	adds	r5, #1
 8001c2a:	b2ed      	uxtb	r5, r5
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1ef      	bne.n	8001c10 <position_set+0x94>
			if(JOY_D) do{ new.y--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c30:	2296      	movs	r2, #150	; 0x96
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <position_set+0x168>)
 8001c34:	0052      	lsls	r2, r2, #1
 8001c36:	885b      	ldrh	r3, [r3, #2]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d211      	bcs.n	8001c60 <position_set+0xe4>
 8001c3c:	3e01      	subs	r6, #1
 8001c3e:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c40:	2305      	movs	r3, #5
 8001c42:	1b58      	subs	r0, r3, r5
 8001c44:	3301      	adds	r3, #1
 8001c46:	4358      	muls	r0, r3
			if(JOY_D) do{ new.y--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c48:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c4a:	1820      	adds	r0, r4, r0
			if(JOY_D) do{ new.y--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2104      	movs	r1, #4
 8001c50:	b2c0      	uxtb	r0, r0
 8001c52:	f7fe fdb1 	bl	80007b8 <led_cmp>
 8001c56:	002e      	movs	r6, r5
 8001c58:	3d01      	subs	r5, #1
 8001c5a:	b2ed      	uxtb	r5, r5
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d1ef      	bne.n	8001c40 <position_set+0xc4>
			if(JOY_L) do{ new.x--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c60:	2296      	movs	r2, #150	; 0x96
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <position_set+0x168>)
 8001c64:	0052      	lsls	r2, r2, #1
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d20f      	bcs.n	8001c8c <position_set+0x110>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	2506      	movs	r5, #6
 8001c70:	1b9b      	subs	r3, r3, r6
 8001c72:	435d      	muls	r5, r3
 8001c74:	b2ed      	uxtb	r5, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c76:	2300      	movs	r3, #0
 8001c78:	3c01      	subs	r4, #1
 8001c7a:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c7c:	1960      	adds	r0, r4, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c7e:	001a      	movs	r2, r3
 8001c80:	2104      	movs	r1, #4
 8001c82:	b2c0      	uxtb	r0, r0
 8001c84:	f7fe fd98 	bl	80007b8 <led_cmp>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1f4      	bne.n	8001c76 <position_set+0xfa>
			if(JOY_R) do{ new.x++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <position_set+0x168>)
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <position_set+0x16c>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d90f      	bls.n	8001cb6 <position_set+0x13a>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001c96:	2305      	movs	r3, #5
 8001c98:	2506      	movs	r5, #6
 8001c9a:	1b9b      	subs	r3, r3, r6
 8001c9c:	435d      	muls	r5, r3
 8001c9e:	b2ed      	uxtb	r5, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	3401      	adds	r4, #1
 8001ca4:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8001ca6:	1960      	adds	r0, r4, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(testxy(new.x, new.y), 4, 0, 0));
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2104      	movs	r1, #4
 8001cac:	b2c0      	uxtb	r0, r0
 8001cae:	f7fe fd83 	bl	80007b8 <led_cmp>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d1f4      	bne.n	8001ca0 <position_set+0x124>
		if(new.x > 5) new.x = temp.x;
 8001cb6:	2c05      	cmp	r4, #5
 8001cb8:	d900      	bls.n	8001cbc <position_set+0x140>
 8001cba:	783c      	ldrb	r4, [r7, #0]
		if(new.y > 5) new.y = temp.y;
 8001cbc:	2e05      	cmp	r6, #5
 8001cbe:	d900      	bls.n	8001cc2 <position_set+0x146>
 8001cc0:	787e      	ldrb	r6, [r7, #1]
		temp = new;
 8001cc2:	703c      	strb	r4, [r7, #0]
 8001cc4:	707e      	strb	r6, [r7, #1]
 8001cc6:	e75e      	b.n	8001b86 <position_set+0xa>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001cc8:	000b      	movs	r3, r1
 8001cca:	2204      	movs	r2, #4
 8001ccc:	e780      	b.n	8001bd0 <position_set+0x54>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000e0f 	.word	0x20000e0f
 8001cd4:	20000018 	.word	0x20000018
 8001cd8:	080069d5 	.word	0x080069d5
 8001cdc:	200009e8 	.word	0x200009e8
 8001ce0:	200009ca 	.word	0x200009ca
 8001ce4:	200009be 	.word	0x200009be
 8001ce8:	00000dac 	.word	0x00000dac

08001cec <save_mode>:
void save_mode(void){
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001cee:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <save_mode+0x1d8>)
void save_mode(void){
 8001cf0:	b0a3      	sub	sp, #140	; 0x8c
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001cf2:	7818      	ldrb	r0, [r3, #0]
 8001cf4:	23c8      	movs	r3, #200	; 0xc8
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d006      	beq.n	8001d08 <save_mode+0x1c>
 8001cfa:	3b64      	subs	r3, #100	; 0x64
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d003      	beq.n	8001d08 <save_mode+0x1c>
 8001d00:	3b32      	subs	r3, #50	; 0x32
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d000      	beq.n	8001d08 <save_mode+0x1c>
 8001d06:	3b28      	subs	r3, #40	; 0x28
 8001d08:	4a6f      	ldr	r2, [pc, #444]	; (8001ec8 <save_mode+0x1dc>)
 8001d0a:	7013      	strb	r3, [r2, #0]
	if(!firF){
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <save_mode+0x1e0>)
 8001d0e:	7819      	ldrb	r1, [r3, #0]
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d152      	bne.n	8001dba <save_mode+0xce>
		firF = 1;
 8001d14:	2201      	movs	r2, #1
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d16:	4c6e      	ldr	r4, [pc, #440]	; (8001ed0 <save_mode+0x1e4>)
		firF = 1;
 8001d18:	701a      	strb	r2, [r3, #0]
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d1a:	7824      	ldrb	r4, [r4, #0]
 8001d1c:	ab03      	add	r3, sp, #12
 8001d1e:	3403      	adds	r4, #3
 8001d20:	705c      	strb	r4, [r3, #1]
 8001d22:	2406      	movs	r4, #6
 8001d24:	7019      	strb	r1, [r3, #0]
 8001d26:	7099      	strb	r1, [r3, #2]
 8001d28:	3103      	adds	r1, #3
 8001d2a:	7159      	strb	r1, [r3, #5]
 8001d2c:	1889      	adds	r1, r1, r2
 8001d2e:	71d9      	strb	r1, [r3, #7]
 8001d30:	1889      	adds	r1, r1, r2
 8001d32:	7259      	strb	r1, [r3, #9]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d34:	4341      	muls	r1, r0
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d36:	70da      	strb	r2, [r3, #3]
 8001d38:	711a      	strb	r2, [r3, #4]
 8001d3a:	719a      	strb	r2, [r3, #6]
 8001d3c:	721a      	strb	r2, [r3, #8]
 8001d3e:	729a      	strb	r2, [r3, #10]
 8001d40:	731a      	strb	r2, [r3, #12]
 8001d42:	1912      	adds	r2, r2, r4
 8001d44:	735a      	strb	r2, [r3, #13]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d46:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <save_mode+0x1e8>)
 8001d48:	ae0e      	add	r6, sp, #56	; 0x38
 8001d4a:	1852      	adds	r2, r2, r1
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d4c:	72dc      	strb	r4, [r3, #11]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d4e:	0030      	movs	r0, r6
 8001d50:	4961      	ldr	r1, [pc, #388]	; (8001ed8 <save_mode+0x1ec>)
 8001d52:	f003 fd43 	bl	80057dc <siprintf>
		sprintf(bf[1], "Name:%s", input_name[0] > 0 ? input_name : "(NONE)");
 8001d56:	4b61      	ldr	r3, [pc, #388]	; (8001edc <save_mode+0x1f0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	7813      	ldrb	r3, [r2, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <save_mode+0x76>
 8001d60:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <save_mode+0x1f4>)
 8001d62:	ad13      	add	r5, sp, #76	; 0x4c
 8001d64:	495f      	ldr	r1, [pc, #380]	; (8001ee4 <save_mode+0x1f8>)
 8001d66:	0028      	movs	r0, r5
 8001d68:	f003 fd38 	bl	80057dc <siprintf>
		sprintf(bf[2], "Store: %d/%d", store_num, store_max);
 8001d6c:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <save_mode+0x1dc>)
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <save_mode+0x1fc>)
 8001d70:	ac18      	add	r4, sp, #96	; 0x60
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	495d      	ldr	r1, [pc, #372]	; (8001eec <save_mode+0x200>)
 8001d78:	0020      	movs	r0, r4
 8001d7a:	f003 fd2f 	bl	80057dc <siprintf>
		sprintf(bf[3], "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001d7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ef0 <save_mode+0x204>)
 8001d80:	af1d      	add	r7, sp, #116	; 0x74
 8001d82:	7853      	ldrb	r3, [r2, #1]
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	495b      	ldr	r1, [pc, #364]	; (8001ef4 <save_mode+0x208>)
 8001d88:	3301      	adds	r3, #1
 8001d8a:	3201      	adds	r2, #1
 8001d8c:	0038      	movs	r0, r7
 8001d8e:	f003 fd25 	bl	80057dc <siprintf>
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <save_mode+0x20c>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d94:	4959      	ldr	r1, [pc, #356]	; (8001efc <save_mode+0x210>)
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d96:	9307      	str	r3, [sp, #28]
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <save_mode+0x214>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d9a:	aa07      	add	r2, sp, #28
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d9c:	9308      	str	r3, [sp, #32]
 8001d9e:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <save_mode+0x218>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001da0:	a803      	add	r0, sp, #12
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001da2:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001da4:	2307      	movs	r3, #7
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	3b06      	subs	r3, #6
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001daa:	9609      	str	r6, [sp, #36]	; 0x24
 8001dac:	950a      	str	r5, [sp, #40]	; 0x28
 8001dae:	940b      	str	r4, [sp, #44]	; 0x2c
 8001db0:	970c      	str	r7, [sp, #48]	; 0x30
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001db2:	f7ff faaf 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8001db6:	f7ff f843 	bl	8000e40 <SSD1306_UpdateScreen>
	get_adc();
 8001dba:	f7ff fad3 	bl	8001364 <get_adc>
	get_sel(&sel, 4, 0, 2);
 8001dbe:	4c44      	ldr	r4, [pc, #272]	; (8001ed0 <save_mode+0x1e4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	0020      	movs	r0, r4
 8001dc8:	f7ff faf8 	bl	80013bc <get_sel>
	if(sel == 0) get_sel(&cate_sel, etc, res, 1);
 8001dcc:	7822      	ldrb	r2, [r4, #0]
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d104      	bne.n	8001ddc <save_mode+0xf0>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	483b      	ldr	r0, [pc, #236]	; (8001ec4 <save_mode+0x1d8>)
 8001dd8:	f7ff faf0 	bl	80013bc <get_sel>
	if(sel == 2) get_sel(&store_num, store_max, 1, 1);
 8001ddc:	7823      	ldrb	r3, [r4, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d106      	bne.n	8001df0 <save_mode+0x104>
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <save_mode+0x1dc>)
 8001de4:	4840      	ldr	r0, [pc, #256]	; (8001ee8 <save_mode+0x1fc>)
 8001de6:	7819      	ldrb	r1, [r3, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	001a      	movs	r2, r3
 8001dec:	f7ff fae6 	bl	80013bc <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <save_mode+0x21c>)
 8001df2:	7813      	ldrb	r3, [r2, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <save_mode+0x114>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	7013      	strb	r3, [r2, #0]
 8001dfc:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <save_mode+0x1e0>)
 8001dfe:	7013      	strb	r3, [r2, #0]
	if(read_sw()){
 8001e00:	f7ff fb12 	bl	8001428 <read_sw>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d057      	beq.n	8001eb8 <save_mode+0x1cc>
		if(sel == 1) input_name = input_string("#input Name");
 8001e08:	7823      	ldrb	r3, [r4, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d104      	bne.n	8001e18 <save_mode+0x12c>
 8001e0e:	483f      	ldr	r0, [pc, #252]	; (8001f0c <save_mode+0x220>)
 8001e10:	f7ff fc16 	bl	8001640 <input_string>
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <save_mode+0x1f0>)
 8001e16:	6018      	str	r0, [r3, #0]
		if(sel == 3) position_set();
 8001e18:	7823      	ldrb	r3, [r4, #0]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d101      	bne.n	8001e22 <save_mode+0x136>
 8001e1e:	f7ff fead 	bl	8001b7c <position_set>
		if(sel == 4){
 8001e22:	7823      	ldrb	r3, [r4, #0]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d147      	bne.n	8001eb8 <save_mode+0x1cc>
			if(input_name[0] > 0){
 8001e28:	4d2c      	ldr	r5, [pc, #176]	; (8001edc <save_mode+0x1f0>)
 8001e2a:	682e      	ldr	r6, [r5, #0]
 8001e2c:	7833      	ldrb	r3, [r6, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d044      	beq.n	8001ebc <save_mode+0x1d0>
				pt[curxy()].name = input_name;
 8001e32:	f7ff f9df 	bl	80011f4 <curxy>
 8001e36:	4c36      	ldr	r4, [pc, #216]	; (8001f10 <save_mode+0x224>)
				pt[curxy()].cate = cate_sel + 1;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <save_mode+0x1d8>)
				pt[curxy()].name = input_name;
 8001e3a:	0100      	lsls	r0, r0, #4
 8001e3c:	5106      	str	r6, [r0, r4]
				pt[curxy()].cate = cate_sel + 1;
 8001e3e:	781e      	ldrb	r6, [r3, #0]
 8001e40:	f7ff f9d8 	bl	80011f4 <curxy>
 8001e44:	0100      	lsls	r0, r0, #4
				pt[curxy()].max = store_max;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <save_mode+0x1dc>)
				pt[curxy()].cate = cate_sel + 1;
 8001e48:	1820      	adds	r0, r4, r0
 8001e4a:	3601      	adds	r6, #1
 8001e4c:	7106      	strb	r6, [r0, #4]
				pt[curxy()].max = store_max;
 8001e4e:	781e      	ldrb	r6, [r3, #0]
 8001e50:	f7ff f9d0 	bl	80011f4 <curxy>
 8001e54:	0100      	lsls	r0, r0, #4
 8001e56:	1820      	adds	r0, r4, r0
 8001e58:	8106      	strh	r6, [r0, #8]
				pt[curxy()].store = store_num;
 8001e5a:	f7ff f9cb 	bl	80011f4 <curxy>
 8001e5e:	4e22      	ldr	r6, [pc, #136]	; (8001ee8 <save_mode+0x1fc>)
 8001e60:	0100      	lsls	r0, r0, #4
 8001e62:	7837      	ldrb	r7, [r6, #0]
 8001e64:	1820      	adds	r0, r4, r0
 8001e66:	80c7      	strh	r7, [r0, #6]
				pt[curxy()].pos = start_check;
 8001e68:	f7ff f9c4 	bl	80011f4 <curxy>
 8001e6c:	4f29      	ldr	r7, [pc, #164]	; (8001f14 <save_mode+0x228>)
 8001e6e:	0100      	lsls	r0, r0, #4
 8001e70:	783b      	ldrb	r3, [r7, #0]
 8001e72:	1820      	adds	r0, r4, r0
 8001e74:	7283      	strb	r3, [r0, #10]
				pt[curxy()].temp = temp;
 8001e76:	f7ff f9bd 	bl	80011f4 <curxy>
 8001e7a:	0100      	lsls	r0, r0, #4
 8001e7c:	1820      	adds	r0, r4, r0
 8001e7e:	2202      	movs	r2, #2
 8001e80:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <save_mode+0x204>)
 8001e82:	300b      	adds	r0, #11
 8001e84:	f003 fb66 	bl	8005554 <memcpy>
				logShift(0);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff fcaf 	bl	80017ec <logShift>
				if(start_check == 1) ptfirst = pt[curxy()];
 8001e8e:	783b      	ldrb	r3, [r7, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d109      	bne.n	8001ea8 <save_mode+0x1bc>
 8001e94:	f7ff f9ae 	bl	80011f4 <curxy>
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <save_mode+0x22c>)
 8001e9a:	0100      	lsls	r0, r0, #4
 8001e9c:	1824      	adds	r4, r4, r0
 8001e9e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001ea0:	c307      	stmia	r3!, {r0, r1, r2}
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	6013      	str	r3, [r2, #0]
				store_num = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	7033      	strb	r3, [r6, #0]
				cate_sel = res;
 8001eac:	2300      	movs	r3, #0
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <save_mode+0x1d8>)
				input_name = NULL;
 8001eb0:	602b      	str	r3, [r5, #0]
				cate_sel = res;
 8001eb2:	7013      	strb	r3, [r2, #0]
				init_value();
 8001eb4:	f7ff f9aa 	bl	800120c <init_value>
}
 8001eb8:	b023      	add	sp, #140	; 0x8c
 8001eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else buzM = 2;
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <save_mode+0x230>)
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	e7f9      	b.n	8001eb8 <save_mode+0x1cc>
 8001ec4:	200009c7 	.word	0x200009c7
 8001ec8:	20000e0e 	.word	0x20000e0e
 8001ecc:	20000018 	.word	0x20000018
 8001ed0:	20000dfb 	.word	0x20000dfb
 8001ed4:	08006c20 	.word	0x08006c20
 8001ed8:	080069e6 	.word	0x080069e6
 8001edc:	200009d8 	.word	0x200009d8
 8001ee0:	08006b9c 	.word	0x08006b9c
 8001ee4:	080069ee 	.word	0x080069ee
 8001ee8:	20000038 	.word	0x20000038
 8001eec:	080069f6 	.word	0x080069f6
 8001ef0:	20000e0f 	.word	0x20000e0f
 8001ef4:	080069d5 	.word	0x080069d5
 8001ef8:	080068fb 	.word	0x080068fb
 8001efc:	08006a1f 	.word	0x08006a1f
 8001f00:	08006a03 	.word	0x08006a03
 8001f04:	08006a19 	.word	0x08006a19
 8001f08:	200009dc 	.word	0x200009dc
 8001f0c:	08006a25 	.word	0x08006a25
 8001f10:	200009e8 	.word	0x200009e8
 8001f14:	20000e0d 	.word	0x20000e0d
 8001f18:	20000de4 	.word	0x20000de4
 8001f1c:	200009c4 	.word	0x200009c4

08001f20 <part_refill>:
	uint8_t refill_num = 0;
 8001f20:	230f      	movs	r3, #15
 8001f22:	2200      	movs	r2, #0
void part_refill(void){
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b08d      	sub	sp, #52	; 0x34
	uint8_t refill_num = 0;
 8001f28:	446b      	add	r3, sp
 8001f2a:	701a      	strb	r2, [r3, #0]
	while(!read_sw()){
 8001f2c:	f7ff fa7c 	bl	8001428 <read_sw>
 8001f30:	1e04      	subs	r4, r0, #0
 8001f32:	d011      	beq.n	8001f58 <part_refill+0x38>
	if(refill_num > 0) { pt[curxy()].store += refill_num; logShift(0); }
 8001f34:	230f      	movs	r3, #15
 8001f36:	446b      	add	r3, sp
 8001f38:	781c      	ldrb	r4, [r3, #0]
 8001f3a:	f7ff f95b 	bl	80011f4 <curxy>
 8001f3e:	4d24      	ldr	r5, [pc, #144]	; (8001fd0 <part_refill+0xb0>)
 8001f40:	0103      	lsls	r3, r0, #4
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d038      	beq.n	8001fb8 <part_refill+0x98>
 8001f46:	18eb      	adds	r3, r5, r3
 8001f48:	88da      	ldrh	r2, [r3, #6]
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	1914      	adds	r4, r2, r4
 8001f4e:	80dc      	strh	r4, [r3, #6]
 8001f50:	f7ff fc4c 	bl	80017ec <logShift>
}
 8001f54:	b00d      	add	sp, #52	; 0x34
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8001f58:	2204      	movs	r2, #4
 8001f5a:	491e      	ldr	r1, [pc, #120]	; (8001fd4 <part_refill+0xb4>)
 8001f5c:	a804      	add	r0, sp, #16
 8001f5e:	1889      	adds	r1, r1, r2
 8001f60:	f003 faf8 	bl	8005554 <memcpy>
		sprintf(bf, "IN:%d/%d", refill_num, pt[curxy()].max);
 8001f64:	f7ff f946 	bl	80011f4 <curxy>
 8001f68:	260f      	movs	r6, #15
 8001f6a:	4d19      	ldr	r5, [pc, #100]	; (8001fd0 <part_refill+0xb0>)
 8001f6c:	0100      	lsls	r0, r0, #4
 8001f6e:	1828      	adds	r0, r5, r0
 8001f70:	446e      	add	r6, sp
 8001f72:	af07      	add	r7, sp, #28
 8001f74:	8903      	ldrh	r3, [r0, #8]
 8001f76:	7832      	ldrb	r2, [r6, #0]
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <part_refill+0xb8>)
 8001f7a:	0038      	movs	r0, r7
 8001f7c:	f003 fc2e 	bl	80057dc <siprintf>
		char* array[2] = { "Part has all used.", bf };
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <part_refill+0xbc>)
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f82:	4917      	ldr	r1, [pc, #92]	; (8001fe0 <part_refill+0xc0>)
		char* array[2] = { "Part has all used.", bf };
 8001f84:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f86:	2302      	movs	r3, #2
 8001f88:	aa05      	add	r2, sp, #20
 8001f8a:	a804      	add	r0, sp, #16
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	3b01      	subs	r3, #1
		char* array[2] = { "Part has all used.", bf };
 8001f90:	9706      	str	r7, [sp, #24]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f92:	f7ff f9bf 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8001f96:	f7fe ff53 	bl	8000e40 <SSD1306_UpdateScreen>
		get_adc();
 8001f9a:	f7ff f9e3 	bl	8001364 <get_adc>
		get_sel(&refill_num, pt[curxy()].max, 0, 0);
 8001f9e:	f7ff f929 	bl	80011f4 <curxy>
 8001fa2:	0100      	lsls	r0, r0, #4
 8001fa4:	182d      	adds	r5, r5, r0
 8001fa6:	0023      	movs	r3, r4
 8001fa8:	0022      	movs	r2, r4
 8001faa:	0030      	movs	r0, r6
 8001fac:	7a29      	ldrb	r1, [r5, #8]
 8001fae:	f7ff fa05 	bl	80013bc <get_sel>
		joy_result = basic;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <part_refill+0xc4>)
 8001fb4:	701c      	strb	r4, [r3, #0]
 8001fb6:	e7b9      	b.n	8001f2c <part_refill+0xc>
	else { free(pt[curxy()].name); memset(&pt[curxy()], 0, sizeof(struct Part)); }
 8001fb8:	58e8      	ldr	r0, [r5, r3]
 8001fba:	f003 fac1 	bl	8005540 <free>
 8001fbe:	f7ff f919 	bl	80011f4 <curxy>
 8001fc2:	0100      	lsls	r0, r0, #4
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	0021      	movs	r1, r4
 8001fc8:	1828      	adds	r0, r5, r0
 8001fca:	f003 fadf 	bl	800558c <memset>
}
 8001fce:	e7c1      	b.n	8001f54 <part_refill+0x34>
 8001fd0:	200009e8 	.word	0x200009e8
 8001fd4:	08005eb4 	.word	0x08005eb4
 8001fd8:	08006a31 	.word	0x08006a31
 8001fdc:	08006a3a 	.word	0x08006a3a
 8001fe0:	08006a4d 	.word	0x08006a4d
 8001fe4:	200009dc 	.word	0x200009dc

08001fe8 <part_use>:
	use_num = 1;
 8001fe8:	2201      	movs	r2, #1
void part_use(void){
 8001fea:	b5f0      	push	{r4, r5, r6, r7, lr}
	use_num = 1;
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <part_use+0xcc>)
void part_use(void){
 8001fee:	b08b      	sub	sp, #44	; 0x2c
	use_num = 1;
 8001ff0:	701a      	strb	r2, [r3, #0]
	led_clear();
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	f7fe fbd6 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <part_use+0xd0>)
 8001ffa:	0120      	lsls	r0, r4, #4
 8001ffc:	b2e1      	uxtb	r1, r4
 8001ffe:	18c0      	adds	r0, r0, r3
 8002000:	3401      	adds	r4, #1
 8002002:	f7ff fa2f 	bl	8001464 <led_display>
 8002006:	2c24      	cmp	r4, #36	; 0x24
 8002008:	d1f6      	bne.n	8001ff8 <part_use+0x10>
	led_color(curxy(), 4, 4, 4);
 800200a:	f7ff f8f3 	bl	80011f4 <curxy>
 800200e:	2304      	movs	r3, #4
 8002010:	001a      	movs	r2, r3
 8002012:	0019      	movs	r1, r3
 8002014:	f7fe fb90 	bl	8000738 <led_color>
	led_update();
 8002018:	f7fe fb9a 	bl	8000750 <led_update>
	while(!read_sw()){
 800201c:	f7ff fa04 	bl	8001428 <read_sw>
 8002020:	1e04      	subs	r4, r0, #0
 8002022:	d017      	beq.n	8002054 <part_use+0x6c>
	logShift(1);
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff fbe1 	bl	80017ec <logShift>
	pt[curxy()].store -= use_num;
 800202a:	f7ff f8e3 	bl	80011f4 <curxy>
 800202e:	4c22      	ldr	r4, [pc, #136]	; (80020b8 <part_use+0xd0>)
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <part_use+0xcc>)
 8002032:	0100      	lsls	r0, r0, #4
 8002034:	1820      	adds	r0, r4, r0
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	88c3      	ldrh	r3, [r0, #6]
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	80c3      	strh	r3, [r0, #6]
	if(pt[curxy()].store == 0) part_refill();
 800203e:	f7ff f8d9 	bl	80011f4 <curxy>
 8002042:	0100      	lsls	r0, r0, #4
 8002044:	1824      	adds	r4, r4, r0
 8002046:	88e3      	ldrh	r3, [r4, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <part_use+0x68>
 800204c:	f7ff ff68 	bl	8001f20 <part_refill>
}
 8002050:	b00b      	add	sp, #44	; 0x2c
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8002054:	2204      	movs	r2, #4
 8002056:	4919      	ldr	r1, [pc, #100]	; (80020bc <part_use+0xd4>)
 8002058:	a802      	add	r0, sp, #8
 800205a:	1889      	adds	r1, r1, r2
 800205c:	f003 fa7a 	bl	8005554 <memcpy>
		sprintf(bf, "(%d/%d)", use_num, pt[curxy()].store);
 8002060:	f7ff f8c8 	bl	80011f4 <curxy>
 8002064:	4d14      	ldr	r5, [pc, #80]	; (80020b8 <part_use+0xd0>)
 8002066:	4e13      	ldr	r6, [pc, #76]	; (80020b4 <part_use+0xcc>)
 8002068:	0100      	lsls	r0, r0, #4
 800206a:	1828      	adds	r0, r5, r0
 800206c:	af05      	add	r7, sp, #20
 800206e:	88c3      	ldrh	r3, [r0, #6]
 8002070:	7832      	ldrb	r2, [r6, #0]
 8002072:	4913      	ldr	r1, [pc, #76]	; (80020c0 <part_use+0xd8>)
 8002074:	0038      	movs	r0, r7
 8002076:	f003 fbb1 	bl	80057dc <siprintf>
		char* array[2] = { "How many use?", bf };
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <part_use+0xdc>)
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800207c:	4912      	ldr	r1, [pc, #72]	; (80020c8 <part_use+0xe0>)
		char* array[2] = { "How many use?", bf };
 800207e:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8002080:	2302      	movs	r3, #2
 8002082:	aa03      	add	r2, sp, #12
 8002084:	a802      	add	r0, sp, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	3b01      	subs	r3, #1
		char* array[2] = { "How many use?", bf };
 800208a:	9704      	str	r7, [sp, #16]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800208c:	f7ff f942 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8002090:	f7fe fed6 	bl	8000e40 <SSD1306_UpdateScreen>
		get_adc();
 8002094:	f7ff f966 	bl	8001364 <get_adc>
		get_sel(&use_num, pt[curxy()].store, 1, 0);
 8002098:	f7ff f8ac 	bl	80011f4 <curxy>
 800209c:	0100      	lsls	r0, r0, #4
 800209e:	182d      	adds	r5, r5, r0
 80020a0:	0023      	movs	r3, r4
 80020a2:	2201      	movs	r2, #1
 80020a4:	0030      	movs	r0, r6
 80020a6:	79a9      	ldrb	r1, [r5, #6]
 80020a8:	f7ff f988 	bl	80013bc <get_sel>
		joy_result = basic;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <part_use+0xe4>)
 80020ae:	701c      	strb	r4, [r3, #0]
 80020b0:	e7b4      	b.n	800201c <part_use+0x34>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	20000e11 	.word	0x20000e11
 80020b8:	200009e8 	.word	0x200009e8
 80020bc:	08005eb4 	.word	0x08005eb4
 80020c0:	08006a55 	.word	0x08006a55
 80020c4:	08006a5d 	.word	0x08006a5d
 80020c8:	08006a6b 	.word	0x08006a6b
 80020cc:	200009dc 	.word	0x200009dc

080020d0 <use_mode>:
void use_mode(void){
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80020d2:	4c5c      	ldr	r4, [pc, #368]	; (8002244 <use_mode+0x174>)
void use_mode(void){
 80020d4:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 80020d6:	7823      	ldrb	r3, [r4, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d15e      	bne.n	800219a <use_mode+0xca>
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020dc:	2208      	movs	r2, #8
 80020de:	495a      	ldr	r1, [pc, #360]	; (8002248 <use_mode+0x178>)
		firF = 1;
 80020e0:	3301      	adds	r3, #1
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020e2:	1889      	adds	r1, r1, r2
 80020e4:	a803      	add	r0, sp, #12
		firF = 1;
 80020e6:	7023      	strb	r3, [r4, #0]
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020e8:	f003 fa34 	bl	8005554 <memcpy>
		sprintf(bf[0], pt[curxy()].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[curxy()].cate - 1]);
 80020ec:	f7ff f882 	bl	80011f4 <curxy>
 80020f0:	4d56      	ldr	r5, [pc, #344]	; (800224c <use_mode+0x17c>)
 80020f2:	0100      	lsls	r0, r0, #4
 80020f4:	1828      	adds	r0, r5, r0
 80020f6:	7902      	ldrb	r2, [r0, #4]
 80020f8:	4955      	ldr	r1, [pc, #340]	; (8002250 <use_mode+0x180>)
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d100      	bne.n	8002100 <use_mode+0x30>
 80020fe:	4955      	ldr	r1, [pc, #340]	; (8002254 <use_mode+0x184>)
 8002100:	2305      	movs	r3, #5
 8002102:	3a01      	subs	r2, #1
 8002104:	4353      	muls	r3, r2
 8002106:	4a54      	ldr	r2, [pc, #336]	; (8002258 <use_mode+0x188>)
 8002108:	af09      	add	r7, sp, #36	; 0x24
 800210a:	18d2      	adds	r2, r2, r3
 800210c:	0038      	movs	r0, r7
 800210e:	f003 fb65 	bl	80057dc <siprintf>
		sprintf(bf[1], "Name:%s", pt[curxy()].cate != 0 ? pt[curxy()].name : "");
 8002112:	f7ff f86f 	bl	80011f4 <curxy>
 8002116:	0100      	lsls	r0, r0, #4
 8002118:	182b      	adds	r3, r5, r0
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <use_mode+0x18c>)
 800211e:	2b00      	cmp	r3, #0
 8002120:	d000      	beq.n	8002124 <use_mode+0x54>
 8002122:	582a      	ldr	r2, [r5, r0]
 8002124:	ae0e      	add	r6, sp, #56	; 0x38
 8002126:	494e      	ldr	r1, [pc, #312]	; (8002260 <use_mode+0x190>)
 8002128:	0030      	movs	r0, r6
 800212a:	f003 fb57 	bl	80057dc <siprintf>
		sprintf(bf[2], "Store:%d", pt[curxy()].store);
 800212e:	f7ff f861 	bl	80011f4 <curxy>
 8002132:	4d46      	ldr	r5, [pc, #280]	; (800224c <use_mode+0x17c>)
 8002134:	0100      	lsls	r0, r0, #4
 8002136:	1828      	adds	r0, r5, r0
 8002138:	88c2      	ldrh	r2, [r0, #6]
 800213a:	494a      	ldr	r1, [pc, #296]	; (8002264 <use_mode+0x194>)
 800213c:	a813      	add	r0, sp, #76	; 0x4c
 800213e:	f003 fb4d 	bl	80057dc <siprintf>
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <use_mode+0x198>)
 8002144:	9706      	str	r7, [sp, #24]
 8002146:	9305      	str	r3, [sp, #20]
 8002148:	ab13      	add	r3, sp, #76	; 0x4c
 800214a:	9308      	str	r3, [sp, #32]
 800214c:	9607      	str	r6, [sp, #28]
		array_puts(pos, "#Use", array, 1, pt[curxy()].cate != 0 ? sizeof(pos) / 2 : 2);
 800214e:	f7ff f851 	bl	80011f4 <curxy>
 8002152:	0100      	lsls	r0, r0, #4
 8002154:	1828      	adds	r0, r5, r0
 8002156:	7902      	ldrb	r2, [r0, #4]
 8002158:	2304      	movs	r3, #4
 800215a:	2a00      	cmp	r2, #0
 800215c:	d100      	bne.n	8002160 <use_mode+0x90>
 800215e:	3b02      	subs	r3, #2
 8002160:	4942      	ldr	r1, [pc, #264]	; (800226c <use_mode+0x19c>)
 8002162:	aa05      	add	r2, sp, #20
 8002164:	a803      	add	r0, sp, #12
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	f7ff f8d3 	bl	8001314 <array_puts>
		led_clear();
 800216e:	2600      	movs	r6, #0
		SSD1306_UpdateScreen();
 8002170:	f7fe fe66 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 8002174:	f7fe fb16 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002178:	0130      	lsls	r0, r6, #4
 800217a:	b2f1      	uxtb	r1, r6
 800217c:	1828      	adds	r0, r5, r0
 800217e:	3601      	adds	r6, #1
 8002180:	f7ff f970 	bl	8001464 <led_display>
 8002184:	2e24      	cmp	r6, #36	; 0x24
 8002186:	d1f7      	bne.n	8002178 <use_mode+0xa8>
		led_color(curxy(), 4, 4, 4);
 8002188:	f7ff f834 	bl	80011f4 <curxy>
 800218c:	2304      	movs	r3, #4
 800218e:	001a      	movs	r2, r3
 8002190:	0019      	movs	r1, r3
 8002192:	f7fe fad1 	bl	8000738 <led_color>
		led_update();
 8002196:	f7fe fadb 	bl	8000750 <led_update>
	if(cnt > 150){
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <use_mode+0x1a0>)
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	2a96      	cmp	r2, #150	; 0x96
 80021a0:	d927      	bls.n	80021f2 <use_mode+0x122>
		cnt = 0;
 80021a2:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <use_mode+0x1a4>)
		cnt = 0;
 80021a6:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 80021a8:	8842      	ldrh	r2, [r0, #2]
 80021aa:	4933      	ldr	r1, [pc, #204]	; (8002278 <use_mode+0x1a8>)
 80021ac:	428a      	cmp	r2, r1
 80021ae:	d932      	bls.n	8002216 <use_mode+0x146>
 80021b0:	4d32      	ldr	r5, [pc, #200]	; (800227c <use_mode+0x1ac>)
 80021b2:	786b      	ldrb	r3, [r5, #1]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d801      	bhi.n	80021bc <use_mode+0xec>
 80021b8:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 80021be:	8803      	ldrh	r3, [r0, #0]
 80021c0:	2096      	movs	r0, #150	; 0x96
 80021c2:	0040      	lsls	r0, r0, #1
 80021c4:	4283      	cmp	r3, r0
 80021c6:	d230      	bcs.n	800222a <use_mode+0x15a>
 80021c8:	482c      	ldr	r0, [pc, #176]	; (800227c <use_mode+0x1ac>)
 80021ca:	7801      	ldrb	r1, [r0, #0]
 80021cc:	2900      	cmp	r1, #0
 80021ce:	d001      	beq.n	80021d4 <use_mode+0x104>
 80021d0:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80021d2:	b2c9      	uxtb	r1, r1
 80021d4:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 80021d6:	21c8      	movs	r1, #200	; 0xc8
 80021d8:	3a2d      	subs	r2, #45	; 0x2d
 80021da:	3aff      	subs	r2, #255	; 0xff
 80021dc:	b292      	uxth	r2, r2
 80021de:	0109      	lsls	r1, r1, #4
 80021e0:	428a      	cmp	r2, r1
 80021e2:	d804      	bhi.n	80021ee <use_mode+0x11e>
 80021e4:	3b2d      	subs	r3, #45	; 0x2d
 80021e6:	3bff      	subs	r3, #255	; 0xff
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	428b      	cmp	r3, r1
 80021ec:	d901      	bls.n	80021f2 <use_mode+0x122>
 80021ee:	2300      	movs	r3, #0
 80021f0:	7023      	strb	r3, [r4, #0]
	if(read_sw()){
 80021f2:	f7ff f919 	bl	8001428 <read_sw>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d00b      	beq.n	8002212 <use_mode+0x142>
		if(pt[curxy()].cate != 0) { part_use(); init_value(); }
 80021fa:	f7fe fffb 	bl	80011f4 <curxy>
 80021fe:	0103      	lsls	r3, r0, #4
 8002200:	4812      	ldr	r0, [pc, #72]	; (800224c <use_mode+0x17c>)
 8002202:	18c0      	adds	r0, r0, r3
 8002204:	7903      	ldrb	r3, [r0, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d017      	beq.n	800223a <use_mode+0x16a>
 800220a:	f7ff feed 	bl	8001fe8 <part_use>
 800220e:	f7fe fffd 	bl	800120c <init_value>
}
 8002212:	b019      	add	sp, #100	; 0x64
 8002214:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002216:	2396      	movs	r3, #150	; 0x96
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	429a      	cmp	r2, r3
 800221c:	d2cf      	bcs.n	80021be <use_mode+0xee>
 800221e:	4d17      	ldr	r5, [pc, #92]	; (800227c <use_mode+0x1ac>)
 8002220:	786b      	ldrb	r3, [r5, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ca      	beq.n	80021bc <use_mode+0xec>
 8002226:	3b01      	subs	r3, #1
 8002228:	e7c7      	b.n	80021ba <use_mode+0xea>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800222a:	428b      	cmp	r3, r1
 800222c:	d9d3      	bls.n	80021d6 <use_mode+0x106>
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <use_mode+0x1ac>)
 8002230:	7801      	ldrb	r1, [r0, #0]
 8002232:	2904      	cmp	r1, #4
 8002234:	d8ce      	bhi.n	80021d4 <use_mode+0x104>
 8002236:	3101      	adds	r1, #1
 8002238:	e7cb      	b.n	80021d2 <use_mode+0x102>
		else buzM = 2;
 800223a:	2202      	movs	r2, #2
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <use_mode+0x1b0>)
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	e7e7      	b.n	8002212 <use_mode+0x142>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20000018 	.word	0x20000018
 8002248:	08005eb4 	.word	0x08005eb4
 800224c:	200009e8 	.word	0x200009e8
 8002250:	080069e6 	.word	0x080069e6
 8002254:	08006a70 	.word	0x08006a70
 8002258:	08006c20 	.word	0x08006c20
 800225c:	08006c99 	.word	0x08006c99
 8002260:	080069ee 	.word	0x080069ee
 8002264:	08006a78 	.word	0x08006a78
 8002268:	08006a81 	.word	0x08006a81
 800226c:	08006a6b 	.word	0x08006a6b
 8002270:	200009ca 	.word	0x200009ca
 8002274:	200009be 	.word	0x200009be
 8002278:	00000dac 	.word	0x00000dac
 800227c:	20000e0f 	.word	0x20000e0f
 8002280:	200009c4 	.word	0x200009c4

08002284 <find_reslut>:
void find_reslut(char* str){
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af02      	add	r7, sp, #8
 800228a:	6038      	str	r0, [r7, #0]
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[curxy()].name)) find_num++;
 800228c:	f7fe ffb2 	bl	80011f4 <curxy>
 8002290:	4b7a      	ldr	r3, [pc, #488]	; (800247c <find_reslut+0x1f8>)
 8002292:	0100      	lsls	r0, r0, #4
 8002294:	58c1      	ldr	r1, [r0, r3]
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f7fd ff36 	bl	8000108 <strcmp>
 800229c:	2424      	movs	r4, #36	; 0x24
	uint8_t find_num = 0;
 800229e:	2100      	movs	r1, #0
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[curxy()].name)) find_num++;
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d101      	bne.n	80022a8 <find_reslut+0x24>
 80022a4:	3101      	adds	r1, #1
 80022a6:	b2c9      	uxtb	r1, r1
 80022a8:	3c01      	subs	r4, #1
 80022aa:	b2e4      	uxtb	r4, r4
 80022ac:	2c00      	cmp	r4, #0
 80022ae:	d1f7      	bne.n	80022a0 <find_reslut+0x1c>
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 80022b0:	2010      	movs	r0, #16
 80022b2:	f003 f911 	bl	80054d8 <calloc>
	findC = 0;
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <find_reslut+0x1fc>)
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 80022b8:	6078      	str	r0, [r7, #4]
	findC = 0;
 80022ba:	701c      	strb	r4, [r3, #0]
	for(uint8_t i = 0 ; i < start_check ; i++)
 80022bc:	4b71      	ldr	r3, [pc, #452]	; (8002484 <find_reslut+0x200>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	42a3      	cmp	r3, r4
 80022c2:	d818      	bhi.n	80022f6 <find_reslut+0x72>
	while(!read_sw()){
 80022c4:	f7ff f8b0 	bl	8001428 <read_sw>
 80022c8:	4d6d      	ldr	r5, [pc, #436]	; (8002480 <find_reslut+0x1fc>)
 80022ca:	1e06      	subs	r6, r0, #0
 80022cc:	d032      	beq.n	8002334 <find_reslut+0xb0>
	logShift(2);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f7ff fa8c 	bl	80017ec <logShift>
	if(findC > 0) { temp = find_part[sel].temp; part_use(); }
 80022d4:	782b      	ldrb	r3, [r5, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <find_reslut+0x6e>
 80022da:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <find_reslut+0x204>)
 80022dc:	2202      	movs	r2, #2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0109      	lsls	r1, r1, #4
 80022e4:	1859      	adds	r1, r3, r1
 80022e6:	310b      	adds	r1, #11
 80022e8:	4868      	ldr	r0, [pc, #416]	; (800248c <find_reslut+0x208>)
 80022ea:	f003 f933 	bl	8005554 <memcpy>
 80022ee:	f7ff fe7b 	bl	8001fe8 <part_use>
}
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022f6:	4d61      	ldr	r5, [pc, #388]	; (800247c <find_reslut+0x1f8>)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	6828      	ldr	r0, [r5, #0]
 80022fc:	f7fd ff04 	bl	8000108 <strcmp>
 8002300:	2800      	cmp	r0, #0
 8002302:	d110      	bne.n	8002326 <find_reslut+0xa2>
 8002304:	7aab      	ldrb	r3, [r5, #10]
 8002306:	3b01      	subs	r3, #1
 8002308:	42a3      	cmp	r3, r4
 800230a:	d10c      	bne.n	8002326 <find_reslut+0xa2>
 800230c:	4b5c      	ldr	r3, [pc, #368]	; (8002480 <find_reslut+0x1fc>)
 800230e:	495c      	ldr	r1, [pc, #368]	; (8002480 <find_reslut+0x1fc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	700a      	strb	r2, [r1, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	18d3      	adds	r3, r2, r3
 800231c:	002a      	movs	r2, r5
 800231e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002320:	c343      	stmia	r3!, {r0, r1, r6}
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	601a      	str	r2, [r3, #0]
		for(uint8_t j = 0 ; j < 36 ; j++)
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <find_reslut+0x20c>)
 8002328:	3510      	adds	r5, #16
 800232a:	42ab      	cmp	r3, r5
 800232c:	d1e4      	bne.n	80022f8 <find_reslut+0x74>
	for(uint8_t i = 0 ; i < start_check ; i++)
 800232e:	3401      	adds	r4, #1
 8002330:	b2e4      	uxtb	r4, r4
 8002332:	e7c3      	b.n	80022bc <find_reslut+0x38>
		if(findC > 0){
 8002334:	782b      	ldrb	r3, [r5, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d030      	beq.n	800239c <find_reslut+0x118>
			get_adc();
 800233a:	f7ff f813 	bl	8001364 <get_adc>
			get_sel(&sel, findC - 1, 0, 2);
 800233e:	7829      	ldrb	r1, [r5, #0]
 8002340:	2302      	movs	r3, #2
 8002342:	3901      	subs	r1, #1
 8002344:	0032      	movs	r2, r6
 8002346:	4850      	ldr	r0, [pc, #320]	; (8002488 <find_reslut+0x204>)
 8002348:	b2c9      	uxtb	r1, r1
 800234a:	f7ff f837 	bl	80013bc <get_sel>
			joy_result = basic;
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <find_reslut+0x210>)
			led_clear();
 8002350:	0034      	movs	r4, r6
			joy_result = basic;
 8002352:	701e      	strb	r6, [r3, #0]
			led_clear();
 8002354:	f7fe fa26 	bl	80007a4 <led_clear>
			for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <find_reslut+0x1f8>)
 800235a:	0120      	lsls	r0, r4, #4
 800235c:	b2e1      	uxtb	r1, r4
 800235e:	18c0      	adds	r0, r0, r3
 8002360:	3401      	adds	r4, #1
 8002362:	f7ff f87f 	bl	8001464 <led_display>
 8002366:	2c24      	cmp	r4, #36	; 0x24
 8002368:	d1f6      	bne.n	8002358 <find_reslut+0xd4>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 800236a:	2105      	movs	r1, #5
			if(ledC < 500) led_display(&find_part[sel], testxy(find_part[sel].temp.x, find_part[sel].temp.y));
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <find_reslut+0x204>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	189a      	adds	r2, r3, r2
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002376:	7b13      	ldrb	r3, [r2, #12]
 8002378:	7ad0      	ldrb	r0, [r2, #11]
 800237a:	1acb      	subs	r3, r1, r3
 800237c:	3101      	adds	r1, #1
 800237e:	434b      	muls	r3, r1
 8002380:	1818      	adds	r0, r3, r0
			if(ledC < 500) led_display(&find_part[sel], testxy(find_part[sel].temp.x, find_part[sel].temp.y));
 8002382:	23fa      	movs	r3, #250	; 0xfa
 8002384:	4944      	ldr	r1, [pc, #272]	; (8002498 <find_reslut+0x214>)
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002386:	b2c0      	uxtb	r0, r0
			if(ledC < 500) led_display(&find_part[sel], testxy(find_part[sel].temp.x, find_part[sel].temp.y));
 8002388:	8809      	ldrh	r1, [r1, #0]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4299      	cmp	r1, r3
 800238e:	d24b      	bcs.n	8002428 <find_reslut+0x1a4>
 8002390:	0001      	movs	r1, r0
 8002392:	0010      	movs	r0, r2
 8002394:	f7ff f866 	bl	8001464 <led_display>
			led_update();
 8002398:	f7fe f9da 	bl	8000750 <led_update>
		POS pos[2 + findC];
 800239c:	782b      	ldrb	r3, [r5, #0]
 800239e:	466d      	mov	r5, sp
 80023a0:	005a      	lsls	r2, r3, #1
 80023a2:	320b      	adds	r2, #11
 80023a4:	08d2      	lsrs	r2, r2, #3
 80023a6:	00d2      	lsls	r2, r2, #3
 80023a8:	1aaa      	subs	r2, r5, r2
 80023aa:	4695      	mov	sp, r2
		pos[0].x = 0, pos[0].y = 1;
 80023ac:	2200      	movs	r2, #0
		POS pos[2 + findC];
 80023ae:	ac02      	add	r4, sp, #8
		pos[0].x = 0, pos[0].y = 1;
 80023b0:	7022      	strb	r2, [r4, #0]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023b2:	70a2      	strb	r2, [r4, #2]
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <find_reslut+0x204>)
		pos[0].x = 0, pos[0].y = 1;
 80023b6:	2101      	movs	r1, #1
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023b8:	7812      	ldrb	r2, [r2, #0]
		pos[0].x = 0, pos[0].y = 1;
 80023ba:	7061      	strb	r1, [r4, #1]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023bc:	3202      	adds	r2, #2
 80023be:	70e2      	strb	r2, [r4, #3]
		char bf[findC][20];
 80023c0:	2214      	movs	r2, #20
 80023c2:	4353      	muls	r3, r2
 80023c4:	466a      	mov	r2, sp
 80023c6:	3307      	adds	r3, #7
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	469d      	mov	sp, r3
 80023d0:	ab02      	add	r3, sp, #8
 80023d2:	603b      	str	r3, [r7, #0]
		for(uint8_t i = 0 ; i < findC ; i++){
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <find_reslut+0x1fc>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	429e      	cmp	r6, r3
 80023da:	d32b      	bcc.n	8002434 <find_reslut+0x1b0>
		char* array[2 + findC];
 80023dc:	4669      	mov	r1, sp
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	320f      	adds	r2, #15
 80023e2:	08d2      	lsrs	r2, r2, #3
 80023e4:	00d2      	lsls	r2, r2, #3
 80023e6:	1a8a      	subs	r2, r1, r2
 80023e8:	4695      	mov	sp, r2
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80023ea:	492c      	ldr	r1, [pc, #176]	; (800249c <find_reslut+0x218>)
		char* array[2 + findC];
 80023ec:	aa02      	add	r2, sp, #8
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d100      	bne.n	80023f4 <find_reslut+0x170>
 80023f2:	492b      	ldr	r1, [pc, #172]	; (80024a0 <find_reslut+0x21c>)
 80023f4:	2014      	movs	r0, #20
 80023f6:	0016      	movs	r6, r2
 80023f8:	4358      	muls	r0, r3
 80023fa:	6011      	str	r1, [r2, #0]
		array[1] = ">";
 80023fc:	4929      	ldr	r1, [pc, #164]	; (80024a4 <find_reslut+0x220>)
 80023fe:	3608      	adds	r6, #8
 8002400:	6051      	str	r1, [r2, #4]
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	1808      	adds	r0, r1, r0
 8002406:	4288      	cmp	r0, r1
 8002408:	d134      	bne.n	8002474 <find_reslut+0x1f0>
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
 800240a:	2101      	movs	r1, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <find_reslut+0x190>
 8002410:	3302      	adds	r3, #2
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	9100      	str	r1, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	0020      	movs	r0, r4
 800241a:	4923      	ldr	r1, [pc, #140]	; (80024a8 <find_reslut+0x224>)
 800241c:	f7fe ff7a 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8002420:	f7fe fd0e 	bl	8000e40 <SSD1306_UpdateScreen>
 8002424:	46ad      	mov	sp, r5
 8002426:	e74d      	b.n	80022c4 <find_reslut+0x40>
			else led_color(testxy(find_part[sel].temp.x, find_part[sel].temp.y), 0, 0, 0);
 8002428:	2300      	movs	r3, #0
 800242a:	001a      	movs	r2, r3
 800242c:	0019      	movs	r1, r3
 800242e:	f7fe f983 	bl	8000738 <led_color>
 8002432:	e7b1      	b.n	8002398 <find_reslut+0x114>
			sprintf(bf[i], "%s(%s/%d,%d)", find_part[i].name, ptCate[find_part[i].cate - 1], find_part[i].temp.x + 1, find_part[i].temp.y + 1);
 8002434:	2105      	movs	r1, #5
 8002436:	2014      	movs	r0, #20
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0132      	lsls	r2, r6, #4
 800243c:	189a      	adds	r2, r3, r2
 800243e:	7913      	ldrb	r3, [r2, #4]
 8002440:	4370      	muls	r0, r6
 8002442:	3b01      	subs	r3, #1
 8002444:	434b      	muls	r3, r1
 8002446:	4919      	ldr	r1, [pc, #100]	; (80024ac <find_reslut+0x228>)
 8002448:	18cb      	adds	r3, r1, r3
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	1808      	adds	r0, r1, r0
 800244e:	7b11      	ldrb	r1, [r2, #12]
 8002450:	3101      	adds	r1, #1
 8002452:	9101      	str	r1, [sp, #4]
 8002454:	7ad1      	ldrb	r1, [r2, #11]
 8002456:	3101      	adds	r1, #1
 8002458:	9100      	str	r1, [sp, #0]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	4914      	ldr	r1, [pc, #80]	; (80024b0 <find_reslut+0x22c>)
 800245e:	f003 f9bd 	bl	80057dc <siprintf>
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 8002462:	2201      	movs	r2, #1
 8002464:	0073      	lsls	r3, r6, #1
 8002466:	18e3      	adds	r3, r4, r3
 8002468:	711a      	strb	r2, [r3, #4]
 800246a:	1cb2      	adds	r2, r6, #2
		for(uint8_t i = 0 ; i < findC ; i++){
 800246c:	3601      	adds	r6, #1
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 800246e:	715a      	strb	r2, [r3, #5]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002470:	b2f6      	uxtb	r6, r6
 8002472:	e7af      	b.n	80023d4 <find_reslut+0x150>
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 8002474:	c602      	stmia	r6!, {r1}
 8002476:	3114      	adds	r1, #20
 8002478:	e7c5      	b.n	8002406 <find_reslut+0x182>
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	200009e8 	.word	0x200009e8
 8002480:	200009cc 	.word	0x200009cc
 8002484:	20000e0d 	.word	0x20000e0d
 8002488:	20000dfb 	.word	0x20000dfb
 800248c:	20000e0f 	.word	0x20000e0f
 8002490:	20000c28 	.word	0x20000c28
 8002494:	200009dc 	.word	0x200009dc
 8002498:	200009de 	.word	0x200009de
 800249c:	08006a8d 	.word	0x08006a8d
 80024a0:	08006a9e 	.word	0x08006a9e
 80024a4:	080068fb 	.word	0x080068fb
 80024a8:	08006ab7 	.word	0x08006ab7
 80024ac:	08006c20 	.word	0x08006c20
 80024b0:	08006aaa 	.word	0x08006aaa

080024b4 <find_mode>:
void find_mode(void){
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80024b6:	4c2a      	ldr	r4, [pc, #168]	; (8002560 <find_mode+0xac>)
void find_mode(void){
 80024b8:	b08b      	sub	sp, #44	; 0x2c
	if(!firF){
 80024ba:	7823      	ldrb	r3, [r4, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d12b      	bne.n	8002518 <find_mode+0x64>
		POS pos = {3, 4};
 80024c0:	4928      	ldr	r1, [pc, #160]	; (8002564 <find_mode+0xb0>)
		firF = 1;
 80024c2:	3301      	adds	r3, #1
		POS pos = {3, 4};
 80024c4:	3110      	adds	r1, #16
 80024c6:	2202      	movs	r2, #2
 80024c8:	a803      	add	r0, sp, #12
		firF = 1;
 80024ca:	7023      	strb	r3, [r4, #0]
		POS pos = {3, 4};
 80024cc:	f003 f842 	bl	8005554 <memcpy>
		sprintf(bf, find_name[0] > 0 ? find_name : "Input find name");
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <find_mode+0xb4>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	780b      	ldrb	r3, [r1, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d100      	bne.n	80024dc <find_mode+0x28>
 80024da:	4924      	ldr	r1, [pc, #144]	; (800256c <find_mode+0xb8>)
 80024dc:	ad05      	add	r5, sp, #20
 80024de:	0028      	movs	r0, r5
 80024e0:	f003 f97c 	bl	80057dc <siprintf>
		char* array = { bf };
 80024e4:	9504      	str	r5, [sp, #16]
		array_puts(&pos, "#Find", &array, 1, sizeof(pos) / 2);
 80024e6:	2501      	movs	r5, #1
 80024e8:	4921      	ldr	r1, [pc, #132]	; (8002570 <find_mode+0xbc>)
 80024ea:	002b      	movs	r3, r5
 80024ec:	aa04      	add	r2, sp, #16
 80024ee:	a803      	add	r0, sp, #12
 80024f0:	9500      	str	r5, [sp, #0]
 80024f2:	f7fe ff0f 	bl	8001314 <array_puts>
		SSD1306_DrawRectangle(pos.x * 6 - 2, pos.y * 8 - 3, strlen("Input find name") * 6 + 3, 12, 1);
 80024f6:	466b      	mov	r3, sp
 80024f8:	7b59      	ldrb	r1, [r3, #13]
 80024fa:	7b18      	ldrb	r0, [r3, #12]
 80024fc:	2306      	movs	r3, #6
 80024fe:	4358      	muls	r0, r3
 8002500:	00c9      	lsls	r1, r1, #3
 8002502:	3903      	subs	r1, #3
 8002504:	3802      	subs	r0, #2
 8002506:	225d      	movs	r2, #93	; 0x5d
 8002508:	b289      	uxth	r1, r1
 800250a:	b280      	uxth	r0, r0
 800250c:	18db      	adds	r3, r3, r3
 800250e:	9500      	str	r5, [sp, #0]
 8002510:	f7fe fbf9 	bl	8000d06 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 8002514:	f7fe fc94 	bl	8000e40 <SSD1306_UpdateScreen>
	if(read_sw()){
 8002518:	f7fe ff86 	bl	8001428 <read_sw>
 800251c:	2800      	cmp	r0, #0
 800251e:	d00e      	beq.n	800253e <find_mode+0x8a>
		if(!screenState) { find_name = input_string("#input part name"); firF = 0; }
 8002520:	4e14      	ldr	r6, [pc, #80]	; (8002574 <find_mode+0xc0>)
 8002522:	4d11      	ldr	r5, [pc, #68]	; (8002568 <find_mode+0xb4>)
 8002524:	7837      	ldrb	r7, [r6, #0]
 8002526:	2f00      	cmp	r7, #0
 8002528:	d10b      	bne.n	8002542 <find_mode+0x8e>
 800252a:	4813      	ldr	r0, [pc, #76]	; (8002578 <find_mode+0xc4>)
 800252c:	f7ff f888 	bl	8001640 <input_string>
 8002530:	7027      	strb	r7, [r4, #0]
 8002532:	6028      	str	r0, [r5, #0]
		screenState = find_name[0] > 0;
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	4193      	sbcs	r3, r2
 800253c:	7033      	strb	r3, [r6, #0]
}
 800253e:	b00b      	add	sp, #44	; 0x2c
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ ledM = 1; find_reslut(find_name); ledM = 0; }
 8002542:	2301      	movs	r3, #1
 8002544:	2400      	movs	r4, #0
 8002546:	4f0d      	ldr	r7, [pc, #52]	; (800257c <find_mode+0xc8>)
 8002548:	6828      	ldr	r0, [r5, #0]
 800254a:	703b      	strb	r3, [r7, #0]
 800254c:	f7ff fe9a 	bl	8002284 <find_reslut>
			{ free(find_name); find_name = NULL; }
 8002550:	6828      	ldr	r0, [r5, #0]
			{ ledM = 1; find_reslut(find_name); ledM = 0; }
 8002552:	703c      	strb	r4, [r7, #0]
			{ free(find_name); find_name = NULL; }
 8002554:	f002 fff4 	bl	8005540 <free>
 8002558:	602c      	str	r4, [r5, #0]
			init_value();
 800255a:	f7fe fe57 	bl	800120c <init_value>
 800255e:	e7e9      	b.n	8002534 <find_mode+0x80>
 8002560:	20000018 	.word	0x20000018
 8002564:	08005eb4 	.word	0x08005eb4
 8002568:	200009d0 	.word	0x200009d0
 800256c:	08006ac4 	.word	0x08006ac4
 8002570:	08006ad4 	.word	0x08006ad4
 8002574:	20000dfa 	.word	0x20000dfa
 8002578:	08006ada 	.word	0x08006ada
 800257c:	200009e0 	.word	0x200009e0

08002580 <partition_save>:
void partition_save(void){
 8002580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002582:	b093      	sub	sp, #76	; 0x4c
	memset(&spart, 0, sizeof(struct Part));
 8002584:	ac09      	add	r4, sp, #36	; 0x24
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	0020      	movs	r0, r4
 800258c:	f002 fffe 	bl	800558c <memset>
	ptionC = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	4a64      	ldr	r2, [pc, #400]	; (8002724 <partition_save+0x1a4>)
 8002594:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <partition_save+0x1a8>)
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	0019      	movs	r1, r3
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <partition_save+0x1ac>)
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d216      	bcs.n	80025d6 <partition_save+0x56>
	if(spart.cate == 0) spart = ptfirst;
 80025a8:	7922      	ldrb	r2, [r4, #4]
 80025aa:	2a00      	cmp	r2, #0
 80025ac:	d105      	bne.n	80025ba <partition_save+0x3a>
 80025ae:	0021      	movs	r1, r4
 80025b0:	4a5f      	ldr	r2, [pc, #380]	; (8002730 <partition_save+0x1b0>)
 80025b2:	ca19      	ldmia	r2!, {r0, r3, r4}
 80025b4:	c119      	stmia	r1!, {r0, r3, r4}
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	600b      	str	r3, [r1, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025ba:	9b03      	ldr	r3, [sp, #12]
 80025bc:	9a02      	ldr	r2, [sp, #8]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d22d      	bcs.n	800261e <partition_save+0x9e>
	while(!read_sw()){
 80025c2:	f7fe ff31 	bl	8001428 <read_sw>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d100      	bne.n	80025cc <partition_save+0x4c>
 80025ca:	e06a      	b.n	80026a2 <partition_save+0x122>
	logShift(3);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff f90d 	bl	80017ec <logShift>
}
 80025d2:	b013      	add	sp, #76	; 0x4c
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <partition_save+0x1a8>)
 80025d8:	7818      	ldrb	r0, [r3, #0]
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 80025da:	2305      	movs	r3, #5
 80025dc:	1a5f      	subs	r7, r3, r1
 80025de:	3301      	adds	r3, #1
 80025e0:	435f      	muls	r7, r3
 80025e2:	b2fb      	uxtb	r3, r7
 80025e4:	9303      	str	r3, [sp, #12]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <partition_save+0x1ac>)
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	4282      	cmp	r2, r0
 80025ec:	d202      	bcs.n	80025f4 <partition_save+0x74>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025ee:	3101      	adds	r1, #1
 80025f0:	b2c9      	uxtb	r1, r1
 80025f2:	e7d4      	b.n	800259e <partition_save+0x1e>
			if(pt[testxy(j, i)].cate != 0) spart = pt[testxy(j, i)];
 80025f4:	9b03      	ldr	r3, [sp, #12]
 80025f6:	18c2      	adds	r2, r0, r3
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	4b4e      	ldr	r3, [pc, #312]	; (8002734 <partition_save+0x1b4>)
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	189a      	adds	r2, r3, r2
 8002600:	7913      	ldrb	r3, [r2, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <partition_save+0x90>
 8002606:	0023      	movs	r3, r4
 8002608:	cae0      	ldmia	r2!, {r5, r6, r7}
 800260a:	c3e0      	stmia	r3!, {r5, r6, r7}
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	601a      	str	r2, [r3, #0]
			ptionC++;
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <partition_save+0x1a4>)
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002612:	3001      	adds	r0, #1
			ptionC++;
 8002614:	781a      	ldrb	r2, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002616:	b2c0      	uxtb	r0, r0
			ptionC++;
 8002618:	3201      	adds	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800261c:	e7e3      	b.n	80025e6 <partition_save+0x66>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 800261e:	2305      	movs	r3, #5
 8002620:	9902      	ldr	r1, [sp, #8]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002622:	4a41      	ldr	r2, [pc, #260]	; (8002728 <partition_save+0x1a8>)
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002624:	1a59      	subs	r1, r3, r1
 8002626:	3301      	adds	r3, #1
 8002628:	4359      	muls	r1, r3
			for(uint8_t j = min.x ; j <= max.x ; j++){
 800262a:	7812      	ldrb	r2, [r2, #0]
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 800262c:	b2cb      	uxtb	r3, r1
 800262e:	9305      	str	r3, [sp, #20]
				if(testxy(j, i) != testxy(spart.temp.x, spart.temp.y)){
 8002630:	ac09      	add	r4, sp, #36	; 0x24
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <partition_save+0x1ac>)
 8002634:	7819      	ldrb	r1, [r3, #0]
 8002636:	4291      	cmp	r1, r2
 8002638:	d204      	bcs.n	8002644 <partition_save+0xc4>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800263a:	9b02      	ldr	r3, [sp, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	e7ba      	b.n	80025ba <partition_save+0x3a>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002644:	9b05      	ldr	r3, [sp, #20]
 8002646:	7b20      	ldrb	r0, [r4, #12]
 8002648:	18d1      	adds	r1, r2, r3
 800264a:	2305      	movs	r3, #5
 800264c:	1a18      	subs	r0, r3, r0
 800264e:	3301      	adds	r3, #1
 8002650:	4358      	muls	r0, r3
 8002652:	7ae5      	ldrb	r5, [r4, #11]
 8002654:	b2c9      	uxtb	r1, r1
 8002656:	1940      	adds	r0, r0, r5
				if(testxy(j, i) != testxy(spart.temp.x, spart.temp.y)){
 8002658:	b2c0      	uxtb	r0, r0
 800265a:	4288      	cmp	r0, r1
 800265c:	d016      	beq.n	800268c <partition_save+0x10c>
					start_check++;
 800265e:	4836      	ldr	r0, [pc, #216]	; (8002738 <partition_save+0x1b8>)
 8002660:	7805      	ldrb	r5, [r0, #0]
 8002662:	3501      	adds	r5, #1
 8002664:	b2eb      	uxtb	r3, r5
 8002666:	7003      	strb	r3, [r0, #0]
 8002668:	9304      	str	r3, [sp, #16]
					pt[testxy(j, i)] = spart;
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <partition_save+0x1b4>)
 800266c:	0108      	lsls	r0, r1, #4
 800266e:	1818      	adds	r0, r3, r0
 8002670:	0023      	movs	r3, r4
 8002672:	cbe0      	ldmia	r3!, {r5, r6, r7}
 8002674:	c0e0      	stmia	r0!, {r5, r6, r7}
 8002676:	681b      	ldr	r3, [r3, #0]
					pt[testxy(j, i)].pos = start_check;
 8002678:	010e      	lsls	r6, r1, #4
					pt[testxy(j, i)] = spart;
 800267a:	6003      	str	r3, [r0, #0]
					pt[testxy(j, i)].pos = start_check;
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <partition_save+0x1b4>)
 800267e:	469c      	mov	ip, r3
 8002680:	9b04      	ldr	r3, [sp, #16]
 8002682:	4466      	add	r6, ip
 8002684:	72b3      	strb	r3, [r6, #10]
					pt[testxy(j, i)].temp.y = i;
 8002686:	9b02      	ldr	r3, [sp, #8]
					pt[testxy(j, i)].temp.x = j;
 8002688:	72f2      	strb	r2, [r6, #11]
					pt[testxy(j, i)].temp.y = i;
 800268a:	7003      	strb	r3, [r0, #0]
				pt[testxy(j, i)].max *= ptionC;
 800268c:	4829      	ldr	r0, [pc, #164]	; (8002734 <partition_save+0x1b4>)
 800268e:	0109      	lsls	r1, r1, #4
 8002690:	1841      	adds	r1, r0, r1
 8002692:	4824      	ldr	r0, [pc, #144]	; (8002724 <partition_save+0x1a4>)
 8002694:	890d      	ldrh	r5, [r1, #8]
 8002696:	7800      	ldrb	r0, [r0, #0]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002698:	3201      	adds	r2, #1
				pt[testxy(j, i)].max *= ptionC;
 800269a:	4368      	muls	r0, r5
			for(uint8_t j = min.x ; j <= max.x ; j++){
 800269c:	b2d2      	uxtb	r2, r2
				pt[testxy(j, i)].max *= ptionC;
 800269e:	8108      	strh	r0, [r1, #8]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 80026a0:	e7c7      	b.n	8002632 <partition_save+0xb2>
		POS pos = {0, 3};
 80026a2:	2203      	movs	r2, #3
 80026a4:	ab04      	add	r3, sp, #16
 80026a6:	7318      	strb	r0, [r3, #12]
 80026a8:	735a      	strb	r2, [r3, #13]
		sprintf(bf, "Total number:%d", ptionC);
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <partition_save+0x1a4>)
 80026ac:	ac0d      	add	r4, sp, #52	; 0x34
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	4922      	ldr	r1, [pc, #136]	; (800273c <partition_save+0x1bc>)
 80026b2:	0020      	movs	r0, r4
 80026b4:	f003 f892 	bl	80057dc <siprintf>
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 80026b8:	2301      	movs	r3, #1
 80026ba:	aa08      	add	r2, sp, #32
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4920      	ldr	r1, [pc, #128]	; (8002740 <partition_save+0x1c0>)
 80026c0:	a807      	add	r0, sp, #28
		char* array = { bf };
 80026c2:	9408      	str	r4, [sp, #32]
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 80026c4:	f7fe fe26 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 80026c8:	f7fe fbba 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 80026cc:	f7fe f86a 	bl	80007a4 <led_clear>
		if(ledC < 500)
 80026d0:	23fa      	movs	r3, #250	; 0xfa
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <partition_save+0x1c4>)
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	8812      	ldrh	r2, [r2, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d21f      	bcs.n	800271c <partition_save+0x19c>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 80026dc:	4f12      	ldr	r7, [pc, #72]	; (8002728 <partition_save+0x1a8>)
 80026de:	787c      	ldrb	r4, [r7, #1]
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <partition_save+0x1ac>)
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d202      	bcs.n	80026ee <partition_save+0x16e>
		led_update();
 80026e8:	f7fe f832 	bl	8000750 <led_update>
 80026ec:	e769      	b.n	80025c2 <partition_save+0x42>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 80026ee:	2305      	movs	r3, #5
 80026f0:	1b1e      	subs	r6, r3, r4
 80026f2:	3301      	adds	r3, #1
 80026f4:	435e      	muls	r6, r3
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80026f6:	783d      	ldrb	r5, [r7, #0]
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 80026f8:	b2f6      	uxtb	r6, r6
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <partition_save+0x1ac>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	42ab      	cmp	r3, r5
 8002700:	d202      	bcs.n	8002708 <partition_save+0x188>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 8002702:	3401      	adds	r4, #1
 8002704:	b2e4      	uxtb	r4, r4
 8002706:	e7eb      	b.n	80026e0 <partition_save+0x160>
						led_color(testxy(j, i), 0, 4, 0);
 8002708:	2300      	movs	r3, #0
 800270a:	19a8      	adds	r0, r5, r6
 800270c:	2204      	movs	r2, #4
 800270e:	0019      	movs	r1, r3
 8002710:	b2c0      	uxtb	r0, r0
					for(uint8_t j = min.x ; j <= max.x ; j++)
 8002712:	3501      	adds	r5, #1
						led_color(testxy(j, i), 0, 4, 0);
 8002714:	f7fe f810 	bl	8000738 <led_color>
					for(uint8_t j = min.x ; j <= max.x ; j++)
 8002718:	b2ed      	uxtb	r5, r5
 800271a:	e7ee      	b.n	80026fa <partition_save+0x17a>
		else led_clear();
 800271c:	f7fe f842 	bl	80007a4 <led_clear>
 8002720:	e7e2      	b.n	80026e8 <partition_save+0x168>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	20000df4 	.word	0x20000df4
 8002728:	200009e4 	.word	0x200009e4
 800272c:	200009e2 	.word	0x200009e2
 8002730:	20000de4 	.word	0x20000de4
 8002734:	200009e8 	.word	0x200009e8
 8002738:	20000e0d 	.word	0x20000e0d
 800273c:	08006aeb 	.word	0x08006aeb
 8002740:	08006afb 	.word	0x08006afb
 8002744:	200009de 	.word	0x200009de

08002748 <partition_mode>:
void partition_mode(void){
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800274a:	4c6d      	ldr	r4, [pc, #436]	; (8002900 <partition_mode+0x1b8>)
void partition_mode(void){
 800274c:	b093      	sub	sp, #76	; 0x4c
	if(!firF){
 800274e:	7823      	ldrb	r3, [r4, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <partition_mode+0xbc>
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002754:	496b      	ldr	r1, [pc, #428]	; (8002904 <partition_mode+0x1bc>)
		firF = 1;
 8002756:	3301      	adds	r3, #1
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002758:	3112      	adds	r1, #18
 800275a:	2206      	movs	r2, #6
 800275c:	a803      	add	r0, sp, #12
		firF = 1;
 800275e:	7023      	strb	r3, [r4, #0]
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002760:	f002 fef8 	bl	8005554 <memcpy>
		sprintf(bf[0], !screenState ? "Start (%d,%d)" : "End (%d,%d)", temp.x + 1, temp.y + 1);
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <partition_mode+0x1c0>)
 8002766:	4969      	ldr	r1, [pc, #420]	; (800290c <partition_mode+0x1c4>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d000      	beq.n	8002770 <partition_mode+0x28>
 800276e:	4968      	ldr	r1, [pc, #416]	; (8002910 <partition_mode+0x1c8>)
 8002770:	4a68      	ldr	r2, [pc, #416]	; (8002914 <partition_mode+0x1cc>)
 8002772:	a808      	add	r0, sp, #32
 8002774:	7853      	ldrb	r3, [r2, #1]
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	3201      	adds	r2, #1
 800277c:	f003 f82e 	bl	80057dc <siprintf>
		sprintf(bf[1], pt[curxy()].cate != 0 ? "%s(%s/%d/%d)" : "(NONE)", pt[curxy()].name, ptCate[pt[curxy()].cate - 1], pt[curxy()].store, pt[curxy()].max);
 8002780:	f7fe fd38 	bl	80011f4 <curxy>
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <partition_mode+0x1d0>)
 8002786:	0100      	lsls	r0, r0, #4
 8002788:	181b      	adds	r3, r3, r0
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	4963      	ldr	r1, [pc, #396]	; (800291c <partition_mode+0x1d4>)
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <partition_mode+0x4c>
 8002792:	4963      	ldr	r1, [pc, #396]	; (8002920 <partition_mode+0x1d8>)
 8002794:	2205      	movs	r2, #5
 8002796:	3b01      	subs	r3, #1
 8002798:	435a      	muls	r2, r3
 800279a:	4e5f      	ldr	r6, [pc, #380]	; (8002918 <partition_mode+0x1d0>)
 800279c:	4b61      	ldr	r3, [pc, #388]	; (8002924 <partition_mode+0x1dc>)
 800279e:	ad0d      	add	r5, sp, #52	; 0x34
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	1832      	adds	r2, r6, r0
 80027a4:	8917      	ldrh	r7, [r2, #8]
 80027a6:	9701      	str	r7, [sp, #4]
 80027a8:	88d2      	ldrh	r2, [r2, #6]
 80027aa:	9200      	str	r2, [sp, #0]
 80027ac:	5832      	ldr	r2, [r6, r0]
 80027ae:	0028      	movs	r0, r5
 80027b0:	f003 f814 	bl	80057dc <siprintf>
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 80027b4:	4b54      	ldr	r3, [pc, #336]	; (8002908 <partition_mode+0x1c0>)
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <partition_mode+0x1e0>)
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d000      	beq.n	80027c0 <partition_mode+0x78>
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <partition_mode+0x1e4>)
 80027c0:	9305      	str	r3, [sp, #20]
 80027c2:	ab08      	add	r3, sp, #32
 80027c4:	9306      	str	r3, [sp, #24]
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 80027c6:	2303      	movs	r3, #3
 80027c8:	4959      	ldr	r1, [pc, #356]	; (8002930 <partition_mode+0x1e8>)
 80027ca:	aa05      	add	r2, sp, #20
 80027cc:	a803      	add	r0, sp, #12
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	3b02      	subs	r3, #2
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 80027d2:	9507      	str	r5, [sp, #28]
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 80027d4:	f7fe fd9e 	bl	8001314 <array_puts>
		led_clear();
 80027d8:	2500      	movs	r5, #0
		SSD1306_UpdateScreen();
 80027da:	f7fe fb31 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 80027de:	f7fd ffe1 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80027e2:	0128      	lsls	r0, r5, #4
 80027e4:	b2e9      	uxtb	r1, r5
 80027e6:	1830      	adds	r0, r6, r0
 80027e8:	3501      	adds	r5, #1
 80027ea:	f7fe fe3b 	bl	8001464 <led_display>
 80027ee:	2d24      	cmp	r5, #36	; 0x24
 80027f0:	d1f7      	bne.n	80027e2 <partition_mode+0x9a>
		led_color(curxy(), 4, 4, 4);
 80027f2:	f7fe fcff 	bl	80011f4 <curxy>
 80027f6:	2304      	movs	r3, #4
 80027f8:	001a      	movs	r2, r3
 80027fa:	0019      	movs	r1, r3
 80027fc:	f7fd ff9c 	bl	8000738 <led_color>
		led_update();
 8002800:	f7fd ffa6 	bl	8000750 <led_update>
	if(cnt > 150){
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <partition_mode+0x1ec>)
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	2a96      	cmp	r2, #150	; 0x96
 800280a:	d927      	bls.n	800285c <partition_mode+0x114>
		cnt = 0;
 800280c:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800280e:	484a      	ldr	r0, [pc, #296]	; (8002938 <partition_mode+0x1f0>)
		cnt = 0;
 8002810:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002812:	8842      	ldrh	r2, [r0, #2]
 8002814:	4949      	ldr	r1, [pc, #292]	; (800293c <partition_mode+0x1f4>)
 8002816:	428a      	cmp	r2, r1
 8002818:	d935      	bls.n	8002886 <partition_mode+0x13e>
 800281a:	4d3e      	ldr	r5, [pc, #248]	; (8002914 <partition_mode+0x1cc>)
 800281c:	786b      	ldrb	r3, [r5, #1]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d801      	bhi.n	8002826 <partition_mode+0xde>
 8002822:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002824:	b2db      	uxtb	r3, r3
 8002826:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002828:	8803      	ldrh	r3, [r0, #0]
 800282a:	2096      	movs	r0, #150	; 0x96
 800282c:	0040      	lsls	r0, r0, #1
 800282e:	4283      	cmp	r3, r0
 8002830:	d233      	bcs.n	800289a <partition_mode+0x152>
 8002832:	4838      	ldr	r0, [pc, #224]	; (8002914 <partition_mode+0x1cc>)
 8002834:	7801      	ldrb	r1, [r0, #0]
 8002836:	2900      	cmp	r1, #0
 8002838:	d001      	beq.n	800283e <partition_mode+0xf6>
 800283a:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800283c:	b2c9      	uxtb	r1, r1
 800283e:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 8002840:	21c8      	movs	r1, #200	; 0xc8
 8002842:	3a2d      	subs	r2, #45	; 0x2d
 8002844:	3aff      	subs	r2, #255	; 0xff
 8002846:	b292      	uxth	r2, r2
 8002848:	0109      	lsls	r1, r1, #4
 800284a:	428a      	cmp	r2, r1
 800284c:	d804      	bhi.n	8002858 <partition_mode+0x110>
 800284e:	3b2d      	subs	r3, #45	; 0x2d
 8002850:	3bff      	subs	r3, #255	; 0xff
 8002852:	b29b      	uxth	r3, r3
 8002854:	428b      	cmp	r3, r1
 8002856:	d901      	bls.n	800285c <partition_mode+0x114>
 8002858:	2300      	movs	r3, #0
 800285a:	7023      	strb	r3, [r4, #0]
	if(read_sw()){
 800285c:	f7fe fde4 	bl	8001428 <read_sw>
 8002860:	2800      	cmp	r0, #0
 8002862:	d00e      	beq.n	8002882 <partition_mode+0x13a>
		if(!screenState) { ptionS = temp; firF = 0; }
 8002864:	4d28      	ldr	r5, [pc, #160]	; (8002908 <partition_mode+0x1c0>)
 8002866:	492b      	ldr	r1, [pc, #172]	; (8002914 <partition_mode+0x1cc>)
 8002868:	782f      	ldrb	r7, [r5, #0]
 800286a:	4e35      	ldr	r6, [pc, #212]	; (8002940 <partition_mode+0x1f8>)
 800286c:	2f00      	cmp	r7, #0
 800286e:	d11c      	bne.n	80028aa <partition_mode+0x162>
 8002870:	2202      	movs	r2, #2
 8002872:	0030      	movs	r0, r6
 8002874:	f002 fe6e 	bl	8005554 <memcpy>
 8002878:	7027      	strb	r7, [r4, #0]
		screenState = !screenState;
 800287a:	782b      	ldrb	r3, [r5, #0]
 800287c:	425a      	negs	r2, r3
 800287e:	4153      	adcs	r3, r2
 8002880:	702b      	strb	r3, [r5, #0]
}
 8002882:	b013      	add	sp, #76	; 0x4c
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002886:	2396      	movs	r3, #150	; 0x96
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	429a      	cmp	r2, r3
 800288c:	d2cc      	bcs.n	8002828 <partition_mode+0xe0>
 800288e:	4d21      	ldr	r5, [pc, #132]	; (8002914 <partition_mode+0x1cc>)
 8002890:	786b      	ldrb	r3, [r5, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0c7      	beq.n	8002826 <partition_mode+0xde>
 8002896:	3b01      	subs	r3, #1
 8002898:	e7c4      	b.n	8002824 <partition_mode+0xdc>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800289a:	428b      	cmp	r3, r1
 800289c:	d9d0      	bls.n	8002840 <partition_mode+0xf8>
 800289e:	481d      	ldr	r0, [pc, #116]	; (8002914 <partition_mode+0x1cc>)
 80028a0:	7801      	ldrb	r1, [r0, #0]
 80028a2:	2904      	cmp	r1, #4
 80028a4:	d8cb      	bhi.n	800283e <partition_mode+0xf6>
 80028a6:	3101      	adds	r1, #1
 80028a8:	e7c8      	b.n	800283c <partition_mode+0xf4>
			ptionE = temp;
 80028aa:	4c26      	ldr	r4, [pc, #152]	; (8002944 <partition_mode+0x1fc>)
 80028ac:	2202      	movs	r2, #2
 80028ae:	0020      	movs	r0, r4
 80028b0:	f002 fe50 	bl	8005554 <memcpy>
			min.x = ptionS.x > ptionE.x ? ptionE.x : ptionS.x;
 80028b4:	7830      	ldrb	r0, [r6, #0]
 80028b6:	7821      	ldrb	r1, [r4, #0]
 80028b8:	1c03      	adds	r3, r0, #0
 80028ba:	4288      	cmp	r0, r1
 80028bc:	d900      	bls.n	80028c0 <partition_mode+0x178>
 80028be:	1c0b      	adds	r3, r1, #0
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <partition_mode+0x200>)
 80028c2:	7013      	strb	r3, [r2, #0]
			min.y = ptionS.y > ptionE.y ? ptionE.y : ptionS.y;
 80028c4:	7872      	ldrb	r2, [r6, #1]
 80028c6:	7863      	ldrb	r3, [r4, #1]
 80028c8:	1c14      	adds	r4, r2, #0
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d900      	bls.n	80028d0 <partition_mode+0x188>
 80028ce:	1c1c      	adds	r4, r3, #0
 80028d0:	4e1d      	ldr	r6, [pc, #116]	; (8002948 <partition_mode+0x200>)
 80028d2:	7074      	strb	r4, [r6, #1]
			max.x = ptionS.x > ptionE.x ? ptionS.x : ptionE.x;
 80028d4:	4c1d      	ldr	r4, [pc, #116]	; (800294c <partition_mode+0x204>)
 80028d6:	1c06      	adds	r6, r0, #0
 80028d8:	4288      	cmp	r0, r1
 80028da:	d200      	bcs.n	80028de <partition_mode+0x196>
 80028dc:	1c0e      	adds	r6, r1, #0
 80028de:	7026      	strb	r6, [r4, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 80028e0:	1c11      	adds	r1, r2, #0
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d200      	bcs.n	80028e8 <partition_mode+0x1a0>
 80028e6:	1c19      	adds	r1, r3, #0
			{ ledM = 1; partition_save(); ledM = 0; }
 80028e8:	2301      	movs	r3, #1
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 80028ea:	7061      	strb	r1, [r4, #1]
			{ ledM = 1; partition_save(); ledM = 0; }
 80028ec:	4c18      	ldr	r4, [pc, #96]	; (8002950 <partition_mode+0x208>)
 80028ee:	7023      	strb	r3, [r4, #0]
 80028f0:	f7ff fe46 	bl	8002580 <partition_save>
 80028f4:	2300      	movs	r3, #0
 80028f6:	7023      	strb	r3, [r4, #0]
			init_value();
 80028f8:	f7fe fc88 	bl	800120c <init_value>
 80028fc:	e7bd      	b.n	800287a <partition_mode+0x132>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000018 	.word	0x20000018
 8002904:	08005eb4 	.word	0x08005eb4
 8002908:	20000df9 	.word	0x20000df9
 800290c:	08006b06 	.word	0x08006b06
 8002910:	08006b14 	.word	0x08006b14
 8002914:	20000e0f 	.word	0x20000e0f
 8002918:	200009e8 	.word	0x200009e8
 800291c:	08006b20 	.word	0x08006b20
 8002920:	08006b9c 	.word	0x08006b9c
 8002924:	08006c20 	.word	0x08006c20
 8002928:	08006b2d 	.word	0x08006b2d
 800292c:	08006b40 	.word	0x08006b40
 8002930:	08006afb 	.word	0x08006afb
 8002934:	200009ca 	.word	0x200009ca
 8002938:	200009be 	.word	0x200009be
 800293c:	00000dac 	.word	0x00000dac
 8002940:	20000df7 	.word	0x20000df7
 8002944:	20000df5 	.word	0x20000df5
 8002948:	200009e4 	.word	0x200009e4
 800294c:	200009e2 	.word	0x200009e2
 8002950:	200009e0 	.word	0x200009e0

08002954 <log_detail>:
void log_detail(uint8_t i){
 8002954:	b510      	push	{r4, lr}
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 8002956:	4912      	ldr	r1, [pc, #72]	; (80029a0 <log_detail+0x4c>)
void log_detail(uint8_t i){
 8002958:	b088      	sub	sp, #32
 800295a:	0004      	movs	r4, r0
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 800295c:	2206      	movs	r2, #6
 800295e:	3118      	adds	r1, #24
 8002960:	a803      	add	r0, sp, #12
 8002962:	f002 fdf7 	bl	8005554 <memcpy>
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 8002966:	204a      	movs	r0, #74	; 0x4a
 8002968:	4360      	muls	r0, r4
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <log_detail+0x50>)
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <log_detail+0x54>)
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 800296e:	18c2      	adds	r2, r0, r3
 8002970:	9205      	str	r2, [sp, #20]
 8002972:	0002      	movs	r2, r0
 8002974:	3034      	adds	r0, #52	; 0x34
 8002976:	321e      	adds	r2, #30
 8002978:	18d2      	adds	r2, r2, r3
 800297a:	18c0      	adds	r0, r0, r3
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 800297c:	2303      	movs	r3, #3
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 800297e:	9206      	str	r2, [sp, #24]
 8002980:	9007      	str	r0, [sp, #28]
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	aa05      	add	r2, sp, #20
 8002986:	3b02      	subs	r3, #2
 8002988:	a803      	add	r0, sp, #12
 800298a:	f7fe fcc3 	bl	8001314 <array_puts>
	SSD1306_UpdateScreen();
 800298e:	f7fe fa57 	bl	8000e40 <SSD1306_UpdateScreen>
	while(!read_sw());
 8002992:	f7fe fd49 	bl	8001428 <read_sw>
 8002996:	2800      	cmp	r0, #0
 8002998:	d0fb      	beq.n	8002992 <log_detail+0x3e>
}
 800299a:	b008      	add	sp, #32
 800299c:	bd10      	pop	{r4, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	08005eb4 	.word	0x08005eb4
 80029a4:	20000c28 	.word	0x20000c28
 80029a8:	08006b51 	.word	0x08006b51

080029ac <log_mode>:
void log_mode(void){
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <log_mode+0xec>)
 80029b0:	4e3a      	ldr	r6, [pc, #232]	; (8002a9c <log_mode+0xf0>)
 80029b2:	781d      	ldrb	r5, [r3, #0]
void log_mode(void){
 80029b4:	b0bb      	sub	sp, #236	; 0xec
	if(!firF){
 80029b6:	2d00      	cmp	r5, #0
 80029b8:	d13c      	bne.n	8002a34 <log_mode+0x88>
		firF = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <log_mode+0xec>)
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 80029be:	ac02      	add	r4, sp, #8
		firF = 1;
 80029c0:	7013      	strb	r3, [r2, #0]
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 80029c2:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <log_mode+0xf4>)
 80029c4:	70a3      	strb	r3, [r4, #2]
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	7123      	strb	r3, [r4, #4]
 80029ca:	3202      	adds	r2, #2
 80029cc:	7062      	strb	r2, [r4, #1]
 80029ce:	2202      	movs	r2, #2
 80029d0:	70e2      	strb	r2, [r4, #3]
 80029d2:	18d2      	adds	r2, r2, r3
 80029d4:	7162      	strb	r2, [r4, #5]
 80029d6:	18d2      	adds	r2, r2, r3
 80029d8:	71e2      	strb	r2, [r4, #7]
 80029da:	18d2      	adds	r2, r2, r3
 80029dc:	71a3      	strb	r3, [r4, #6]
 80029de:	7223      	strb	r3, [r4, #8]
 80029e0:	7262      	strb	r2, [r4, #9]
 80029e2:	72a3      	strb	r3, [r4, #10]
 80029e4:	18d2      	adds	r2, r2, r3
 80029e6:	7323      	strb	r3, [r4, #12]
 80029e8:	4f2e      	ldr	r7, [pc, #184]	; (8002aa4 <log_mode+0xf8>)
 80029ea:	3306      	adds	r3, #6
 80029ec:	7025      	strb	r5, [r4, #0]
 80029ee:	72e2      	strb	r2, [r4, #11]
 80029f0:	7363      	strb	r3, [r4, #13]
		log_num = 0;
 80029f2:	7035      	strb	r5, [r6, #0]
			if(!strlen(ptLog[i].title)) break;
 80029f4:	783b      	ldrb	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d13e      	bne.n	8002a78 <log_mode+0xcc>
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <log_mode+0xfc>)
		array_puts(pos, "#Log", array, 1, log_num + 1);
 80029fc:	0020      	movs	r0, r4
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 80029fe:	9306      	str	r3, [sp, #24]
 8002a00:	ab0d      	add	r3, sp, #52	; 0x34
 8002a02:	9307      	str	r3, [sp, #28]
 8002a04:	2352      	movs	r3, #82	; 0x52
 8002a06:	446b      	add	r3, sp
 8002a08:	9308      	str	r3, [sp, #32]
 8002a0a:	ab1c      	add	r3, sp, #112	; 0x70
 8002a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0e:	238e      	movs	r3, #142	; 0x8e
 8002a10:	446b      	add	r3, sp
 8002a12:	930a      	str	r3, [sp, #40]	; 0x28
 8002a14:	ab2b      	add	r3, sp, #172	; 0xac
 8002a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a18:	23ca      	movs	r3, #202	; 0xca
 8002a1a:	446b      	add	r3, sp
 8002a1c:	930c      	str	r3, [sp, #48]	; 0x30
		array_puts(pos, "#Log", array, 1, log_num + 1);
 8002a1e:	7833      	ldrb	r3, [r6, #0]
 8002a20:	4922      	ldr	r1, [pc, #136]	; (8002aac <log_mode+0x100>)
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	aa06      	add	r2, sp, #24
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f7fe fc72 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8002a30:	f7fe fa06 	bl	8000e40 <SSD1306_UpdateScreen>
	get_adc();
 8002a34:	f7fe fc96 	bl	8001364 <get_adc>
	get_sel(&sel, log_num - 1, 0, 2);
 8002a38:	7831      	ldrb	r1, [r6, #0]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	3901      	subs	r1, #1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4817      	ldr	r0, [pc, #92]	; (8002aa0 <log_mode+0xf4>)
 8002a42:	b2c9      	uxtb	r1, r1
 8002a44:	f7fe fcba 	bl	80013bc <get_sel>
	if(joy_result != basic) { if(joy_result == left) init_value(); joy_result = basic; firF = 0; };
 8002a48:	4c19      	ldr	r4, [pc, #100]	; (8002ab0 <log_mode+0x104>)
 8002a4a:	7823      	ldrb	r3, [r4, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <log_mode+0xb4>
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <log_mode+0xac>
 8002a54:	f7fe fbda 	bl	800120c <init_value>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <log_mode+0xec>)
 8002a5c:	7023      	strb	r3, [r4, #0]
 8002a5e:	7013      	strb	r3, [r2, #0]
	if(read_sw()) { log_detail(sel); init_value(); }
 8002a60:	f7fe fce2 	bl	8001428 <read_sw>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d005      	beq.n	8002a74 <log_mode+0xc8>
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <log_mode+0xf4>)
 8002a6a:	7818      	ldrb	r0, [r3, #0]
 8002a6c:	f7ff ff72 	bl	8002954 <log_detail>
 8002a70:	f7fe fbcc 	bl	800120c <init_value>
}
 8002a74:	b03b      	add	sp, #236	; 0xec
 8002a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(bf[i], "%s", ptLog[i].title);
 8002a78:	201e      	movs	r0, #30
 8002a7a:	4368      	muls	r0, r5
 8002a7c:	ab0d      	add	r3, sp, #52	; 0x34
 8002a7e:	0039      	movs	r1, r7
 8002a80:	1818      	adds	r0, r3, r0
 8002a82:	f002 fecb 	bl	800581c <strcpy>
			log_num++;
 8002a86:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002a88:	3501      	adds	r5, #1
			log_num++;
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	7033      	strb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002a8e:	374a      	adds	r7, #74	; 0x4a
 8002a90:	2d06      	cmp	r5, #6
 8002a92:	d1af      	bne.n	80029f4 <log_mode+0x48>
 8002a94:	e7b1      	b.n	80029fa <log_mode+0x4e>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	20000018 	.word	0x20000018
 8002a9c:	200009e1 	.word	0x200009e1
 8002aa0:	20000dfb 	.word	0x20000dfb
 8002aa4:	20000c28 	.word	0x20000c28
 8002aa8:	080068fb 	.word	0x080068fb
 8002aac:	08006b5d 	.word	0x08006b5d
 8002ab0:	200009dc 	.word	0x200009dc

08002ab4 <by_set>:
void by_set(void){
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t by_sel = 0, num = 0;
 8002ab6:	2500      	movs	r5, #0
	memset(sortBypriorF, 0, 3);
 8002ab8:	4f40      	ldr	r7, [pc, #256]	; (8002bbc <by_set+0x108>)
 8002aba:	2203      	movs	r2, #3
 8002abc:	2100      	movs	r1, #0
void by_set(void){
 8002abe:	b08b      	sub	sp, #44	; 0x2c
	memset(sortBypriorF, 0, 3);
 8002ac0:	0038      	movs	r0, r7
 8002ac2:	f002 fd63 	bl	800558c <memset>
	memset(standard.sortByprior, 0, 3);
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <by_set+0x10c>)
 8002ac8:	2203      	movs	r2, #3
 8002aca:	2100      	movs	r1, #0
 8002acc:	1cd8      	adds	r0, r3, #3
 8002ace:	f002 fd5d 	bl	800558c <memset>
	uint8_t by_sel = 0, num = 0;
 8002ad2:	002c      	movs	r4, r5
				num == 2 ? ptBy[by_sel] : standard.sortByprior[2] ? ptBy[standard.sortByprior[2] - 1] : " ");
 8002ad4:	2606      	movs	r6, #6
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002ad6:	2d00      	cmp	r5, #0
 8002ad8:	d143      	bne.n	8002b62 <by_set+0xae>
 8002ada:	0032      	movs	r2, r6
 8002adc:	4362      	muls	r2, r4
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <by_set+0x110>)
 8002ae0:	189a      	adds	r2, r3, r2
				num == 1 ? ptBy[by_sel] : standard.sortByprior[1] ? ptBy[standard.sortByprior[1] - 1] : " ",
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <by_set+0x10c>)
 8002ae4:	7919      	ldrb	r1, [r3, #4]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <by_set+0x114>)
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d003      	beq.n	8002af4 <by_set+0x40>
 8002aec:	3901      	subs	r1, #1
 8002aee:	4371      	muls	r1, r6
 8002af0:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <by_set+0x110>)
 8002af2:	185b      	adds	r3, r3, r1
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002af4:	2d02      	cmp	r5, #2
 8002af6:	d143      	bne.n	8002b80 <by_set+0xcc>
 8002af8:	0030      	movs	r0, r6
 8002afa:	4360      	muls	r0, r4
				num == 2 ? ptBy[by_sel] : standard.sortByprior[2] ? ptBy[standard.sortByprior[2] - 1] : " ");
 8002afc:	4931      	ldr	r1, [pc, #196]	; (8002bc4 <by_set+0x110>)
 8002afe:	1809      	adds	r1, r1, r0
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002b00:	9100      	str	r1, [sp, #0]
 8002b02:	a802      	add	r0, sp, #8
 8002b04:	4931      	ldr	r1, [pc, #196]	; (8002bcc <by_set+0x118>)
 8002b06:	f002 fe69 	bl	80057dc <siprintf>
		ssd1306_putsXY(1, 2, bf, 0);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	2001      	movs	r0, #1
 8002b10:	aa02      	add	r2, sp, #8
 8002b12:	f7fe fbef 	bl	80012f4 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8002b16:	f7fe f993 	bl	8000e40 <SSD1306_UpdateScreen>
		if(num < 2){
 8002b1a:	2d01      	cmp	r5, #1
 8002b1c:	d80e      	bhi.n	8002b3c <by_set+0x88>
			get_adc();
 8002b1e:	f7fe fc21 	bl	8001364 <get_adc>
			if(joy_result == up) { do{ by_sel = (by_sel + 1) < 3 ? by_sel + 1 : 0; }while(sortBypriorF[by_sel]); }
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <by_set+0x11c>)
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	2a03      	cmp	r2, #3
 8002b28:	d134      	bne.n	8002b94 <by_set+0xe0>
 8002b2a:	2c01      	cmp	r4, #1
 8002b2c:	d830      	bhi.n	8002b90 <by_set+0xdc>
 8002b2e:	3401      	adds	r4, #1
 8002b30:	b2e4      	uxtb	r4, r4
 8002b32:	5d3a      	ldrb	r2, [r7, r4]
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d1f8      	bne.n	8002b2a <by_set+0x76>
			joy_result = basic;
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
		if(read_sw()){
 8002b3c:	f7fe fc74 	bl	8001428 <read_sw>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d0c8      	beq.n	8002ad6 <by_set+0x22>
			sortBypriorF[by_sel] = 1;
 8002b44:	2201      	movs	r2, #1
 8002b46:	553a      	strb	r2, [r7, r4]
			standard.sortByprior[num++] = by_sel + 1;
 8002b48:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <by_set+0x10c>)
 8002b4a:	1c6b      	adds	r3, r5, #1
 8002b4c:	3401      	adds	r4, #1
 8002b4e:	1955      	adds	r5, r2, r5
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	70ec      	strb	r4, [r5, #3]
			if(num < 3) { by_sel = 0; while(sortBypriorF[by_sel]) by_sel++; }
 8002b54:	2400      	movs	r4, #0
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d92b      	bls.n	8002bb2 <by_set+0xfe>
			else { firF = 0; break; }
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <by_set+0x120>)
 8002b5c:	701c      	strb	r4, [r3, #0]
}
 8002b5e:	b00b      	add	sp, #44	; 0x2c
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "By:%-5s>%-5s>%-5s", num == 0 ? ptBy[by_sel] : standard.sortByprior[0] ? ptBy[standard.sortByprior[0] - 1] : " ",
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <by_set+0x10c>)
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <by_set+0x114>)
 8002b66:	78db      	ldrb	r3, [r3, #3]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <by_set+0xc0>
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	4373      	muls	r3, r6
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <by_set+0x110>)
 8002b72:	18d2      	adds	r2, r2, r3
 8002b74:	2d01      	cmp	r5, #1
 8002b76:	d1b4      	bne.n	8002ae2 <by_set+0x2e>
 8002b78:	0033      	movs	r3, r6
 8002b7a:	4363      	muls	r3, r4
 8002b7c:	4911      	ldr	r1, [pc, #68]	; (8002bc4 <by_set+0x110>)
 8002b7e:	18cb      	adds	r3, r1, r3
				num == 2 ? ptBy[by_sel] : standard.sortByprior[2] ? ptBy[standard.sortByprior[2] - 1] : " ");
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <by_set+0x10c>)
 8002b82:	7948      	ldrb	r0, [r1, #5]
 8002b84:	4910      	ldr	r1, [pc, #64]	; (8002bc8 <by_set+0x114>)
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d0ba      	beq.n	8002b00 <by_set+0x4c>
 8002b8a:	3801      	subs	r0, #1
 8002b8c:	4370      	muls	r0, r6
 8002b8e:	e7b5      	b.n	8002afc <by_set+0x48>
			if(joy_result == up) { do{ by_sel = (by_sel + 1) < 3 ? by_sel + 1 : 0; }while(sortBypriorF[by_sel]); }
 8002b90:	2400      	movs	r4, #0
 8002b92:	e7ce      	b.n	8002b32 <by_set+0x7e>
			if(joy_result == down) { do{ by_sel = by_sel > 0 ? by_sel - 1 : 2; }while(sortBypriorF[by_sel]); }
 8002b94:	2a04      	cmp	r2, #4
 8002b96:	d1cf      	bne.n	8002b38 <by_set+0x84>
 8002b98:	2102      	movs	r1, #2
 8002b9a:	2c00      	cmp	r4, #0
 8002b9c:	d005      	beq.n	8002baa <by_set+0xf6>
 8002b9e:	3c01      	subs	r4, #1
 8002ba0:	b2e4      	uxtb	r4, r4
 8002ba2:	5d3a      	ldrb	r2, [r7, r4]
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	d1f8      	bne.n	8002b9a <by_set+0xe6>
 8002ba8:	e7c6      	b.n	8002b38 <by_set+0x84>
 8002baa:	000c      	movs	r4, r1
 8002bac:	e7f9      	b.n	8002ba2 <by_set+0xee>
			if(num < 3) { by_sel = 0; while(sortBypriorF[by_sel]) by_sel++; }
 8002bae:	3401      	adds	r4, #1
 8002bb0:	b2e4      	uxtb	r4, r4
 8002bb2:	5d3a      	ldrb	r2, [r7, r4]
 8002bb4:	2a00      	cmp	r2, #0
 8002bb6:	d1fa      	bne.n	8002bae <by_set+0xfa>
 8002bb8:	001d      	movs	r5, r3
	while(1){
 8002bba:	e78c      	b.n	8002ad6 <by_set+0x22>
 8002bbc:	20000dfc 	.word	0x20000dfc
 8002bc0:	20000e03 	.word	0x20000e03
 8002bc4:	08006c0e 	.word	0x08006c0e
 8002bc8:	08006c98 	.word	0x08006c98
 8002bcc:	08006b62 	.word	0x08006b62
 8002bd0:	200009dc 	.word	0x200009dc
 8002bd4:	20000018 	.word	0x20000018

08002bd8 <cate_set>:
void cate_set(void){
 8002bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t cate_sel = 0, num = 0;
 8002bda:	2700      	movs	r7, #0
	memset(sortCatepriorF, 0, 4);
 8002bdc:	4e4d      	ldr	r6, [pc, #308]	; (8002d14 <cate_set+0x13c>)
 8002bde:	2204      	movs	r2, #4
 8002be0:	2100      	movs	r1, #0
void cate_set(void){
 8002be2:	b08d      	sub	sp, #52	; 0x34
	memset(sortCatepriorF, 0, 4);
 8002be4:	0030      	movs	r0, r6
 8002be6:	f002 fcd1 	bl	800558c <memset>
	memset(standard.sortCateprior, 0, 4);
 8002bea:	484b      	ldr	r0, [pc, #300]	; (8002d18 <cate_set+0x140>)
 8002bec:	2204      	movs	r2, #4
 8002bee:	2100      	movs	r1, #0
 8002bf0:	3006      	adds	r0, #6
 8002bf2:	f002 fccb 	bl	800558c <memset>
	uint8_t cate_sel = 0, num = 0;
 8002bf6:	003c      	movs	r4, r7
				num == 3 ? ptCate[cate_sel] : standard.sortCateprior[3] ? ptCate[standard.sortCateprior[3] - 1] : " ");
 8002bf8:	2505      	movs	r5, #5
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <cate_set+0x140>)
 8002bfc:	469c      	mov	ip, r3
 8002bfe:	2f00      	cmp	r7, #0
 8002c00:	d11f      	bne.n	8002c42 <cate_set+0x6a>
 8002c02:	002a      	movs	r2, r5
 8002c04:	4362      	muls	r2, r4
 8002c06:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <cate_set+0x144>)
 8002c08:	189a      	adds	r2, r3, r2
				num == 1 ? ptCate[cate_sel] : standard.sortCateprior[1] ? ptCate[standard.sortCateprior[1] - 1] : " ",
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	79d9      	ldrb	r1, [r3, #7]
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <cate_set+0x148>)
 8002c10:	9303      	str	r3, [sp, #12]
 8002c12:	2900      	cmp	r1, #0
 8002c14:	d004      	beq.n	8002c20 <cate_set+0x48>
 8002c16:	3901      	subs	r1, #1
 8002c18:	4369      	muls	r1, r5
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <cate_set+0x144>)
 8002c1c:	185b      	adds	r3, r3, r1
 8002c1e:	9303      	str	r3, [sp, #12]
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c20:	2f02      	cmp	r7, #2
 8002c22:	d11d      	bne.n	8002c60 <cate_set+0x88>
 8002c24:	0029      	movs	r1, r5
 8002c26:	4361      	muls	r1, r4
 8002c28:	483c      	ldr	r0, [pc, #240]	; (8002d1c <cate_set+0x144>)
 8002c2a:	1841      	adds	r1, r0, r1
				num == 3 ? ptCate[cate_sel] : standard.sortCateprior[3] ? ptCate[standard.sortCateprior[3] - 1] : " ");
 8002c2c:	4660      	mov	r0, ip
 8002c2e:	7a40      	ldrb	r0, [r0, #9]
 8002c30:	4684      	mov	ip, r0
 8002c32:	4663      	mov	r3, ip
 8002c34:	483a      	ldr	r0, [pc, #232]	; (8002d20 <cate_set+0x148>)
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d022      	beq.n	8002c80 <cate_set+0xa8>
 8002c3a:	4660      	mov	r0, ip
 8002c3c:	3801      	subs	r0, #1
 8002c3e:	4368      	muls	r0, r5
 8002c40:	e01b      	b.n	8002c7a <cate_set+0xa2>
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c42:	799b      	ldrb	r3, [r3, #6]
 8002c44:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <cate_set+0x148>)
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <cate_set+0x7a>
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	436b      	muls	r3, r5
 8002c4e:	4a33      	ldr	r2, [pc, #204]	; (8002d1c <cate_set+0x144>)
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	2f01      	cmp	r7, #1
 8002c54:	d1d9      	bne.n	8002c0a <cate_set+0x32>
 8002c56:	002b      	movs	r3, r5
 8002c58:	4363      	muls	r3, r4
 8002c5a:	4930      	ldr	r1, [pc, #192]	; (8002d1c <cate_set+0x144>)
 8002c5c:	18cb      	adds	r3, r1, r3
 8002c5e:	9303      	str	r3, [sp, #12]
				num == 2 ? ptCate[cate_sel] : standard.sortCateprior[2] ? ptCate[standard.sortCateprior[2] - 1] : " ",
 8002c60:	4661      	mov	r1, ip
 8002c62:	7a08      	ldrb	r0, [r1, #8]
 8002c64:	492e      	ldr	r1, [pc, #184]	; (8002d20 <cate_set+0x148>)
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d003      	beq.n	8002c72 <cate_set+0x9a>
 8002c6a:	3801      	subs	r0, #1
 8002c6c:	4368      	muls	r0, r5
 8002c6e:	492b      	ldr	r1, [pc, #172]	; (8002d1c <cate_set+0x144>)
 8002c70:	1809      	adds	r1, r1, r0
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c72:	2f03      	cmp	r7, #3
 8002c74:	d1da      	bne.n	8002c2c <cate_set+0x54>
 8002c76:	0028      	movs	r0, r5
 8002c78:	4360      	muls	r0, r4
				num == 3 ? ptCate[cate_sel] : standard.sortCateprior[3] ? ptCate[standard.sortCateprior[3] - 1] : " ");
 8002c7a:	4684      	mov	ip, r0
 8002c7c:	4827      	ldr	r0, [pc, #156]	; (8002d1c <cate_set+0x144>)
 8002c7e:	4460      	add	r0, ip
		sprintf(bf, "Cate:%-3s>%-3s>%-3s>%-3s", num == 0 ? ptCate[cate_sel] : standard.sortCateprior[0] ? ptCate[standard.sortCateprior[0] - 1] : " ",
 8002c80:	9b03      	ldr	r3, [sp, #12]
 8002c82:	9001      	str	r0, [sp, #4]
 8002c84:	9100      	str	r1, [sp, #0]
 8002c86:	a804      	add	r0, sp, #16
 8002c88:	4926      	ldr	r1, [pc, #152]	; (8002d24 <cate_set+0x14c>)
 8002c8a:	f002 fda7 	bl	80057dc <siprintf>
		ssd1306_putsXY(1, 3, bf, 0);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2103      	movs	r1, #3
 8002c92:	2001      	movs	r0, #1
 8002c94:	aa04      	add	r2, sp, #16
 8002c96:	f7fe fb2d 	bl	80012f4 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8002c9a:	f7fe f8d1 	bl	8000e40 <SSD1306_UpdateScreen>
		if(num < 3){
 8002c9e:	2f02      	cmp	r7, #2
 8002ca0:	d80e      	bhi.n	8002cc0 <cate_set+0xe8>
			get_adc();
 8002ca2:	f7fe fb5f 	bl	8001364 <get_adc>
			if(joy_result == up) { do{ cate_sel = (cate_sel + 1) < 4 ? cate_sel + 1 : 0; }while(sortCatepriorF[cate_sel]); }
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <cate_set+0x150>)
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	2a03      	cmp	r2, #3
 8002cac:	d11d      	bne.n	8002cea <cate_set+0x112>
 8002cae:	2c02      	cmp	r4, #2
 8002cb0:	d819      	bhi.n	8002ce6 <cate_set+0x10e>
 8002cb2:	3401      	adds	r4, #1
 8002cb4:	b2e4      	uxtb	r4, r4
 8002cb6:	5d32      	ldrb	r2, [r6, r4]
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d1f8      	bne.n	8002cae <cate_set+0xd6>
			joy_result = basic;
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
		if(read_sw()){
 8002cc0:	f7fe fbb2 	bl	8001428 <read_sw>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d098      	beq.n	8002bfa <cate_set+0x22>
			sortCatepriorF[cate_sel] = 1;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	5532      	strb	r2, [r6, r4]
			standard.sortCateprior[num++] = cate_sel + 1;
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <cate_set+0x140>)
 8002cce:	1c7b      	adds	r3, r7, #1
 8002cd0:	3401      	adds	r4, #1
 8002cd2:	19d7      	adds	r7, r2, r7
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	71bc      	strb	r4, [r7, #6]
			if(num < 4) { cate_sel = 0; while(sortCatepriorF[cate_sel]) cate_sel++; }
 8002cd8:	2400      	movs	r4, #0
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d914      	bls.n	8002d08 <cate_set+0x130>
			else { firF = 0; break; }
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <cate_set+0x154>)
 8002ce0:	701c      	strb	r4, [r3, #0]
}
 8002ce2:	b00d      	add	sp, #52	; 0x34
 8002ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(joy_result == up) { do{ cate_sel = (cate_sel + 1) < 4 ? cate_sel + 1 : 0; }while(sortCatepriorF[cate_sel]); }
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	e7e5      	b.n	8002cb6 <cate_set+0xde>
			if(joy_result == down) { do{ cate_sel = cate_sel > 0 ? cate_sel - 1 : 3; }while(sortCatepriorF[cate_sel]); }
 8002cea:	2a04      	cmp	r2, #4
 8002cec:	d1e6      	bne.n	8002cbc <cate_set+0xe4>
 8002cee:	2103      	movs	r1, #3
 8002cf0:	2c00      	cmp	r4, #0
 8002cf2:	d005      	beq.n	8002d00 <cate_set+0x128>
 8002cf4:	3c01      	subs	r4, #1
 8002cf6:	b2e4      	uxtb	r4, r4
 8002cf8:	5d32      	ldrb	r2, [r6, r4]
 8002cfa:	2a00      	cmp	r2, #0
 8002cfc:	d1f8      	bne.n	8002cf0 <cate_set+0x118>
 8002cfe:	e7dd      	b.n	8002cbc <cate_set+0xe4>
 8002d00:	000c      	movs	r4, r1
 8002d02:	e7f9      	b.n	8002cf8 <cate_set+0x120>
			if(num < 4) { cate_sel = 0; while(sortCatepriorF[cate_sel]) cate_sel++; }
 8002d04:	3401      	adds	r4, #1
 8002d06:	b2e4      	uxtb	r4, r4
 8002d08:	5d32      	ldrb	r2, [r6, r4]
 8002d0a:	2a00      	cmp	r2, #0
 8002d0c:	d1fa      	bne.n	8002d04 <cate_set+0x12c>
 8002d0e:	001f      	movs	r7, r3
	while(1){
 8002d10:	e773      	b.n	8002bfa <cate_set+0x22>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000dff 	.word	0x20000dff
 8002d18:	20000e03 	.word	0x20000e03
 8002d1c:	08006c20 	.word	0x08006c20
 8002d20:	08006c98 	.word	0x08006c98
 8002d24:	08006b74 	.word	0x08006b74
 8002d28:	200009dc 	.word	0x200009dc
 8002d2c:	20000018 	.word	0x20000018

08002d30 <part_sort>:
volatile int8_t (*compare_item[3])(struct Part* a, struct Part* b) = { name_compare, cate_compare, store_compare };

volatile void part_sort(void){
	int8_t res = 0, swapF = 0;

	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d30:	2300      	movs	r3, #0
volatile void part_sort(void){
 8002d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d34:	b085      	sub	sp, #20
 8002d36:	2400      	movs	r4, #0
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <part_sort+0x1a4>)
 8002d3c:	4f66      	ldr	r7, [pc, #408]	; (8002ed8 <part_sort+0x1a8>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	9a01      	ldr	r2, [sp, #4]
		for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002d42:	707c      	strb	r4, [r7, #1]
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d83a      	bhi.n	8002dbe <part_sort+0x8e>
					}
					else if(res < 0) swapF = 1;
					if(swapF) { part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]); swapF = 0; }
				}

	POS cur = {0, 0};
 8002d48:	0025      	movs	r5, r4
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
		for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	703b      	strb	r3, [r7, #0]
			if(standard.sortTypeF){
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <part_sort+0x1ac>)
 8002d50:	789b      	ldrb	r3, [r3, #2]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d100      	bne.n	8002d58 <part_sort+0x28>
 8002d56:	e09d      	b.n	8002e94 <part_sort+0x164>
				if(pt[curxy()].cate != 0){
 8002d58:	f7fe fa4c 	bl	80011f4 <curxy>
 8002d5c:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <part_sort+0x1b0>)
 8002d5e:	0106      	lsls	r6, r0, #4
 8002d60:	199e      	adds	r6, r3, r6
 8002d62:	7933      	ldrb	r3, [r6, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <part_sort+0x66>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002d68:	2305      	movs	r3, #5
 8002d6a:	1b1c      	subs	r4, r3, r4
 8002d6c:	3301      	adds	r3, #1
					part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0028      	movs	r0, r5
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002d72:	435c      	muls	r4, r3
					part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002d74:	f7fd fa6c 	bl	8000250 <__aeabi_uidivmod>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002d78:	1861      	adds	r1, r4, r1
					part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <part_sort+0x1b0>)
 8002d7c:	b2c9      	uxtb	r1, r1
 8002d7e:	0109      	lsls	r1, r1, #4
					cur.x++;
 8002d80:	3501      	adds	r5, #1
					part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002d82:	18c9      	adds	r1, r1, r3
 8002d84:	0030      	movs	r0, r6
					cur.x++;
 8002d86:	b2ed      	uxtb	r5, r5
					part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002d88:	f7fe faa0 	bl	80012cc <part_swap>
					cur.y = cur.x / 6;
 8002d8c:	2106      	movs	r1, #6
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f7fd f9d8 	bl	8000144 <__udivsi3>
 8002d94:	b2c4      	uxtb	r4, r0
		for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002d96:	783b      	ldrb	r3, [r7, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	703b      	strb	r3, [r7, #0]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d9d5      	bls.n	8002d4e <part_sort+0x1e>
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002da2:	787b      	ldrb	r3, [r7, #1]
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	707b      	strb	r3, [r7, #1]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d9cd      	bls.n	8002d4a <part_sort+0x1a>
				}
			}
			else temp.x = temp.y = 6;

	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	707b      	strb	r3, [r7, #1]
 8002db2:	787c      	ldrb	r4, [r7, #1]
 8002db4:	2c05      	cmp	r4, #5
 8002db6:	d800      	bhi.n	8002dba <part_sort+0x8a>
 8002db8:	e070      	b.n	8002e9c <part_sort+0x16c>
		for(temp.x = 0 ; temp.x < 6 ; temp.x++)
			if(pt[curxy()].cate != 0) pt[curxy()].temp = temp;
			else memset(&pt[curxy()], 0, sizeof(struct Part));
}
 8002dba:	b005      	add	sp, #20
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(temp.x = 0 ; temp.x < 6; temp.x++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	703b      	strb	r3, [r7, #0]
 8002dc2:	783d      	ldrb	r5, [r7, #0]
					POS cur = temp;
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	9302      	str	r3, [sp, #8]
			for(temp.x = 0 ; temp.x < 6; temp.x++)
 8002dc8:	2d05      	cmp	r5, #5
 8002dca:	d909      	bls.n	8002de0 <part_sort+0xb0>
		for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002dcc:	9b02      	ldr	r3, [sp, #8]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	707b      	strb	r3, [r7, #1]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d9f2      	bls.n	8002dbe <part_sort+0x8e>
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002dd8:	9b01      	ldr	r3, [sp, #4]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e7aa      	b.n	8002d36 <part_sort+0x6>
				if(pt[curxy()].cate != 0){
 8002de0:	f7fe fa08 	bl	80011f4 <curxy>
 8002de4:	4a3e      	ldr	r2, [pc, #248]	; (8002ee0 <part_sort+0x1b0>)
 8002de6:	0103      	lsls	r3, r0, #4
 8002de8:	18d3      	adds	r3, r2, r3
 8002dea:	791b      	ldrb	r3, [r3, #4]
 8002dec:	9003      	str	r0, [sp, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d04d      	beq.n	8002e8e <part_sort+0x15e>
					POS cur = temp;
 8002df2:	9e02      	ldr	r6, [sp, #8]
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002df4:	2106      	movs	r1, #6
 8002df6:	0028      	movs	r0, r5
 8002df8:	f7fd fa2a 	bl	8000250 <__aeabi_uidivmod>
 8002dfc:	b2c9      	uxtb	r1, r1
 8002dfe:	2905      	cmp	r1, #5
 8002e00:	d101      	bne.n	8002e06 <part_sort+0xd6>
 8002e02:	3601      	adds	r6, #1
 8002e04:	b2f6      	uxtb	r6, r6
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e06:	2305      	movs	r3, #5
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e08:	3501      	adds	r5, #1
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e0a:	1b9c      	subs	r4, r3, r6
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e0c:	b2ed      	uxtb	r5, r5
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e0e:	3301      	adds	r3, #1
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e10:	0019      	movs	r1, r3
 8002e12:	0028      	movs	r0, r5
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e14:	435c      	muls	r4, r3
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e16:	f7fd fa1b 	bl	8000250 <__aeabi_uidivmod>
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e1a:	1864      	adds	r4, r4, r1
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e1c:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <part_sort+0x1b0>)
__STATIC_INLINE uint8_t testxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); }
 8002e1e:	b2e4      	uxtb	r4, r4
					do{ if(cur.x % 6 == 5) cur.y++; cur.x++; }while(pt[testxy(cur.x % 6, cur.y)].cate == 0);
 8002e20:	0124      	lsls	r4, r4, #4
 8002e22:	191c      	adds	r4, r3, r4
 8002e24:	7923      	ldrb	r3, [r4, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0e4      	beq.n	8002df4 <part_sort+0xc4>
					if(cur.x >= 36) break;
 8002e2a:	2d23      	cmp	r5, #35	; 0x23
 8002e2c:	d8ce      	bhi.n	8002dcc <part_sort+0x9c>
					res = compare_item[standard.sortByprior[0] - 1](&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	4e2a      	ldr	r6, [pc, #168]	; (8002edc <part_sort+0x1ac>)
 8002e32:	0118      	lsls	r0, r3, #4
 8002e34:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <part_sort+0x1b0>)
 8002e36:	4d2b      	ldr	r5, [pc, #172]	; (8002ee4 <part_sort+0x1b4>)
 8002e38:	1818      	adds	r0, r3, r0
 8002e3a:	78f3      	ldrb	r3, [r6, #3]
 8002e3c:	0021      	movs	r1, r4
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	595b      	ldr	r3, [r3, r5]
 8002e44:	4798      	blx	r3
					if(res == 0){
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d117      	bne.n	8002e7a <part_sort+0x14a>
						res = compare_item[standard.sortByprior[1] - 1](&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002e4a:	f7fe f9d3 	bl	80011f4 <curxy>
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <part_sort+0x1b0>)
 8002e50:	0100      	lsls	r0, r0, #4
 8002e52:	1818      	adds	r0, r3, r0
 8002e54:	7933      	ldrb	r3, [r6, #4]
 8002e56:	0021      	movs	r1, r4
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	595b      	ldr	r3, [r3, r5]
 8002e5e:	4798      	blx	r3
						if(res == 0){
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d10a      	bne.n	8002e7a <part_sort+0x14a>
							res = compare_item[standard.sortByprior[2] - 1](&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]);
 8002e64:	f7fe f9c6 	bl	80011f4 <curxy>
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <part_sort+0x1b0>)
 8002e6a:	0100      	lsls	r0, r0, #4
 8002e6c:	1818      	adds	r0, r3, r0
 8002e6e:	7973      	ldrb	r3, [r6, #5]
 8002e70:	0021      	movs	r1, r4
 8002e72:	3b01      	subs	r3, #1
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	595b      	ldr	r3, [r3, r5]
 8002e78:	4798      	blx	r3
							if(res < 0) swapF = 1;
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	da07      	bge.n	8002e8e <part_sort+0x15e>
					if(swapF) { part_swap(&pt[curxy()], &pt[testxy(cur.x % 6, cur.y)]); swapF = 0; }
 8002e7e:	f7fe f9b9 	bl	80011f4 <curxy>
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <part_sort+0x1b0>)
 8002e84:	0100      	lsls	r0, r0, #4
 8002e86:	0021      	movs	r1, r4
 8002e88:	18c0      	adds	r0, r0, r3
 8002e8a:	f7fe fa1f 	bl	80012cc <part_swap>
			for(temp.x = 0 ; temp.x < 6; temp.x++)
 8002e8e:	783b      	ldrb	r3, [r7, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	e795      	b.n	8002dc0 <part_sort+0x90>
			else temp.x = temp.y = 6;
 8002e94:	2306      	movs	r3, #6
 8002e96:	707b      	strb	r3, [r7, #1]
 8002e98:	703b      	strb	r3, [r7, #0]
 8002e9a:	e77c      	b.n	8002d96 <part_sort+0x66>
		for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	703b      	strb	r3, [r7, #0]
 8002ea0:	783d      	ldrb	r5, [r7, #0]
 8002ea2:	2d05      	cmp	r5, #5
 8002ea4:	d902      	bls.n	8002eac <part_sort+0x17c>
	for(temp.y = 0 ; temp.y < 6 ; temp.y++)
 8002ea6:	3401      	adds	r4, #1
 8002ea8:	707c      	strb	r4, [r7, #1]
 8002eaa:	e782      	b.n	8002db2 <part_sort+0x82>
			if(pt[curxy()].cate != 0) pt[curxy()].temp = temp;
 8002eac:	f7fe f9a2 	bl	80011f4 <curxy>
 8002eb0:	0103      	lsls	r3, r0, #4
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <part_sort+0x1b0>)
 8002eb4:	18c0      	adds	r0, r0, r3
 8002eb6:	7901      	ldrb	r1, [r0, #4]
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d007      	beq.n	8002ecc <part_sort+0x19c>
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	0039      	movs	r1, r7
 8002ec0:	300b      	adds	r0, #11
 8002ec2:	f002 fb47 	bl	8005554 <memcpy>
		for(temp.x = 0 ; temp.x < 6 ; temp.x++)
 8002ec6:	3501      	adds	r5, #1
 8002ec8:	703d      	strb	r5, [r7, #0]
 8002eca:	e7e9      	b.n	8002ea0 <part_sort+0x170>
			else memset(&pt[curxy()], 0, sizeof(struct Part));
 8002ecc:	2210      	movs	r2, #16
 8002ece:	f002 fb5d 	bl	800558c <memset>
 8002ed2:	e7f8      	b.n	8002ec6 <part_sort+0x196>
 8002ed4:	20000e0d 	.word	0x20000e0d
 8002ed8:	20000e0f 	.word	0x20000e0f
 8002edc:	20000e03 	.word	0x20000e03
 8002ee0:	200009e8 	.word	0x200009e8
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <sort_mode>:

volatile void sort_mode(void){
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t byF, cateF;
	if(!firF){
 8002eea:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <sort_mode+0x1c0>)
volatile void sort_mode(void){
 8002eec:	b0b5      	sub	sp, #212	; 0xd4
	if(!firF){
 8002eee:	7819      	ldrb	r1, [r3, #0]
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d000      	beq.n	8002ef6 <sort_mode+0xe>
 8002ef4:	e084      	b.n	8003000 <sort_mode+0x118>
		firF = 1;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002efa:	ab02      	add	r3, sp, #8
 8002efc:	7019      	strb	r1, [r3, #0]
 8002efe:	7099      	strb	r1, [r3, #2]
 8002f00:	486a      	ldr	r0, [pc, #424]	; (80030ac <sort_mode+0x1c4>)
 8002f02:	3102      	adds	r1, #2
 8002f04:	7159      	strb	r1, [r3, #5]
 8002f06:	1889      	adds	r1, r1, r2
 8002f08:	71d9      	strb	r1, [r3, #7]
 8002f0a:	7800      	ldrb	r0, [r0, #0]
 8002f0c:	1889      	adds	r1, r1, r2
 8002f0e:	7259      	strb	r1, [r3, #9]
 8002f10:	1889      	adds	r1, r1, r2
 8002f12:	70da      	strb	r2, [r3, #3]
 8002f14:	711a      	strb	r2, [r3, #4]
 8002f16:	719a      	strb	r2, [r3, #6]
 8002f18:	721a      	strb	r2, [r3, #8]
 8002f1a:	729a      	strb	r2, [r3, #10]
 8002f1c:	72d9      	strb	r1, [r3, #11]
 8002f1e:	731a      	strb	r2, [r3, #12]
 8002f20:	1889      	adds	r1, r1, r2
 8002f22:	739a      	strb	r2, [r3, #14]
 8002f24:	3002      	adds	r0, #2
 8002f26:	3206      	adds	r2, #6
 8002f28:	7359      	strb	r1, [r3, #13]
 8002f2a:	7058      	strb	r0, [r3, #1]
 8002f2c:	73da      	strb	r2, [r3, #15]
		char bf[5][30];
		sprintf(bf[0], !byF ? "By:(NONE)" : "By:%-5s>%-5s>%-5s", ptBy[standard.sortByprior[0] - 1], ptBy[standard.sortByprior[1] - 1], ptBy[standard.sortByprior[2] - 1]);
 8002f2e:	4b60      	ldr	r3, [pc, #384]	; (80030b0 <sort_mode+0x1c8>)
 8002f30:	4960      	ldr	r1, [pc, #384]	; (80030b4 <sort_mode+0x1cc>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d000      	beq.n	8002f3a <sort_mode+0x52>
 8002f38:	495f      	ldr	r1, [pc, #380]	; (80030b8 <sort_mode+0x1d0>)
 8002f3a:	2006      	movs	r0, #6
 8002f3c:	4c5f      	ldr	r4, [pc, #380]	; (80030bc <sort_mode+0x1d4>)
 8002f3e:	4d60      	ldr	r5, [pc, #384]	; (80030c0 <sort_mode+0x1d8>)
 8002f40:	7923      	ldrb	r3, [r4, #4]
 8002f42:	78e2      	ldrb	r2, [r4, #3]
 8002f44:	7966      	ldrb	r6, [r4, #5]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	3e01      	subs	r6, #1
 8002f4c:	4343      	muls	r3, r0
 8002f4e:	4342      	muls	r2, r0
 8002f50:	4370      	muls	r0, r6
 8002f52:	1828      	adds	r0, r5, r0
 8002f54:	18eb      	adds	r3, r5, r3
 8002f56:	9000      	str	r0, [sp, #0]
 8002f58:	18aa      	adds	r2, r5, r2
 8002f5a:	a80e      	add	r0, sp, #56	; 0x38
 8002f5c:	f002 fc3e 	bl	80057dc <siprintf>
		sprintf(bf[1], !cateF ? "Cate:(NONE)" : "Cate:%-3s>%-3s>%-3s>%-3s", ptCate[standard.sortCateprior[0] - 1], ptCate[standard.sortCateprior[1] - 1], ptCate[standard.sortCateprior[2] - 1], ptCate[standard.sortCateprior[3] - 1]);
 8002f60:	4b58      	ldr	r3, [pc, #352]	; (80030c4 <sort_mode+0x1dc>)
 8002f62:	4959      	ldr	r1, [pc, #356]	; (80030c8 <sort_mode+0x1e0>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d000      	beq.n	8002f6c <sort_mode+0x84>
 8002f6a:	4958      	ldr	r1, [pc, #352]	; (80030cc <sort_mode+0x1e4>)
 8002f6c:	2605      	movs	r6, #5
 8002f6e:	7a60      	ldrb	r0, [r4, #9]
 8002f70:	4d57      	ldr	r5, [pc, #348]	; (80030d0 <sort_mode+0x1e8>)
 8002f72:	3801      	subs	r0, #1
 8002f74:	4370      	muls	r0, r6
 8002f76:	1828      	adds	r0, r5, r0
 8002f78:	79e3      	ldrb	r3, [r4, #7]
 8002f7a:	79a2      	ldrb	r2, [r4, #6]
 8002f7c:	9001      	str	r0, [sp, #4]
 8002f7e:	7a20      	ldrb	r0, [r4, #8]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	3801      	subs	r0, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	4373      	muls	r3, r6
 8002f88:	4372      	muls	r2, r6
 8002f8a:	4346      	muls	r6, r0
 8002f8c:	2756      	movs	r7, #86	; 0x56
 8002f8e:	18eb      	adds	r3, r5, r3
 8002f90:	18aa      	adds	r2, r5, r2
 8002f92:	19ad      	adds	r5, r5, r6
 8002f94:	9500      	str	r5, [sp, #0]
		sprintf(bf[2], "Name:%s", ptSort[standard.sortNameF]);
 8002f96:	2514      	movs	r5, #20
		sprintf(bf[1], !cateF ? "Cate:(NONE)" : "Cate:%-3s>%-3s>%-3s>%-3s", ptCate[standard.sortCateprior[0] - 1], ptCate[standard.sortCateprior[1] - 1], ptCate[standard.sortCateprior[2] - 1], ptCate[standard.sortCateprior[3] - 1]);
 8002f98:	446f      	add	r7, sp
 8002f9a:	0038      	movs	r0, r7
 8002f9c:	f002 fc1e 	bl	80057dc <siprintf>
		sprintf(bf[2], "Name:%s", ptSort[standard.sortNameF]);
 8002fa0:	7822      	ldrb	r2, [r4, #0]
 8002fa2:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <sort_mode+0x1ec>)
 8002fa4:	436a      	muls	r2, r5
 8002fa6:	ae1d      	add	r6, sp, #116	; 0x74
 8002fa8:	189a      	adds	r2, r3, r2
 8002faa:	494b      	ldr	r1, [pc, #300]	; (80030d8 <sort_mode+0x1f0>)
 8002fac:	0030      	movs	r0, r6
 8002fae:	f002 fc15 	bl	80057dc <siprintf>
		sprintf(bf[3], "Store:%s", ptSort[standard.sortStoreF]);
 8002fb2:	7862      	ldrb	r2, [r4, #1]
 8002fb4:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <sort_mode+0x1ec>)
 8002fb6:	436a      	muls	r2, r5
 8002fb8:	357e      	adds	r5, #126	; 0x7e
 8002fba:	446d      	add	r5, sp
 8002fbc:	189a      	adds	r2, r3, r2
 8002fbe:	4947      	ldr	r1, [pc, #284]	; (80030dc <sort_mode+0x1f4>)
 8002fc0:	0028      	movs	r0, r5
 8002fc2:	f002 fc0b 	bl	80057dc <siprintf>
		sprintf(bf[4], "Option:Type %d", standard.sortTypeF + 1);
 8002fc6:	78a2      	ldrb	r2, [r4, #2]
 8002fc8:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fca:	4945      	ldr	r1, [pc, #276]	; (80030e0 <sort_mode+0x1f8>)
 8002fcc:	3201      	adds	r2, #1
 8002fce:	0020      	movs	r0, r4
 8002fd0:	f002 fc04 	bl	80057dc <siprintf>
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <sort_mode+0x1fc>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fd6:	4944      	ldr	r1, [pc, #272]	; (80030e8 <sort_mode+0x200>)
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fd8:	9306      	str	r3, [sp, #24]
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <sort_mode+0x204>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fdc:	aa06      	add	r2, sp, #24
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fde:	9307      	str	r3, [sp, #28]
 8002fe0:	ab0e      	add	r3, sp, #56	; 0x38
 8002fe2:	9308      	str	r3, [sp, #32]
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <sort_mode+0x208>)
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fe6:	a802      	add	r0, sp, #8
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002fe8:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002fea:	2308      	movs	r3, #8
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	3b07      	subs	r3, #7
		char* array[8] = { ">", "Sort Option Setting.", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8002ff0:	9709      	str	r7, [sp, #36]	; 0x24
 8002ff2:	960a      	str	r6, [sp, #40]	; 0x28
 8002ff4:	950b      	str	r5, [sp, #44]	; 0x2c
 8002ff6:	940c      	str	r4, [sp, #48]	; 0x30
		array_puts(pos, "#Sort", array, 1, sizeof(pos) / 2);
 8002ff8:	f7fe f98c 	bl	8001314 <array_puts>
		SSD1306_UpdateScreen();
 8002ffc:	f7fd ff20 	bl	8000e40 <SSD1306_UpdateScreen>
	}
	get_adc();
 8003000:	f7fe f9b0 	bl	8001364 <get_adc>
	get_sel(&sel, 5, 0, 2);
 8003004:	4c29      	ldr	r4, [pc, #164]	; (80030ac <sort_mode+0x1c4>)
 8003006:	2302      	movs	r3, #2
 8003008:	2200      	movs	r2, #0
 800300a:	2105      	movs	r1, #5
 800300c:	0020      	movs	r0, r4
 800300e:	f7fe f9d5 	bl	80013bc <get_sel>
	if(sel == 2) get_sel(&standard.sortNameF, 1, 0, 1);
 8003012:	7823      	ldrb	r3, [r4, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d105      	bne.n	8003024 <sort_mode+0x13c>
 8003018:	3b01      	subs	r3, #1
 800301a:	2200      	movs	r2, #0
 800301c:	0019      	movs	r1, r3
 800301e:	4827      	ldr	r0, [pc, #156]	; (80030bc <sort_mode+0x1d4>)
 8003020:	f7fe f9cc 	bl	80013bc <get_sel>
	if(sel == 3) get_sel(&standard.sortStoreF, 1, 0, 1);
 8003024:	7823      	ldrb	r3, [r4, #0]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d106      	bne.n	8003038 <sort_mode+0x150>
 800302a:	4824      	ldr	r0, [pc, #144]	; (80030bc <sort_mode+0x1d4>)
 800302c:	3b02      	subs	r3, #2
 800302e:	2200      	movs	r2, #0
 8003030:	0019      	movs	r1, r3
 8003032:	18c0      	adds	r0, r0, r3
 8003034:	f7fe f9c2 	bl	80013bc <get_sel>
	if(sel == 4) get_sel(&standard.sortTypeF, 1, 0, 1);
 8003038:	7823      	ldrb	r3, [r4, #0]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d106      	bne.n	800304c <sort_mode+0x164>
 800303e:	481f      	ldr	r0, [pc, #124]	; (80030bc <sort_mode+0x1d4>)
 8003040:	3b03      	subs	r3, #3
 8003042:	2200      	movs	r2, #0
 8003044:	0019      	movs	r1, r3
 8003046:	3002      	adds	r0, #2
 8003048:	f7fe f9b8 	bl	80013bc <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 800304c:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <sort_mode+0x20c>)
 800304e:	7813      	ldrb	r3, [r2, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <sort_mode+0x174>
 8003054:	2300      	movs	r3, #0
 8003056:	7013      	strb	r3, [r2, #0]
 8003058:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <sort_mode+0x1c0>)
 800305a:	7013      	strb	r3, [r2, #0]
	if(read_sw()){
 800305c:	f7fe f9e4 	bl	8001428 <read_sw>
 8003060:	2800      	cmp	r0, #0
 8003062:	d01e      	beq.n	80030a2 <sort_mode+0x1ba>
		if(sel == 0) { by_set(); byF = 1; }
 8003064:	7823      	ldrb	r3, [r4, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <sort_mode+0x18c>
 800306a:	f7ff fd23 	bl	8002ab4 <by_set>
 800306e:	2201      	movs	r2, #1
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <sort_mode+0x1c8>)
 8003072:	701a      	strb	r2, [r3, #0]
		if(sel == 1) { cate_set(); cateF = 1; }
 8003074:	7825      	ldrb	r5, [r4, #0]
 8003076:	2d01      	cmp	r5, #1
 8003078:	d103      	bne.n	8003082 <sort_mode+0x19a>
 800307a:	f7ff fdad 	bl	8002bd8 <cate_set>
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <sort_mode+0x1dc>)
 8003080:	701d      	strb	r5, [r3, #0]
		if(sel == 5) { part_sort(); byF = cateF = 0; memset(&standard, 0, sizeof(SORT_STATE)); init_value(); }
 8003082:	7823      	ldrb	r3, [r4, #0]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <sort_mode+0x1ba>
 8003088:	f7ff fe52 	bl	8002d30 <part_sort>
 800308c:	2100      	movs	r1, #0
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <sort_mode+0x1dc>)
 8003090:	220a      	movs	r2, #10
 8003092:	7019      	strb	r1, [r3, #0]
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <sort_mode+0x1c8>)
 8003096:	4809      	ldr	r0, [pc, #36]	; (80030bc <sort_mode+0x1d4>)
 8003098:	7019      	strb	r1, [r3, #0]
 800309a:	f002 fa77 	bl	800558c <memset>
 800309e:	f7fe f8b5 	bl	800120c <init_value>
	}
}
 80030a2:	b035      	add	sp, #212	; 0xd4
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	20000018 	.word	0x20000018
 80030ac:	20000dfb 	.word	0x20000dfb
 80030b0:	200009c5 	.word	0x200009c5
 80030b4:	08006b8d 	.word	0x08006b8d
 80030b8:	08006b62 	.word	0x08006b62
 80030bc:	20000e03 	.word	0x20000e03
 80030c0:	08006c0e 	.word	0x08006c0e
 80030c4:	200009c6 	.word	0x200009c6
 80030c8:	08006b97 	.word	0x08006b97
 80030cc:	08006b74 	.word	0x08006b74
 80030d0:	08006c20 	.word	0x08006c20
 80030d4:	08006c34 	.word	0x08006c34
 80030d8:	080069ee 	.word	0x080069ee
 80030dc:	08006ba3 	.word	0x08006ba3
 80030e0:	08006bac 	.word	0x08006bac
 80030e4:	080068fb 	.word	0x080068fb
 80030e8:	08006bd0 	.word	0x08006bd0
 80030ec:	08006bbb 	.word	0x08006bbb
 80030f0:	08006a19 	.word	0x08006a19
 80030f4:	200009dc 	.word	0x200009dc

080030f8 <PSDrawers_Initialized>:
void (*play_task[7])(void) = { main_menu, save_mode, use_mode, find_mode, partition_mode, log_mode, sort_mode };

/* Tasks */

void PSDrawers_Initialized(void)
{
 80030f8:	b510      	push	{r4, lr}
	SSD1306_Init();
 80030fa:	f7fd fec3 	bl	8000e84 <SSD1306_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 80030fe:	4806      	ldr	r0, [pc, #24]	; (8003118 <PSDrawers_Initialized+0x20>)
 8003100:	f002 f858 	bl	80051b4 <HAL_TIM_Base_Start_IT>

	/* Write user code here */
	if(start()) time_setting();
 8003104:	f7fe fc2e 	bl	8001964 <start>
 8003108:	2800      	cmp	r0, #0
 800310a:	d001      	beq.n	8003110 <PSDrawers_Initialized+0x18>
 800310c:	f7fe fc8c 	bl	8001a28 <time_setting>
	init_value();
 8003110:	f7fe f87c 	bl	800120c <init_value>
//	pt[curxy()].temp = temp;
//
//	temp.x++;
//	temp.y++;
//	start_check++;
}
 8003114:	bd10      	pop	{r4, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	20000570 	.word	0x20000570

0800311c <PSDrawers_Main>:

void PSDrawers_Main(void)
{
 800311c:	b510      	push	{r4, lr}
	while(1)
	{
		/* Write user code here */
		play_task[ModeF]();
 800311e:	4b03      	ldr	r3, [pc, #12]	; (800312c <PSDrawers_Main+0x10>)
 8003120:	4a03      	ldr	r2, [pc, #12]	; (8003130 <PSDrawers_Main+0x14>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	4798      	blx	r3
	while(1)
 800312a:	e7f8      	b.n	800311e <PSDrawers_Main+0x2>
 800312c:	200009bc 	.word	0x200009bc
 8003130:	2000001c 	.word	0x2000001c

08003134 <HAL_TIM_PeriodElapsedCallback>:

/* Callbacks */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	6802      	ldr	r2, [r0, #0]
{
 8003138:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM2)
 800313a:	05db      	lsls	r3, r3, #23
 800313c:	429a      	cmp	r2, r3
 800313e:	d14a      	bne.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_ADC_Start(&hadc);
 8003140:	4c2d      	ldr	r4, [pc, #180]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003142:	0020      	movs	r0, r4
 8003144:	f000 fa7e 	bl	8003644 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8003148:	210a      	movs	r1, #10
 800314a:	0020      	movs	r0, r4
 800314c:	f000 fac4 	bl	80036d8 <HAL_ADC_PollForConversion>
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8003150:	0020      	movs	r0, r4
 8003152:	f000 fb25 	bl	80037a0 <HAL_ADC_GetValue>
 8003156:	4d29      	ldr	r5, [pc, #164]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8003158:	210a      	movs	r1, #10
		adcV[0] = HAL_ADC_GetValue(&hadc);
 800315a:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 800315c:	0020      	movs	r0, r4
 800315e:	f000 fabb 	bl	80036d8 <HAL_ADC_PollForConversion>
		adcV[1] = HAL_ADC_GetValue(&hadc);
 8003162:	0020      	movs	r0, r4
 8003164:	f000 fb1c 	bl	80037a0 <HAL_ADC_GetValue>
 8003168:	8068      	strh	r0, [r5, #2]
		HAL_ADC_Stop(&hadc);
 800316a:	0020      	movs	r0, r4
 800316c:	f000 fa96 	bl	800369c <HAL_ADC_Stop>

		cnt++;
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0xcc>)

		if(buzM) buzC++;
 8003172:	4d24      	ldr	r5, [pc, #144]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		cnt++;
 8003174:	8813      	ldrh	r3, [r2, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	8013      	strh	r3, [r2, #0]
		if(buzM) buzC++;
 800317a:	782a      	ldrb	r2, [r5, #0]
 800317c:	2a00      	cmp	r2, #0
 800317e:	d01c      	beq.n	80031ba <HAL_TIM_PeriodElapsedCallback+0x86>
 8003180:	4c21      	ldr	r4, [pc, #132]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003182:	8823      	ldrh	r3, [r4, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	8023      	strh	r3, [r4, #0]
		if(buzM == 1){
 800318a:	2a01      	cmp	r2, #1
 800318c:	d109      	bne.n	80031a2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(buzC < 500) BUZ(1);
 800318e:	21fa      	movs	r1, #250	; 0xfa
 8003190:	0049      	lsls	r1, r1, #1
 8003192:	428b      	cmp	r3, r1
 8003194:	d220      	bcs.n	80031d8 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8003196:	39ed      	subs	r1, #237	; 0xed
 8003198:	39ff      	subs	r1, #255	; 0xff
			else { buzM = buzC = 0; BUZ(0); }
 800319a:	20a0      	movs	r0, #160	; 0xa0
 800319c:	05c0      	lsls	r0, r0, #23
 800319e:	f000 fe19 	bl	8003dd4 <HAL_GPIO_WritePin>
		}
		if(buzM == 2){
 80031a2:	782b      	ldrb	r3, [r5, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d108      	bne.n	80031ba <HAL_TIM_PeriodElapsedCallback+0x86>
			if(buzC < 25) BUZ(1);
 80031a8:	8823      	ldrh	r3, [r4, #0]
 80031aa:	2b18      	cmp	r3, #24
 80031ac:	d819      	bhi.n	80031e2 <HAL_TIM_PeriodElapsedCallback+0xae>
 80031ae:	2201      	movs	r2, #1
			else if(buzC < 50) BUZ(0);
			else if(buzC < 75) BUZ(1);
			else { buzM = buzC = 0; BUZ(0); }
 80031b0:	20a0      	movs	r0, #160	; 0xa0
 80031b2:	2108      	movs	r1, #8
 80031b4:	05c0      	lsls	r0, r0, #23
 80031b6:	f000 fe0d 	bl	8003dd4 <HAL_GPIO_WritePin>
		}
		if(ledM) ledC = ledC < 1000 ? ledC + 1 : 0;
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80031c4:	20fa      	movs	r0, #250	; 0xfa
 80031c6:	8813      	ldrh	r3, [r2, #0]
 80031c8:	2100      	movs	r1, #0
 80031ca:	0080      	lsls	r0, r0, #2
 80031cc:	4283      	cmp	r3, r0
 80031ce:	d201      	bcs.n	80031d4 <HAL_TIM_PeriodElapsedCallback+0xa0>
 80031d0:	3301      	adds	r3, #1
 80031d2:	b299      	uxth	r1, r3
 80031d4:	8011      	strh	r1, [r2, #0]
		else ledC = 0;
	}
}
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
			else { buzM = buzC = 0; BUZ(0); }
 80031d8:	2200      	movs	r2, #0
 80031da:	2108      	movs	r1, #8
 80031dc:	8022      	strh	r2, [r4, #0]
 80031de:	702a      	strb	r2, [r5, #0]
 80031e0:	e7db      	b.n	800319a <HAL_TIM_PeriodElapsedCallback+0x66>
			else if(buzC < 50) BUZ(0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2b31      	cmp	r3, #49	; 0x31
 80031e6:	d9e3      	bls.n	80031b0 <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(buzC < 75) BUZ(1);
 80031e8:	2b4a      	cmp	r3, #74	; 0x4a
 80031ea:	d9e0      	bls.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x7a>
			else { buzM = buzC = 0; BUZ(0); }
 80031ec:	2200      	movs	r2, #0
 80031ee:	8022      	strh	r2, [r4, #0]
 80031f0:	702a      	strb	r2, [r5, #0]
 80031f2:	e7dd      	b.n	80031b0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		else ledC = 0;
 80031f4:	8013      	strh	r3, [r2, #0]
}
 80031f6:	e7ee      	b.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0xa2>
 80031f8:	20000428 	.word	0x20000428
 80031fc:	200009be 	.word	0x200009be
 8003200:	200009ca 	.word	0x200009ca
 8003204:	200009c4 	.word	0x200009c4
 8003208:	200009c2 	.word	0x200009c2
 800320c:	200009e0 	.word	0x200009e0
 8003210:	200009de 	.word	0x200009de

08003214 <Reset_Handler>:
 8003214:	480d      	ldr	r0, [pc, #52]	; (800324c <LoopForever+0x2>)
 8003216:	4685      	mov	sp, r0
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <LoopForever+0x6>)
 800321a:	490e      	ldr	r1, [pc, #56]	; (8003254 <LoopForever+0xa>)
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <LoopForever+0xe>)
 800321e:	2300      	movs	r3, #0
 8003220:	e002      	b.n	8003228 <LoopCopyDataInit>

08003222 <CopyDataInit>:
 8003222:	58d4      	ldr	r4, [r2, r3]
 8003224:	50c4      	str	r4, [r0, r3]
 8003226:	3304      	adds	r3, #4

08003228 <LoopCopyDataInit>:
 8003228:	18c4      	adds	r4, r0, r3
 800322a:	428c      	cmp	r4, r1
 800322c:	d3f9      	bcc.n	8003222 <CopyDataInit>
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <LoopForever+0x12>)
 8003230:	4c0b      	ldr	r4, [pc, #44]	; (8003260 <LoopForever+0x16>)
 8003232:	2300      	movs	r3, #0
 8003234:	e001      	b.n	800323a <LoopFillZerobss>

08003236 <FillZerobss>:
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	3204      	adds	r2, #4

0800323a <LoopFillZerobss>:
 800323a:	42a2      	cmp	r2, r4
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>
 800323e:	f7fd ffd7 	bl	80011f0 <SystemInit>
 8003242:	f002 f959 	bl	80054f8 <__libc_init_array>
 8003246:	f7fd fb21 	bl	800088c <main>

0800324a <LoopForever>:
 800324a:	e7fe      	b.n	800324a <LoopForever>
 800324c:	20002000 	.word	0x20002000
 8003250:	20000000 	.word	0x20000000
 8003254:	200000a8 	.word	0x200000a8
 8003258:	08006cd8 	.word	0x08006cd8
 800325c:	200000a8 	.word	0x200000a8
 8003260:	20000e40 	.word	0x20000e40

08003264 <ADC1_COMP_IRQHandler>:
 8003264:	e7fe      	b.n	8003264 <ADC1_COMP_IRQHandler>
	...

08003268 <HAL_InitTick>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	0005      	movs	r5, r0
 800326c:	20fa      	movs	r0, #250	; 0xfa
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_InitTick+0x3c>)
 8003270:	0080      	lsls	r0, r0, #2
 8003272:	7819      	ldrb	r1, [r3, #0]
 8003274:	f7fc ff66 	bl	8000144 <__udivsi3>
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_InitTick+0x40>)
 800327a:	0001      	movs	r1, r0
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f7fc ff61 	bl	8000144 <__udivsi3>
 8003282:	f000 fb1b 	bl	80038bc <HAL_SYSTICK_Config>
 8003286:	0004      	movs	r4, r0
 8003288:	2001      	movs	r0, #1
 800328a:	2c00      	cmp	r4, #0
 800328c:	d109      	bne.n	80032a2 <HAL_InitTick+0x3a>
 800328e:	2d03      	cmp	r5, #3
 8003290:	d807      	bhi.n	80032a2 <HAL_InitTick+0x3a>
 8003292:	3802      	subs	r0, #2
 8003294:	0022      	movs	r2, r4
 8003296:	0029      	movs	r1, r5
 8003298:	f000 fada 	bl	8003850 <HAL_NVIC_SetPriority>
 800329c:	0020      	movs	r0, r4
 800329e:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_InitTick+0x44>)
 80032a0:	601d      	str	r5, [r3, #0]
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	2000003f 	.word	0x2000003f
 80032a8:	20000008 	.word	0x20000008
 80032ac:	20000040 	.word	0x20000040

080032b0 <HAL_Init>:
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_Init+0x24>)
 80032b4:	b510      	push	{r4, lr}
 80032b6:	6811      	ldr	r1, [r2, #0]
 80032b8:	2003      	movs	r0, #3
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	f7ff ffd3 	bl	8003268 <HAL_InitTick>
 80032c2:	1e04      	subs	r4, r0, #0
 80032c4:	d103      	bne.n	80032ce <HAL_Init+0x1e>
 80032c6:	f7fd fea3 	bl	8001010 <HAL_MspInit>
 80032ca:	0020      	movs	r0, r4
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	2401      	movs	r4, #1
 80032d0:	e7fb      	b.n	80032ca <HAL_Init+0x1a>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	40022000 	.word	0x40022000

080032d8 <HAL_IncTick>:
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_IncTick+0x10>)
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <HAL_IncTick+0x14>)
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	185b      	adds	r3, r3, r1
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4770      	bx	lr
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000e14 	.word	0x20000e14
 80032ec:	2000003f 	.word	0x2000003f

080032f0 <HAL_GetTick>:
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_GetTick+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4770      	bx	lr
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	20000e14 	.word	0x20000e14

080032fc <HAL_Delay>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	0004      	movs	r4, r0
 8003300:	f7ff fff6 	bl	80032f0 <HAL_GetTick>
 8003304:	0005      	movs	r5, r0
 8003306:	1c63      	adds	r3, r4, #1
 8003308:	d002      	beq.n	8003310 <HAL_Delay+0x14>
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_Delay+0x20>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	18e4      	adds	r4, r4, r3
 8003310:	f7ff ffee 	bl	80032f0 <HAL_GetTick>
 8003314:	1b40      	subs	r0, r0, r5
 8003316:	42a0      	cmp	r0, r4
 8003318:	d3fa      	bcc.n	8003310 <HAL_Delay+0x14>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	2000003f 	.word	0x2000003f

08003320 <ADC_DelayMicroSecond>:
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <ADC_DelayMicroSecond+0x24>)
 8003322:	b513      	push	{r0, r1, r4, lr}
 8003324:	0004      	movs	r4, r0
 8003326:	4908      	ldr	r1, [pc, #32]	; (8003348 <ADC_DelayMicroSecond+0x28>)
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f7fc ff0b 	bl	8000144 <__udivsi3>
 800332e:	4344      	muls	r4, r0
 8003330:	9401      	str	r4, [sp, #4]
 8003332:	9b01      	ldr	r3, [sp, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <ADC_DelayMicroSecond+0x1a>
 8003338:	bd13      	pop	{r0, r1, r4, pc}
 800333a:	9b01      	ldr	r3, [sp, #4]
 800333c:	3b01      	subs	r3, #1
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	e7f7      	b.n	8003332 <ADC_DelayMicroSecond+0x12>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20000008 	.word	0x20000008
 8003348:	000f4240 	.word	0x000f4240

0800334c <ADC_Disable>:
 800334c:	2103      	movs	r1, #3
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	0004      	movs	r4, r0
 8003354:	6898      	ldr	r0, [r3, #8]
 8003356:	4008      	ands	r0, r1
 8003358:	2801      	cmp	r0, #1
 800335a:	d001      	beq.n	8003360 <ADC_Disable+0x14>
 800335c:	2000      	movs	r0, #0
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4202      	tst	r2, r0
 8003364:	d0fa      	beq.n	800335c <ADC_Disable+0x10>
 8003366:	2205      	movs	r2, #5
 8003368:	689d      	ldr	r5, [r3, #8]
 800336a:	4015      	ands	r5, r2
 800336c:	2d01      	cmp	r5, #1
 800336e:	d11d      	bne.n	80033ac <ADC_Disable+0x60>
 8003370:	6898      	ldr	r0, [r3, #8]
 8003372:	3a03      	subs	r2, #3
 8003374:	4302      	orrs	r2, r0
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	6019      	str	r1, [r3, #0]
 800337a:	f7ff ffb9 	bl	80032f0 <HAL_GetTick>
 800337e:	0006      	movs	r6, r0
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	422b      	tst	r3, r5
 8003386:	d0e9      	beq.n	800335c <ADC_Disable+0x10>
 8003388:	f7ff ffb2 	bl	80032f0 <HAL_GetTick>
 800338c:	1b80      	subs	r0, r0, r6
 800338e:	280a      	cmp	r0, #10
 8003390:	d9f6      	bls.n	8003380 <ADC_Disable+0x34>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	422b      	tst	r3, r5
 8003398:	d0f2      	beq.n	8003380 <ADC_Disable+0x34>
 800339a:	2310      	movs	r3, #16
 800339c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800339e:	2001      	movs	r0, #1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	6563      	str	r3, [r4, #84]	; 0x54
 80033a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033a6:	431d      	orrs	r5, r3
 80033a8:	65a5      	str	r5, [r4, #88]	; 0x58
 80033aa:	e7d8      	b.n	800335e <ADC_Disable+0x12>
 80033ac:	2310      	movs	r3, #16
 80033ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033b0:	4313      	orrs	r3, r2
 80033b2:	6563      	str	r3, [r4, #84]	; 0x54
 80033b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b6:	4303      	orrs	r3, r0
 80033b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80033ba:	e7d0      	b.n	800335e <ADC_Disable+0x12>

080033bc <ADC_Enable>:
 80033bc:	2103      	movs	r1, #3
 80033be:	6803      	ldr	r3, [r0, #0]
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	0004      	movs	r4, r0
 80033c6:	400a      	ands	r2, r1
 80033c8:	2a01      	cmp	r2, #1
 80033ca:	d104      	bne.n	80033d6 <ADC_Enable+0x1a>
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	4211      	tst	r1, r2
 80033d0:	d001      	beq.n	80033d6 <ADC_Enable+0x1a>
 80033d2:	2000      	movs	r0, #0
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <ADC_Enable+0x74>)
 80033da:	4211      	tst	r1, r2
 80033dc:	d008      	beq.n	80033f0 <ADC_Enable+0x34>
 80033de:	2310      	movs	r3, #16
 80033e0:	2001      	movs	r0, #1
 80033e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033e4:	4313      	orrs	r3, r2
 80033e6:	6563      	str	r3, [r4, #84]	; 0x54
 80033e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ea:	4303      	orrs	r3, r0
 80033ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80033ee:	e7f1      	b.n	80033d4 <ADC_Enable+0x18>
 80033f0:	2501      	movs	r5, #1
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	0028      	movs	r0, r5
 80033f6:	432a      	orrs	r2, r5
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	f7ff ff91 	bl	8003320 <ADC_DelayMicroSecond>
 80033fe:	f7ff ff77 	bl	80032f0 <HAL_GetTick>
 8003402:	0006      	movs	r6, r0
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	422b      	tst	r3, r5
 800340a:	d1e2      	bne.n	80033d2 <ADC_Enable+0x16>
 800340c:	f7ff ff70 	bl	80032f0 <HAL_GetTick>
 8003410:	1b80      	subs	r0, r0, r6
 8003412:	280a      	cmp	r0, #10
 8003414:	d9f6      	bls.n	8003404 <ADC_Enable+0x48>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	422b      	tst	r3, r5
 800341c:	d1f2      	bne.n	8003404 <ADC_Enable+0x48>
 800341e:	2310      	movs	r3, #16
 8003420:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003422:	2001      	movs	r0, #1
 8003424:	4313      	orrs	r3, r2
 8003426:	6563      	str	r3, [r4, #84]	; 0x54
 8003428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800342a:	431d      	orrs	r5, r3
 800342c:	65a5      	str	r5, [r4, #88]	; 0x58
 800342e:	e7d1      	b.n	80033d4 <ADC_Enable+0x18>
 8003430:	80000017 	.word	0x80000017

08003434 <ADC_ConversionStop>:
 8003434:	2204      	movs	r2, #4
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	0004      	movs	r4, r0
 800343e:	4211      	tst	r1, r2
 8003440:	d101      	bne.n	8003446 <ADC_ConversionStop+0x12>
 8003442:	2000      	movs	r0, #0
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	4211      	tst	r1, r2
 800344a:	d006      	beq.n	800345a <ADC_ConversionStop+0x26>
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	0792      	lsls	r2, r2, #30
 8003450:	d403      	bmi.n	800345a <ADC_ConversionStop+0x26>
 8003452:	2210      	movs	r2, #16
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	f7ff ff49 	bl	80032f0 <HAL_GetTick>
 800345e:	2604      	movs	r6, #4
 8003460:	0005      	movs	r5, r0
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4233      	tst	r3, r6
 8003468:	d0eb      	beq.n	8003442 <ADC_ConversionStop+0xe>
 800346a:	f7ff ff41 	bl	80032f0 <HAL_GetTick>
 800346e:	1b40      	subs	r0, r0, r5
 8003470:	280a      	cmp	r0, #10
 8003472:	d9f6      	bls.n	8003462 <ADC_ConversionStop+0x2e>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4233      	tst	r3, r6
 800347a:	d0f2      	beq.n	8003462 <ADC_ConversionStop+0x2e>
 800347c:	2310      	movs	r3, #16
 800347e:	2001      	movs	r0, #1
 8003480:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003482:	4313      	orrs	r3, r2
 8003484:	6563      	str	r3, [r4, #84]	; 0x54
 8003486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003488:	4303      	orrs	r3, r0
 800348a:	65a3      	str	r3, [r4, #88]	; 0x58
 800348c:	e7da      	b.n	8003444 <ADC_ConversionStop+0x10>
	...

08003490 <HAL_ADC_Init>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	0004      	movs	r4, r0
 8003494:	2001      	movs	r0, #1
 8003496:	2c00      	cmp	r4, #0
 8003498:	d01b      	beq.n	80034d2 <HAL_ADC_Init+0x42>
 800349a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_ADC_Init+0x1e>
 80034a0:	0022      	movs	r2, r4
 80034a2:	3250      	adds	r2, #80	; 0x50
 80034a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80034a6:	0020      	movs	r0, r4
 80034a8:	7013      	strb	r3, [r2, #0]
 80034aa:	f7fd fdbf 	bl	800102c <HAL_ADC_MspInit>
 80034ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034b0:	06db      	lsls	r3, r3, #27
 80034b2:	d406      	bmi.n	80034c2 <HAL_ADC_Init+0x32>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	2204      	movs	r2, #4
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	0008      	movs	r0, r1
 80034bc:	4010      	ands	r0, r2
 80034be:	4211      	tst	r1, r2
 80034c0:	d008      	beq.n	80034d4 <HAL_ADC_Init+0x44>
 80034c2:	2310      	movs	r3, #16
 80034c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034c6:	2001      	movs	r0, #1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	6563      	str	r3, [r4, #84]	; 0x54
 80034cc:	2300      	movs	r3, #0
 80034ce:	3450      	adds	r4, #80	; 0x50
 80034d0:	7023      	strb	r3, [r4, #0]
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034d6:	4955      	ldr	r1, [pc, #340]	; (800362c <HAL_ADC_Init+0x19c>)
 80034d8:	4011      	ands	r1, r2
 80034da:	2202      	movs	r2, #2
 80034dc:	430a      	orrs	r2, r1
 80034de:	6562      	str	r2, [r4, #84]	; 0x54
 80034e0:	2203      	movs	r2, #3
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	4011      	ands	r1, r2
 80034e6:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_ADC_Init+0x1a0>)
 80034e8:	2901      	cmp	r1, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_ADC_Init+0x62>
 80034ec:	681d      	ldr	r5, [r3, #0]
 80034ee:	420d      	tst	r5, r1
 80034f0:	d119      	bne.n	8003526 <HAL_ADC_Init+0x96>
 80034f2:	2680      	movs	r6, #128	; 0x80
 80034f4:	6861      	ldr	r1, [r4, #4]
 80034f6:	05f6      	lsls	r6, r6, #23
 80034f8:	004d      	lsls	r5, r1, #1
 80034fa:	086d      	lsrs	r5, r5, #1
 80034fc:	42b5      	cmp	r5, r6
 80034fe:	d003      	beq.n	8003508 <HAL_ADC_Init+0x78>
 8003500:	2580      	movs	r5, #128	; 0x80
 8003502:	062d      	lsls	r5, r5, #24
 8003504:	42a9      	cmp	r1, r5
 8003506:	d176      	bne.n	80035f6 <HAL_ADC_Init+0x166>
 8003508:	691d      	ldr	r5, [r3, #16]
 800350a:	00ad      	lsls	r5, r5, #2
 800350c:	08ad      	lsrs	r5, r5, #2
 800350e:	611d      	str	r5, [r3, #16]
 8003510:	691d      	ldr	r5, [r3, #16]
 8003512:	4329      	orrs	r1, r5
 8003514:	6119      	str	r1, [r3, #16]
 8003516:	2518      	movs	r5, #24
 8003518:	68d9      	ldr	r1, [r3, #12]
 800351a:	43a9      	bics	r1, r5
 800351c:	60d9      	str	r1, [r3, #12]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	68a5      	ldr	r5, [r4, #8]
 8003522:	4329      	orrs	r1, r5
 8003524:	60d9      	str	r1, [r3, #12]
 8003526:	6811      	ldr	r1, [r2, #0]
 8003528:	4d42      	ldr	r5, [pc, #264]	; (8003634 <HAL_ADC_Init+0x1a4>)
 800352a:	4029      	ands	r1, r5
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003530:	6815      	ldr	r5, [r2, #0]
 8003532:	0649      	lsls	r1, r1, #25
 8003534:	4329      	orrs	r1, r5
 8003536:	6011      	str	r1, [r2, #0]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	0552      	lsls	r2, r2, #21
 800353e:	4211      	tst	r1, r2
 8003540:	d102      	bne.n	8003548 <HAL_ADC_Init+0xb8>
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	493b      	ldr	r1, [pc, #236]	; (8003638 <HAL_ADC_Init+0x1a8>)
 800354c:	400a      	ands	r2, r1
 800354e:	6921      	ldr	r1, [r4, #16]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	68dd      	ldr	r5, [r3, #12]
 8003554:	68e2      	ldr	r2, [r4, #12]
 8003556:	2902      	cmp	r1, #2
 8003558:	d100      	bne.n	800355c <HAL_ADC_Init+0xcc>
 800355a:	2004      	movs	r0, #4
 800355c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800355e:	1c61      	adds	r1, r4, #1
 8003560:	4332      	orrs	r2, r6
 8003562:	432a      	orrs	r2, r5
 8003564:	69a5      	ldr	r5, [r4, #24]
 8003566:	7fc9      	ldrb	r1, [r1, #31]
 8003568:	03ad      	lsls	r5, r5, #14
 800356a:	432a      	orrs	r2, r5
 800356c:	69e5      	ldr	r5, [r4, #28]
 800356e:	03ed      	lsls	r5, r5, #15
 8003570:	432a      	orrs	r2, r5
 8003572:	034d      	lsls	r5, r1, #13
 8003574:	432a      	orrs	r2, r5
 8003576:	0025      	movs	r5, r4
 8003578:	352c      	adds	r5, #44	; 0x2c
 800357a:	782d      	ldrb	r5, [r5, #0]
 800357c:	006d      	lsls	r5, r5, #1
 800357e:	432a      	orrs	r2, r5
 8003580:	4302      	orrs	r2, r0
 8003582:	20c2      	movs	r0, #194	; 0xc2
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003588:	30ff      	adds	r0, #255	; 0xff
 800358a:	4282      	cmp	r2, r0
 800358c:	d004      	beq.n	8003598 <HAL_ADC_Init+0x108>
 800358e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003590:	68d8      	ldr	r0, [r3, #12]
 8003592:	432a      	orrs	r2, r5
 8003594:	4302      	orrs	r2, r0
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	1ca2      	adds	r2, r4, #2
 800359a:	7fd2      	ldrb	r2, [r2, #31]
 800359c:	2a01      	cmp	r2, #1
 800359e:	d106      	bne.n	80035ae <HAL_ADC_Init+0x11e>
 80035a0:	2900      	cmp	r1, #0
 80035a2:	d134      	bne.n	800360e <HAL_ADC_Init+0x17e>
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	68d9      	ldr	r1, [r3, #12]
 80035a8:	0252      	lsls	r2, r2, #9
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	2901      	cmp	r1, #1
 80035b4:	d133      	bne.n	800361e <HAL_ADC_Init+0x18e>
 80035b6:	4821      	ldr	r0, [pc, #132]	; (800363c <HAL_ADC_Init+0x1ac>)
 80035b8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80035ba:	4002      	ands	r2, r0
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80035c0:	6918      	ldr	r0, [r3, #16]
 80035c2:	432a      	orrs	r2, r5
 80035c4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80035c6:	432a      	orrs	r2, r5
 80035c8:	4302      	orrs	r2, r0
 80035ca:	611a      	str	r2, [r3, #16]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	4311      	orrs	r1, r2
 80035d0:	6119      	str	r1, [r3, #16]
 80035d2:	2107      	movs	r1, #7
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	2000      	movs	r0, #0
 80035d8:	438a      	bics	r2, r1
 80035da:	615a      	str	r2, [r3, #20]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035e0:	430a      	orrs	r2, r1
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	2203      	movs	r2, #3
 80035e6:	65a0      	str	r0, [r4, #88]	; 0x58
 80035e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035ea:	4393      	bics	r3, r2
 80035ec:	001a      	movs	r2, r3
 80035ee:	2301      	movs	r3, #1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	6563      	str	r3, [r4, #84]	; 0x54
 80035f4:	e76d      	b.n	80034d2 <HAL_ADC_Init+0x42>
 80035f6:	691d      	ldr	r5, [r3, #16]
 80035f8:	4e11      	ldr	r6, [pc, #68]	; (8003640 <HAL_ADC_Init+0x1b0>)
 80035fa:	00ad      	lsls	r5, r5, #2
 80035fc:	08ad      	lsrs	r5, r5, #2
 80035fe:	611d      	str	r5, [r3, #16]
 8003600:	6815      	ldr	r5, [r2, #0]
 8003602:	4035      	ands	r5, r6
 8003604:	6015      	str	r5, [r2, #0]
 8003606:	6815      	ldr	r5, [r2, #0]
 8003608:	4329      	orrs	r1, r5
 800360a:	6011      	str	r1, [r2, #0]
 800360c:	e783      	b.n	8003516 <HAL_ADC_Init+0x86>
 800360e:	2120      	movs	r1, #32
 8003610:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003612:	4301      	orrs	r1, r0
 8003614:	6561      	str	r1, [r4, #84]	; 0x54
 8003616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003618:	430a      	orrs	r2, r1
 800361a:	65a2      	str	r2, [r4, #88]	; 0x58
 800361c:	e7c7      	b.n	80035ae <HAL_ADC_Init+0x11e>
 800361e:	2101      	movs	r1, #1
 8003620:	420a      	tst	r2, r1
 8003622:	d0d6      	beq.n	80035d2 <HAL_ADC_Init+0x142>
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	438a      	bics	r2, r1
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	e7d2      	b.n	80035d2 <HAL_ADC_Init+0x142>
 800362c:	fffffefd 	.word	0xfffffefd
 8003630:	40012708 	.word	0x40012708
 8003634:	fdffffff 	.word	0xfdffffff
 8003638:	fffe0219 	.word	0xfffe0219
 800363c:	fffffc03 	.word	0xfffffc03
 8003640:	ffc3ffff 	.word	0xffc3ffff

08003644 <HAL_ADC_Start>:
 8003644:	6803      	ldr	r3, [r0, #0]
 8003646:	b570      	push	{r4, r5, r6, lr}
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0004      	movs	r4, r0
 800364c:	2002      	movs	r0, #2
 800364e:	075b      	lsls	r3, r3, #29
 8003650:	d41a      	bmi.n	8003688 <HAL_ADC_Start+0x44>
 8003652:	0025      	movs	r5, r4
 8003654:	3550      	adds	r5, #80	; 0x50
 8003656:	782b      	ldrb	r3, [r5, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d015      	beq.n	8003688 <HAL_ADC_Start+0x44>
 800365c:	2301      	movs	r3, #1
 800365e:	702b      	strb	r3, [r5, #0]
 8003660:	69e3      	ldr	r3, [r4, #28]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d111      	bne.n	800368a <HAL_ADC_Start+0x46>
 8003666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <HAL_ADC_Start+0x54>)
 800366a:	2000      	movs	r0, #0
 800366c:	401a      	ands	r2, r3
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4313      	orrs	r3, r2
 8003674:	221c      	movs	r2, #28
 8003676:	6563      	str	r3, [r4, #84]	; 0x54
 8003678:	65a0      	str	r0, [r4, #88]	; 0x58
 800367a:	7028      	strb	r0, [r5, #0]
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	3a18      	subs	r2, #24
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	0020      	movs	r0, r4
 800368c:	f7ff fe96 	bl	80033bc <ADC_Enable>
 8003690:	2800      	cmp	r0, #0
 8003692:	d0e8      	beq.n	8003666 <HAL_ADC_Start+0x22>
 8003694:	e7f8      	b.n	8003688 <HAL_ADC_Start+0x44>
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	fffff0fe 	.word	0xfffff0fe

0800369c <HAL_ADC_Stop>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	0006      	movs	r6, r0
 80036a0:	3650      	adds	r6, #80	; 0x50
 80036a2:	7833      	ldrb	r3, [r6, #0]
 80036a4:	0004      	movs	r4, r0
 80036a6:	2002      	movs	r0, #2
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d012      	beq.n	80036d2 <HAL_ADC_Stop+0x36>
 80036ac:	2501      	movs	r5, #1
 80036ae:	0020      	movs	r0, r4
 80036b0:	7035      	strb	r5, [r6, #0]
 80036b2:	f7ff febf 	bl	8003434 <ADC_ConversionStop>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d109      	bne.n	80036ce <HAL_ADC_Stop+0x32>
 80036ba:	0020      	movs	r0, r4
 80036bc:	f7ff fe46 	bl	800334c <ADC_Disable>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d104      	bne.n	80036ce <HAL_ADC_Stop+0x32>
 80036c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036c6:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_ADC_Stop+0x38>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	431d      	orrs	r5, r3
 80036cc:	6565      	str	r5, [r4, #84]	; 0x54
 80036ce:	2300      	movs	r3, #0
 80036d0:	7033      	strb	r3, [r6, #0]
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	fffffefe 	.word	0xfffffefe

080036d8 <HAL_ADC_PollForConversion>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	6945      	ldr	r5, [r0, #20]
 80036dc:	0004      	movs	r4, r0
 80036de:	000e      	movs	r6, r1
 80036e0:	2d08      	cmp	r5, #8
 80036e2:	d00d      	beq.n	8003700 <HAL_ADC_PollForConversion+0x28>
 80036e4:	6803      	ldr	r3, [r0, #0]
 80036e6:	2001      	movs	r0, #1
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	250c      	movs	r5, #12
 80036ec:	4203      	tst	r3, r0
 80036ee:	d007      	beq.n	8003700 <HAL_ADC_PollForConversion+0x28>
 80036f0:	2320      	movs	r3, #32
 80036f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80036f4:	3450      	adds	r4, #80	; 0x50
 80036f6:	4313      	orrs	r3, r2
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	2300      	movs	r3, #0
 80036fc:	7023      	strb	r3, [r4, #0]
 80036fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003700:	f7ff fdf6 	bl	80032f0 <HAL_GetTick>
 8003704:	0007      	movs	r7, r0
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4215      	tst	r5, r2
 800370c:	d024      	beq.n	8003758 <HAL_ADC_PollForConversion+0x80>
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	430a      	orrs	r2, r1
 8003716:	6562      	str	r2, [r4, #84]	; 0x54
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	68d9      	ldr	r1, [r3, #12]
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	4211      	tst	r1, r2
 8003720:	d113      	bne.n	800374a <HAL_ADC_PollForConversion+0x72>
 8003722:	1c62      	adds	r2, r4, #1
 8003724:	7fd2      	ldrb	r2, [r2, #31]
 8003726:	2a00      	cmp	r2, #0
 8003728:	d10f      	bne.n	800374a <HAL_ADC_PollForConversion+0x72>
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	0712      	lsls	r2, r2, #28
 800372e:	d50c      	bpl.n	800374a <HAL_ADC_PollForConversion+0x72>
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	0752      	lsls	r2, r2, #29
 8003734:	d428      	bmi.n	8003788 <HAL_ADC_PollForConversion+0xb0>
 8003736:	210c      	movs	r1, #12
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	438a      	bics	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_ADC_PollForConversion+0xc4>)
 8003742:	4011      	ands	r1, r2
 8003744:	2201      	movs	r2, #1
 8003746:	430a      	orrs	r2, r1
 8003748:	6562      	str	r2, [r4, #84]	; 0x54
 800374a:	2000      	movs	r0, #0
 800374c:	69a2      	ldr	r2, [r4, #24]
 800374e:	4282      	cmp	r2, r0
 8003750:	d1d5      	bne.n	80036fe <HAL_ADC_PollForConversion+0x26>
 8003752:	220c      	movs	r2, #12
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e7d2      	b.n	80036fe <HAL_ADC_PollForConversion+0x26>
 8003758:	1c72      	adds	r2, r6, #1
 800375a:	d0d5      	beq.n	8003708 <HAL_ADC_PollForConversion+0x30>
 800375c:	2e00      	cmp	r6, #0
 800375e:	d10d      	bne.n	800377c <HAL_ADC_PollForConversion+0xa4>
 8003760:	002a      	movs	r2, r5
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	401a      	ands	r2, r3
 8003768:	421d      	tst	r5, r3
 800376a:	d1cc      	bne.n	8003706 <HAL_ADC_PollForConversion+0x2e>
 800376c:	2304      	movs	r3, #4
 800376e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003770:	3450      	adds	r4, #80	; 0x50
 8003772:	430b      	orrs	r3, r1
 8003774:	6063      	str	r3, [r4, #4]
 8003776:	2003      	movs	r0, #3
 8003778:	7022      	strb	r2, [r4, #0]
 800377a:	e7c0      	b.n	80036fe <HAL_ADC_PollForConversion+0x26>
 800377c:	f7ff fdb8 	bl	80032f0 <HAL_GetTick>
 8003780:	1bc0      	subs	r0, r0, r7
 8003782:	42b0      	cmp	r0, r6
 8003784:	d8ec      	bhi.n	8003760 <HAL_ADC_PollForConversion+0x88>
 8003786:	e7be      	b.n	8003706 <HAL_ADC_PollForConversion+0x2e>
 8003788:	2220      	movs	r2, #32
 800378a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800378c:	430a      	orrs	r2, r1
 800378e:	6562      	str	r2, [r4, #84]	; 0x54
 8003790:	2201      	movs	r2, #1
 8003792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003794:	430a      	orrs	r2, r1
 8003796:	65a2      	str	r2, [r4, #88]	; 0x58
 8003798:	e7d7      	b.n	800374a <HAL_ADC_PollForConversion+0x72>
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	fffffefe 	.word	0xfffffefe

080037a0 <HAL_ADC_GetValue>:
 80037a0:	6803      	ldr	r3, [r0, #0]
 80037a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_ADC_ConfigChannel>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	0004      	movs	r4, r0
 80037ac:	3450      	adds	r4, #80	; 0x50
 80037ae:	7822      	ldrb	r2, [r4, #0]
 80037b0:	0003      	movs	r3, r0
 80037b2:	000d      	movs	r5, r1
 80037b4:	2002      	movs	r0, #2
 80037b6:	2a01      	cmp	r2, #1
 80037b8:	d00b      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x2a>
 80037ba:	3801      	subs	r0, #1
 80037bc:	7020      	strb	r0, [r4, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6891      	ldr	r1, [r2, #8]
 80037c2:	0749      	lsls	r1, r1, #29
 80037c4:	d506      	bpl.n	80037d4 <HAL_ADC_ConfigChannel+0x2c>
 80037c6:	2220      	movs	r2, #32
 80037c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ca:	430a      	orrs	r2, r1
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
 80037ce:	2300      	movs	r3, #0
 80037d0:	7023      	strb	r3, [r4, #0]
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	6828      	ldr	r0, [r5, #0]
 80037d8:	4e19      	ldr	r6, [pc, #100]	; (8003840 <HAL_ADC_ConfigChannel+0x98>)
 80037da:	686f      	ldr	r7, [r5, #4]
 80037dc:	0341      	lsls	r1, r0, #13
 80037de:	02db      	lsls	r3, r3, #11
 80037e0:	0b49      	lsrs	r1, r1, #13
 80037e2:	4003      	ands	r3, r0
 80037e4:	42b7      	cmp	r7, r6
 80037e6:	d019      	beq.n	800381c <HAL_ADC_ConfigChannel+0x74>
 80037e8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037ea:	4301      	orrs	r1, r0
 80037ec:	6291      	str	r1, [r2, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x5c>
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_ADC_ConfigChannel+0x9c>)
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	200a      	movs	r0, #10
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	f7ff fd8e 	bl	8003320 <ADC_DelayMicroSecond>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	039b      	lsls	r3, r3, #14
 8003808:	d505      	bpl.n	8003816 <HAL_ADC_ConfigChannel+0x6e>
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_ADC_ConfigChannel+0x9c>)
 800380e:	03db      	lsls	r3, r3, #15
 8003810:	6811      	ldr	r1, [r2, #0]
 8003812:	430b      	orrs	r3, r1
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	2000      	movs	r0, #0
 8003818:	7020      	strb	r0, [r4, #0]
 800381a:	e7da      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x2a>
 800381c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800381e:	438d      	bics	r5, r1
 8003820:	6295      	str	r5, [r2, #40]	; 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x88>
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_ADC_ConfigChannel+0x9c>)
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <HAL_ADC_ConfigChannel+0xa0>)
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	400b      	ands	r3, r1
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	0383      	lsls	r3, r0, #14
 8003832:	d5f0      	bpl.n	8003816 <HAL_ADC_ConfigChannel+0x6e>
 8003834:	4a03      	ldr	r2, [pc, #12]	; (8003844 <HAL_ADC_ConfigChannel+0x9c>)
 8003836:	4905      	ldr	r1, [pc, #20]	; (800384c <HAL_ADC_ConfigChannel+0xa4>)
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	400b      	ands	r3, r1
 800383c:	e7ea      	b.n	8003814 <HAL_ADC_ConfigChannel+0x6c>
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	00001001 	.word	0x00001001
 8003844:	40012708 	.word	0x40012708
 8003848:	ff7fffff 	.word	0xff7fffff
 800384c:	ffbfffff 	.word	0xffbfffff

08003850 <HAL_NVIC_SetPriority>:
 8003850:	b530      	push	{r4, r5, lr}
 8003852:	25ff      	movs	r5, #255	; 0xff
 8003854:	2403      	movs	r4, #3
 8003856:	002a      	movs	r2, r5
 8003858:	4004      	ands	r4, r0
 800385a:	00e4      	lsls	r4, r4, #3
 800385c:	40a2      	lsls	r2, r4
 800385e:	0189      	lsls	r1, r1, #6
 8003860:	4029      	ands	r1, r5
 8003862:	43d2      	mvns	r2, r2
 8003864:	40a1      	lsls	r1, r4
 8003866:	b2c3      	uxtb	r3, r0
 8003868:	2800      	cmp	r0, #0
 800386a:	db0a      	blt.n	8003882 <HAL_NVIC_SetPriority+0x32>
 800386c:	24c0      	movs	r4, #192	; 0xc0
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_NVIC_SetPriority+0x4c>)
 8003870:	0880      	lsrs	r0, r0, #2
 8003872:	0080      	lsls	r0, r0, #2
 8003874:	18c0      	adds	r0, r0, r3
 8003876:	00a4      	lsls	r4, r4, #2
 8003878:	5903      	ldr	r3, [r0, r4]
 800387a:	401a      	ands	r2, r3
 800387c:	4311      	orrs	r1, r2
 800387e:	5101      	str	r1, [r0, r4]
 8003880:	bd30      	pop	{r4, r5, pc}
 8003882:	200f      	movs	r0, #15
 8003884:	4003      	ands	r3, r0
 8003886:	3b08      	subs	r3, #8
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <HAL_NVIC_SetPriority+0x50>)
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	181b      	adds	r3, r3, r0
 8003890:	69d8      	ldr	r0, [r3, #28]
 8003892:	4002      	ands	r2, r0
 8003894:	4311      	orrs	r1, r2
 8003896:	61d9      	str	r1, [r3, #28]
 8003898:	e7f2      	b.n	8003880 <HAL_NVIC_SetPriority+0x30>
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	e000e100 	.word	0xe000e100
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <HAL_NVIC_EnableIRQ>:
 80038a4:	2800      	cmp	r0, #0
 80038a6:	db05      	blt.n	80038b4 <HAL_NVIC_EnableIRQ+0x10>
 80038a8:	231f      	movs	r3, #31
 80038aa:	4018      	ands	r0, r3
 80038ac:	3b1e      	subs	r3, #30
 80038ae:	4083      	lsls	r3, r0
 80038b0:	4a01      	ldr	r2, [pc, #4]	; (80038b8 <HAL_NVIC_EnableIRQ+0x14>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4770      	bx	lr
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	e000e100 	.word	0xe000e100

080038bc <HAL_SYSTICK_Config>:
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	1e43      	subs	r3, r0, #1
 80038c0:	0452      	lsls	r2, r2, #17
 80038c2:	2001      	movs	r0, #1
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d20d      	bcs.n	80038e4 <HAL_SYSTICK_Config+0x28>
 80038c8:	21c0      	movs	r1, #192	; 0xc0
 80038ca:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_SYSTICK_Config+0x2c>)
 80038cc:	4807      	ldr	r0, [pc, #28]	; (80038ec <HAL_SYSTICK_Config+0x30>)
 80038ce:	6053      	str	r3, [r2, #4]
 80038d0:	6a03      	ldr	r3, [r0, #32]
 80038d2:	0609      	lsls	r1, r1, #24
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	430b      	orrs	r3, r1
 80038da:	6203      	str	r3, [r0, #32]
 80038dc:	2000      	movs	r0, #0
 80038de:	2307      	movs	r3, #7
 80038e0:	6090      	str	r0, [r2, #8]
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4770      	bx	lr
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	e000e010 	.word	0xe000e010
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <HAL_DMA_Init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	0004      	movs	r4, r0
 80038f4:	2001      	movs	r0, #1
 80038f6:	2c00      	cmp	r4, #0
 80038f8:	d035      	beq.n	8003966 <HAL_DMA_Init+0x76>
 80038fa:	6825      	ldr	r5, [r4, #0]
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_DMA_Init+0x78>)
 80038fe:	2114      	movs	r1, #20
 8003900:	18e8      	adds	r0, r5, r3
 8003902:	f7fc fc1f 	bl	8000144 <__udivsi3>
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_DMA_Init+0x7c>)
 8003908:	0080      	lsls	r0, r0, #2
 800390a:	6423      	str	r3, [r4, #64]	; 0x40
 800390c:	2302      	movs	r3, #2
 800390e:	1da2      	adds	r2, r4, #6
 8003910:	6460      	str	r0, [r4, #68]	; 0x44
 8003912:	77d3      	strb	r3, [r2, #31]
 8003914:	682e      	ldr	r6, [r5, #0]
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_DMA_Init+0x80>)
 8003918:	68a1      	ldr	r1, [r4, #8]
 800391a:	401e      	ands	r6, r3
 800391c:	68e3      	ldr	r3, [r4, #12]
 800391e:	6927      	ldr	r7, [r4, #16]
 8003920:	430b      	orrs	r3, r1
 8003922:	433b      	orrs	r3, r7
 8003924:	6967      	ldr	r7, [r4, #20]
 8003926:	433b      	orrs	r3, r7
 8003928:	69a7      	ldr	r7, [r4, #24]
 800392a:	433b      	orrs	r3, r7
 800392c:	69e7      	ldr	r7, [r4, #28]
 800392e:	433b      	orrs	r3, r7
 8003930:	6a27      	ldr	r7, [r4, #32]
 8003932:	433b      	orrs	r3, r7
 8003934:	4333      	orrs	r3, r6
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	4299      	cmp	r1, r3
 800393e:	d00c      	beq.n	800395a <HAL_DMA_Init+0x6a>
 8003940:	251c      	movs	r5, #28
 8003942:	4028      	ands	r0, r5
 8003944:	3d0d      	subs	r5, #13
 8003946:	4085      	lsls	r5, r0
 8003948:	490a      	ldr	r1, [pc, #40]	; (8003974 <HAL_DMA_Init+0x84>)
 800394a:	680b      	ldr	r3, [r1, #0]
 800394c:	43ab      	bics	r3, r5
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	680d      	ldr	r5, [r1, #0]
 8003954:	4083      	lsls	r3, r0
 8003956:	432b      	orrs	r3, r5
 8003958:	600b      	str	r3, [r1, #0]
 800395a:	2000      	movs	r0, #0
 800395c:	2301      	movs	r3, #1
 800395e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003960:	3405      	adds	r4, #5
 8003962:	77d3      	strb	r3, [r2, #31]
 8003964:	77e0      	strb	r0, [r4, #31]
 8003966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003968:	bffdfff8 	.word	0xbffdfff8
 800396c:	40020000 	.word	0x40020000
 8003970:	ffff800f 	.word	0xffff800f
 8003974:	400200a8 	.word	0x400200a8

08003978 <HAL_DMA_Start_IT>:
 8003978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800397a:	1d45      	adds	r5, r0, #5
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	7feb      	ldrb	r3, [r5, #31]
 8003980:	0004      	movs	r4, r0
 8003982:	2002      	movs	r0, #2
 8003984:	2b01      	cmp	r3, #1
 8003986:	d029      	beq.n	80039dc <HAL_DMA_Start_IT+0x64>
 8003988:	2301      	movs	r3, #1
 800398a:	1da7      	adds	r7, r4, #6
 800398c:	77eb      	strb	r3, [r5, #31]
 800398e:	7ffb      	ldrb	r3, [r7, #31]
 8003990:	2600      	movs	r6, #0
 8003992:	469c      	mov	ip, r3
 8003994:	4660      	mov	r0, ip
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2801      	cmp	r0, #1
 800399a:	d12a      	bne.n	80039f2 <HAL_DMA_Start_IT+0x7a>
 800399c:	3001      	adds	r0, #1
 800399e:	77f8      	strb	r0, [r7, #31]
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	63e6      	str	r6, [r4, #60]	; 0x3c
 80039a4:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80039a6:	6805      	ldr	r5, [r0, #0]
 80039a8:	361c      	adds	r6, #28
 80039aa:	403e      	ands	r6, r7
 80039ac:	439d      	bics	r5, r3
 80039ae:	40b3      	lsls	r3, r6
 80039b0:	6005      	str	r5, [r0, #0]
 80039b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80039b4:	606b      	str	r3, [r5, #4]
 80039b6:	9b01      	ldr	r3, [sp, #4]
 80039b8:	6043      	str	r3, [r0, #4]
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d10e      	bne.n	80039de <HAL_DMA_Start_IT+0x66>
 80039c0:	6082      	str	r2, [r0, #8]
 80039c2:	60c1      	str	r1, [r0, #12]
 80039c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_DMA_Start_IT+0x6c>
 80039ca:	230e      	movs	r3, #14
 80039cc:	6802      	ldr	r2, [r0, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	6003      	str	r3, [r0, #0]
 80039d2:	2301      	movs	r3, #1
 80039d4:	6802      	ldr	r2, [r0, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	6003      	str	r3, [r0, #0]
 80039da:	2000      	movs	r0, #0
 80039dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039de:	6081      	str	r1, [r0, #8]
 80039e0:	60c2      	str	r2, [r0, #12]
 80039e2:	e7ef      	b.n	80039c4 <HAL_DMA_Start_IT+0x4c>
 80039e4:	2204      	movs	r2, #4
 80039e6:	6803      	ldr	r3, [r0, #0]
 80039e8:	4393      	bics	r3, r2
 80039ea:	6003      	str	r3, [r0, #0]
 80039ec:	6802      	ldr	r2, [r0, #0]
 80039ee:	230a      	movs	r3, #10
 80039f0:	e7ed      	b.n	80039ce <HAL_DMA_Start_IT+0x56>
 80039f2:	2002      	movs	r0, #2
 80039f4:	77ee      	strb	r6, [r5, #31]
 80039f6:	e7f1      	b.n	80039dc <HAL_DMA_Start_IT+0x64>

080039f8 <HAL_DMA_IRQHandler>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	221c      	movs	r2, #28
 80039fc:	2704      	movs	r7, #4
 80039fe:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003a00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a02:	4032      	ands	r2, r6
 8003a04:	003e      	movs	r6, r7
 8003a06:	4096      	lsls	r6, r2
 8003a08:	680d      	ldr	r5, [r1, #0]
 8003a0a:	6803      	ldr	r3, [r0, #0]
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	4235      	tst	r5, r6
 8003a10:	d00d      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x36>
 8003a12:	423c      	tst	r4, r7
 8003a14:	d00b      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x36>
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	0692      	lsls	r2, r2, #26
 8003a1a:	d402      	bmi.n	8003a22 <HAL_DMA_IRQHandler+0x2a>
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	43ba      	bics	r2, r7
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a24:	604e      	str	r6, [r1, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x66>
 8003a2a:	4798      	blx	r3
 8003a2c:	e017      	b.n	8003a5e <HAL_DMA_IRQHandler+0x66>
 8003a2e:	2702      	movs	r7, #2
 8003a30:	003e      	movs	r6, r7
 8003a32:	4096      	lsls	r6, r2
 8003a34:	4235      	tst	r5, r6
 8003a36:	d013      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x68>
 8003a38:	423c      	tst	r4, r7
 8003a3a:	d011      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x68>
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	0692      	lsls	r2, r2, #26
 8003a40:	d406      	bmi.n	8003a50 <HAL_DMA_IRQHandler+0x58>
 8003a42:	240a      	movs	r4, #10
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	43a2      	bics	r2, r4
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	1d83      	adds	r3, r0, #6
 8003a4e:	77da      	strb	r2, [r3, #31]
 8003a50:	2200      	movs	r2, #0
 8003a52:	1d43      	adds	r3, r0, #5
 8003a54:	604e      	str	r6, [r1, #4]
 8003a56:	77da      	strb	r2, [r3, #31]
 8003a58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d1e5      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x32>
 8003a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a60:	2608      	movs	r6, #8
 8003a62:	0037      	movs	r7, r6
 8003a64:	4097      	lsls	r7, r2
 8003a66:	423d      	tst	r5, r7
 8003a68:	d0f9      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x66>
 8003a6a:	4234      	tst	r4, r6
 8003a6c:	d0f7      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x66>
 8003a6e:	250e      	movs	r5, #14
 8003a70:	681c      	ldr	r4, [r3, #0]
 8003a72:	43ac      	bics	r4, r5
 8003a74:	601c      	str	r4, [r3, #0]
 8003a76:	2301      	movs	r3, #1
 8003a78:	001c      	movs	r4, r3
 8003a7a:	4094      	lsls	r4, r2
 8003a7c:	1d82      	adds	r2, r0, #6
 8003a7e:	604c      	str	r4, [r1, #4]
 8003a80:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003a82:	77d3      	strb	r3, [r2, #31]
 8003a84:	2200      	movs	r2, #0
 8003a86:	1d43      	adds	r3, r0, #5
 8003a88:	77da      	strb	r2, [r3, #31]
 8003a8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a8c:	e7e5      	b.n	8003a5a <HAL_DMA_IRQHandler+0x62>
	...

08003a90 <FLASH_SetErrorCode>:
 8003a90:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <FLASH_SetErrorCode+0xa4>)
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	6990      	ldr	r0, [r2, #24]
 8003a96:	0049      	lsls	r1, r1, #1
 8003a98:	0003      	movs	r3, r0
 8003a9a:	b530      	push	{r4, r5, lr}
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	4208      	tst	r0, r1
 8003aa0:	d005      	beq.n	8003aae <FLASH_SetErrorCode+0x1e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	4824      	ldr	r0, [pc, #144]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003aa6:	6944      	ldr	r4, [r0, #20]
 8003aa8:	4323      	orrs	r3, r4
 8003aaa:	6143      	str	r3, [r0, #20]
 8003aac:	000b      	movs	r3, r1
 8003aae:	2080      	movs	r0, #128	; 0x80
 8003ab0:	6991      	ldr	r1, [r2, #24]
 8003ab2:	0080      	lsls	r0, r0, #2
 8003ab4:	4201      	tst	r1, r0
 8003ab6:	d005      	beq.n	8003ac4 <FLASH_SetErrorCode+0x34>
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4c1f      	ldr	r4, [pc, #124]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003abc:	4303      	orrs	r3, r0
 8003abe:	6965      	ldr	r5, [r4, #20]
 8003ac0:	4329      	orrs	r1, r5
 8003ac2:	6161      	str	r1, [r4, #20]
 8003ac4:	2080      	movs	r0, #128	; 0x80
 8003ac6:	6991      	ldr	r1, [r2, #24]
 8003ac8:	00c0      	lsls	r0, r0, #3
 8003aca:	4201      	tst	r1, r0
 8003acc:	d005      	beq.n	8003ada <FLASH_SetErrorCode+0x4a>
 8003ace:	2108      	movs	r1, #8
 8003ad0:	4c19      	ldr	r4, [pc, #100]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003ad2:	4303      	orrs	r3, r0
 8003ad4:	6965      	ldr	r5, [r4, #20]
 8003ad6:	4329      	orrs	r1, r5
 8003ad8:	6161      	str	r1, [r4, #20]
 8003ada:	2080      	movs	r0, #128	; 0x80
 8003adc:	6991      	ldr	r1, [r2, #24]
 8003ade:	0100      	lsls	r0, r0, #4
 8003ae0:	4201      	tst	r1, r0
 8003ae2:	d005      	beq.n	8003af0 <FLASH_SetErrorCode+0x60>
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4c14      	ldr	r4, [pc, #80]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003ae8:	4303      	orrs	r3, r0
 8003aea:	6965      	ldr	r5, [r4, #20]
 8003aec:	4329      	orrs	r1, r5
 8003aee:	6161      	str	r1, [r4, #20]
 8003af0:	2080      	movs	r0, #128	; 0x80
 8003af2:	6991      	ldr	r1, [r2, #24]
 8003af4:	0180      	lsls	r0, r0, #6
 8003af6:	4201      	tst	r1, r0
 8003af8:	d005      	beq.n	8003b06 <FLASH_SetErrorCode+0x76>
 8003afa:	2110      	movs	r1, #16
 8003afc:	4c0e      	ldr	r4, [pc, #56]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003afe:	4303      	orrs	r3, r0
 8003b00:	6965      	ldr	r5, [r4, #20]
 8003b02:	4329      	orrs	r1, r5
 8003b04:	6161      	str	r1, [r4, #20]
 8003b06:	6991      	ldr	r1, [r2, #24]
 8003b08:	0389      	lsls	r1, r1, #14
 8003b0a:	d505      	bpl.n	8003b18 <FLASH_SetErrorCode+0x88>
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	4c0a      	ldr	r4, [pc, #40]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003b10:	4303      	orrs	r3, r0
 8003b12:	6961      	ldr	r1, [r4, #20]
 8003b14:	4301      	orrs	r1, r0
 8003b16:	6161      	str	r1, [r4, #20]
 8003b18:	2080      	movs	r0, #128	; 0x80
 8003b1a:	6991      	ldr	r1, [r2, #24]
 8003b1c:	0240      	lsls	r0, r0, #9
 8003b1e:	4201      	tst	r1, r0
 8003b20:	d005      	beq.n	8003b2e <FLASH_SetErrorCode+0x9e>
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	4c04      	ldr	r4, [pc, #16]	; (8003b38 <FLASH_SetErrorCode+0xa8>)
 8003b26:	4303      	orrs	r3, r0
 8003b28:	6965      	ldr	r5, [r4, #20]
 8003b2a:	4329      	orrs	r1, r5
 8003b2c:	6161      	str	r1, [r4, #20]
 8003b2e:	6193      	str	r3, [r2, #24]
 8003b30:	bd30      	pop	{r4, r5, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	40022000 	.word	0x40022000
 8003b38:	20000e18 	.word	0x20000e18

08003b3c <FLASH_WaitForLastOperation>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	0004      	movs	r4, r0
 8003b40:	f7ff fbd6 	bl	80032f0 <HAL_GetTick>
 8003b44:	2601      	movs	r6, #1
 8003b46:	0005      	movs	r5, r0
 8003b48:	4b18      	ldr	r3, [pc, #96]	; (8003bac <FLASH_WaitForLastOperation+0x70>)
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	4232      	tst	r2, r6
 8003b4e:	d121      	bne.n	8003b94 <FLASH_WaitForLastOperation+0x58>
 8003b50:	2202      	movs	r2, #2
 8003b52:	6999      	ldr	r1, [r3, #24]
 8003b54:	4211      	tst	r1, r2
 8003b56:	d000      	beq.n	8003b5a <FLASH_WaitForLastOperation+0x1e>
 8003b58:	619a      	str	r2, [r3, #24]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	05d2      	lsls	r2, r2, #23
 8003b5e:	d415      	bmi.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	0592      	lsls	r2, r2, #22
 8003b64:	d412      	bmi.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	0552      	lsls	r2, r2, #21
 8003b6a:	d40f      	bmi.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	0512      	lsls	r2, r2, #20
 8003b70:	d40c      	bmi.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	0492      	lsls	r2, r2, #18
 8003b76:	d409      	bmi.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	0008      	movs	r0, r1
 8003b7e:	0292      	lsls	r2, r2, #10
 8003b80:	4010      	ands	r0, r2
 8003b82:	4211      	tst	r1, r2
 8003b84:	d102      	bne.n	8003b8c <FLASH_WaitForLastOperation+0x50>
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	03db      	lsls	r3, r3, #15
 8003b8a:	d508      	bpl.n	8003b9e <FLASH_WaitForLastOperation+0x62>
 8003b8c:	f7ff ff80 	bl	8003a90 <FLASH_SetErrorCode>
 8003b90:	2001      	movs	r0, #1
 8003b92:	e004      	b.n	8003b9e <FLASH_WaitForLastOperation+0x62>
 8003b94:	1c62      	adds	r2, r4, #1
 8003b96:	d0d8      	beq.n	8003b4a <FLASH_WaitForLastOperation+0xe>
 8003b98:	2c00      	cmp	r4, #0
 8003b9a:	d101      	bne.n	8003ba0 <FLASH_WaitForLastOperation+0x64>
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	f7ff fba6 	bl	80032f0 <HAL_GetTick>
 8003ba4:	1b40      	subs	r0, r0, r5
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d9ce      	bls.n	8003b48 <FLASH_WaitForLastOperation+0xc>
 8003baa:	e7f7      	b.n	8003b9c <FLASH_WaitForLastOperation+0x60>
 8003bac:	40022000 	.word	0x40022000

08003bb0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	4211      	tst	r1, r2
 8003bba:	d00a      	beq.n	8003bd2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 8003bbc:	f3ef 8110 	mrs	r1, PRIMASK
 8003bc0:	b672      	cpsid	i
 8003bc2:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003bc4:	60d8      	str	r0, [r3, #12]
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003bc8:	60d8      	str	r0, [r3, #12]
 8003bca:	f381 8810 	msr	PRIMASK, r1
 8003bce:	6858      	ldr	r0, [r3, #4]
 8003bd0:	4010      	ands	r0, r2
 8003bd2:	4770      	bx	lr
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	89abcdef 	.word	0x89abcdef
 8003bdc:	02030405 	.word	0x02030405

08003be0 <HAL_FLASHEx_DATAEEPROM_Lock>:
 8003be0:	2301      	movs	r3, #1
 8003be2:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8003be4:	2000      	movs	r0, #0
 8003be6:	6851      	ldr	r1, [r2, #4]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6053      	str	r3, [r2, #4]
 8003bec:	4770      	bx	lr
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	40022000 	.word	0x40022000

08003bf4 <HAL_FLASHEx_DATAEEPROM_Program>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	4f12      	ldr	r7, [pc, #72]	; (8003c40 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
 8003bf8:	0006      	movs	r6, r0
 8003bfa:	7c3b      	ldrb	r3, [r7, #16]
 8003bfc:	000d      	movs	r5, r1
 8003bfe:	0014      	movs	r4, r2
 8003c00:	2002      	movs	r0, #2
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d00c      	beq.n	8003c20 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003c06:	2301      	movs	r3, #1
 8003c08:	480e      	ldr	r0, [pc, #56]	; (8003c44 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003c0a:	743b      	strb	r3, [r7, #16]
 8003c0c:	f7ff ff96 	bl	8003b3c <FLASH_WaitForLastOperation>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003c14:	6178      	str	r0, [r7, #20]
 8003c16:	2e02      	cmp	r6, #2
 8003c18:	d103      	bne.n	8003c22 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
 8003c1a:	602c      	str	r4, [r5, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	743b      	strb	r3, [r7, #16]
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c22:	2e01      	cmp	r6, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_FLASHEx_DATAEEPROM_Program+0x38>
 8003c26:	b2a4      	uxth	r4, r4
 8003c28:	802c      	strh	r4, [r5, #0]
 8003c2a:	e7f7      	b.n	8003c1c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
 8003c30:	4804      	ldr	r0, [pc, #16]	; (8003c44 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003c32:	f7ff ff83 	bl	8003b3c <FLASH_WaitForLastOperation>
 8003c36:	e7f1      	b.n	8003c1c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003c38:	b2e4      	uxtb	r4, r4
 8003c3a:	702c      	strb	r4, [r5, #0]
 8003c3c:	e7ee      	b.n	8003c1c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000e18 	.word	0x20000e18
 8003c44:	0000c350 	.word	0x0000c350

08003c48 <HAL_GPIO_Init>:
 8003c48:	4a58      	ldr	r2, [pc, #352]	; (8003dac <HAL_GPIO_Init+0x164>)
 8003c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4c:	1882      	adds	r2, r0, r2
 8003c4e:	1e54      	subs	r4, r2, #1
 8003c50:	41a2      	sbcs	r2, r4
 8003c52:	2300      	movs	r3, #0
 8003c54:	b087      	sub	sp, #28
 8003c56:	3205      	adds	r2, #5
 8003c58:	9103      	str	r1, [sp, #12]
 8003c5a:	9205      	str	r2, [sp, #20]
 8003c5c:	9a03      	ldr	r2, [sp, #12]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	0014      	movs	r4, r2
 8003c62:	40dc      	lsrs	r4, r3
 8003c64:	d101      	bne.n	8003c6a <HAL_GPIO_Init+0x22>
 8003c66:	b007      	add	sp, #28
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	000d      	movs	r5, r1
 8003c6e:	0014      	movs	r4, r2
 8003c70:	409d      	lsls	r5, r3
 8003c72:	402c      	ands	r4, r5
 8003c74:	468c      	mov	ip, r1
 8003c76:	9402      	str	r4, [sp, #8]
 8003c78:	422a      	tst	r2, r5
 8003c7a:	d100      	bne.n	8003c7e <HAL_GPIO_Init+0x36>
 8003c7c:	e094      	b.n	8003da8 <HAL_GPIO_Init+0x160>
 8003c7e:	2403      	movs	r4, #3
 8003c80:	9a03      	ldr	r2, [sp, #12]
 8003c82:	005e      	lsls	r6, r3, #1
 8003c84:	6852      	ldr	r2, [r2, #4]
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	4022      	ands	r2, r4
 8003c8a:	40b4      	lsls	r4, r6
 8003c8c:	43e1      	mvns	r1, r4
 8003c8e:	1e54      	subs	r4, r2, #1
 8003c90:	9104      	str	r1, [sp, #16]
 8003c92:	4564      	cmp	r4, ip
 8003c94:	d82a      	bhi.n	8003cec <HAL_GPIO_Init+0xa4>
 8003c96:	6887      	ldr	r7, [r0, #8]
 8003c98:	400f      	ands	r7, r1
 8003c9a:	9903      	ldr	r1, [sp, #12]
 8003c9c:	68cc      	ldr	r4, [r1, #12]
 8003c9e:	9901      	ldr	r1, [sp, #4]
 8003ca0:	40b4      	lsls	r4, r6
 8003ca2:	433c      	orrs	r4, r7
 8003ca4:	6084      	str	r4, [r0, #8]
 8003ca6:	6844      	ldr	r4, [r0, #4]
 8003ca8:	43ac      	bics	r4, r5
 8003caa:	0025      	movs	r5, r4
 8003cac:	090c      	lsrs	r4, r1, #4
 8003cae:	4661      	mov	r1, ip
 8003cb0:	400c      	ands	r4, r1
 8003cb2:	409c      	lsls	r4, r3
 8003cb4:	432c      	orrs	r4, r5
 8003cb6:	6044      	str	r4, [r0, #4]
 8003cb8:	68c5      	ldr	r5, [r0, #12]
 8003cba:	9904      	ldr	r1, [sp, #16]
 8003cbc:	400d      	ands	r5, r1
 8003cbe:	9903      	ldr	r1, [sp, #12]
 8003cc0:	688c      	ldr	r4, [r1, #8]
 8003cc2:	40b4      	lsls	r4, r6
 8003cc4:	432c      	orrs	r4, r5
 8003cc6:	60c4      	str	r4, [r0, #12]
 8003cc8:	2a02      	cmp	r2, #2
 8003cca:	d111      	bne.n	8003cf0 <HAL_GPIO_Init+0xa8>
 8003ccc:	2507      	movs	r5, #7
 8003cce:	210f      	movs	r1, #15
 8003cd0:	401d      	ands	r5, r3
 8003cd2:	00ad      	lsls	r5, r5, #2
 8003cd4:	40a9      	lsls	r1, r5
 8003cd6:	08dc      	lsrs	r4, r3, #3
 8003cd8:	00a4      	lsls	r4, r4, #2
 8003cda:	1904      	adds	r4, r0, r4
 8003cdc:	6a27      	ldr	r7, [r4, #32]
 8003cde:	438f      	bics	r7, r1
 8003ce0:	9903      	ldr	r1, [sp, #12]
 8003ce2:	6909      	ldr	r1, [r1, #16]
 8003ce4:	40a9      	lsls	r1, r5
 8003ce6:	430f      	orrs	r7, r1
 8003ce8:	6227      	str	r7, [r4, #32]
 8003cea:	e001      	b.n	8003cf0 <HAL_GPIO_Init+0xa8>
 8003cec:	2a03      	cmp	r2, #3
 8003cee:	d1e3      	bne.n	8003cb8 <HAL_GPIO_Init+0x70>
 8003cf0:	40b2      	lsls	r2, r6
 8003cf2:	6804      	ldr	r4, [r0, #0]
 8003cf4:	9904      	ldr	r1, [sp, #16]
 8003cf6:	4021      	ands	r1, r4
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	6002      	str	r2, [r0, #0]
 8003cfc:	22c0      	movs	r2, #192	; 0xc0
 8003cfe:	9901      	ldr	r1, [sp, #4]
 8003d00:	0292      	lsls	r2, r2, #10
 8003d02:	4211      	tst	r1, r2
 8003d04:	d050      	beq.n	8003da8 <HAL_GPIO_Init+0x160>
 8003d06:	2701      	movs	r7, #1
 8003d08:	4c29      	ldr	r4, [pc, #164]	; (8003db0 <HAL_GPIO_Init+0x168>)
 8003d0a:	2603      	movs	r6, #3
 8003d0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003d0e:	001d      	movs	r5, r3
 8003d10:	433a      	orrs	r2, r7
 8003d12:	6362      	str	r2, [r4, #52]	; 0x34
 8003d14:	4a27      	ldr	r2, [pc, #156]	; (8003db4 <HAL_GPIO_Init+0x16c>)
 8003d16:	089c      	lsrs	r4, r3, #2
 8003d18:	00a4      	lsls	r4, r4, #2
 8003d1a:	18a4      	adds	r4, r4, r2
 8003d1c:	68a2      	ldr	r2, [r4, #8]
 8003d1e:	4035      	ands	r5, r6
 8003d20:	4694      	mov	ip, r2
 8003d22:	220f      	movs	r2, #15
 8003d24:	00ad      	lsls	r5, r5, #2
 8003d26:	40aa      	lsls	r2, r5
 8003d28:	4661      	mov	r1, ip
 8003d2a:	4391      	bics	r1, r2
 8003d2c:	22a0      	movs	r2, #160	; 0xa0
 8003d2e:	05d2      	lsls	r2, r2, #23
 8003d30:	4694      	mov	ip, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	4560      	cmp	r0, ip
 8003d36:	d00d      	beq.n	8003d54 <HAL_GPIO_Init+0x10c>
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_GPIO_Init+0x170>)
 8003d3a:	4694      	mov	ip, r2
 8003d3c:	003a      	movs	r2, r7
 8003d3e:	4560      	cmp	r0, ip
 8003d40:	d008      	beq.n	8003d54 <HAL_GPIO_Init+0x10c>
 8003d42:	4f1e      	ldr	r7, [pc, #120]	; (8003dbc <HAL_GPIO_Init+0x174>)
 8003d44:	1892      	adds	r2, r2, r2
 8003d46:	42b8      	cmp	r0, r7
 8003d48:	d004      	beq.n	8003d54 <HAL_GPIO_Init+0x10c>
 8003d4a:	4f1d      	ldr	r7, [pc, #116]	; (8003dc0 <HAL_GPIO_Init+0x178>)
 8003d4c:	0032      	movs	r2, r6
 8003d4e:	42b8      	cmp	r0, r7
 8003d50:	d000      	beq.n	8003d54 <HAL_GPIO_Init+0x10c>
 8003d52:	9a05      	ldr	r2, [sp, #20]
 8003d54:	40aa      	lsls	r2, r5
 8003d56:	430a      	orrs	r2, r1
 8003d58:	9902      	ldr	r1, [sp, #8]
 8003d5a:	60a2      	str	r2, [r4, #8]
 8003d5c:	000d      	movs	r5, r1
 8003d5e:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_GPIO_Init+0x17c>)
 8003d60:	43cc      	mvns	r4, r1
 8003d62:	6816      	ldr	r6, [r2, #0]
 8003d64:	9901      	ldr	r1, [sp, #4]
 8003d66:	4335      	orrs	r5, r6
 8003d68:	03c9      	lsls	r1, r1, #15
 8003d6a:	d401      	bmi.n	8003d70 <HAL_GPIO_Init+0x128>
 8003d6c:	0035      	movs	r5, r6
 8003d6e:	4025      	ands	r5, r4
 8003d70:	6015      	str	r5, [r2, #0]
 8003d72:	6856      	ldr	r6, [r2, #4]
 8003d74:	9d02      	ldr	r5, [sp, #8]
 8003d76:	9901      	ldr	r1, [sp, #4]
 8003d78:	4335      	orrs	r5, r6
 8003d7a:	0389      	lsls	r1, r1, #14
 8003d7c:	d401      	bmi.n	8003d82 <HAL_GPIO_Init+0x13a>
 8003d7e:	0035      	movs	r5, r6
 8003d80:	4025      	ands	r5, r4
 8003d82:	6055      	str	r5, [r2, #4]
 8003d84:	6896      	ldr	r6, [r2, #8]
 8003d86:	9d02      	ldr	r5, [sp, #8]
 8003d88:	9901      	ldr	r1, [sp, #4]
 8003d8a:	4335      	orrs	r5, r6
 8003d8c:	02c9      	lsls	r1, r1, #11
 8003d8e:	d401      	bmi.n	8003d94 <HAL_GPIO_Init+0x14c>
 8003d90:	0035      	movs	r5, r6
 8003d92:	4025      	ands	r5, r4
 8003d94:	6095      	str	r5, [r2, #8]
 8003d96:	68d5      	ldr	r5, [r2, #12]
 8003d98:	9e02      	ldr	r6, [sp, #8]
 8003d9a:	9901      	ldr	r1, [sp, #4]
 8003d9c:	432e      	orrs	r6, r5
 8003d9e:	0289      	lsls	r1, r1, #10
 8003da0:	d401      	bmi.n	8003da6 <HAL_GPIO_Init+0x15e>
 8003da2:	4025      	ands	r5, r4
 8003da4:	002e      	movs	r6, r5
 8003da6:	60d6      	str	r6, [r2, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	e757      	b.n	8003c5c <HAL_GPIO_Init+0x14>
 8003dac:	afffe400 	.word	0xafffe400
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000
 8003db8:	50000400 	.word	0x50000400
 8003dbc:	50000800 	.word	0x50000800
 8003dc0:	50000c00 	.word	0x50000c00
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <HAL_GPIO_ReadPin>:
 8003dc8:	6900      	ldr	r0, [r0, #16]
 8003dca:	4008      	ands	r0, r1
 8003dcc:	1e43      	subs	r3, r0, #1
 8003dce:	4198      	sbcs	r0, r3
 8003dd0:	b2c0      	uxtb	r0, r0
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_GPIO_WritePin>:
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_GPIO_WritePin+0x8>
 8003dd8:	6181      	str	r1, [r0, #24]
 8003dda:	4770      	bx	lr
 8003ddc:	6281      	str	r1, [r0, #40]	; 0x28
 8003dde:	e7fc      	b.n	8003dda <HAL_GPIO_WritePin+0x6>

08003de0 <I2C_Flush_TXDR>:
 8003de0:	6803      	ldr	r3, [r0, #0]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	0792      	lsls	r2, r2, #30
 8003de6:	d501      	bpl.n	8003dec <I2C_Flush_TXDR+0xc>
 8003de8:	2200      	movs	r2, #0
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28
 8003dec:	2201      	movs	r2, #1
 8003dee:	6999      	ldr	r1, [r3, #24]
 8003df0:	4211      	tst	r1, r2
 8003df2:	d102      	bne.n	8003dfa <I2C_Flush_TXDR+0x1a>
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	619a      	str	r2, [r3, #24]
 8003dfa:	4770      	bx	lr

08003dfc <I2C_TransferConfig>:
 8003dfc:	b530      	push	{r4, r5, lr}
 8003dfe:	9c03      	ldr	r4, [sp, #12]
 8003e00:	0412      	lsls	r2, r2, #16
 8003e02:	6800      	ldr	r0, [r0, #0]
 8003e04:	4322      	orrs	r2, r4
 8003e06:	431a      	orrs	r2, r3
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <I2C_TransferConfig+0x24>)
 8003e0a:	6845      	ldr	r5, [r0, #4]
 8003e0c:	0589      	lsls	r1, r1, #22
 8003e0e:	0d64      	lsrs	r4, r4, #21
 8003e10:	0d89      	lsrs	r1, r1, #22
 8003e12:	431c      	orrs	r4, r3
 8003e14:	43a5      	bics	r5, r4
 8003e16:	430a      	orrs	r2, r1
 8003e18:	432a      	orrs	r2, r5
 8003e1a:	6042      	str	r2, [r0, #4]
 8003e1c:	bd30      	pop	{r4, r5, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	03ff63ff 	.word	0x03ff63ff

08003e24 <I2C_IsAcknowledgeFailed>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	6803      	ldr	r3, [r0, #0]
 8003e28:	0016      	movs	r6, r2
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	0004      	movs	r4, r0
 8003e2e:	000d      	movs	r5, r1
 8003e30:	2000      	movs	r0, #0
 8003e32:	06d2      	lsls	r2, r2, #27
 8003e34:	d536      	bpl.n	8003ea4 <I2C_IsAcknowledgeFailed+0x80>
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	0192      	lsls	r2, r2, #6
 8003e3a:	d404      	bmi.n	8003e46 <I2C_IsAcknowledgeFailed+0x22>
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	01d2      	lsls	r2, r2, #7
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	2720      	movs	r7, #32
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	423a      	tst	r2, r7
 8003e4e:	d012      	beq.n	8003e76 <I2C_IsAcknowledgeFailed+0x52>
 8003e50:	2210      	movs	r2, #16
 8003e52:	0020      	movs	r0, r4
 8003e54:	61da      	str	r2, [r3, #28]
 8003e56:	61df      	str	r7, [r3, #28]
 8003e58:	f7ff ffc2 	bl	8003de0 <I2C_Flush_TXDR>
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	4912      	ldr	r1, [pc, #72]	; (8003ea8 <I2C_IsAcknowledgeFailed+0x84>)
 8003e60:	6853      	ldr	r3, [r2, #4]
 8003e62:	400b      	ands	r3, r1
 8003e64:	6053      	str	r3, [r2, #4]
 8003e66:	2304      	movs	r3, #4
 8003e68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	6463      	str	r3, [r4, #68]	; 0x44
 8003e6e:	0023      	movs	r3, r4
 8003e70:	3341      	adds	r3, #65	; 0x41
 8003e72:	701f      	strb	r7, [r3, #0]
 8003e74:	e00f      	b.n	8003e96 <I2C_IsAcknowledgeFailed+0x72>
 8003e76:	1c6a      	adds	r2, r5, #1
 8003e78:	d0e7      	beq.n	8003e4a <I2C_IsAcknowledgeFailed+0x26>
 8003e7a:	f7ff fa39 	bl	80032f0 <HAL_GetTick>
 8003e7e:	1b80      	subs	r0, r0, r6
 8003e80:	4285      	cmp	r5, r0
 8003e82:	d301      	bcc.n	8003e88 <I2C_IsAcknowledgeFailed+0x64>
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	d1df      	bne.n	8003e48 <I2C_IsAcknowledgeFailed+0x24>
 8003e88:	2220      	movs	r2, #32
 8003e8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	6463      	str	r3, [r4, #68]	; 0x44
 8003e90:	0023      	movs	r3, r4
 8003e92:	3341      	adds	r3, #65	; 0x41
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	0022      	movs	r2, r4
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	3242      	adds	r2, #66	; 0x42
 8003e9e:	3440      	adds	r4, #64	; 0x40
 8003ea0:	7013      	strb	r3, [r2, #0]
 8003ea2:	7023      	strb	r3, [r4, #0]
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	fe00e800 	.word	0xfe00e800

08003eac <I2C_WaitOnTXISFlagUntilTimeout>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	0004      	movs	r4, r0
 8003eb0:	000d      	movs	r5, r1
 8003eb2:	0016      	movs	r6, r2
 8003eb4:	2702      	movs	r7, #2
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	423b      	tst	r3, r7
 8003ebc:	d001      	beq.n	8003ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec2:	0032      	movs	r2, r6
 8003ec4:	0029      	movs	r1, r5
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	f7ff ffac 	bl	8003e24 <I2C_IsAcknowledgeFailed>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d115      	bne.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
 8003ed0:	1c6b      	adds	r3, r5, #1
 8003ed2:	d0f0      	beq.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8003ed4:	f7ff fa0c 	bl	80032f0 <HAL_GetTick>
 8003ed8:	1b80      	subs	r0, r0, r6
 8003eda:	42a8      	cmp	r0, r5
 8003edc:	d801      	bhi.n	8003ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d1e9      	bne.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	6463      	str	r3, [r4, #68]	; 0x44
 8003eea:	0023      	movs	r3, r4
 8003eec:	3341      	adds	r3, #65	; 0x41
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	0022      	movs	r2, r4
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	3242      	adds	r2, #66	; 0x42
 8003ef6:	3440      	adds	r4, #64	; 0x40
 8003ef8:	7013      	strb	r3, [r2, #0]
 8003efa:	7023      	strb	r3, [r4, #0]
 8003efc:	2001      	movs	r0, #1
 8003efe:	e7df      	b.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	0004      	movs	r4, r0
 8003f04:	000d      	movs	r5, r1
 8003f06:	0016      	movs	r6, r2
 8003f08:	2720      	movs	r7, #32
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	4213      	tst	r3, r2
 8003f12:	d111      	bne.n	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 8003f14:	0032      	movs	r2, r6
 8003f16:	0029      	movs	r1, r5
 8003f18:	0020      	movs	r0, r4
 8003f1a:	f7ff ff83 	bl	8003e24 <I2C_IsAcknowledgeFailed>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d119      	bne.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	423a      	tst	r2, r7
 8003f28:	d017      	beq.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	420a      	tst	r2, r1
 8003f30:	d004      	beq.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8003f32:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d001      	beq.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3c:	61df      	str	r7, [r3, #28]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	0022      	movs	r2, r4
 8003f48:	2300      	movs	r3, #0
 8003f4a:	3241      	adds	r2, #65	; 0x41
 8003f4c:	6463      	str	r3, [r4, #68]	; 0x44
 8003f4e:	7017      	strb	r7, [r2, #0]
 8003f50:	3440      	adds	r4, #64	; 0x40
 8003f52:	7053      	strb	r3, [r2, #1]
 8003f54:	7023      	strb	r3, [r4, #0]
 8003f56:	2001      	movs	r0, #1
 8003f58:	e7ef      	b.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003f5a:	f7ff f9c9 	bl	80032f0 <HAL_GetTick>
 8003f5e:	1b80      	subs	r0, r0, r6
 8003f60:	42a8      	cmp	r0, r5
 8003f62:	d801      	bhi.n	8003f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	d1d0      	bne.n	8003f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 8003f68:	2220      	movs	r2, #32
 8003f6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	6463      	str	r3, [r4, #68]	; 0x44
 8003f70:	0023      	movs	r3, r4
 8003f72:	3341      	adds	r3, #65	; 0x41
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	3440      	adds	r4, #64	; 0x40
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e7eb      	b.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <I2C_WaitOnFlagUntilTimeout>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	0004      	movs	r4, r0
 8003f84:	000e      	movs	r6, r1
 8003f86:	0017      	movs	r7, r2
 8003f88:	001d      	movs	r5, r3
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	6993      	ldr	r3, [r2, #24]
 8003f8e:	4033      	ands	r3, r6
 8003f90:	1b9b      	subs	r3, r3, r6
 8003f92:	4259      	negs	r1, r3
 8003f94:	414b      	adcs	r3, r1
 8003f96:	42bb      	cmp	r3, r7
 8003f98:	d001      	beq.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x1e>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e017      	b.n	8003fce <I2C_WaitOnFlagUntilTimeout+0x4e>
 8003f9e:	1c6b      	adds	r3, r5, #1
 8003fa0:	d0f4      	beq.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xc>
 8003fa2:	f7ff f9a5 	bl	80032f0 <HAL_GetTick>
 8003fa6:	9b06      	ldr	r3, [sp, #24]
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	42a8      	cmp	r0, r5
 8003fac:	d801      	bhi.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	d1eb      	bne.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0xa>
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	6463      	str	r3, [r4, #68]	; 0x44
 8003fbc:	0023      	movs	r3, r4
 8003fbe:	3341      	adds	r3, #65	; 0x41
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	0022      	movs	r2, r4
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	3242      	adds	r2, #66	; 0x42
 8003fc8:	3440      	adds	r4, #64	; 0x40
 8003fca:	7013      	strb	r3, [r2, #0]
 8003fcc:	7023      	strb	r3, [r4, #0]
 8003fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	0004      	movs	r4, r0
 8003fd4:	000d      	movs	r5, r1
 8003fd6:	0016      	movs	r6, r2
 8003fd8:	2720      	movs	r7, #32
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	423b      	tst	r3, r7
 8003fe0:	d001      	beq.n	8003fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe6:	0032      	movs	r2, r6
 8003fe8:	0029      	movs	r1, r5
 8003fea:	0020      	movs	r0, r4
 8003fec:	f7ff ff1a 	bl	8003e24 <I2C_IsAcknowledgeFailed>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d113      	bne.n	800401c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
 8003ff4:	f7ff f97c 	bl	80032f0 <HAL_GetTick>
 8003ff8:	1b80      	subs	r0, r0, r6
 8003ffa:	42a8      	cmp	r0, r5
 8003ffc:	d801      	bhi.n	8004002 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	d1eb      	bne.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8004002:	2220      	movs	r2, #32
 8004004:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004006:	4313      	orrs	r3, r2
 8004008:	6463      	str	r3, [r4, #68]	; 0x44
 800400a:	0023      	movs	r3, r4
 800400c:	3341      	adds	r3, #65	; 0x41
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	0022      	movs	r2, r4
 8004012:	2300      	movs	r3, #0
 8004014:	3242      	adds	r2, #66	; 0x42
 8004016:	3440      	adds	r4, #64	; 0x40
 8004018:	7013      	strb	r3, [r2, #0]
 800401a:	7023      	strb	r3, [r4, #0]
 800401c:	2001      	movs	r0, #1
 800401e:	e7e1      	b.n	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08004020 <HAL_I2C_Init>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	0004      	movs	r4, r0
 8004024:	2001      	movs	r0, #1
 8004026:	2c00      	cmp	r4, #0
 8004028:	d03f      	beq.n	80040aa <HAL_I2C_Init+0x8a>
 800402a:	0025      	movs	r5, r4
 800402c:	3541      	adds	r5, #65	; 0x41
 800402e:	782b      	ldrb	r3, [r5, #0]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_I2C_Init+0x22>
 8004036:	0023      	movs	r3, r4
 8004038:	3340      	adds	r3, #64	; 0x40
 800403a:	0020      	movs	r0, r4
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	f7fd f81d 	bl	800107c <HAL_I2C_MspInit>
 8004042:	2324      	movs	r3, #36	; 0x24
 8004044:	2101      	movs	r1, #1
 8004046:	702b      	strb	r3, [r5, #0]
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	481d      	ldr	r0, [pc, #116]	; (80040c0 <HAL_I2C_Init+0xa0>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68a6      	ldr	r6, [r4, #8]
 8004050:	438a      	bics	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	6861      	ldr	r1, [r4, #4]
 8004056:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_I2C_Init+0xa4>)
 8004058:	400a      	ands	r2, r1
 800405a:	611a      	str	r2, [r3, #16]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	4002      	ands	r2, r0
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	68e2      	ldr	r2, [r4, #12]
 8004064:	2a01      	cmp	r2, #1
 8004066:	d121      	bne.n	80040ac <HAL_I2C_Init+0x8c>
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	0209      	lsls	r1, r1, #8
 800406c:	4331      	orrs	r1, r6
 800406e:	6099      	str	r1, [r3, #8]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4915      	ldr	r1, [pc, #84]	; (80040c8 <HAL_I2C_Init+0xa8>)
 8004074:	4311      	orrs	r1, r2
 8004076:	6059      	str	r1, [r3, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	6961      	ldr	r1, [r4, #20]
 800407c:	4002      	ands	r2, r0
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	2000      	movs	r0, #0
 8004084:	430a      	orrs	r2, r1
 8004086:	69a1      	ldr	r1, [r4, #24]
 8004088:	0209      	lsls	r1, r1, #8
 800408a:	430a      	orrs	r2, r1
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	6a21      	ldr	r1, [r4, #32]
 8004090:	69e2      	ldr	r2, [r4, #28]
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	2320      	movs	r3, #32
 80040a0:	6460      	str	r0, [r4, #68]	; 0x44
 80040a2:	702b      	strb	r3, [r5, #0]
 80040a4:	6320      	str	r0, [r4, #48]	; 0x30
 80040a6:	3442      	adds	r4, #66	; 0x42
 80040a8:	7020      	strb	r0, [r4, #0]
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	2184      	movs	r1, #132	; 0x84
 80040ae:	0209      	lsls	r1, r1, #8
 80040b0:	4331      	orrs	r1, r6
 80040b2:	6099      	str	r1, [r3, #8]
 80040b4:	2a02      	cmp	r2, #2
 80040b6:	d1db      	bne.n	8004070 <HAL_I2C_Init+0x50>
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e7d7      	b.n	8004070 <HAL_I2C_Init+0x50>
 80040c0:	ffff7fff 	.word	0xffff7fff
 80040c4:	f0ffffff 	.word	0xf0ffffff
 80040c8:	02008000 	.word	0x02008000

080040cc <HAL_I2C_Master_Transmit>:
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b087      	sub	sp, #28
 80040d0:	9305      	str	r3, [sp, #20]
 80040d2:	0003      	movs	r3, r0
 80040d4:	3341      	adds	r3, #65	; 0x41
 80040d6:	9204      	str	r2, [sp, #16]
 80040d8:	9303      	str	r3, [sp, #12]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	0004      	movs	r4, r0
 80040de:	000f      	movs	r7, r1
 80040e0:	2002      	movs	r0, #2
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d114      	bne.n	8004110 <HAL_I2C_Master_Transmit+0x44>
 80040e6:	0023      	movs	r3, r4
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	2a01      	cmp	r2, #1
 80040ee:	d00f      	beq.n	8004110 <HAL_I2C_Master_Transmit+0x44>
 80040f0:	2601      	movs	r6, #1
 80040f2:	701e      	strb	r6, [r3, #0]
 80040f4:	f7ff f8fc 	bl	80032f0 <HAL_GetTick>
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	0005      	movs	r5, r0
 80040fc:	9000      	str	r0, [sp, #0]
 80040fe:	2319      	movs	r3, #25
 8004100:	0032      	movs	r2, r6
 8004102:	0020      	movs	r0, r4
 8004104:	0209      	lsls	r1, r1, #8
 8004106:	f7ff ff3b 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 800410a:	2800      	cmp	r0, #0
 800410c:	d002      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x48>
 800410e:	2001      	movs	r0, #1
 8004110:	b007      	add	sp, #28
 8004112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004114:	2321      	movs	r3, #33	; 0x21
 8004116:	0026      	movs	r6, r4
 8004118:	9a03      	ldr	r2, [sp, #12]
 800411a:	3642      	adds	r6, #66	; 0x42
 800411c:	7013      	strb	r3, [r2, #0]
 800411e:	3b11      	subs	r3, #17
 8004120:	7033      	strb	r3, [r6, #0]
 8004122:	9b04      	ldr	r3, [sp, #16]
 8004124:	6460      	str	r0, [r4, #68]	; 0x44
 8004126:	6263      	str	r3, [r4, #36]	; 0x24
 8004128:	9b05      	ldr	r3, [sp, #20]
 800412a:	6360      	str	r0, [r4, #52]	; 0x34
 800412c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800412e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_I2C_Master_Transmit+0x11c>)
 8004132:	2aff      	cmp	r2, #255	; 0xff
 8004134:	d920      	bls.n	8004178 <HAL_I2C_Master_Transmit+0xac>
 8004136:	22ff      	movs	r2, #255	; 0xff
 8004138:	8522      	strh	r2, [r4, #40]	; 0x28
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	045b      	lsls	r3, r3, #17
 8004140:	0039      	movs	r1, r7
 8004142:	0020      	movs	r0, r4
 8004144:	f7ff fe5a 	bl	8003dfc <I2C_TransferConfig>
 8004148:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800414a:	002a      	movs	r2, r5
 800414c:	0020      	movs	r0, r4
 800414e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	d119      	bne.n	8004188 <HAL_I2C_Master_Transmit+0xbc>
 8004154:	f7ff ff3c 	bl	8003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004158:	2800      	cmp	r0, #0
 800415a:	d1d8      	bne.n	800410e <HAL_I2C_Master_Transmit+0x42>
 800415c:	2120      	movs	r1, #32
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	4d22      	ldr	r5, [pc, #136]	; (80041ec <HAL_I2C_Master_Transmit+0x120>)
 8004162:	61d9      	str	r1, [r3, #28]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	402a      	ands	r2, r5
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	0023      	movs	r3, r4
 800416c:	3440      	adds	r4, #64	; 0x40
 800416e:	3341      	adds	r3, #65	; 0x41
 8004170:	7019      	strb	r1, [r3, #0]
 8004172:	7030      	strb	r0, [r6, #0]
 8004174:	7020      	strb	r0, [r4, #0]
 8004176:	e7cb      	b.n	8004110 <HAL_I2C_Master_Transmit+0x44>
 8004178:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800417a:	b292      	uxth	r2, r2
 800417c:	8522      	strh	r2, [r4, #40]	; 0x28
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	049b      	lsls	r3, r3, #18
 8004186:	e7db      	b.n	8004140 <HAL_I2C_Master_Transmit+0x74>
 8004188:	f7ff fe90 	bl	8003eac <I2C_WaitOnTXISFlagUntilTimeout>
 800418c:	2800      	cmp	r0, #0
 800418e:	d1be      	bne.n	800410e <HAL_I2C_Master_Transmit+0x42>
 8004190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	6291      	str	r1, [r2, #40]	; 0x28
 800419a:	6263      	str	r3, [r4, #36]	; 0x24
 800419c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800419e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041a6:	3a01      	subs	r2, #1
 80041a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041aa:	b292      	uxth	r2, r2
 80041ac:	8522      	strh	r2, [r4, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ca      	beq.n	8004148 <HAL_I2C_Master_Transmit+0x7c>
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d1c8      	bne.n	8004148 <HAL_I2C_Master_Transmit+0x7c>
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	0020      	movs	r0, r4
 80041ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041bc:	9500      	str	r5, [sp, #0]
 80041be:	f7ff fedf 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d1a3      	bne.n	800410e <HAL_I2C_Master_Transmit+0x42>
 80041c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041c8:	2bff      	cmp	r3, #255	; 0xff
 80041ca:	d906      	bls.n	80041da <HAL_I2C_Master_Transmit+0x10e>
 80041cc:	23ff      	movs	r3, #255	; 0xff
 80041ce:	8523      	strh	r3, [r4, #40]	; 0x28
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	9000      	str	r0, [sp, #0]
 80041d6:	045b      	lsls	r3, r3, #17
 80041d8:	e7b2      	b.n	8004140 <HAL_I2C_Master_Transmit+0x74>
 80041da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041dc:	b292      	uxth	r2, r2
 80041de:	8522      	strh	r2, [r4, #40]	; 0x28
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	9000      	str	r0, [sp, #0]
 80041e4:	e7cd      	b.n	8004182 <HAL_I2C_Master_Transmit+0xb6>
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	80002000 	.word	0x80002000
 80041ec:	fe00e800 	.word	0xfe00e800

080041f0 <HAL_I2C_Master_Receive>:
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b087      	sub	sp, #28
 80041f4:	9305      	str	r3, [sp, #20]
 80041f6:	0003      	movs	r3, r0
 80041f8:	3341      	adds	r3, #65	; 0x41
 80041fa:	9204      	str	r2, [sp, #16]
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	0004      	movs	r4, r0
 8004202:	000f      	movs	r7, r1
 8004204:	2002      	movs	r0, #2
 8004206:	2b20      	cmp	r3, #32
 8004208:	d114      	bne.n	8004234 <HAL_I2C_Master_Receive+0x44>
 800420a:	0023      	movs	r3, r4
 800420c:	3340      	adds	r3, #64	; 0x40
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	2a01      	cmp	r2, #1
 8004212:	d00f      	beq.n	8004234 <HAL_I2C_Master_Receive+0x44>
 8004214:	2601      	movs	r6, #1
 8004216:	701e      	strb	r6, [r3, #0]
 8004218:	f7ff f86a 	bl	80032f0 <HAL_GetTick>
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0005      	movs	r5, r0
 8004220:	9000      	str	r0, [sp, #0]
 8004222:	2319      	movs	r3, #25
 8004224:	0032      	movs	r2, r6
 8004226:	0020      	movs	r0, r4
 8004228:	0209      	lsls	r1, r1, #8
 800422a:	f7ff fea9 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 800422e:	2800      	cmp	r0, #0
 8004230:	d002      	beq.n	8004238 <HAL_I2C_Master_Receive+0x48>
 8004232:	2001      	movs	r0, #1
 8004234:	b007      	add	sp, #28
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004238:	2322      	movs	r3, #34	; 0x22
 800423a:	0026      	movs	r6, r4
 800423c:	9a03      	ldr	r2, [sp, #12]
 800423e:	3642      	adds	r6, #66	; 0x42
 8004240:	7013      	strb	r3, [r2, #0]
 8004242:	3b12      	subs	r3, #18
 8004244:	7033      	strb	r3, [r6, #0]
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	6460      	str	r0, [r4, #68]	; 0x44
 800424a:	6263      	str	r3, [r4, #36]	; 0x24
 800424c:	9b05      	ldr	r3, [sp, #20]
 800424e:	6360      	str	r0, [r4, #52]	; 0x34
 8004250:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004252:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_I2C_Master_Receive+0x11c>)
 8004256:	2aff      	cmp	r2, #255	; 0xff
 8004258:	d920      	bls.n	800429c <HAL_I2C_Master_Receive+0xac>
 800425a:	22ff      	movs	r2, #255	; 0xff
 800425c:	8522      	strh	r2, [r4, #40]	; 0x28
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	045b      	lsls	r3, r3, #17
 8004264:	0039      	movs	r1, r7
 8004266:	0020      	movs	r0, r4
 8004268:	f7ff fdc8 	bl	8003dfc <I2C_TransferConfig>
 800426c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800426e:	002a      	movs	r2, r5
 8004270:	0020      	movs	r0, r4
 8004272:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d119      	bne.n	80042ac <HAL_I2C_Master_Receive+0xbc>
 8004278:	f7ff feaa 	bl	8003fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800427c:	2800      	cmp	r0, #0
 800427e:	d1d8      	bne.n	8004232 <HAL_I2C_Master_Receive+0x42>
 8004280:	2120      	movs	r1, #32
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	4d22      	ldr	r5, [pc, #136]	; (8004310 <HAL_I2C_Master_Receive+0x120>)
 8004286:	61d9      	str	r1, [r3, #28]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	402a      	ands	r2, r5
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	0023      	movs	r3, r4
 8004290:	3440      	adds	r4, #64	; 0x40
 8004292:	3341      	adds	r3, #65	; 0x41
 8004294:	7019      	strb	r1, [r3, #0]
 8004296:	7030      	strb	r0, [r6, #0]
 8004298:	7020      	strb	r0, [r4, #0]
 800429a:	e7cb      	b.n	8004234 <HAL_I2C_Master_Receive+0x44>
 800429c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800429e:	b292      	uxth	r2, r2
 80042a0:	8522      	strh	r2, [r4, #40]	; 0x28
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	049b      	lsls	r3, r3, #18
 80042aa:	e7db      	b.n	8004264 <HAL_I2C_Master_Receive+0x74>
 80042ac:	f7ff fe28 	bl	8003f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1be      	bne.n	8004232 <HAL_I2C_Master_Receive+0x42>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	7013      	strb	r3, [r2, #0]
 80042bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80042c0:	3301      	adds	r3, #1
 80042c2:	6263      	str	r3, [r4, #36]	; 0x24
 80042c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042c6:	3a01      	subs	r2, #1
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80042ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042d0:	b292      	uxth	r2, r2
 80042d2:	8522      	strh	r2, [r4, #40]	; 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0c9      	beq.n	800426c <HAL_I2C_Master_Receive+0x7c>
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d1c7      	bne.n	800426c <HAL_I2C_Master_Receive+0x7c>
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0020      	movs	r0, r4
 80042e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042e2:	9500      	str	r5, [sp, #0]
 80042e4:	f7ff fe4c 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1a2      	bne.n	8004232 <HAL_I2C_Master_Receive+0x42>
 80042ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ee:	2bff      	cmp	r3, #255	; 0xff
 80042f0:	d906      	bls.n	8004300 <HAL_I2C_Master_Receive+0x110>
 80042f2:	23ff      	movs	r3, #255	; 0xff
 80042f4:	8523      	strh	r3, [r4, #40]	; 0x28
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	9000      	str	r0, [sp, #0]
 80042fc:	045b      	lsls	r3, r3, #17
 80042fe:	e7b1      	b.n	8004264 <HAL_I2C_Master_Receive+0x74>
 8004300:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004302:	b292      	uxth	r2, r2
 8004304:	8522      	strh	r2, [r4, #40]	; 0x28
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	9000      	str	r0, [sp, #0]
 800430a:	e7cc      	b.n	80042a6 <HAL_I2C_Master_Receive+0xb6>
 800430c:	80002400 	.word	0x80002400
 8004310:	fe00e800 	.word	0xfe00e800

08004314 <HAL_I2C_IsDeviceReady>:
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	001e      	movs	r6, r3
 8004318:	2300      	movs	r3, #0
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	9307      	str	r3, [sp, #28]
 800431e:	0003      	movs	r3, r0
 8004320:	9205      	str	r2, [sp, #20]
 8004322:	3341      	adds	r3, #65	; 0x41
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	0004      	movs	r4, r0
 8004328:	2502      	movs	r5, #2
 800432a:	2a20      	cmp	r2, #32
 800432c:	d15b      	bne.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 800432e:	6802      	ldr	r2, [r0, #0]
 8004330:	6997      	ldr	r7, [r2, #24]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	0038      	movs	r0, r7
 8004336:	0212      	lsls	r2, r2, #8
 8004338:	4010      	ands	r0, r2
 800433a:	4217      	tst	r7, r2
 800433c:	d153      	bne.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 800433e:	0022      	movs	r2, r4
 8004340:	3240      	adds	r2, #64	; 0x40
 8004342:	7817      	ldrb	r7, [r2, #0]
 8004344:	2f01      	cmp	r7, #1
 8004346:	d04e      	beq.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 8004348:	3d01      	subs	r5, #1
 800434a:	7015      	strb	r5, [r2, #0]
 800434c:	2224      	movs	r2, #36	; 0x24
 800434e:	0589      	lsls	r1, r1, #22
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	0d8b      	lsrs	r3, r1, #22
 8004354:	6460      	str	r0, [r4, #68]	; 0x44
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	68e3      	ldr	r3, [r4, #12]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d12b      	bne.n	80043b6 <HAL_I2C_IsDeviceReady+0xa2>
 800435e:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <HAL_I2C_IsDeviceReady+0x144>)
 8004360:	9a04      	ldr	r2, [sp, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	f7fe ffc2 	bl	80032f0 <HAL_GetTick>
 800436c:	9003      	str	r0, [sp, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	699d      	ldr	r5, [r3, #24]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	096d      	lsrs	r5, r5, #5
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	4015      	ands	r5, r2
 800437c:	4013      	ands	r3, r2
 800437e:	431d      	orrs	r5, r3
 8004380:	d01c      	beq.n	80043bc <HAL_I2C_IsDeviceReady+0xa8>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	2710      	movs	r7, #16
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	001a      	movs	r2, r3
 800438a:	403a      	ands	r2, r7
 800438c:	423b      	tst	r3, r7
 800438e:	d12d      	bne.n	80043ec <HAL_I2C_IsDeviceReady+0xd8>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	2120      	movs	r1, #32
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	0020      	movs	r0, r4
 8004398:	0033      	movs	r3, r6
 800439a:	f7ff fdf1 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d121      	bne.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 80043a2:	2320      	movs	r3, #32
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	0005      	movs	r5, r0
 80043a8:	61d3      	str	r3, [r2, #28]
 80043aa:	0022      	movs	r2, r4
 80043ac:	3440      	adds	r4, #64	; 0x40
 80043ae:	3241      	adds	r2, #65	; 0x41
 80043b0:	7013      	strb	r3, [r2, #0]
 80043b2:	7020      	strb	r0, [r4, #0]
 80043b4:	e017      	b.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 80043b6:	23a0      	movs	r3, #160	; 0xa0
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	e7d1      	b.n	8004360 <HAL_I2C_IsDeviceReady+0x4c>
 80043bc:	1c73      	adds	r3, r6, #1
 80043be:	d0d6      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x5a>
 80043c0:	f7fe ff96 	bl	80032f0 <HAL_GetTick>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	1ac0      	subs	r0, r0, r3
 80043c8:	42b0      	cmp	r0, r6
 80043ca:	d801      	bhi.n	80043d0 <HAL_I2C_IsDeviceReady+0xbc>
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	d1ce      	bne.n	800436e <HAL_I2C_IsDeviceReady+0x5a>
 80043d0:	0022      	movs	r2, r4
 80043d2:	2320      	movs	r3, #32
 80043d4:	3241      	adds	r2, #65	; 0x41
 80043d6:	7013      	strb	r3, [r2, #0]
 80043d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80043da:	2501      	movs	r5, #1
 80043dc:	4313      	orrs	r3, r2
 80043de:	6463      	str	r3, [r4, #68]	; 0x44
 80043e0:	2300      	movs	r3, #0
 80043e2:	3440      	adds	r4, #64	; 0x40
 80043e4:	7023      	strb	r3, [r4, #0]
 80043e6:	0028      	movs	r0, r5
 80043e8:	b009      	add	sp, #36	; 0x24
 80043ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2120      	movs	r1, #32
 80043f4:	0033      	movs	r3, r6
 80043f6:	0020      	movs	r0, r4
 80043f8:	f7ff fdc2 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	1e02      	subs	r2, r0, #0
 80043fe:	d1f2      	bne.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	9805      	ldr	r0, [sp, #20]
 8004404:	61df      	str	r7, [r3, #28]
 8004406:	2720      	movs	r7, #32
 8004408:	61df      	str	r7, [r3, #28]
 800440a:	9907      	ldr	r1, [sp, #28]
 800440c:	4281      	cmp	r1, r0
 800440e:	d10f      	bne.n	8004430 <HAL_I2C_IsDeviceReady+0x11c>
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	6858      	ldr	r0, [r3, #4]
 8004414:	01c9      	lsls	r1, r1, #7
 8004416:	4301      	orrs	r1, r0
 8004418:	6059      	str	r1, [r3, #4]
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	0039      	movs	r1, r7
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	0020      	movs	r0, r4
 8004422:	0033      	movs	r3, r6
 8004424:	f7ff fdac 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 8004428:	2800      	cmp	r0, #0
 800442a:	d1dc      	bne.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	61df      	str	r7, [r3, #28]
 8004430:	9b07      	ldr	r3, [sp, #28]
 8004432:	9a05      	ldr	r2, [sp, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	9307      	str	r3, [sp, #28]
 8004438:	9b07      	ldr	r3, [sp, #28]
 800443a:	4293      	cmp	r3, r2
 800443c:	d200      	bcs.n	8004440 <HAL_I2C_IsDeviceReady+0x12c>
 800443e:	e78b      	b.n	8004358 <HAL_I2C_IsDeviceReady+0x44>
 8004440:	0022      	movs	r2, r4
 8004442:	2320      	movs	r3, #32
 8004444:	3241      	adds	r2, #65	; 0x41
 8004446:	7013      	strb	r3, [r2, #0]
 8004448:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800444a:	3440      	adds	r4, #64	; 0x40
 800444c:	4313      	orrs	r3, r2
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	7023      	strb	r3, [r4, #0]
 8004454:	e7c7      	b.n	80043e6 <HAL_I2C_IsDeviceReady+0xd2>
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	02002000 	.word	0x02002000

0800445c <HAL_I2CEx_ConfigAnalogFilter>:
 800445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445e:	0004      	movs	r4, r0
 8004460:	3441      	adds	r4, #65	; 0x41
 8004462:	7822      	ldrb	r2, [r4, #0]
 8004464:	0003      	movs	r3, r0
 8004466:	000f      	movs	r7, r1
 8004468:	2002      	movs	r0, #2
 800446a:	b2d6      	uxtb	r6, r2
 800446c:	2a20      	cmp	r2, #32
 800446e:	d118      	bne.n	80044a2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004470:	001d      	movs	r5, r3
 8004472:	3540      	adds	r5, #64	; 0x40
 8004474:	782a      	ldrb	r2, [r5, #0]
 8004476:	2a01      	cmp	r2, #1
 8004478:	d013      	beq.n	80044a2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	7022      	strb	r2, [r4, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3a23      	subs	r2, #35	; 0x23
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	4807      	ldr	r0, [pc, #28]	; (80044a4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8004486:	4391      	bics	r1, r2
 8004488:	6019      	str	r1, [r3, #0]
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	4001      	ands	r1, r0
 800448e:	2000      	movs	r0, #0
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	4339      	orrs	r1, r7
 8004496:	6019      	str	r1, [r3, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	7026      	strb	r6, [r4, #0]
 80044a0:	7028      	strb	r0, [r5, #0]
 80044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a4:	ffffefff 	.word	0xffffefff

080044a8 <HAL_I2CEx_ConfigDigitalFilter>:
 80044a8:	0002      	movs	r2, r0
 80044aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ac:	3241      	adds	r2, #65	; 0x41
 80044ae:	7814      	ldrb	r4, [r2, #0]
 80044b0:	0003      	movs	r3, r0
 80044b2:	b2e5      	uxtb	r5, r4
 80044b4:	2002      	movs	r0, #2
 80044b6:	2c20      	cmp	r4, #32
 80044b8:	d117      	bne.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x42>
 80044ba:	001c      	movs	r4, r3
 80044bc:	3440      	adds	r4, #64	; 0x40
 80044be:	7826      	ldrb	r6, [r4, #0]
 80044c0:	2e01      	cmp	r6, #1
 80044c2:	d012      	beq.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x42>
 80044c4:	3022      	adds	r0, #34	; 0x22
 80044c6:	7010      	strb	r0, [r2, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3823      	subs	r0, #35	; 0x23
 80044cc:	681e      	ldr	r6, [r3, #0]
 80044ce:	4f07      	ldr	r7, [pc, #28]	; (80044ec <HAL_I2CEx_ConfigDigitalFilter+0x44>)
 80044d0:	4386      	bics	r6, r0
 80044d2:	601e      	str	r6, [r3, #0]
 80044d4:	681e      	ldr	r6, [r3, #0]
 80044d6:	0209      	lsls	r1, r1, #8
 80044d8:	403e      	ands	r6, r7
 80044da:	4331      	orrs	r1, r6
 80044dc:	6019      	str	r1, [r3, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	4308      	orrs	r0, r1
 80044e2:	6018      	str	r0, [r3, #0]
 80044e4:	2000      	movs	r0, #0
 80044e6:	7015      	strb	r5, [r2, #0]
 80044e8:	7020      	strb	r0, [r4, #0]
 80044ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ec:	fffff0ff 	.word	0xfffff0ff

080044f0 <HAL_RCC_GetSysClockFreq>:
 80044f0:	220c      	movs	r2, #12
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_GetSysClockFreq+0x78>)
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	68dc      	ldr	r4, [r3, #12]
 80044f8:	4022      	ands	r2, r4
 80044fa:	2a08      	cmp	r2, #8
 80044fc:	d031      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x72>
 80044fe:	2a0c      	cmp	r2, #12
 8004500:	d009      	beq.n	8004516 <HAL_RCC_GetSysClockFreq+0x26>
 8004502:	2a04      	cmp	r2, #4
 8004504:	d125      	bne.n	8004552 <HAL_RCC_GetSysClockFreq+0x62>
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_RCC_GetSysClockFreq+0x7c>)
 800450a:	06c0      	lsls	r0, r0, #27
 800450c:	17c0      	asrs	r0, r0, #31
 800450e:	4018      	ands	r0, r3
 8004510:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCC_GetSysClockFreq+0x80>)
 8004512:	18c0      	adds	r0, r0, r3
 8004514:	bd70      	pop	{r4, r5, r6, pc}
 8004516:	02a2      	lsls	r2, r4, #10
 8004518:	4816      	ldr	r0, [pc, #88]	; (8004574 <HAL_RCC_GetSysClockFreq+0x84>)
 800451a:	0f12      	lsrs	r2, r2, #28
 800451c:	5c80      	ldrb	r0, [r0, r2]
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	0224      	lsls	r4, r4, #8
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	0fa4      	lsrs	r4, r4, #30
 8004526:	0252      	lsls	r2, r2, #9
 8004528:	3401      	adds	r4, #1
 800452a:	4211      	tst	r1, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x52>
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_RCC_GetSysClockFreq+0x88>)
 8004530:	2300      	movs	r3, #0
 8004532:	2100      	movs	r1, #0
 8004534:	f7fb feb2 	bl	800029c <__aeabi_lmul>
 8004538:	0022      	movs	r2, r4
 800453a:	2300      	movs	r3, #0
 800453c:	f7fb fe8e 	bl	800025c <__aeabi_uldivmod>
 8004540:	e7e8      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x24>
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2310      	movs	r3, #16
 8004546:	421a      	tst	r2, r3
 8004548:	d001      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0x5e>
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <HAL_RCC_GetSysClockFreq+0x8c>)
 800454c:	e7f0      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x40>
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <HAL_RCC_GetSysClockFreq+0x80>)
 8004550:	e7ee      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x40>
 8004552:	2080      	movs	r0, #128	; 0x80
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0200      	lsls	r0, r0, #8
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	0f5b      	lsrs	r3, r3, #29
 800455c:	3301      	adds	r3, #1
 800455e:	4098      	lsls	r0, r3
 8004560:	e7d8      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x24>
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <HAL_RCC_GetSysClockFreq+0x88>)
 8004564:	e7d6      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x24>
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	40021000 	.word	0x40021000
 800456c:	ff48e500 	.word	0xff48e500
 8004570:	00f42400 	.word	0x00f42400
 8004574:	080068d4 	.word	0x080068d4
 8004578:	007a1200 	.word	0x007a1200
 800457c:	003d0900 	.word	0x003d0900

08004580 <HAL_RCC_OscConfig>:
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	0005      	movs	r5, r0
 8004584:	b085      	sub	sp, #20
 8004586:	2800      	cmp	r0, #0
 8004588:	d05a      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 800458a:	230c      	movs	r3, #12
 800458c:	4cbe      	ldr	r4, [pc, #760]	; (8004888 <HAL_RCC_OscConfig+0x308>)
 800458e:	6802      	ldr	r2, [r0, #0]
 8004590:	68e6      	ldr	r6, [r4, #12]
 8004592:	68e7      	ldr	r7, [r4, #12]
 8004594:	401e      	ands	r6, r3
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	0019      	movs	r1, r3
 800459c:	401f      	ands	r7, r3
 800459e:	07d2      	lsls	r2, r2, #31
 80045a0:	d442      	bmi.n	8004628 <HAL_RCC_OscConfig+0xa8>
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	079b      	lsls	r3, r3, #30
 80045a6:	d500      	bpl.n	80045aa <HAL_RCC_OscConfig+0x2a>
 80045a8:	e08b      	b.n	80046c2 <HAL_RCC_OscConfig+0x142>
 80045aa:	682b      	ldr	r3, [r5, #0]
 80045ac:	06db      	lsls	r3, r3, #27
 80045ae:	d529      	bpl.n	8004604 <HAL_RCC_OscConfig+0x84>
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	d000      	beq.n	80045b6 <HAL_RCC_OscConfig+0x36>
 80045b4:	e0dc      	b.n	8004770 <HAL_RCC_OscConfig+0x1f0>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	d502      	bpl.n	80045c2 <HAL_RCC_OscConfig+0x42>
 80045bc:	69eb      	ldr	r3, [r5, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d03e      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	49b1      	ldr	r1, [pc, #708]	; (800488c <HAL_RCC_OscConfig+0x30c>)
 80045c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045c8:	400a      	ands	r2, r1
 80045ca:	431a      	orrs	r2, r3
 80045cc:	6062      	str	r2, [r4, #4]
 80045ce:	6861      	ldr	r1, [r4, #4]
 80045d0:	6a2a      	ldr	r2, [r5, #32]
 80045d2:	0209      	lsls	r1, r1, #8
 80045d4:	0a09      	lsrs	r1, r1, #8
 80045d6:	0612      	lsls	r2, r2, #24
 80045d8:	430a      	orrs	r2, r1
 80045da:	6062      	str	r2, [r4, #4]
 80045dc:	2280      	movs	r2, #128	; 0x80
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	3301      	adds	r3, #1
 80045e2:	0212      	lsls	r2, r2, #8
 80045e4:	409a      	lsls	r2, r3
 80045e6:	0013      	movs	r3, r2
 80045e8:	68e1      	ldr	r1, [r4, #12]
 80045ea:	060a      	lsls	r2, r1, #24
 80045ec:	49a8      	ldr	r1, [pc, #672]	; (8004890 <HAL_RCC_OscConfig+0x310>)
 80045ee:	0f12      	lsrs	r2, r2, #28
 80045f0:	5c8a      	ldrb	r2, [r1, r2]
 80045f2:	40d3      	lsrs	r3, r2
 80045f4:	4aa7      	ldr	r2, [pc, #668]	; (8004894 <HAL_RCC_OscConfig+0x314>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4ba7      	ldr	r3, [pc, #668]	; (8004898 <HAL_RCC_OscConfig+0x318>)
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	f7fe fe34 	bl	8003268 <HAL_InitTick>
 8004600:	2800      	cmp	r0, #0
 8004602:	d134      	bne.n	800466e <HAL_RCC_OscConfig+0xee>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	071b      	lsls	r3, r3, #28
 8004608:	d500      	bpl.n	800460c <HAL_RCC_OscConfig+0x8c>
 800460a:	e0e8      	b.n	80047de <HAL_RCC_OscConfig+0x25e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	075b      	lsls	r3, r3, #29
 8004610:	d500      	bpl.n	8004614 <HAL_RCC_OscConfig+0x94>
 8004612:	e10a      	b.n	800482a <HAL_RCC_OscConfig+0x2aa>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	069b      	lsls	r3, r3, #26
 8004618:	d500      	bpl.n	800461c <HAL_RCC_OscConfig+0x9c>
 800461a:	e18e      	b.n	800493a <HAL_RCC_OscConfig+0x3ba>
 800461c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	d000      	beq.n	8004624 <HAL_RCC_OscConfig+0xa4>
 8004622:	e1bd      	b.n	80049a0 <HAL_RCC_OscConfig+0x420>
 8004624:	2000      	movs	r0, #0
 8004626:	e022      	b.n	800466e <HAL_RCC_OscConfig+0xee>
 8004628:	2e08      	cmp	r6, #8
 800462a:	d003      	beq.n	8004634 <HAL_RCC_OscConfig+0xb4>
 800462c:	2e0c      	cmp	r6, #12
 800462e:	d109      	bne.n	8004644 <HAL_RCC_OscConfig+0xc4>
 8004630:	2f00      	cmp	r7, #0
 8004632:	d007      	beq.n	8004644 <HAL_RCC_OscConfig+0xc4>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	039b      	lsls	r3, r3, #14
 8004638:	d5b3      	bpl.n	80045a2 <HAL_RCC_OscConfig+0x22>
 800463a:	686b      	ldr	r3, [r5, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1b0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x22>
 8004640:	2001      	movs	r0, #1
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0xee>
 8004644:	686a      	ldr	r2, [r5, #4]
 8004646:	428a      	cmp	r2, r1
 8004648:	d113      	bne.n	8004672 <HAL_RCC_OscConfig+0xf2>
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	f7fe fe4e 	bl	80032f0 <HAL_GetTick>
 8004654:	9000      	str	r0, [sp, #0]
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	0292      	lsls	r2, r2, #10
 800465c:	4213      	tst	r3, r2
 800465e:	d1a0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x22>
 8004660:	f7fe fe46 	bl	80032f0 <HAL_GetTick>
 8004664:	9b00      	ldr	r3, [sp, #0]
 8004666:	1ac0      	subs	r0, r0, r3
 8004668:	2864      	cmp	r0, #100	; 0x64
 800466a:	d9f4      	bls.n	8004656 <HAL_RCC_OscConfig+0xd6>
 800466c:	2003      	movs	r0, #3
 800466e:	b005      	add	sp, #20
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004672:	21a0      	movs	r1, #160	; 0xa0
 8004674:	02c9      	lsls	r1, r1, #11
 8004676:	428a      	cmp	r2, r1
 8004678:	d105      	bne.n	8004686 <HAL_RCC_OscConfig+0x106>
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	6821      	ldr	r1, [r4, #0]
 800467e:	02d2      	lsls	r2, r2, #11
 8004680:	430a      	orrs	r2, r1
 8004682:	6022      	str	r2, [r4, #0]
 8004684:	e7e1      	b.n	800464a <HAL_RCC_OscConfig+0xca>
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	4884      	ldr	r0, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x31c>)
 800468a:	4001      	ands	r1, r0
 800468c:	6021      	str	r1, [r4, #0]
 800468e:	6821      	ldr	r1, [r4, #0]
 8004690:	400b      	ands	r3, r1
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	4982      	ldr	r1, [pc, #520]	; (80048a0 <HAL_RCC_OscConfig+0x320>)
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	400b      	ands	r3, r1
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	2a00      	cmp	r2, #0
 80046a0:	d1d6      	bne.n	8004650 <HAL_RCC_OscConfig+0xd0>
 80046a2:	f7fe fe25 	bl	80032f0 <HAL_GetTick>
 80046a6:	9000      	str	r0, [sp, #0]
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	0292      	lsls	r2, r2, #10
 80046ae:	4213      	tst	r3, r2
 80046b0:	d100      	bne.n	80046b4 <HAL_RCC_OscConfig+0x134>
 80046b2:	e776      	b.n	80045a2 <HAL_RCC_OscConfig+0x22>
 80046b4:	f7fe fe1c 	bl	80032f0 <HAL_GetTick>
 80046b8:	9b00      	ldr	r3, [sp, #0]
 80046ba:	1ac0      	subs	r0, r0, r3
 80046bc:	2864      	cmp	r0, #100	; 0x64
 80046be:	d9f3      	bls.n	80046a8 <HAL_RCC_OscConfig+0x128>
 80046c0:	e7d4      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80046c2:	68ea      	ldr	r2, [r5, #12]
 80046c4:	2e04      	cmp	r6, #4
 80046c6:	d003      	beq.n	80046d0 <HAL_RCC_OscConfig+0x150>
 80046c8:	2e0c      	cmp	r6, #12
 80046ca:	d124      	bne.n	8004716 <HAL_RCC_OscConfig+0x196>
 80046cc:	2f00      	cmp	r7, #0
 80046ce:	d122      	bne.n	8004716 <HAL_RCC_OscConfig+0x196>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	075b      	lsls	r3, r3, #29
 80046d4:	d501      	bpl.n	80046da <HAL_RCC_OscConfig+0x15a>
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	d0b2      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 80046da:	6861      	ldr	r1, [r4, #4]
 80046dc:	692b      	ldr	r3, [r5, #16]
 80046de:	4871      	ldr	r0, [pc, #452]	; (80048a4 <HAL_RCC_OscConfig+0x324>)
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	4001      	ands	r1, r0
 80046e4:	430b      	orrs	r3, r1
 80046e6:	2109      	movs	r1, #9
 80046e8:	6063      	str	r3, [r4, #4]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	438b      	bics	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	f7ff fefd 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	4a65      	ldr	r2, [pc, #404]	; (8004890 <HAL_RCC_OscConfig+0x310>)
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	0f1b      	lsrs	r3, r3, #28
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	40d8      	lsrs	r0, r3
 8004702:	4b64      	ldr	r3, [pc, #400]	; (8004894 <HAL_RCC_OscConfig+0x314>)
 8004704:	6018      	str	r0, [r3, #0]
 8004706:	4b64      	ldr	r3, [pc, #400]	; (8004898 <HAL_RCC_OscConfig+0x318>)
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	f7fe fdad 	bl	8003268 <HAL_InitTick>
 800470e:	2800      	cmp	r0, #0
 8004710:	d100      	bne.n	8004714 <HAL_RCC_OscConfig+0x194>
 8004712:	e74a      	b.n	80045aa <HAL_RCC_OscConfig+0x2a>
 8004714:	e7ab      	b.n	800466e <HAL_RCC_OscConfig+0xee>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	2a00      	cmp	r2, #0
 800471a:	d018      	beq.n	800474e <HAL_RCC_OscConfig+0x1ce>
 800471c:	2109      	movs	r1, #9
 800471e:	438b      	bics	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	f7fe fde4 	bl	80032f0 <HAL_GetTick>
 8004728:	0007      	movs	r7, r0
 800472a:	2204      	movs	r2, #4
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	4213      	tst	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_RCC_OscConfig+0x1c2>
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	692b      	ldr	r3, [r5, #16]
 8004736:	495b      	ldr	r1, [pc, #364]	; (80048a4 <HAL_RCC_OscConfig+0x324>)
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	400a      	ands	r2, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	e733      	b.n	80045aa <HAL_RCC_OscConfig+0x2a>
 8004742:	f7fe fdd5 	bl	80032f0 <HAL_GetTick>
 8004746:	1bc0      	subs	r0, r0, r7
 8004748:	2802      	cmp	r0, #2
 800474a:	d9ee      	bls.n	800472a <HAL_RCC_OscConfig+0x1aa>
 800474c:	e78e      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 800474e:	2201      	movs	r2, #1
 8004750:	4393      	bics	r3, r2
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	f7fe fdcc 	bl	80032f0 <HAL_GetTick>
 8004758:	0007      	movs	r7, r0
 800475a:	2204      	movs	r2, #4
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	4213      	tst	r3, r2
 8004760:	d100      	bne.n	8004764 <HAL_RCC_OscConfig+0x1e4>
 8004762:	e722      	b.n	80045aa <HAL_RCC_OscConfig+0x2a>
 8004764:	f7fe fdc4 	bl	80032f0 <HAL_GetTick>
 8004768:	1bc0      	subs	r0, r0, r7
 800476a:	2802      	cmp	r0, #2
 800476c:	d9f5      	bls.n	800475a <HAL_RCC_OscConfig+0x1da>
 800476e:	e77d      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004770:	69eb      	ldr	r3, [r5, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d020      	beq.n	80047b8 <HAL_RCC_OscConfig+0x238>
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4313      	orrs	r3, r2
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	f7fe fdb6 	bl	80032f0 <HAL_GetTick>
 8004784:	0007      	movs	r7, r0
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4213      	tst	r3, r2
 800478e:	d00d      	beq.n	80047ac <HAL_RCC_OscConfig+0x22c>
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	4a3e      	ldr	r2, [pc, #248]	; (800488c <HAL_RCC_OscConfig+0x30c>)
 8004794:	4013      	ands	r3, r2
 8004796:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004798:	4313      	orrs	r3, r2
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6862      	ldr	r2, [r4, #4]
 800479e:	6a2b      	ldr	r3, [r5, #32]
 80047a0:	0212      	lsls	r2, r2, #8
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	0a12      	lsrs	r2, r2, #8
 80047a6:	4313      	orrs	r3, r2
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	e72b      	b.n	8004604 <HAL_RCC_OscConfig+0x84>
 80047ac:	f7fe fda0 	bl	80032f0 <HAL_GetTick>
 80047b0:	1bc0      	subs	r0, r0, r7
 80047b2:	2802      	cmp	r0, #2
 80047b4:	d9e7      	bls.n	8004786 <HAL_RCC_OscConfig+0x206>
 80047b6:	e759      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	; (80048a8 <HAL_RCC_OscConfig+0x328>)
 80047bc:	4013      	ands	r3, r2
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	f7fe fd96 	bl	80032f0 <HAL_GetTick>
 80047c4:	0007      	movs	r7, r0
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	0092      	lsls	r2, r2, #2
 80047cc:	4213      	tst	r3, r2
 80047ce:	d100      	bne.n	80047d2 <HAL_RCC_OscConfig+0x252>
 80047d0:	e718      	b.n	8004604 <HAL_RCC_OscConfig+0x84>
 80047d2:	f7fe fd8d 	bl	80032f0 <HAL_GetTick>
 80047d6:	1bc0      	subs	r0, r0, r7
 80047d8:	2802      	cmp	r0, #2
 80047da:	d9f4      	bls.n	80047c6 <HAL_RCC_OscConfig+0x246>
 80047dc:	e746      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80047de:	696a      	ldr	r2, [r5, #20]
 80047e0:	2301      	movs	r3, #1
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCC_OscConfig+0x288>
 80047e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80047e8:	4313      	orrs	r3, r2
 80047ea:	6523      	str	r3, [r4, #80]	; 0x50
 80047ec:	f7fe fd80 	bl	80032f0 <HAL_GetTick>
 80047f0:	0007      	movs	r7, r0
 80047f2:	2202      	movs	r2, #2
 80047f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047f6:	4213      	tst	r3, r2
 80047f8:	d000      	beq.n	80047fc <HAL_RCC_OscConfig+0x27c>
 80047fa:	e707      	b.n	800460c <HAL_RCC_OscConfig+0x8c>
 80047fc:	f7fe fd78 	bl	80032f0 <HAL_GetTick>
 8004800:	1bc0      	subs	r0, r0, r7
 8004802:	2802      	cmp	r0, #2
 8004804:	d9f5      	bls.n	80047f2 <HAL_RCC_OscConfig+0x272>
 8004806:	e731      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004808:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800480a:	439a      	bics	r2, r3
 800480c:	6522      	str	r2, [r4, #80]	; 0x50
 800480e:	f7fe fd6f 	bl	80032f0 <HAL_GetTick>
 8004812:	0007      	movs	r7, r0
 8004814:	2202      	movs	r2, #2
 8004816:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004818:	4213      	tst	r3, r2
 800481a:	d100      	bne.n	800481e <HAL_RCC_OscConfig+0x29e>
 800481c:	e6f6      	b.n	800460c <HAL_RCC_OscConfig+0x8c>
 800481e:	f7fe fd67 	bl	80032f0 <HAL_GetTick>
 8004822:	1bc0      	subs	r0, r0, r7
 8004824:	2802      	cmp	r0, #2
 8004826:	d9f5      	bls.n	8004814 <HAL_RCC_OscConfig+0x294>
 8004828:	e720      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	2100      	movs	r1, #0
 800482e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	9100      	str	r1, [sp, #0]
 8004834:	421a      	tst	r2, r3
 8004836:	d104      	bne.n	8004842 <HAL_RCC_OscConfig+0x2c2>
 8004838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800483a:	4313      	orrs	r3, r2
 800483c:	63a3      	str	r3, [r4, #56]	; 0x38
 800483e:	2301      	movs	r3, #1
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	4f19      	ldr	r7, [pc, #100]	; (80048ac <HAL_RCC_OscConfig+0x32c>)
 8004846:	0052      	lsls	r2, r2, #1
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4213      	tst	r3, r2
 800484c:	d008      	beq.n	8004860 <HAL_RCC_OscConfig+0x2e0>
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	68ab      	ldr	r3, [r5, #8]
 8004852:	0052      	lsls	r2, r2, #1
 8004854:	4293      	cmp	r3, r2
 8004856:	d12b      	bne.n	80048b0 <HAL_RCC_OscConfig+0x330>
 8004858:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800485a:	4313      	orrs	r3, r2
 800485c:	6523      	str	r3, [r4, #80]	; 0x50
 800485e:	e04c      	b.n	80048fa <HAL_RCC_OscConfig+0x37a>
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	0052      	lsls	r2, r2, #1
 8004866:	4313      	orrs	r3, r2
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	f7fe fd41 	bl	80032f0 <HAL_GetTick>
 800486e:	9001      	str	r0, [sp, #4]
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	4213      	tst	r3, r2
 8004878:	d1e9      	bne.n	800484e <HAL_RCC_OscConfig+0x2ce>
 800487a:	f7fe fd39 	bl	80032f0 <HAL_GetTick>
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	1ac0      	subs	r0, r0, r3
 8004882:	2864      	cmp	r0, #100	; 0x64
 8004884:	d9f4      	bls.n	8004870 <HAL_RCC_OscConfig+0x2f0>
 8004886:	e6f1      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004888:	40021000 	.word	0x40021000
 800488c:	ffff1fff 	.word	0xffff1fff
 8004890:	080068c4 	.word	0x080068c4
 8004894:	20000008 	.word	0x20000008
 8004898:	20000040 	.word	0x20000040
 800489c:	fffeffff 	.word	0xfffeffff
 80048a0:	fffbffff 	.word	0xfffbffff
 80048a4:	ffffe0ff 	.word	0xffffe0ff
 80048a8:	fffffeff 	.word	0xfffffeff
 80048ac:	40007000 	.word	0x40007000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <HAL_RCC_OscConfig+0x362>
 80048b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048b6:	4a6b      	ldr	r2, [pc, #428]	; (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	6523      	str	r3, [r4, #80]	; 0x50
 80048bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048be:	4a6a      	ldr	r2, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x4e8>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	6523      	str	r3, [r4, #80]	; 0x50
 80048c4:	f7fe fd14 	bl	80032f0 <HAL_GetTick>
 80048c8:	0007      	movs	r7, r0
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4213      	tst	r3, r2
 80048d2:	d01a      	beq.n	800490a <HAL_RCC_OscConfig+0x38a>
 80048d4:	f7fe fd0c 	bl	80032f0 <HAL_GetTick>
 80048d8:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0x4ec>)
 80048da:	1bc0      	subs	r0, r0, r7
 80048dc:	4298      	cmp	r0, r3
 80048de:	d9f4      	bls.n	80048ca <HAL_RCC_OscConfig+0x34a>
 80048e0:	e6c4      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80048e2:	21a0      	movs	r1, #160	; 0xa0
 80048e4:	00c9      	lsls	r1, r1, #3
 80048e6:	428b      	cmp	r3, r1
 80048e8:	d118      	bne.n	800491c <HAL_RCC_OscConfig+0x39c>
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6523      	str	r3, [r4, #80]	; 0x50
 80048f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6522      	str	r2, [r4, #80]	; 0x50
 80048fa:	f7fe fcf9 	bl	80032f0 <HAL_GetTick>
 80048fe:	0007      	movs	r7, r0
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	4213      	tst	r3, r2
 8004908:	d010      	beq.n	800492c <HAL_RCC_OscConfig+0x3ac>
 800490a:	9b00      	ldr	r3, [sp, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d000      	beq.n	8004912 <HAL_RCC_OscConfig+0x392>
 8004910:	e680      	b.n	8004614 <HAL_RCC_OscConfig+0x94>
 8004912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004914:	4a56      	ldr	r2, [pc, #344]	; (8004a70 <HAL_RCC_OscConfig+0x4f0>)
 8004916:	4013      	ands	r3, r2
 8004918:	63a3      	str	r3, [r4, #56]	; 0x38
 800491a:	e67b      	b.n	8004614 <HAL_RCC_OscConfig+0x94>
 800491c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800491e:	4a51      	ldr	r2, [pc, #324]	; (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 8004920:	4013      	ands	r3, r2
 8004922:	6523      	str	r3, [r4, #80]	; 0x50
 8004924:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004926:	4a50      	ldr	r2, [pc, #320]	; (8004a68 <HAL_RCC_OscConfig+0x4e8>)
 8004928:	4013      	ands	r3, r2
 800492a:	e797      	b.n	800485c <HAL_RCC_OscConfig+0x2dc>
 800492c:	f7fe fce0 	bl	80032f0 <HAL_GetTick>
 8004930:	4b4e      	ldr	r3, [pc, #312]	; (8004a6c <HAL_RCC_OscConfig+0x4ec>)
 8004932:	1bc0      	subs	r0, r0, r7
 8004934:	4298      	cmp	r0, r3
 8004936:	d9e3      	bls.n	8004900 <HAL_RCC_OscConfig+0x380>
 8004938:	e698      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 800493a:	69a9      	ldr	r1, [r5, #24]
 800493c:	2301      	movs	r3, #1
 800493e:	4a4d      	ldr	r2, [pc, #308]	; (8004a74 <HAL_RCC_OscConfig+0x4f4>)
 8004940:	2900      	cmp	r1, #0
 8004942:	d018      	beq.n	8004976 <HAL_RCC_OscConfig+0x3f6>
 8004944:	68a1      	ldr	r1, [r4, #8]
 8004946:	4319      	orrs	r1, r3
 8004948:	60a1      	str	r1, [r4, #8]
 800494a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800494c:	430b      	orrs	r3, r1
 800494e:	6363      	str	r3, [r4, #52]	; 0x34
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	6a11      	ldr	r1, [r2, #32]
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	430b      	orrs	r3, r1
 8004958:	6213      	str	r3, [r2, #32]
 800495a:	f7fe fcc9 	bl	80032f0 <HAL_GetTick>
 800495e:	0007      	movs	r7, r0
 8004960:	2202      	movs	r2, #2
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	4213      	tst	r3, r2
 8004966:	d000      	beq.n	800496a <HAL_RCC_OscConfig+0x3ea>
 8004968:	e658      	b.n	800461c <HAL_RCC_OscConfig+0x9c>
 800496a:	f7fe fcc1 	bl	80032f0 <HAL_GetTick>
 800496e:	1bc0      	subs	r0, r0, r7
 8004970:	2802      	cmp	r0, #2
 8004972:	d9f5      	bls.n	8004960 <HAL_RCC_OscConfig+0x3e0>
 8004974:	e67a      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004976:	68a1      	ldr	r1, [r4, #8]
 8004978:	4399      	bics	r1, r3
 800497a:	60a1      	str	r1, [r4, #8]
 800497c:	6a13      	ldr	r3, [r2, #32]
 800497e:	493e      	ldr	r1, [pc, #248]	; (8004a78 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	400b      	ands	r3, r1
 8004982:	6213      	str	r3, [r2, #32]
 8004984:	f7fe fcb4 	bl	80032f0 <HAL_GetTick>
 8004988:	0007      	movs	r7, r0
 800498a:	2202      	movs	r2, #2
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	4213      	tst	r3, r2
 8004990:	d100      	bne.n	8004994 <HAL_RCC_OscConfig+0x414>
 8004992:	e643      	b.n	800461c <HAL_RCC_OscConfig+0x9c>
 8004994:	f7fe fcac 	bl	80032f0 <HAL_GetTick>
 8004998:	1bc0      	subs	r0, r0, r7
 800499a:	2802      	cmp	r0, #2
 800499c:	d9f5      	bls.n	800498a <HAL_RCC_OscConfig+0x40a>
 800499e:	e665      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80049a0:	2e0c      	cmp	r6, #12
 80049a2:	d043      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4ac>
 80049a4:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <HAL_RCC_OscConfig+0x4fc>)
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d12e      	bne.n	8004a08 <HAL_RCC_OscConfig+0x488>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	2780      	movs	r7, #128	; 0x80
 80049ae:	4013      	ands	r3, r2
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	f7fe fc9d 	bl	80032f0 <HAL_GetTick>
 80049b6:	0006      	movs	r6, r0
 80049b8:	04bf      	lsls	r7, r7, #18
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	423b      	tst	r3, r7
 80049be:	d11d      	bne.n	80049fc <HAL_RCC_OscConfig+0x47c>
 80049c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80049c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049c4:	68e2      	ldr	r2, [r4, #12]
 80049c6:	430b      	orrs	r3, r1
 80049c8:	492d      	ldr	r1, [pc, #180]	; (8004a80 <HAL_RCC_OscConfig+0x500>)
 80049ca:	2680      	movs	r6, #128	; 0x80
 80049cc:	400a      	ands	r2, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80049d2:	04b6      	lsls	r6, r6, #18
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60e3      	str	r3, [r4, #12]
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	045b      	lsls	r3, r3, #17
 80049de:	4313      	orrs	r3, r2
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	f7fe fc85 	bl	80032f0 <HAL_GetTick>
 80049e6:	0005      	movs	r5, r0
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	4233      	tst	r3, r6
 80049ec:	d000      	beq.n	80049f0 <HAL_RCC_OscConfig+0x470>
 80049ee:	e619      	b.n	8004624 <HAL_RCC_OscConfig+0xa4>
 80049f0:	f7fe fc7e 	bl	80032f0 <HAL_GetTick>
 80049f4:	1b40      	subs	r0, r0, r5
 80049f6:	2802      	cmp	r0, #2
 80049f8:	d9f6      	bls.n	80049e8 <HAL_RCC_OscConfig+0x468>
 80049fa:	e637      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 80049fc:	f7fe fc78 	bl	80032f0 <HAL_GetTick>
 8004a00:	1b80      	subs	r0, r0, r6
 8004a02:	2802      	cmp	r0, #2
 8004a04:	d9d9      	bls.n	80049ba <HAL_RCC_OscConfig+0x43a>
 8004a06:	e631      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	2680      	movs	r6, #128	; 0x80
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	f7fe fc6e 	bl	80032f0 <HAL_GetTick>
 8004a14:	0005      	movs	r5, r0
 8004a16:	04b6      	lsls	r6, r6, #18
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	4233      	tst	r3, r6
 8004a1c:	d100      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4a0>
 8004a1e:	e601      	b.n	8004624 <HAL_RCC_OscConfig+0xa4>
 8004a20:	f7fe fc66 	bl	80032f0 <HAL_GetTick>
 8004a24:	1b40      	subs	r0, r0, r5
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d9f6      	bls.n	8004a18 <HAL_RCC_OscConfig+0x498>
 8004a2a:	e61f      	b.n	800466c <HAL_RCC_OscConfig+0xec>
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d100      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4b4>
 8004a32:	e61c      	b.n	800466e <HAL_RCC_OscConfig+0xee>
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	68e3      	ldr	r3, [r4, #12]
 8004a38:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004a3a:	0252      	lsls	r2, r2, #9
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	428a      	cmp	r2, r1
 8004a40:	d000      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4c4>
 8004a42:	e5fd      	b.n	8004640 <HAL_RCC_OscConfig+0xc0>
 8004a44:	22f0      	movs	r2, #240	; 0xf0
 8004a46:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004a48:	0392      	lsls	r2, r2, #14
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	428a      	cmp	r2, r1
 8004a4e:	d000      	beq.n	8004a52 <HAL_RCC_OscConfig+0x4d2>
 8004a50:	e5f6      	b.n	8004640 <HAL_RCC_OscConfig+0xc0>
 8004a52:	22c0      	movs	r2, #192	; 0xc0
 8004a54:	0412      	lsls	r2, r2, #16
 8004a56:	4013      	ands	r3, r2
 8004a58:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d100      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
 8004a5e:	e5e1      	b.n	8004624 <HAL_RCC_OscConfig+0xa4>
 8004a60:	e5ee      	b.n	8004640 <HAL_RCC_OscConfig+0xc0>
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	fffffeff 	.word	0xfffffeff
 8004a68:	fffffbff 	.word	0xfffffbff
 8004a6c:	00001388 	.word	0x00001388
 8004a70:	efffffff 	.word	0xefffffff
 8004a74:	40010000 	.word	0x40010000
 8004a78:	ffffdfff 	.word	0xffffdfff
 8004a7c:	feffffff 	.word	0xfeffffff
 8004a80:	ff02ffff 	.word	0xff02ffff

08004a84 <HAL_RCC_ClockConfig>:
 8004a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a86:	1e04      	subs	r4, r0, #0
 8004a88:	9101      	str	r1, [sp, #4]
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xc>
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a90:	2501      	movs	r5, #1
 8004a92:	4e5b      	ldr	r6, [pc, #364]	; (8004c00 <HAL_RCC_ClockConfig+0x17c>)
 8004a94:	9a01      	ldr	r2, [sp, #4]
 8004a96:	6833      	ldr	r3, [r6, #0]
 8004a98:	402b      	ands	r3, r5
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d331      	bcc.n	8004b02 <HAL_RCC_ClockConfig+0x7e>
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	0793      	lsls	r3, r2, #30
 8004aa2:	d443      	bmi.n	8004b2c <HAL_RCC_ClockConfig+0xa8>
 8004aa4:	07d3      	lsls	r3, r2, #31
 8004aa6:	d449      	bmi.n	8004b3c <HAL_RCC_ClockConfig+0xb8>
 8004aa8:	2501      	movs	r5, #1
 8004aaa:	6833      	ldr	r3, [r6, #0]
 8004aac:	9a01      	ldr	r2, [sp, #4]
 8004aae:	402b      	ands	r3, r5
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d909      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
 8004ab4:	6833      	ldr	r3, [r6, #0]
 8004ab6:	43ab      	bics	r3, r5
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	f7fe fc19 	bl	80032f0 <HAL_GetTick>
 8004abe:	0007      	movs	r7, r0
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	422b      	tst	r3, r5
 8004ac4:	d000      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
 8004ac6:	e08c      	b.n	8004be2 <HAL_RCC_ClockConfig+0x15e>
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	4d4e      	ldr	r5, [pc, #312]	; (8004c04 <HAL_RCC_ClockConfig+0x180>)
 8004acc:	0753      	lsls	r3, r2, #29
 8004ace:	d500      	bpl.n	8004ad2 <HAL_RCC_ClockConfig+0x4e>
 8004ad0:	e08f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x16e>
 8004ad2:	0713      	lsls	r3, r2, #28
 8004ad4:	d506      	bpl.n	8004ae4 <HAL_RCC_ClockConfig+0x60>
 8004ad6:	68e9      	ldr	r1, [r5, #12]
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	4a4b      	ldr	r2, [pc, #300]	; (8004c08 <HAL_RCC_ClockConfig+0x184>)
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	400a      	ands	r2, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60eb      	str	r3, [r5, #12]
 8004ae4:	f7ff fd04 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 8004ae8:	68eb      	ldr	r3, [r5, #12]
 8004aea:	4a48      	ldr	r2, [pc, #288]	; (8004c0c <HAL_RCC_ClockConfig+0x188>)
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	5cd3      	ldrb	r3, [r2, r3]
 8004af2:	40d8      	lsrs	r0, r3
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_ClockConfig+0x18c>)
 8004af6:	6018      	str	r0, [r3, #0]
 8004af8:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_RCC_ClockConfig+0x190>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	f7fe fbb4 	bl	8003268 <HAL_InitTick>
 8004b00:	e7c5      	b.n	8004a8e <HAL_RCC_ClockConfig+0xa>
 8004b02:	6833      	ldr	r3, [r6, #0]
 8004b04:	9a01      	ldr	r2, [sp, #4]
 8004b06:	43ab      	bics	r3, r5
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f7fe fbf0 	bl	80032f0 <HAL_GetTick>
 8004b10:	0007      	movs	r7, r0
 8004b12:	6833      	ldr	r3, [r6, #0]
 8004b14:	9a01      	ldr	r2, [sp, #4]
 8004b16:	402b      	ands	r3, r5
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d0c0      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x1a>
 8004b1c:	f7fe fbe8 	bl	80032f0 <HAL_GetTick>
 8004b20:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004b22:	1bc0      	subs	r0, r0, r7
 8004b24:	4298      	cmp	r0, r3
 8004b26:	d9f4      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x8e>
 8004b28:	2003      	movs	r0, #3
 8004b2a:	e7b0      	b.n	8004a8e <HAL_RCC_ClockConfig+0xa>
 8004b2c:	20f0      	movs	r0, #240	; 0xf0
 8004b2e:	4935      	ldr	r1, [pc, #212]	; (8004c04 <HAL_RCC_ClockConfig+0x180>)
 8004b30:	68cb      	ldr	r3, [r1, #12]
 8004b32:	4383      	bics	r3, r0
 8004b34:	68a0      	ldr	r0, [r4, #8]
 8004b36:	4303      	orrs	r3, r0
 8004b38:	60cb      	str	r3, [r1, #12]
 8004b3a:	e7b3      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x20>
 8004b3c:	4d31      	ldr	r5, [pc, #196]	; (8004c04 <HAL_RCC_ClockConfig+0x180>)
 8004b3e:	6862      	ldr	r2, [r4, #4]
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	2a02      	cmp	r2, #2
 8004b44:	d118      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xf4>
 8004b46:	039b      	lsls	r3, r3, #14
 8004b48:	d5a0      	bpl.n	8004a8c <HAL_RCC_ClockConfig+0x8>
 8004b4a:	2103      	movs	r1, #3
 8004b4c:	68eb      	ldr	r3, [r5, #12]
 8004b4e:	438b      	bics	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60eb      	str	r3, [r5, #12]
 8004b54:	f7fe fbcc 	bl	80032f0 <HAL_GetTick>
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	0007      	movs	r7, r0
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d118      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
 8004b60:	220c      	movs	r2, #12
 8004b62:	68eb      	ldr	r3, [r5, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d09e      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x24>
 8004b6a:	f7fe fbc1 	bl	80032f0 <HAL_GetTick>
 8004b6e:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004b70:	1bc0      	subs	r0, r0, r7
 8004b72:	4298      	cmp	r0, r3
 8004b74:	d9f4      	bls.n	8004b60 <HAL_RCC_ClockConfig+0xdc>
 8004b76:	e7d7      	b.n	8004b28 <HAL_RCC_ClockConfig+0xa4>
 8004b78:	2a03      	cmp	r2, #3
 8004b7a:	d102      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xfe>
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	d4e4      	bmi.n	8004b4a <HAL_RCC_ClockConfig+0xc6>
 8004b80:	e784      	b.n	8004a8c <HAL_RCC_ClockConfig+0x8>
 8004b82:	2a01      	cmp	r2, #1
 8004b84:	d102      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x108>
 8004b86:	075b      	lsls	r3, r3, #29
 8004b88:	d4df      	bmi.n	8004b4a <HAL_RCC_ClockConfig+0xc6>
 8004b8a:	e77f      	b.n	8004a8c <HAL_RCC_ClockConfig+0x8>
 8004b8c:	059b      	lsls	r3, r3, #22
 8004b8e:	d4dc      	bmi.n	8004b4a <HAL_RCC_ClockConfig+0xc6>
 8004b90:	e77c      	b.n	8004a8c <HAL_RCC_ClockConfig+0x8>
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d10b      	bne.n	8004bae <HAL_RCC_ClockConfig+0x12a>
 8004b96:	220c      	movs	r2, #12
 8004b98:	68eb      	ldr	r3, [r5, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d083      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x24>
 8004ba0:	f7fe fba6 	bl	80032f0 <HAL_GetTick>
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004ba6:	1bc0      	subs	r0, r0, r7
 8004ba8:	4298      	cmp	r0, r3
 8004baa:	d9f4      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x112>
 8004bac:	e7bc      	b.n	8004b28 <HAL_RCC_ClockConfig+0xa4>
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x152>
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	68eb      	ldr	r3, [r5, #12]
 8004bb6:	4213      	tst	r3, r2
 8004bb8:	d100      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x138>
 8004bba:	e775      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x24>
 8004bbc:	f7fe fb98 	bl	80032f0 <HAL_GetTick>
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004bc2:	1bc0      	subs	r0, r0, r7
 8004bc4:	4298      	cmp	r0, r3
 8004bc6:	d9f4      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x12e>
 8004bc8:	e7ae      	b.n	8004b28 <HAL_RCC_ClockConfig+0xa4>
 8004bca:	f7fe fb91 	bl	80032f0 <HAL_GetTick>
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004bd0:	1bc0      	subs	r0, r0, r7
 8004bd2:	4298      	cmp	r0, r3
 8004bd4:	d8a8      	bhi.n	8004b28 <HAL_RCC_ClockConfig+0xa4>
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	68eb      	ldr	r3, [r5, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d1f4      	bne.n	8004bca <HAL_RCC_ClockConfig+0x146>
 8004be0:	e762      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x24>
 8004be2:	f7fe fb85 	bl	80032f0 <HAL_GetTick>
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <HAL_RCC_ClockConfig+0x194>)
 8004be8:	1bc0      	subs	r0, r0, r7
 8004bea:	4298      	cmp	r0, r3
 8004bec:	d800      	bhi.n	8004bf0 <HAL_RCC_ClockConfig+0x16c>
 8004bee:	e767      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x3c>
 8004bf0:	e79a      	b.n	8004b28 <HAL_RCC_ClockConfig+0xa4>
 8004bf2:	68eb      	ldr	r3, [r5, #12]
 8004bf4:	4909      	ldr	r1, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x198>)
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	68e1      	ldr	r1, [r4, #12]
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	60eb      	str	r3, [r5, #12]
 8004bfe:	e768      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x4e>
 8004c00:	40022000 	.word	0x40022000
 8004c04:	40021000 	.word	0x40021000
 8004c08:	ffffc7ff 	.word	0xffffc7ff
 8004c0c:	080068c4 	.word	0x080068c4
 8004c10:	20000008 	.word	0x20000008
 8004c14:	20000040 	.word	0x20000040
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	fffff8ff 	.word	0xfffff8ff

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
 8004c20:	6803      	ldr	r3, [r0, #0]
 8004c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c24:	0005      	movs	r5, r0
 8004c26:	069b      	lsls	r3, r3, #26
 8004c28:	d53c      	bpl.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4c5a      	ldr	r4, [pc, #360]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004c30:	055b      	lsls	r3, r3, #21
 8004c32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c34:	9100      	str	r1, [sp, #0]
 8004c36:	421a      	tst	r2, r3
 8004c38:	d104      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004c3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c40:	2301      	movs	r3, #1
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	2780      	movs	r7, #128	; 0x80
 8004c46:	4e55      	ldr	r6, [pc, #340]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004c48:	007f      	lsls	r7, r7, #1
 8004c4a:	6833      	ldr	r3, [r6, #0]
 8004c4c:	423b      	tst	r3, r7
 8004c4e:	d062      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004c50:	686a      	ldr	r2, [r5, #4]
 8004c52:	23c0      	movs	r3, #192	; 0xc0
 8004c54:	20c0      	movs	r0, #192	; 0xc0
 8004c56:	0016      	movs	r6, r2
 8004c58:	6821      	ldr	r1, [r4, #0]
 8004c5a:	0380      	lsls	r0, r0, #14
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	401e      	ands	r6, r3
 8004c60:	4002      	ands	r2, r0
 8004c62:	4001      	ands	r1, r0
 8004c64:	428a      	cmp	r2, r1
 8004c66:	d167      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004c68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	4019      	ands	r1, r3
 8004c6e:	421a      	tst	r2, r3
 8004c70:	d16a      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004c72:	6869      	ldr	r1, [r5, #4]
 8004c74:	23c0      	movs	r3, #192	; 0xc0
 8004c76:	000a      	movs	r2, r1
 8004c78:	029b      	lsls	r3, r3, #10
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	4847      	ldr	r0, [pc, #284]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004c84:	4003      	ands	r3, r0
 8004c86:	20c0      	movs	r0, #192	; 0xc0
 8004c88:	0380      	lsls	r0, r0, #14
 8004c8a:	4001      	ands	r1, r0
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004c92:	431a      	orrs	r2, r3
 8004c94:	9b00      	ldr	r3, [sp, #0]
 8004c96:	6522      	str	r2, [r4, #80]	; 0x50
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d103      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c9e:	4a41      	ldr	r2, [pc, #260]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	07da      	lsls	r2, r3, #31
 8004ca8:	d506      	bpl.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004caa:	2003      	movs	r0, #3
 8004cac:	493a      	ldr	r1, [pc, #232]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004cae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cb0:	4382      	bics	r2, r0
 8004cb2:	68a8      	ldr	r0, [r5, #8]
 8004cb4:	4302      	orrs	r2, r0
 8004cb6:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004cb8:	079a      	lsls	r2, r3, #30
 8004cba:	d506      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8004cbc:	200c      	movs	r0, #12
 8004cbe:	4936      	ldr	r1, [pc, #216]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004cc0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cc2:	4382      	bics	r2, r0
 8004cc4:	68e8      	ldr	r0, [r5, #12]
 8004cc6:	4302      	orrs	r2, r0
 8004cc8:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004cca:	075a      	lsls	r2, r3, #29
 8004ccc:	d506      	bpl.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8004cce:	4932      	ldr	r1, [pc, #200]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004cd0:	4835      	ldr	r0, [pc, #212]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004cd2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cd4:	4002      	ands	r2, r0
 8004cd6:	6928      	ldr	r0, [r5, #16]
 8004cd8:	4302      	orrs	r2, r0
 8004cda:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004cdc:	071a      	lsls	r2, r3, #28
 8004cde:	d506      	bpl.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004ce0:	492d      	ldr	r1, [pc, #180]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004ce2:	4832      	ldr	r0, [pc, #200]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004ce4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004ce6:	4002      	ands	r2, r0
 8004ce8:	6968      	ldr	r0, [r5, #20]
 8004cea:	4302      	orrs	r2, r0
 8004cec:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004cee:	065a      	lsls	r2, r3, #25
 8004cf0:	d506      	bpl.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004cf2:	4929      	ldr	r1, [pc, #164]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004cf4:	482e      	ldr	r0, [pc, #184]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004cf6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cf8:	4002      	ands	r2, r0
 8004cfa:	69e8      	ldr	r0, [r5, #28]
 8004cfc:	4302      	orrs	r2, r0
 8004cfe:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004d00:	2000      	movs	r0, #0
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	d517      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d06:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d08:	492a      	ldr	r1, [pc, #168]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004d0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d0c:	400b      	ands	r3, r1
 8004d0e:	69a9      	ldr	r1, [r5, #24]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d14:	e00f      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d16:	6833      	ldr	r3, [r6, #0]
 8004d18:	433b      	orrs	r3, r7
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	f7fe fae8 	bl	80032f0 <HAL_GetTick>
 8004d20:	9001      	str	r0, [sp, #4]
 8004d22:	6833      	ldr	r3, [r6, #0]
 8004d24:	423b      	tst	r3, r7
 8004d26:	d193      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004d28:	f7fe fae2 	bl	80032f0 <HAL_GetTick>
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	1ac0      	subs	r0, r0, r3
 8004d30:	2864      	cmp	r0, #100	; 0x64
 8004d32:	d9f6      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004d34:	2003      	movs	r0, #3
 8004d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d38:	429e      	cmp	r6, r3
 8004d3a:	d195      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	2001      	movs	r0, #1
 8004d40:	0392      	lsls	r2, r2, #14
 8004d42:	d400      	bmi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004d44:	e790      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004d46:	e7f6      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d48:	42b1      	cmp	r1, r6
 8004d4a:	d100      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004d4c:	e791      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	069b      	lsls	r3, r3, #26
 8004d52:	d400      	bmi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d54:	e78d      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004d5c:	0312      	lsls	r2, r2, #12
 8004d5e:	4302      	orrs	r2, r0
 8004d60:	6522      	str	r2, [r4, #80]	; 0x50
 8004d62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004d66:	4815      	ldr	r0, [pc, #84]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004d68:	400b      	ands	r3, r1
 8004d6a:	4002      	ands	r2, r0
 8004d6c:	6522      	str	r2, [r4, #80]	; 0x50
 8004d6e:	6523      	str	r3, [r4, #80]	; 0x50
 8004d70:	05cb      	lsls	r3, r1, #23
 8004d72:	d400      	bmi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004d74:	e77d      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d76:	f7fe fabb 	bl	80032f0 <HAL_GetTick>
 8004d7a:	2780      	movs	r7, #128	; 0x80
 8004d7c:	0006      	movs	r6, r0
 8004d7e:	00bf      	lsls	r7, r7, #2
 8004d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d82:	423b      	tst	r3, r7
 8004d84:	d000      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d86:	e774      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d88:	f7fe fab2 	bl	80032f0 <HAL_GetTick>
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004d8e:	1b80      	subs	r0, r0, r6
 8004d90:	4298      	cmp	r0, r3
 8004d92:	d9f5      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d94:	e7ce      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	ffcfffff 	.word	0xffcfffff
 8004da4:	efffffff 	.word	0xefffffff
 8004da8:	fffff3ff 	.word	0xfffff3ff
 8004dac:	ffffcfff 	.word	0xffffcfff
 8004db0:	fbffffff 	.word	0xfbffffff
 8004db4:	fff3ffff 	.word	0xfff3ffff
 8004db8:	fffcffff 	.word	0xfffcffff
 8004dbc:	fff7ffff 	.word	0xfff7ffff
 8004dc0:	00001388 	.word	0x00001388

08004dc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
 8004dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc6:	001d      	movs	r5, r3
 8004dc8:	0017      	movs	r7, r2
 8004dca:	b085      	sub	sp, #20
 8004dcc:	000e      	movs	r6, r1
 8004dce:	0004      	movs	r4, r0
 8004dd0:	f7fe fa8e 	bl	80032f0 <HAL_GetTick>
 8004dd4:	19ed      	adds	r5, r5, r7
 8004dd6:	1a2d      	subs	r5, r5, r0
 8004dd8:	f7fe fa8a 	bl	80032f0 <HAL_GetTick>
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
 8004dde:	9001      	str	r0, [sp, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	015b      	lsls	r3, r3, #5
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	436b      	muls	r3, r5
 8004de8:	6822      	ldr	r2, [r4, #0]
 8004dea:	9303      	str	r3, [sp, #12]
 8004dec:	6893      	ldr	r3, [r2, #8]
 8004dee:	4033      	ands	r3, r6
 8004df0:	429e      	cmp	r6, r3
 8004df2:	d001      	beq.n	8004df8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
 8004df4:	2000      	movs	r0, #0
 8004df6:	e032      	b.n	8004e5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
 8004df8:	1c7b      	adds	r3, r7, #1
 8004dfa:	d0f7      	beq.n	8004dec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
 8004dfc:	f7fe fa78 	bl	80032f0 <HAL_GetTick>
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	1ac0      	subs	r0, r0, r3
 8004e04:	42a8      	cmp	r0, r5
 8004e06:	d32c      	bcc.n	8004e62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
 8004e08:	21e0      	movs	r1, #224	; 0xe0
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	438a      	bics	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	2282      	movs	r2, #130	; 0x82
 8004e14:	6861      	ldr	r1, [r4, #4]
 8004e16:	0052      	lsls	r2, r2, #1
 8004e18:	4291      	cmp	r1, r2
 8004e1a:	d10c      	bne.n	8004e36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	68a2      	ldr	r2, [r4, #8]
 8004e20:	0209      	lsls	r1, r1, #8
 8004e22:	428a      	cmp	r2, r1
 8004e24:	d003      	beq.n	8004e2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	00c9      	lsls	r1, r1, #3
 8004e2a:	428a      	cmp	r2, r1
 8004e2c:	d103      	bne.n	8004e36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004e2e:	2140      	movs	r1, #64	; 0x40
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	438a      	bics	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e3a:	0189      	lsls	r1, r1, #6
 8004e3c:	428a      	cmp	r2, r1
 8004e3e:	d106      	bne.n	8004e4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	480d      	ldr	r0, [pc, #52]	; (8004e78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004e44:	4001      	ands	r1, r0
 8004e46:	6019      	str	r1, [r3, #0]
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	0023      	movs	r3, r4
 8004e50:	2201      	movs	r2, #1
 8004e52:	3351      	adds	r3, #81	; 0x51
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	2003      	movs	r0, #3
 8004e5a:	3450      	adds	r4, #80	; 0x50
 8004e5c:	7023      	strb	r3, [r4, #0]
 8004e5e:	b005      	add	sp, #20
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	4193      	sbcs	r3, r2
 8004e68:	425b      	negs	r3, r3
 8004e6a:	401d      	ands	r5, r3
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	e7ba      	b.n	8004de8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	20000008 	.word	0x20000008
 8004e78:	ffffdfff 	.word	0xffffdfff

08004e7c <SPI_EndRxTxTransaction>:
 8004e7c:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <SPI_EndRxTxTransaction+0x5c>)
 8004e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e80:	0004      	movs	r4, r0
 8004e82:	000d      	movs	r5, r1
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	4915      	ldr	r1, [pc, #84]	; (8004edc <SPI_EndRxTxTransaction+0x60>)
 8004e88:	0016      	movs	r6, r2
 8004e8a:	f7fb f95b 	bl	8000144 <__udivsi3>
 8004e8e:	23fa      	movs	r3, #250	; 0xfa
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4343      	muls	r3, r0
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	2382      	movs	r3, #130	; 0x82
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	d10d      	bne.n	8004ebe <SPI_EndRxTxTransaction+0x42>
 8004ea2:	0033      	movs	r3, r6
 8004ea4:	002a      	movs	r2, r5
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	0020      	movs	r0, r4
 8004eaa:	f7ff ff8b 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d00f      	beq.n	8004ed2 <SPI_EndRxTxTransaction+0x56>
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	6563      	str	r3, [r4, #84]	; 0x54
 8004ebc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d006      	beq.n	8004ed2 <SPI_EndRxTxTransaction+0x56>
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4213      	tst	r3, r2
 8004ed0:	d1f5      	bne.n	8004ebe <SPI_EndRxTxTransaction+0x42>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e7f2      	b.n	8004ebc <SPI_EndRxTxTransaction+0x40>
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	20000008 	.word	0x20000008
 8004edc:	016e3600 	.word	0x016e3600

08004ee0 <HAL_SPI_Init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	0004      	movs	r4, r0
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d054      	beq.n	8004f94 <HAL_SPI_Init+0xb4>
 8004eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d152      	bne.n	8004f96 <HAL_SPI_Init+0xb6>
 8004ef0:	2282      	movs	r2, #130	; 0x82
 8004ef2:	6861      	ldr	r1, [r4, #4]
 8004ef4:	0052      	lsls	r2, r2, #1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	d000      	beq.n	8004efc <HAL_SPI_Init+0x1c>
 8004efa:	61e3      	str	r3, [r4, #28]
 8004efc:	2300      	movs	r3, #0
 8004efe:	0025      	movs	r5, r4
 8004f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f02:	3551      	adds	r5, #81	; 0x51
 8004f04:	782b      	ldrb	r3, [r5, #0]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_SPI_Init+0x38>
 8004f0c:	0023      	movs	r3, r4
 8004f0e:	3350      	adds	r3, #80	; 0x50
 8004f10:	0020      	movs	r0, r4
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	f7fc f8e0 	bl	80010d8 <HAL_SPI_MspInit>
 8004f18:	2002      	movs	r0, #2
 8004f1a:	2240      	movs	r2, #64	; 0x40
 8004f1c:	7028      	strb	r0, [r5, #0]
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	6866      	ldr	r6, [r4, #4]
 8004f22:	680b      	ldr	r3, [r1, #0]
 8004f24:	68a7      	ldr	r7, [r4, #8]
 8004f26:	4393      	bics	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
 8004f2a:	2382      	movs	r3, #130	; 0x82
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4033      	ands	r3, r6
 8004f30:	2684      	movs	r6, #132	; 0x84
 8004f32:	0236      	lsls	r6, r6, #8
 8004f34:	403e      	ands	r6, r7
 8004f36:	4333      	orrs	r3, r6
 8004f38:	2680      	movs	r6, #128	; 0x80
 8004f3a:	68e7      	ldr	r7, [r4, #12]
 8004f3c:	0136      	lsls	r6, r6, #4
 8004f3e:	403e      	ands	r6, r7
 8004f40:	4333      	orrs	r3, r6
 8004f42:	6926      	ldr	r6, [r4, #16]
 8004f44:	69a2      	ldr	r2, [r4, #24]
 8004f46:	4030      	ands	r0, r6
 8004f48:	2601      	movs	r6, #1
 8004f4a:	4303      	orrs	r3, r0
 8004f4c:	6960      	ldr	r0, [r4, #20]
 8004f4e:	69e7      	ldr	r7, [r4, #28]
 8004f50:	4030      	ands	r0, r6
 8004f52:	4303      	orrs	r3, r0
 8004f54:	2080      	movs	r0, #128	; 0x80
 8004f56:	0080      	lsls	r0, r0, #2
 8004f58:	4010      	ands	r0, r2
 8004f5a:	4303      	orrs	r3, r0
 8004f5c:	2038      	movs	r0, #56	; 0x38
 8004f5e:	4038      	ands	r0, r7
 8004f60:	4303      	orrs	r3, r0
 8004f62:	2080      	movs	r0, #128	; 0x80
 8004f64:	6a27      	ldr	r7, [r4, #32]
 8004f66:	0c12      	lsrs	r2, r2, #16
 8004f68:	4038      	ands	r0, r7
 8004f6a:	4303      	orrs	r3, r0
 8004f6c:	2080      	movs	r0, #128	; 0x80
 8004f6e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004f70:	0180      	lsls	r0, r0, #6
 8004f72:	4038      	ands	r0, r7
 8004f74:	4303      	orrs	r3, r0
 8004f76:	600b      	str	r3, [r1, #0]
 8004f78:	2304      	movs	r3, #4
 8004f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	330c      	adds	r3, #12
 8004f80:	4003      	ands	r3, r0
 8004f82:	2000      	movs	r0, #0
 8004f84:	431a      	orrs	r2, r3
 8004f86:	604a      	str	r2, [r1, #4]
 8004f88:	69cb      	ldr	r3, [r1, #28]
 8004f8a:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <HAL_SPI_Init+0xc0>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
 8004f90:	6560      	str	r0, [r4, #84]	; 0x54
 8004f92:	702e      	strb	r6, [r5, #0]
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f96:	2300      	movs	r3, #0
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	6163      	str	r3, [r4, #20]
 8004f9c:	e7ae      	b.n	8004efc <HAL_SPI_Init+0x1c>
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	fffff7ff 	.word	0xfffff7ff

08004fa4 <HAL_SPI_Transmit_DMA>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	0006      	movs	r6, r0
 8004fa8:	3650      	adds	r6, #80	; 0x50
 8004faa:	7833      	ldrb	r3, [r6, #0]
 8004fac:	0004      	movs	r4, r0
 8004fae:	2502      	movs	r5, #2
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d03e      	beq.n	8005032 <HAL_SPI_Transmit_DMA+0x8e>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	0007      	movs	r7, r0
 8004fb8:	7033      	strb	r3, [r6, #0]
 8004fba:	3751      	adds	r7, #81	; 0x51
 8004fbc:	783b      	ldrb	r3, [r7, #0]
 8004fbe:	b2dd      	uxtb	r5, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d14a      	bne.n	800505a <HAL_SPI_Transmit_DMA+0xb6>
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d032      	beq.n	800502e <HAL_SPI_Transmit_DMA+0x8a>
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d030      	beq.n	800502e <HAL_SPI_Transmit_DMA+0x8a>
 8004fcc:	3302      	adds	r3, #2
 8004fce:	703b      	strb	r3, [r7, #0]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6543      	str	r3, [r0, #84]	; 0x54
 8004fd4:	6383      	str	r3, [r0, #56]	; 0x38
 8004fd6:	86c2      	strh	r2, [r0, #54]	; 0x36
 8004fd8:	6443      	str	r3, [r0, #68]	; 0x44
 8004fda:	6403      	str	r3, [r0, #64]	; 0x40
 8004fdc:	8783      	strh	r3, [r0, #60]	; 0x3c
 8004fde:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	8682      	strh	r2, [r0, #52]	; 0x34
 8004fe4:	6301      	str	r1, [r0, #48]	; 0x30
 8004fe6:	6802      	ldr	r2, [r0, #0]
 8004fe8:	6880      	ldr	r0, [r0, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	4298      	cmp	r0, r3
 8004fee:	d108      	bne.n	8005002 <HAL_SPI_Transmit_DMA+0x5e>
 8004ff0:	2040      	movs	r0, #64	; 0x40
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	4383      	bics	r3, r0
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	6810      	ldr	r0, [r2, #0]
 8004ffc:	01db      	lsls	r3, r3, #7
 8004ffe:	4303      	orrs	r3, r0
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_SPI_Transmit_DMA+0xbc>)
 8005006:	320c      	adds	r2, #12
 8005008:	6303      	str	r3, [r0, #48]	; 0x30
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <HAL_SPI_Transmit_DMA+0xc0>)
 800500c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800500e:	4b16      	ldr	r3, [pc, #88]	; (8005068 <HAL_SPI_Transmit_DMA+0xc4>)
 8005010:	6343      	str	r3, [r0, #52]	; 0x34
 8005012:	2300      	movs	r3, #0
 8005014:	6383      	str	r3, [r0, #56]	; 0x38
 8005016:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	f7fe fcad 	bl	8003978 <HAL_DMA_Start_IT>
 800501e:	2800      	cmp	r0, #0
 8005020:	d009      	beq.n	8005036 <HAL_SPI_Transmit_DMA+0x92>
 8005022:	2310      	movs	r3, #16
 8005024:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005026:	4313      	orrs	r3, r2
 8005028:	6563      	str	r3, [r4, #84]	; 0x54
 800502a:	2301      	movs	r3, #1
 800502c:	703b      	strb	r3, [r7, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	7033      	strb	r3, [r6, #0]
 8005032:	0028      	movs	r0, r5
 8005034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005036:	2240      	movs	r2, #64	; 0x40
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	4211      	tst	r1, r2
 800503e:	d102      	bne.n	8005046 <HAL_SPI_Transmit_DMA+0xa2>
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	2220      	movs	r2, #32
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	2500      	movs	r5, #0
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	e7e9      	b.n	800502e <HAL_SPI_Transmit_DMA+0x8a>
 800505a:	2502      	movs	r5, #2
 800505c:	e7e7      	b.n	800502e <HAL_SPI_Transmit_DMA+0x8a>
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	08005071 	.word	0x08005071
 8005064:	080050a1 	.word	0x080050a1
 8005068:	0800507d 	.word	0x0800507d

0800506c <HAL_SPI_TxCpltCallback>:
 800506c:	4770      	bx	lr

0800506e <HAL_SPI_TxHalfCpltCallback>:
 800506e:	4770      	bx	lr

08005070 <SPI_DMAHalfTransmitCplt>:
 8005070:	b510      	push	{r4, lr}
 8005072:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005074:	f7ff fffb 	bl	800506e <HAL_SPI_TxHalfCpltCallback>
 8005078:	bd10      	pop	{r4, pc}

0800507a <HAL_SPI_ErrorCallback>:
 800507a:	4770      	bx	lr

0800507c <SPI_DMAError>:
 800507c:	2103      	movs	r1, #3
 800507e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005080:	b510      	push	{r4, lr}
 8005082:	6802      	ldr	r2, [r0, #0]
 8005084:	6853      	ldr	r3, [r2, #4]
 8005086:	438b      	bics	r3, r1
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	2310      	movs	r3, #16
 800508c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800508e:	4313      	orrs	r3, r2
 8005090:	6543      	str	r3, [r0, #84]	; 0x54
 8005092:	0003      	movs	r3, r0
 8005094:	2201      	movs	r2, #1
 8005096:	3351      	adds	r3, #81	; 0x51
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	f7ff ffee 	bl	800507a <HAL_SPI_ErrorCallback>
 800509e:	bd10      	pop	{r4, pc}

080050a0 <SPI_DMATransmitCplt>:
 80050a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050a2:	0005      	movs	r5, r0
 80050a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80050a6:	f7fe f923 	bl	80032f0 <HAL_GetTick>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	2520      	movs	r5, #32
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	0002      	movs	r2, r0
 80050b2:	422b      	tst	r3, r5
 80050b4:	d127      	bne.n	8005106 <SPI_DMATransmitCplt+0x66>
 80050b6:	2002      	movs	r0, #2
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	43a9      	bics	r1, r5
 80050be:	6059      	str	r1, [r3, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	4381      	bics	r1, r0
 80050c4:	6059      	str	r1, [r3, #4]
 80050c6:	0020      	movs	r0, r4
 80050c8:	2164      	movs	r1, #100	; 0x64
 80050ca:	f7ff fed7 	bl	8004e7c <SPI_EndRxTxTransaction>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d002      	beq.n	80050d8 <SPI_DMATransmitCplt+0x38>
 80050d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050d4:	431d      	orrs	r5, r3
 80050d6:	6565      	str	r5, [r4, #84]	; 0x54
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <SPI_DMATransmitCplt+0x4c>
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	9201      	str	r2, [sp, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	2300      	movs	r3, #0
 80050ee:	86e3      	strh	r3, [r4, #54]	; 0x36
 80050f0:	0023      	movs	r3, r4
 80050f2:	2201      	movs	r2, #1
 80050f4:	3351      	adds	r3, #81	; 0x51
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <SPI_DMATransmitCplt+0x66>
 80050fe:	0020      	movs	r0, r4
 8005100:	f7ff ffbb 	bl	800507a <HAL_SPI_ErrorCallback>
 8005104:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8005106:	0020      	movs	r0, r4
 8005108:	f7ff ffb0 	bl	800506c <HAL_SPI_TxCpltCallback>
 800510c:	e7fa      	b.n	8005104 <SPI_DMATransmitCplt+0x64>
	...

08005110 <TIM_Base_SetConfig>:
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	b510      	push	{r4, lr}
 8005114:	6803      	ldr	r3, [r0, #0]
 8005116:	05d2      	lsls	r2, r2, #23
 8005118:	4290      	cmp	r0, r2
 800511a:	d005      	beq.n	8005128 <TIM_Base_SetConfig+0x18>
 800511c:	4c10      	ldr	r4, [pc, #64]	; (8005160 <TIM_Base_SetConfig+0x50>)
 800511e:	42a0      	cmp	r0, r4
 8005120:	d002      	beq.n	8005128 <TIM_Base_SetConfig+0x18>
 8005122:	4c10      	ldr	r4, [pc, #64]	; (8005164 <TIM_Base_SetConfig+0x54>)
 8005124:	42a0      	cmp	r0, r4
 8005126:	d10f      	bne.n	8005148 <TIM_Base_SetConfig+0x38>
 8005128:	2470      	movs	r4, #112	; 0x70
 800512a:	43a3      	bics	r3, r4
 800512c:	684c      	ldr	r4, [r1, #4]
 800512e:	4323      	orrs	r3, r4
 8005130:	4290      	cmp	r0, r2
 8005132:	d005      	beq.n	8005140 <TIM_Base_SetConfig+0x30>
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <TIM_Base_SetConfig+0x50>)
 8005136:	4290      	cmp	r0, r2
 8005138:	d002      	beq.n	8005140 <TIM_Base_SetConfig+0x30>
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <TIM_Base_SetConfig+0x54>)
 800513c:	4290      	cmp	r0, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0x38>
 8005140:	4a09      	ldr	r2, [pc, #36]	; (8005168 <TIM_Base_SetConfig+0x58>)
 8005142:	4013      	ands	r3, r2
 8005144:	68ca      	ldr	r2, [r1, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	4393      	bics	r3, r2
 800514c:	690a      	ldr	r2, [r1, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	6003      	str	r3, [r0, #0]
 8005152:	688b      	ldr	r3, [r1, #8]
 8005154:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005156:	680b      	ldr	r3, [r1, #0]
 8005158:	6283      	str	r3, [r0, #40]	; 0x28
 800515a:	2301      	movs	r3, #1
 800515c:	6143      	str	r3, [r0, #20]
 800515e:	bd10      	pop	{r4, pc}
 8005160:	40010800 	.word	0x40010800
 8005164:	40011400 	.word	0x40011400
 8005168:	fffffcff 	.word	0xfffffcff

0800516c <HAL_TIM_Base_Init>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	0004      	movs	r4, r0
 8005170:	2001      	movs	r0, #1
 8005172:	2c00      	cmp	r4, #0
 8005174:	d01d      	beq.n	80051b2 <HAL_TIM_Base_Init+0x46>
 8005176:	0025      	movs	r5, r4
 8005178:	3539      	adds	r5, #57	; 0x39
 800517a:	782b      	ldrb	r3, [r5, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <HAL_TIM_Base_Init+0x22>
 8005182:	0023      	movs	r3, r4
 8005184:	3338      	adds	r3, #56	; 0x38
 8005186:	0020      	movs	r0, r4
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	f7fb ffeb 	bl	8001164 <HAL_TIM_Base_MspInit>
 800518e:	2302      	movs	r3, #2
 8005190:	702b      	strb	r3, [r5, #0]
 8005192:	6820      	ldr	r0, [r4, #0]
 8005194:	1d21      	adds	r1, r4, #4
 8005196:	f7ff ffbb 	bl	8005110 <TIM_Base_SetConfig>
 800519a:	0022      	movs	r2, r4
 800519c:	2301      	movs	r3, #1
 800519e:	2000      	movs	r0, #0
 80051a0:	323e      	adds	r2, #62	; 0x3e
 80051a2:	7013      	strb	r3, [r2, #0]
 80051a4:	343d      	adds	r4, #61	; 0x3d
 80051a6:	3a04      	subs	r2, #4
 80051a8:	7013      	strb	r3, [r2, #0]
 80051aa:	7053      	strb	r3, [r2, #1]
 80051ac:	7093      	strb	r3, [r2, #2]
 80051ae:	7023      	strb	r3, [r4, #0]
 80051b0:	702b      	strb	r3, [r5, #0]
 80051b2:	bd70      	pop	{r4, r5, r6, pc}

080051b4 <HAL_TIM_Base_Start_IT>:
 80051b4:	0002      	movs	r2, r0
 80051b6:	0003      	movs	r3, r0
 80051b8:	2001      	movs	r0, #1
 80051ba:	3239      	adds	r2, #57	; 0x39
 80051bc:	7811      	ldrb	r1, [r2, #0]
 80051be:	4281      	cmp	r1, r0
 80051c0:	d119      	bne.n	80051f6 <HAL_TIM_Base_Start_IT+0x42>
 80051c2:	2102      	movs	r1, #2
 80051c4:	7011      	strb	r1, [r2, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4302      	orrs	r2, r0
 80051cc:	60da      	str	r2, [r3, #12]
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	05d2      	lsls	r2, r2, #23
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d005      	beq.n	80051e2 <HAL_TIM_Base_Start_IT+0x2e>
 80051d6:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <HAL_TIM_Base_Start_IT+0x50>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d002      	beq.n	80051e2 <HAL_TIM_Base_Start_IT+0x2e>
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_TIM_Base_Start_IT+0x54>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10a      	bne.n	80051f8 <HAL_TIM_Base_Start_IT+0x44>
 80051e2:	2107      	movs	r1, #7
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	2000      	movs	r0, #0
 80051e8:	400a      	ands	r2, r1
 80051ea:	2a06      	cmp	r2, #6
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x42>
 80051ee:	2201      	movs	r2, #1
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	4770      	bx	lr
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4310      	orrs	r0, r2
 80051fc:	6018      	str	r0, [r3, #0]
 80051fe:	2000      	movs	r0, #0
 8005200:	e7f9      	b.n	80051f6 <HAL_TIM_Base_Start_IT+0x42>
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	40010800 	.word	0x40010800
 8005208:	40011400 	.word	0x40011400

0800520c <HAL_TIM_ConfigClockSource>:
 800520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520e:	0005      	movs	r5, r0
 8005210:	2202      	movs	r2, #2
 8005212:	3538      	adds	r5, #56	; 0x38
 8005214:	782c      	ldrb	r4, [r5, #0]
 8005216:	0003      	movs	r3, r0
 8005218:	0010      	movs	r0, r2
 800521a:	2c01      	cmp	r4, #1
 800521c:	d01d      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x4e>
 800521e:	001e      	movs	r6, r3
 8005220:	2401      	movs	r4, #1
 8005222:	3639      	adds	r6, #57	; 0x39
 8005224:	702c      	strb	r4, [r5, #0]
 8005226:	7032      	strb	r2, [r6, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	484c      	ldr	r0, [pc, #304]	; (800535c <HAL_TIM_ConfigClockSource+0x150>)
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	4002      	ands	r2, r0
 8005230:	609a      	str	r2, [r3, #8]
 8005232:	680a      	ldr	r2, [r1, #0]
 8005234:	2a60      	cmp	r2, #96	; 0x60
 8005236:	d05f      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0xec>
 8005238:	d832      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x94>
 800523a:	2a40      	cmp	r2, #64	; 0x40
 800523c:	d100      	bne.n	8005240 <HAL_TIM_ConfigClockSource+0x34>
 800523e:	e074      	b.n	800532a <HAL_TIM_ConfigClockSource+0x11e>
 8005240:	d814      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x60>
 8005242:	2a20      	cmp	r2, #32
 8005244:	d00c      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x54>
 8005246:	d809      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x50>
 8005248:	2110      	movs	r1, #16
 800524a:	0010      	movs	r0, r2
 800524c:	4388      	bics	r0, r1
 800524e:	d007      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x54>
 8005250:	0020      	movs	r0, r4
 8005252:	2301      	movs	r3, #1
 8005254:	7033      	strb	r3, [r6, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	702b      	strb	r3, [r5, #0]
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800525c:	2a30      	cmp	r2, #48	; 0x30
 800525e:	d1f7      	bne.n	8005250 <HAL_TIM_ConfigClockSource+0x44>
 8005260:	2070      	movs	r0, #112	; 0x70
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	4381      	bics	r1, r0
 8005266:	430a      	orrs	r2, r1
 8005268:	2107      	movs	r1, #7
 800526a:	e032      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0xc6>
 800526c:	2a50      	cmp	r2, #80	; 0x50
 800526e:	d1ef      	bne.n	8005250 <HAL_TIM_ConfigClockSource+0x44>
 8005270:	6a1f      	ldr	r7, [r3, #32]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	6848      	ldr	r0, [r1, #4]
 8005276:	43a2      	bics	r2, r4
 8005278:	24f0      	movs	r4, #240	; 0xf0
 800527a:	68c9      	ldr	r1, [r1, #12]
 800527c:	621a      	str	r2, [r3, #32]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	43a2      	bics	r2, r4
 8005282:	0014      	movs	r4, r2
 8005284:	010a      	lsls	r2, r1, #4
 8005286:	210a      	movs	r1, #10
 8005288:	438f      	bics	r7, r1
 800528a:	0039      	movs	r1, r7
 800528c:	4322      	orrs	r2, r4
 800528e:	4301      	orrs	r1, r0
 8005290:	619a      	str	r2, [r3, #24]
 8005292:	6219      	str	r1, [r3, #32]
 8005294:	2170      	movs	r1, #112	; 0x70
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	438a      	bics	r2, r1
 800529a:	0011      	movs	r1, r2
 800529c:	2257      	movs	r2, #87	; 0x57
 800529e:	e018      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0xc6>
 80052a0:	2780      	movs	r7, #128	; 0x80
 80052a2:	2000      	movs	r0, #0
 80052a4:	017f      	lsls	r7, r7, #5
 80052a6:	42ba      	cmp	r2, r7
 80052a8:	d0d3      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x46>
 80052aa:	2080      	movs	r0, #128	; 0x80
 80052ac:	0180      	lsls	r0, r0, #6
 80052ae:	4282      	cmp	r2, r0
 80052b0:	d013      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xce>
 80052b2:	0020      	movs	r0, r4
 80052b4:	2a70      	cmp	r2, #112	; 0x70
 80052b6:	d1cc      	bne.n	8005252 <HAL_TIM_ConfigClockSource+0x46>
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4829      	ldr	r0, [pc, #164]	; (8005360 <HAL_TIM_ConfigClockSource+0x154>)
 80052bc:	684c      	ldr	r4, [r1, #4]
 80052be:	4010      	ands	r0, r2
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	68c9      	ldr	r1, [r1, #12]
 80052c4:	4322      	orrs	r2, r4
 80052c6:	0209      	lsls	r1, r1, #8
 80052c8:	430a      	orrs	r2, r1
 80052ca:	4302      	orrs	r2, r0
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	2277      	movs	r2, #119	; 0x77
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	2000      	movs	r0, #0
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	e7bb      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x46>
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	4820      	ldr	r0, [pc, #128]	; (8005360 <HAL_TIM_ConfigClockSource+0x154>)
 80052de:	684c      	ldr	r4, [r1, #4]
 80052e0:	4010      	ands	r0, r2
 80052e2:	688a      	ldr	r2, [r1, #8]
 80052e4:	68c9      	ldr	r1, [r1, #12]
 80052e6:	4322      	orrs	r2, r4
 80052e8:	0209      	lsls	r1, r1, #8
 80052ea:	430a      	orrs	r2, r1
 80052ec:	4302      	orrs	r2, r0
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	6899      	ldr	r1, [r3, #8]
 80052f4:	01d2      	lsls	r2, r2, #7
 80052f6:	e7ec      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0xc6>
 80052f8:	6848      	ldr	r0, [r1, #4]
 80052fa:	68cf      	ldr	r7, [r1, #12]
 80052fc:	2110      	movs	r1, #16
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	4c18      	ldr	r4, [pc, #96]	; (8005364 <HAL_TIM_ConfigClockSource+0x158>)
 8005302:	438a      	bics	r2, r1
 8005304:	621a      	str	r2, [r3, #32]
 8005306:	6999      	ldr	r1, [r3, #24]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	4021      	ands	r1, r4
 800530c:	24a0      	movs	r4, #160	; 0xa0
 800530e:	43a2      	bics	r2, r4
 8005310:	0014      	movs	r4, r2
 8005312:	033f      	lsls	r7, r7, #12
 8005314:	4339      	orrs	r1, r7
 8005316:	6199      	str	r1, [r3, #24]
 8005318:	2170      	movs	r1, #112	; 0x70
 800531a:	0102      	lsls	r2, r0, #4
 800531c:	4322      	orrs	r2, r4
 800531e:	621a      	str	r2, [r3, #32]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	438a      	bics	r2, r1
 8005324:	0011      	movs	r1, r2
 8005326:	2267      	movs	r2, #103	; 0x67
 8005328:	e7d3      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0xc6>
 800532a:	6a1f      	ldr	r7, [r3, #32]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	6848      	ldr	r0, [r1, #4]
 8005330:	43a2      	bics	r2, r4
 8005332:	24f0      	movs	r4, #240	; 0xf0
 8005334:	68c9      	ldr	r1, [r1, #12]
 8005336:	621a      	str	r2, [r3, #32]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	43a2      	bics	r2, r4
 800533c:	0014      	movs	r4, r2
 800533e:	010a      	lsls	r2, r1, #4
 8005340:	210a      	movs	r1, #10
 8005342:	438f      	bics	r7, r1
 8005344:	0039      	movs	r1, r7
 8005346:	4322      	orrs	r2, r4
 8005348:	4301      	orrs	r1, r0
 800534a:	619a      	str	r2, [r3, #24]
 800534c:	6219      	str	r1, [r3, #32]
 800534e:	2170      	movs	r1, #112	; 0x70
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	438a      	bics	r2, r1
 8005354:	0011      	movs	r1, r2
 8005356:	2247      	movs	r2, #71	; 0x47
 8005358:	e7bb      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0xc6>
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	ffff0088 	.word	0xffff0088
 8005360:	ffff00ff 	.word	0xffff00ff
 8005364:	ffff0fff 	.word	0xffff0fff

08005368 <HAL_TIM_OC_DelayElapsedCallback>:
 8005368:	4770      	bx	lr

0800536a <HAL_TIM_IC_CaptureCallback>:
 800536a:	4770      	bx	lr

0800536c <HAL_TIM_PWM_PulseFinishedCallback>:
 800536c:	4770      	bx	lr

0800536e <HAL_TIM_TriggerCallback>:
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_IRQHandler>:
 8005370:	2202      	movs	r2, #2
 8005372:	6803      	ldr	r3, [r0, #0]
 8005374:	b510      	push	{r4, lr}
 8005376:	6919      	ldr	r1, [r3, #16]
 8005378:	0004      	movs	r4, r0
 800537a:	4211      	tst	r1, r2
 800537c:	d00d      	beq.n	800539a <HAL_TIM_IRQHandler+0x2a>
 800537e:	68d9      	ldr	r1, [r3, #12]
 8005380:	4211      	tst	r1, r2
 8005382:	d00a      	beq.n	800539a <HAL_TIM_IRQHandler+0x2a>
 8005384:	3a05      	subs	r2, #5
 8005386:	611a      	str	r2, [r3, #16]
 8005388:	3204      	adds	r2, #4
 800538a:	7602      	strb	r2, [r0, #24]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	079b      	lsls	r3, r3, #30
 8005390:	d05e      	beq.n	8005450 <HAL_TIM_IRQHandler+0xe0>
 8005392:	f7ff ffea 	bl	800536a <HAL_TIM_IC_CaptureCallback>
 8005396:	2300      	movs	r3, #0
 8005398:	7623      	strb	r3, [r4, #24]
 800539a:	2204      	movs	r2, #4
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	6919      	ldr	r1, [r3, #16]
 80053a0:	4211      	tst	r1, r2
 80053a2:	d010      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x56>
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	4211      	tst	r1, r2
 80053a8:	d00d      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x56>
 80053aa:	3a09      	subs	r2, #9
 80053ac:	611a      	str	r2, [r3, #16]
 80053ae:	3207      	adds	r2, #7
 80053b0:	7622      	strb	r2, [r4, #24]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	23c0      	movs	r3, #192	; 0xc0
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	0020      	movs	r0, r4
 80053ba:	421a      	tst	r2, r3
 80053bc:	d04e      	beq.n	800545c <HAL_TIM_IRQHandler+0xec>
 80053be:	f7ff ffd4 	bl	800536a <HAL_TIM_IC_CaptureCallback>
 80053c2:	2300      	movs	r3, #0
 80053c4:	7623      	strb	r3, [r4, #24]
 80053c6:	2208      	movs	r2, #8
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	6919      	ldr	r1, [r3, #16]
 80053cc:	4211      	tst	r1, r2
 80053ce:	d00e      	beq.n	80053ee <HAL_TIM_IRQHandler+0x7e>
 80053d0:	68d9      	ldr	r1, [r3, #12]
 80053d2:	4211      	tst	r1, r2
 80053d4:	d00b      	beq.n	80053ee <HAL_TIM_IRQHandler+0x7e>
 80053d6:	3a11      	subs	r2, #17
 80053d8:	611a      	str	r2, [r3, #16]
 80053da:	320d      	adds	r2, #13
 80053dc:	7622      	strb	r2, [r4, #24]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	0020      	movs	r0, r4
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	d040      	beq.n	8005468 <HAL_TIM_IRQHandler+0xf8>
 80053e6:	f7ff ffc0 	bl	800536a <HAL_TIM_IC_CaptureCallback>
 80053ea:	2300      	movs	r3, #0
 80053ec:	7623      	strb	r3, [r4, #24]
 80053ee:	2210      	movs	r2, #16
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	6919      	ldr	r1, [r3, #16]
 80053f4:	4211      	tst	r1, r2
 80053f6:	d010      	beq.n	800541a <HAL_TIM_IRQHandler+0xaa>
 80053f8:	68d9      	ldr	r1, [r3, #12]
 80053fa:	4211      	tst	r1, r2
 80053fc:	d00d      	beq.n	800541a <HAL_TIM_IRQHandler+0xaa>
 80053fe:	3a21      	subs	r2, #33	; 0x21
 8005400:	611a      	str	r2, [r3, #16]
 8005402:	3219      	adds	r2, #25
 8005404:	7622      	strb	r2, [r4, #24]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	23c0      	movs	r3, #192	; 0xc0
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	0020      	movs	r0, r4
 800540e:	421a      	tst	r2, r3
 8005410:	d030      	beq.n	8005474 <HAL_TIM_IRQHandler+0x104>
 8005412:	f7ff ffaa 	bl	800536a <HAL_TIM_IC_CaptureCallback>
 8005416:	2300      	movs	r3, #0
 8005418:	7623      	strb	r3, [r4, #24]
 800541a:	2201      	movs	r2, #1
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	6919      	ldr	r1, [r3, #16]
 8005420:	4211      	tst	r1, r2
 8005422:	d007      	beq.n	8005434 <HAL_TIM_IRQHandler+0xc4>
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	4211      	tst	r1, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_IRQHandler+0xc4>
 800542a:	3a03      	subs	r2, #3
 800542c:	0020      	movs	r0, r4
 800542e:	611a      	str	r2, [r3, #16]
 8005430:	f7fd fe80 	bl	8003134 <HAL_TIM_PeriodElapsedCallback>
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	6919      	ldr	r1, [r3, #16]
 800543a:	4211      	tst	r1, r2
 800543c:	d007      	beq.n	800544e <HAL_TIM_IRQHandler+0xde>
 800543e:	68d9      	ldr	r1, [r3, #12]
 8005440:	4211      	tst	r1, r2
 8005442:	d004      	beq.n	800544e <HAL_TIM_IRQHandler+0xde>
 8005444:	3a81      	subs	r2, #129	; 0x81
 8005446:	0020      	movs	r0, r4
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	f7ff ff90 	bl	800536e <HAL_TIM_TriggerCallback>
 800544e:	bd10      	pop	{r4, pc}
 8005450:	f7ff ff8a 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
 8005454:	0020      	movs	r0, r4
 8005456:	f7ff ff89 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
 800545a:	e79c      	b.n	8005396 <HAL_TIM_IRQHandler+0x26>
 800545c:	f7ff ff84 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
 8005460:	0020      	movs	r0, r4
 8005462:	f7ff ff83 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
 8005466:	e7ac      	b.n	80053c2 <HAL_TIM_IRQHandler+0x52>
 8005468:	f7ff ff7e 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
 800546c:	0020      	movs	r0, r4
 800546e:	f7ff ff7d 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
 8005472:	e7ba      	b.n	80053ea <HAL_TIM_IRQHandler+0x7a>
 8005474:	f7ff ff78 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
 8005478:	0020      	movs	r0, r4
 800547a:	f7ff ff77 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
 800547e:	e7ca      	b.n	8005416 <HAL_TIM_IRQHandler+0xa6>

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	0004      	movs	r4, r0
 8005484:	2202      	movs	r2, #2
 8005486:	3438      	adds	r4, #56	; 0x38
 8005488:	7825      	ldrb	r5, [r4, #0]
 800548a:	0003      	movs	r3, r0
 800548c:	0010      	movs	r0, r2
 800548e:	2d01      	cmp	r5, #1
 8005490:	d01d      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005492:	001d      	movs	r5, r3
 8005494:	2670      	movs	r6, #112	; 0x70
 8005496:	3539      	adds	r5, #57	; 0x39
 8005498:	702a      	strb	r2, [r5, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6858      	ldr	r0, [r3, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	43b0      	bics	r0, r6
 80054a2:	680e      	ldr	r6, [r1, #0]
 80054a4:	4330      	orrs	r0, r6
 80054a6:	6058      	str	r0, [r3, #4]
 80054a8:	2080      	movs	r0, #128	; 0x80
 80054aa:	05c0      	lsls	r0, r0, #23
 80054ac:	4283      	cmp	r3, r0
 80054ae:	d005      	beq.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80054b0:	4807      	ldr	r0, [pc, #28]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80054b2:	4283      	cmp	r3, r0
 80054b4:	d002      	beq.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80054b6:	4807      	ldr	r0, [pc, #28]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80054b8:	4283      	cmp	r3, r0
 80054ba:	d104      	bne.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80054bc:	2080      	movs	r0, #128	; 0x80
 80054be:	6849      	ldr	r1, [r1, #4]
 80054c0:	4382      	bics	r2, r0
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	2301      	movs	r3, #1
 80054c8:	2000      	movs	r0, #0
 80054ca:	702b      	strb	r3, [r5, #0]
 80054cc:	7020      	strb	r0, [r4, #0]
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	40010800 	.word	0x40010800
 80054d4:	40011400 	.word	0x40011400

080054d8 <calloc>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <calloc+0x10>)
 80054dc:	000a      	movs	r2, r1
 80054de:	0001      	movs	r1, r0
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f000 f85b 	bl	800559c <_calloc_r>
 80054e6:	bd10      	pop	{r4, pc}
 80054e8:	20000044 	.word	0x20000044

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	20000044 	.word	0x20000044

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	; (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	2600      	movs	r6, #0
 800550a:	f000 fcc7 	bl	8005e9c <_init>
 800550e:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	00b3      	lsls	r3, r6, #2
 800551e:	58eb      	ldr	r3, [r5, r3]
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	00b3      	lsls	r3, r6, #2
 8005528:	58eb      	ldr	r3, [r5, r3]
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08006cd0 	.word	0x08006cd0
 8005534:	08006cd0 	.word	0x08006cd0
 8005538:	08006cd0 	.word	0x08006cd0
 800553c:	08006cd4 	.word	0x08006cd4

08005540 <free>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4b03      	ldr	r3, [pc, #12]	; (8005550 <free+0x10>)
 8005544:	0001      	movs	r1, r0
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	f000 f854 	bl	80055f4 <_free_r>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000044 	.word	0x20000044

08005554 <memcpy>:
 8005554:	2300      	movs	r3, #0
 8005556:	b510      	push	{r4, lr}
 8005558:	429a      	cmp	r2, r3
 800555a:	d100      	bne.n	800555e <memcpy+0xa>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	5ccc      	ldrb	r4, [r1, r3]
 8005560:	54c4      	strb	r4, [r0, r3]
 8005562:	3301      	adds	r3, #1
 8005564:	e7f8      	b.n	8005558 <memcpy+0x4>

08005566 <memmove>:
 8005566:	b510      	push	{r4, lr}
 8005568:	4288      	cmp	r0, r1
 800556a:	d902      	bls.n	8005572 <memmove+0xc>
 800556c:	188b      	adds	r3, r1, r2
 800556e:	4298      	cmp	r0, r3
 8005570:	d303      	bcc.n	800557a <memmove+0x14>
 8005572:	2300      	movs	r3, #0
 8005574:	e007      	b.n	8005586 <memmove+0x20>
 8005576:	5c8b      	ldrb	r3, [r1, r2]
 8005578:	5483      	strb	r3, [r0, r2]
 800557a:	3a01      	subs	r2, #1
 800557c:	d2fb      	bcs.n	8005576 <memmove+0x10>
 800557e:	bd10      	pop	{r4, pc}
 8005580:	5ccc      	ldrb	r4, [r1, r3]
 8005582:	54c4      	strb	r4, [r0, r3]
 8005584:	3301      	adds	r3, #1
 8005586:	429a      	cmp	r2, r3
 8005588:	d1fa      	bne.n	8005580 <memmove+0x1a>
 800558a:	e7f8      	b.n	800557e <memmove+0x18>

0800558c <memset>:
 800558c:	0003      	movs	r3, r0
 800558e:	1882      	adds	r2, r0, r2
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	7019      	strb	r1, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <_calloc_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	0c13      	lsrs	r3, r2, #16
 80055a0:	0c0d      	lsrs	r5, r1, #16
 80055a2:	d11e      	bne.n	80055e2 <_calloc_r+0x46>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10c      	bne.n	80055c2 <_calloc_r+0x26>
 80055a8:	b289      	uxth	r1, r1
 80055aa:	b294      	uxth	r4, r2
 80055ac:	434c      	muls	r4, r1
 80055ae:	0021      	movs	r1, r4
 80055b0:	f000 f88c 	bl	80056cc <_malloc_r>
 80055b4:	1e05      	subs	r5, r0, #0
 80055b6:	d01b      	beq.n	80055f0 <_calloc_r+0x54>
 80055b8:	0022      	movs	r2, r4
 80055ba:	2100      	movs	r1, #0
 80055bc:	f7ff ffe6 	bl	800558c <memset>
 80055c0:	e016      	b.n	80055f0 <_calloc_r+0x54>
 80055c2:	1c1d      	adds	r5, r3, #0
 80055c4:	1c0b      	adds	r3, r1, #0
 80055c6:	b292      	uxth	r2, r2
 80055c8:	b289      	uxth	r1, r1
 80055ca:	b29c      	uxth	r4, r3
 80055cc:	4351      	muls	r1, r2
 80055ce:	b2ab      	uxth	r3, r5
 80055d0:	4363      	muls	r3, r4
 80055d2:	0c0c      	lsrs	r4, r1, #16
 80055d4:	191c      	adds	r4, r3, r4
 80055d6:	0c22      	lsrs	r2, r4, #16
 80055d8:	d107      	bne.n	80055ea <_calloc_r+0x4e>
 80055da:	0424      	lsls	r4, r4, #16
 80055dc:	b289      	uxth	r1, r1
 80055de:	430c      	orrs	r4, r1
 80055e0:	e7e5      	b.n	80055ae <_calloc_r+0x12>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <_calloc_r+0x4e>
 80055e6:	1c13      	adds	r3, r2, #0
 80055e8:	e7ed      	b.n	80055c6 <_calloc_r+0x2a>
 80055ea:	230c      	movs	r3, #12
 80055ec:	2500      	movs	r5, #0
 80055ee:	6003      	str	r3, [r0, #0]
 80055f0:	0028      	movs	r0, r5
 80055f2:	bd70      	pop	{r4, r5, r6, pc}

080055f4 <_free_r>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	0005      	movs	r5, r0
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d010      	beq.n	800561e <_free_r+0x2a>
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	da00      	bge.n	8005606 <_free_r+0x12>
 8005604:	18e4      	adds	r4, r4, r3
 8005606:	0028      	movs	r0, r5
 8005608:	f000 f910 	bl	800582c <__malloc_lock>
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <_free_r+0x90>)
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <_free_r+0x2c>
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	6014      	str	r4, [r2, #0]
 8005618:	0028      	movs	r0, r5
 800561a:	f000 f90f 	bl	800583c <__malloc_unlock>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	42a3      	cmp	r3, r4
 8005622:	d908      	bls.n	8005636 <_free_r+0x42>
 8005624:	6821      	ldr	r1, [r4, #0]
 8005626:	1860      	adds	r0, r4, r1
 8005628:	4283      	cmp	r3, r0
 800562a:	d1f3      	bne.n	8005614 <_free_r+0x20>
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	1841      	adds	r1, r0, r1
 8005632:	6021      	str	r1, [r4, #0]
 8005634:	e7ee      	b.n	8005614 <_free_r+0x20>
 8005636:	001a      	movs	r2, r3
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <_free_r+0x4e>
 800563e:	42a3      	cmp	r3, r4
 8005640:	d9f9      	bls.n	8005636 <_free_r+0x42>
 8005642:	6811      	ldr	r1, [r2, #0]
 8005644:	1850      	adds	r0, r2, r1
 8005646:	42a0      	cmp	r0, r4
 8005648:	d10b      	bne.n	8005662 <_free_r+0x6e>
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	1809      	adds	r1, r1, r0
 800564e:	1850      	adds	r0, r2, r1
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	4283      	cmp	r3, r0
 8005654:	d1e0      	bne.n	8005618 <_free_r+0x24>
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	1841      	adds	r1, r0, r1
 800565c:	6011      	str	r1, [r2, #0]
 800565e:	6053      	str	r3, [r2, #4]
 8005660:	e7da      	b.n	8005618 <_free_r+0x24>
 8005662:	42a0      	cmp	r0, r4
 8005664:	d902      	bls.n	800566c <_free_r+0x78>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d5      	b.n	8005618 <_free_r+0x24>
 800566c:	6821      	ldr	r1, [r4, #0]
 800566e:	1860      	adds	r0, r4, r1
 8005670:	4283      	cmp	r3, r0
 8005672:	d103      	bne.n	800567c <_free_r+0x88>
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1841      	adds	r1, r0, r1
 800567a:	6021      	str	r1, [r4, #0]
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	6054      	str	r4, [r2, #4]
 8005680:	e7ca      	b.n	8005618 <_free_r+0x24>
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	20000e30 	.word	0x20000e30

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0f      	ldr	r6, [pc, #60]	; (80056c8 <sbrk_aligned+0x40>)
 800568c:	000d      	movs	r5, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	0004      	movs	r4, r0
 8005692:	2900      	cmp	r1, #0
 8005694:	d102      	bne.n	800569c <sbrk_aligned+0x14>
 8005696:	f000 f88f 	bl	80057b8 <_sbrk_r>
 800569a:	6030      	str	r0, [r6, #0]
 800569c:	0029      	movs	r1, r5
 800569e:	0020      	movs	r0, r4
 80056a0:	f000 f88a 	bl	80057b8 <_sbrk_r>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d00a      	beq.n	80056be <sbrk_aligned+0x36>
 80056a8:	2303      	movs	r3, #3
 80056aa:	1cc5      	adds	r5, r0, #3
 80056ac:	439d      	bics	r5, r3
 80056ae:	42a8      	cmp	r0, r5
 80056b0:	d007      	beq.n	80056c2 <sbrk_aligned+0x3a>
 80056b2:	1a29      	subs	r1, r5, r0
 80056b4:	0020      	movs	r0, r4
 80056b6:	f000 f87f 	bl	80057b8 <_sbrk_r>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	d101      	bne.n	80056c2 <sbrk_aligned+0x3a>
 80056be:	2501      	movs	r5, #1
 80056c0:	426d      	negs	r5, r5
 80056c2:	0028      	movs	r0, r5
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	20000e34 	.word	0x20000e34

080056cc <_malloc_r>:
 80056cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ce:	2203      	movs	r2, #3
 80056d0:	1ccb      	adds	r3, r1, #3
 80056d2:	4393      	bics	r3, r2
 80056d4:	3308      	adds	r3, #8
 80056d6:	0006      	movs	r6, r0
 80056d8:	001f      	movs	r7, r3
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d232      	bcs.n	8005744 <_malloc_r+0x78>
 80056de:	270c      	movs	r7, #12
 80056e0:	42b9      	cmp	r1, r7
 80056e2:	d831      	bhi.n	8005748 <_malloc_r+0x7c>
 80056e4:	0030      	movs	r0, r6
 80056e6:	f000 f8a1 	bl	800582c <__malloc_lock>
 80056ea:	4d32      	ldr	r5, [pc, #200]	; (80057b4 <_malloc_r+0xe8>)
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	001c      	movs	r4, r3
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d12e      	bne.n	8005752 <_malloc_r+0x86>
 80056f4:	0039      	movs	r1, r7
 80056f6:	0030      	movs	r0, r6
 80056f8:	f7ff ffc6 	bl	8005688 <sbrk_aligned>
 80056fc:	0004      	movs	r4, r0
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d11e      	bne.n	8005740 <_malloc_r+0x74>
 8005702:	682c      	ldr	r4, [r5, #0]
 8005704:	0025      	movs	r5, r4
 8005706:	2d00      	cmp	r5, #0
 8005708:	d14a      	bne.n	80057a0 <_malloc_r+0xd4>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	0029      	movs	r1, r5
 800570e:	18e3      	adds	r3, r4, r3
 8005710:	0030      	movs	r0, r6
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	f000 f850 	bl	80057b8 <_sbrk_r>
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	4283      	cmp	r3, r0
 800571c:	d143      	bne.n	80057a6 <_malloc_r+0xda>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	3703      	adds	r7, #3
 8005722:	1aff      	subs	r7, r7, r3
 8005724:	2303      	movs	r3, #3
 8005726:	439f      	bics	r7, r3
 8005728:	3708      	adds	r7, #8
 800572a:	2f0c      	cmp	r7, #12
 800572c:	d200      	bcs.n	8005730 <_malloc_r+0x64>
 800572e:	270c      	movs	r7, #12
 8005730:	0039      	movs	r1, r7
 8005732:	0030      	movs	r0, r6
 8005734:	f7ff ffa8 	bl	8005688 <sbrk_aligned>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d034      	beq.n	80057a6 <_malloc_r+0xda>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	19df      	adds	r7, r3, r7
 8005740:	6027      	str	r7, [r4, #0]
 8005742:	e013      	b.n	800576c <_malloc_r+0xa0>
 8005744:	2b00      	cmp	r3, #0
 8005746:	dacb      	bge.n	80056e0 <_malloc_r+0x14>
 8005748:	230c      	movs	r3, #12
 800574a:	2500      	movs	r5, #0
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	0028      	movs	r0, r5
 8005750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	1bd1      	subs	r1, r2, r7
 8005756:	d420      	bmi.n	800579a <_malloc_r+0xce>
 8005758:	290b      	cmp	r1, #11
 800575a:	d917      	bls.n	800578c <_malloc_r+0xc0>
 800575c:	19e2      	adds	r2, r4, r7
 800575e:	6027      	str	r7, [r4, #0]
 8005760:	42a3      	cmp	r3, r4
 8005762:	d111      	bne.n	8005788 <_malloc_r+0xbc>
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	6053      	str	r3, [r2, #4]
 800576c:	0030      	movs	r0, r6
 800576e:	0025      	movs	r5, r4
 8005770:	f000 f864 	bl	800583c <__malloc_unlock>
 8005774:	2207      	movs	r2, #7
 8005776:	350b      	adds	r5, #11
 8005778:	1d23      	adds	r3, r4, #4
 800577a:	4395      	bics	r5, r2
 800577c:	1aea      	subs	r2, r5, r3
 800577e:	429d      	cmp	r5, r3
 8005780:	d0e5      	beq.n	800574e <_malloc_r+0x82>
 8005782:	1b5b      	subs	r3, r3, r5
 8005784:	50a3      	str	r3, [r4, r2]
 8005786:	e7e2      	b.n	800574e <_malloc_r+0x82>
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	e7ec      	b.n	8005766 <_malloc_r+0x9a>
 800578c:	6862      	ldr	r2, [r4, #4]
 800578e:	42a3      	cmp	r3, r4
 8005790:	d101      	bne.n	8005796 <_malloc_r+0xca>
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	e7ea      	b.n	800576c <_malloc_r+0xa0>
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	e7e8      	b.n	800576c <_malloc_r+0xa0>
 800579a:	0023      	movs	r3, r4
 800579c:	6864      	ldr	r4, [r4, #4]
 800579e:	e7a7      	b.n	80056f0 <_malloc_r+0x24>
 80057a0:	002c      	movs	r4, r5
 80057a2:	686d      	ldr	r5, [r5, #4]
 80057a4:	e7af      	b.n	8005706 <_malloc_r+0x3a>
 80057a6:	230c      	movs	r3, #12
 80057a8:	0030      	movs	r0, r6
 80057aa:	6033      	str	r3, [r6, #0]
 80057ac:	f000 f846 	bl	800583c <__malloc_unlock>
 80057b0:	e7cd      	b.n	800574e <_malloc_r+0x82>
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	20000e30 	.word	0x20000e30

080057b8 <_sbrk_r>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b570      	push	{r4, r5, r6, lr}
 80057bc:	4d06      	ldr	r5, [pc, #24]	; (80057d8 <_sbrk_r+0x20>)
 80057be:	0004      	movs	r4, r0
 80057c0:	0008      	movs	r0, r1
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	f7fb fcf4 	bl	80011b0 <_sbrk>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d103      	bne.n	80057d4 <_sbrk_r+0x1c>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d000      	beq.n	80057d4 <_sbrk_r+0x1c>
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	20000e38 	.word	0x20000e38

080057dc <siprintf>:
 80057dc:	b40e      	push	{r1, r2, r3}
 80057de:	b500      	push	{lr}
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <siprintf+0x34>)
 80057e2:	b09c      	sub	sp, #112	; 0x70
 80057e4:	ab1d      	add	r3, sp, #116	; 0x74
 80057e6:	9002      	str	r0, [sp, #8]
 80057e8:	9006      	str	r0, [sp, #24]
 80057ea:	9107      	str	r1, [sp, #28]
 80057ec:	9104      	str	r1, [sp, #16]
 80057ee:	4809      	ldr	r0, [pc, #36]	; (8005814 <siprintf+0x38>)
 80057f0:	4909      	ldr	r1, [pc, #36]	; (8005818 <siprintf+0x3c>)
 80057f2:	cb04      	ldmia	r3!, {r2}
 80057f4:	9105      	str	r1, [sp, #20]
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	a902      	add	r1, sp, #8
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	f000 f888 	bl	8005910 <_svfiprintf_r>
 8005800:	2300      	movs	r3, #0
 8005802:	9a02      	ldr	r2, [sp, #8]
 8005804:	7013      	strb	r3, [r2, #0]
 8005806:	b01c      	add	sp, #112	; 0x70
 8005808:	bc08      	pop	{r3}
 800580a:	b003      	add	sp, #12
 800580c:	4718      	bx	r3
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	7fffffff 	.word	0x7fffffff
 8005814:	20000044 	.word	0x20000044
 8005818:	ffff0208 	.word	0xffff0208

0800581c <strcpy>:
 800581c:	0003      	movs	r3, r0
 800581e:	780a      	ldrb	r2, [r1, #0]
 8005820:	3101      	adds	r1, #1
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	2a00      	cmp	r2, #0
 8005828:	d1f9      	bne.n	800581e <strcpy+0x2>
 800582a:	4770      	bx	lr

0800582c <__malloc_lock>:
 800582c:	b510      	push	{r4, lr}
 800582e:	4802      	ldr	r0, [pc, #8]	; (8005838 <__malloc_lock+0xc>)
 8005830:	f000 faf0 	bl	8005e14 <__retarget_lock_acquire_recursive>
 8005834:	bd10      	pop	{r4, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	20000e3c 	.word	0x20000e3c

0800583c <__malloc_unlock>:
 800583c:	b510      	push	{r4, lr}
 800583e:	4802      	ldr	r0, [pc, #8]	; (8005848 <__malloc_unlock+0xc>)
 8005840:	f000 fae9 	bl	8005e16 <__retarget_lock_release_recursive>
 8005844:	bd10      	pop	{r4, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	20000e3c 	.word	0x20000e3c

0800584c <__ssputs_r>:
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584e:	688e      	ldr	r6, [r1, #8]
 8005850:	b085      	sub	sp, #20
 8005852:	0007      	movs	r7, r0
 8005854:	000c      	movs	r4, r1
 8005856:	9203      	str	r2, [sp, #12]
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	429e      	cmp	r6, r3
 800585c:	d83c      	bhi.n	80058d8 <__ssputs_r+0x8c>
 800585e:	2390      	movs	r3, #144	; 0x90
 8005860:	898a      	ldrh	r2, [r1, #12]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	421a      	tst	r2, r3
 8005866:	d034      	beq.n	80058d2 <__ssputs_r+0x86>
 8005868:	6909      	ldr	r1, [r1, #16]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	6960      	ldr	r0, [r4, #20]
 800586e:	1a5b      	subs	r3, r3, r1
 8005870:	9302      	str	r3, [sp, #8]
 8005872:	2303      	movs	r3, #3
 8005874:	4343      	muls	r3, r0
 8005876:	0fdd      	lsrs	r5, r3, #31
 8005878:	18ed      	adds	r5, r5, r3
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	9802      	ldr	r0, [sp, #8]
 800587e:	3301      	adds	r3, #1
 8005880:	181b      	adds	r3, r3, r0
 8005882:	106d      	asrs	r5, r5, #1
 8005884:	42ab      	cmp	r3, r5
 8005886:	d900      	bls.n	800588a <__ssputs_r+0x3e>
 8005888:	001d      	movs	r5, r3
 800588a:	0553      	lsls	r3, r2, #21
 800588c:	d532      	bpl.n	80058f4 <__ssputs_r+0xa8>
 800588e:	0029      	movs	r1, r5
 8005890:	0038      	movs	r0, r7
 8005892:	f7ff ff1b 	bl	80056cc <_malloc_r>
 8005896:	1e06      	subs	r6, r0, #0
 8005898:	d109      	bne.n	80058ae <__ssputs_r+0x62>
 800589a:	230c      	movs	r3, #12
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	2340      	movs	r3, #64	; 0x40
 80058a0:	2001      	movs	r0, #1
 80058a2:	89a2      	ldrh	r2, [r4, #12]
 80058a4:	4240      	negs	r0, r0
 80058a6:	4313      	orrs	r3, r2
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	b005      	add	sp, #20
 80058ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ae:	9a02      	ldr	r2, [sp, #8]
 80058b0:	6921      	ldr	r1, [r4, #16]
 80058b2:	f7ff fe4f 	bl	8005554 <memcpy>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	4a14      	ldr	r2, [pc, #80]	; (800590c <__ssputs_r+0xc0>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	4313      	orrs	r3, r2
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b02      	ldr	r3, [sp, #8]
 80058c4:	6126      	str	r6, [r4, #16]
 80058c6:	18f6      	adds	r6, r6, r3
 80058c8:	6026      	str	r6, [r4, #0]
 80058ca:	6165      	str	r5, [r4, #20]
 80058cc:	9e01      	ldr	r6, [sp, #4]
 80058ce:	1aed      	subs	r5, r5, r3
 80058d0:	60a5      	str	r5, [r4, #8]
 80058d2:	9b01      	ldr	r3, [sp, #4]
 80058d4:	429e      	cmp	r6, r3
 80058d6:	d900      	bls.n	80058da <__ssputs_r+0x8e>
 80058d8:	9e01      	ldr	r6, [sp, #4]
 80058da:	0032      	movs	r2, r6
 80058dc:	9903      	ldr	r1, [sp, #12]
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	f7ff fe41 	bl	8005566 <memmove>
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	2000      	movs	r0, #0
 80058e8:	1b9b      	subs	r3, r3, r6
 80058ea:	60a3      	str	r3, [r4, #8]
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	199e      	adds	r6, r3, r6
 80058f0:	6026      	str	r6, [r4, #0]
 80058f2:	e7da      	b.n	80058aa <__ssputs_r+0x5e>
 80058f4:	002a      	movs	r2, r5
 80058f6:	0038      	movs	r0, r7
 80058f8:	f000 fa99 	bl	8005e2e <_realloc_r>
 80058fc:	1e06      	subs	r6, r0, #0
 80058fe:	d1e0      	bne.n	80058c2 <__ssputs_r+0x76>
 8005900:	0038      	movs	r0, r7
 8005902:	6921      	ldr	r1, [r4, #16]
 8005904:	f7ff fe76 	bl	80055f4 <_free_r>
 8005908:	e7c7      	b.n	800589a <__ssputs_r+0x4e>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	fffffb7f 	.word	0xfffffb7f

08005910 <_svfiprintf_r>:
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005912:	b0a1      	sub	sp, #132	; 0x84
 8005914:	9003      	str	r0, [sp, #12]
 8005916:	001d      	movs	r5, r3
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	000f      	movs	r7, r1
 800591c:	0016      	movs	r6, r2
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	d511      	bpl.n	8005946 <_svfiprintf_r+0x36>
 8005922:	690b      	ldr	r3, [r1, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10e      	bne.n	8005946 <_svfiprintf_r+0x36>
 8005928:	2140      	movs	r1, #64	; 0x40
 800592a:	f7ff fecf 	bl	80056cc <_malloc_r>
 800592e:	6038      	str	r0, [r7, #0]
 8005930:	6138      	str	r0, [r7, #16]
 8005932:	2800      	cmp	r0, #0
 8005934:	d105      	bne.n	8005942 <_svfiprintf_r+0x32>
 8005936:	230c      	movs	r3, #12
 8005938:	9a03      	ldr	r2, [sp, #12]
 800593a:	3801      	subs	r0, #1
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	b021      	add	sp, #132	; 0x84
 8005940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	2300      	movs	r3, #0
 8005948:	ac08      	add	r4, sp, #32
 800594a:	6163      	str	r3, [r4, #20]
 800594c:	3320      	adds	r3, #32
 800594e:	7663      	strb	r3, [r4, #25]
 8005950:	3310      	adds	r3, #16
 8005952:	76a3      	strb	r3, [r4, #26]
 8005954:	9507      	str	r5, [sp, #28]
 8005956:	0035      	movs	r5, r6
 8005958:	782b      	ldrb	r3, [r5, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <_svfiprintf_r+0x52>
 800595e:	2b25      	cmp	r3, #37	; 0x25
 8005960:	d147      	bne.n	80059f2 <_svfiprintf_r+0xe2>
 8005962:	1bab      	subs	r3, r5, r6
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	42b5      	cmp	r5, r6
 8005968:	d00c      	beq.n	8005984 <_svfiprintf_r+0x74>
 800596a:	0032      	movs	r2, r6
 800596c:	0039      	movs	r1, r7
 800596e:	9803      	ldr	r0, [sp, #12]
 8005970:	f7ff ff6c 	bl	800584c <__ssputs_r>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d100      	bne.n	800597a <_svfiprintf_r+0x6a>
 8005978:	e0ae      	b.n	8005ad8 <_svfiprintf_r+0x1c8>
 800597a:	6962      	ldr	r2, [r4, #20]
 800597c:	9b05      	ldr	r3, [sp, #20]
 800597e:	4694      	mov	ip, r2
 8005980:	4463      	add	r3, ip
 8005982:	6163      	str	r3, [r4, #20]
 8005984:	782b      	ldrb	r3, [r5, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d100      	bne.n	800598c <_svfiprintf_r+0x7c>
 800598a:	e0a5      	b.n	8005ad8 <_svfiprintf_r+0x1c8>
 800598c:	2201      	movs	r2, #1
 800598e:	2300      	movs	r3, #0
 8005990:	4252      	negs	r2, r2
 8005992:	6062      	str	r2, [r4, #4]
 8005994:	a904      	add	r1, sp, #16
 8005996:	3254      	adds	r2, #84	; 0x54
 8005998:	1852      	adds	r2, r2, r1
 800599a:	1c6e      	adds	r6, r5, #1
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	60e3      	str	r3, [r4, #12]
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	7013      	strb	r3, [r2, #0]
 80059a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80059a6:	2205      	movs	r2, #5
 80059a8:	7831      	ldrb	r1, [r6, #0]
 80059aa:	4854      	ldr	r0, [pc, #336]	; (8005afc <_svfiprintf_r+0x1ec>)
 80059ac:	f000 fa34 	bl	8005e18 <memchr>
 80059b0:	1c75      	adds	r5, r6, #1
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d11f      	bne.n	80059f6 <_svfiprintf_r+0xe6>
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	06d3      	lsls	r3, r2, #27
 80059ba:	d504      	bpl.n	80059c6 <_svfiprintf_r+0xb6>
 80059bc:	2353      	movs	r3, #83	; 0x53
 80059be:	a904      	add	r1, sp, #16
 80059c0:	185b      	adds	r3, r3, r1
 80059c2:	2120      	movs	r1, #32
 80059c4:	7019      	strb	r1, [r3, #0]
 80059c6:	0713      	lsls	r3, r2, #28
 80059c8:	d504      	bpl.n	80059d4 <_svfiprintf_r+0xc4>
 80059ca:	2353      	movs	r3, #83	; 0x53
 80059cc:	a904      	add	r1, sp, #16
 80059ce:	185b      	adds	r3, r3, r1
 80059d0:	212b      	movs	r1, #43	; 0x2b
 80059d2:	7019      	strb	r1, [r3, #0]
 80059d4:	7833      	ldrb	r3, [r6, #0]
 80059d6:	2b2a      	cmp	r3, #42	; 0x2a
 80059d8:	d016      	beq.n	8005a08 <_svfiprintf_r+0xf8>
 80059da:	0035      	movs	r5, r6
 80059dc:	2100      	movs	r1, #0
 80059de:	200a      	movs	r0, #10
 80059e0:	68e3      	ldr	r3, [r4, #12]
 80059e2:	782a      	ldrb	r2, [r5, #0]
 80059e4:	1c6e      	adds	r6, r5, #1
 80059e6:	3a30      	subs	r2, #48	; 0x30
 80059e8:	2a09      	cmp	r2, #9
 80059ea:	d94e      	bls.n	8005a8a <_svfiprintf_r+0x17a>
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d111      	bne.n	8005a14 <_svfiprintf_r+0x104>
 80059f0:	e017      	b.n	8005a22 <_svfiprintf_r+0x112>
 80059f2:	3501      	adds	r5, #1
 80059f4:	e7b0      	b.n	8005958 <_svfiprintf_r+0x48>
 80059f6:	4b41      	ldr	r3, [pc, #260]	; (8005afc <_svfiprintf_r+0x1ec>)
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	1ac0      	subs	r0, r0, r3
 80059fc:	2301      	movs	r3, #1
 80059fe:	4083      	lsls	r3, r0
 8005a00:	4313      	orrs	r3, r2
 8005a02:	002e      	movs	r6, r5
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	e7ce      	b.n	80059a6 <_svfiprintf_r+0x96>
 8005a08:	9b07      	ldr	r3, [sp, #28]
 8005a0a:	1d19      	adds	r1, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	9107      	str	r1, [sp, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	db01      	blt.n	8005a18 <_svfiprintf_r+0x108>
 8005a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a16:	e004      	b.n	8005a22 <_svfiprintf_r+0x112>
 8005a18:	425b      	negs	r3, r3
 8005a1a:	60e3      	str	r3, [r4, #12]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	782b      	ldrb	r3, [r5, #0]
 8005a24:	2b2e      	cmp	r3, #46	; 0x2e
 8005a26:	d10a      	bne.n	8005a3e <_svfiprintf_r+0x12e>
 8005a28:	786b      	ldrb	r3, [r5, #1]
 8005a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2c:	d135      	bne.n	8005a9a <_svfiprintf_r+0x18a>
 8005a2e:	9b07      	ldr	r3, [sp, #28]
 8005a30:	3502      	adds	r5, #2
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	9207      	str	r2, [sp, #28]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db2b      	blt.n	8005a94 <_svfiprintf_r+0x184>
 8005a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3e:	4e30      	ldr	r6, [pc, #192]	; (8005b00 <_svfiprintf_r+0x1f0>)
 8005a40:	2203      	movs	r2, #3
 8005a42:	0030      	movs	r0, r6
 8005a44:	7829      	ldrb	r1, [r5, #0]
 8005a46:	f000 f9e7 	bl	8005e18 <memchr>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d006      	beq.n	8005a5c <_svfiprintf_r+0x14c>
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	1b80      	subs	r0, r0, r6
 8005a52:	4083      	lsls	r3, r0
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	3501      	adds	r5, #1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	7829      	ldrb	r1, [r5, #0]
 8005a5e:	2206      	movs	r2, #6
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_svfiprintf_r+0x1f4>)
 8005a62:	1c6e      	adds	r6, r5, #1
 8005a64:	7621      	strb	r1, [r4, #24]
 8005a66:	f000 f9d7 	bl	8005e18 <memchr>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d03c      	beq.n	8005ae8 <_svfiprintf_r+0x1d8>
 8005a6e:	4b26      	ldr	r3, [pc, #152]	; (8005b08 <_svfiprintf_r+0x1f8>)
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d125      	bne.n	8005ac0 <_svfiprintf_r+0x1b0>
 8005a74:	2207      	movs	r2, #7
 8005a76:	9b07      	ldr	r3, [sp, #28]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	6963      	ldr	r3, [r4, #20]
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	6163      	str	r3, [r4, #20]
 8005a88:	e765      	b.n	8005956 <_svfiprintf_r+0x46>
 8005a8a:	4343      	muls	r3, r0
 8005a8c:	0035      	movs	r5, r6
 8005a8e:	2101      	movs	r1, #1
 8005a90:	189b      	adds	r3, r3, r2
 8005a92:	e7a6      	b.n	80059e2 <_svfiprintf_r+0xd2>
 8005a94:	2301      	movs	r3, #1
 8005a96:	425b      	negs	r3, r3
 8005a98:	e7d0      	b.n	8005a3c <_svfiprintf_r+0x12c>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	200a      	movs	r0, #10
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	7829      	ldrb	r1, [r5, #0]
 8005aa6:	1c6e      	adds	r6, r5, #1
 8005aa8:	3930      	subs	r1, #48	; 0x30
 8005aaa:	2909      	cmp	r1, #9
 8005aac:	d903      	bls.n	8005ab6 <_svfiprintf_r+0x1a6>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c5      	beq.n	8005a3e <_svfiprintf_r+0x12e>
 8005ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab4:	e7c3      	b.n	8005a3e <_svfiprintf_r+0x12e>
 8005ab6:	4342      	muls	r2, r0
 8005ab8:	0035      	movs	r5, r6
 8005aba:	2301      	movs	r3, #1
 8005abc:	1852      	adds	r2, r2, r1
 8005abe:	e7f1      	b.n	8005aa4 <_svfiprintf_r+0x194>
 8005ac0:	ab07      	add	r3, sp, #28
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	003a      	movs	r2, r7
 8005ac6:	0021      	movs	r1, r4
 8005ac8:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <_svfiprintf_r+0x1fc>)
 8005aca:	9803      	ldr	r0, [sp, #12]
 8005acc:	e000      	b.n	8005ad0 <_svfiprintf_r+0x1c0>
 8005ace:	bf00      	nop
 8005ad0:	9004      	str	r0, [sp, #16]
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	d1d3      	bne.n	8005a80 <_svfiprintf_r+0x170>
 8005ad8:	89bb      	ldrh	r3, [r7, #12]
 8005ada:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005adc:	065b      	lsls	r3, r3, #25
 8005ade:	d400      	bmi.n	8005ae2 <_svfiprintf_r+0x1d2>
 8005ae0:	e72d      	b.n	800593e <_svfiprintf_r+0x2e>
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	4240      	negs	r0, r0
 8005ae6:	e72a      	b.n	800593e <_svfiprintf_r+0x2e>
 8005ae8:	ab07      	add	r3, sp, #28
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	003a      	movs	r2, r7
 8005aee:	0021      	movs	r1, r4
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <_svfiprintf_r+0x1fc>)
 8005af2:	9803      	ldr	r0, [sp, #12]
 8005af4:	f000 f87c 	bl	8005bf0 <_printf_i>
 8005af8:	e7ea      	b.n	8005ad0 <_svfiprintf_r+0x1c0>
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	08006c94 	.word	0x08006c94
 8005b00:	08006c9a 	.word	0x08006c9a
 8005b04:	08006c9e 	.word	0x08006c9e
 8005b08:	00000000 	.word	0x00000000
 8005b0c:	0800584d 	.word	0x0800584d

08005b10 <_printf_common>:
 8005b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b12:	0015      	movs	r5, r2
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	688a      	ldr	r2, [r1, #8]
 8005b18:	690b      	ldr	r3, [r1, #16]
 8005b1a:	000c      	movs	r4, r1
 8005b1c:	9000      	str	r0, [sp, #0]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	da00      	bge.n	8005b24 <_printf_common+0x14>
 8005b22:	0013      	movs	r3, r2
 8005b24:	0022      	movs	r2, r4
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	3243      	adds	r2, #67	; 0x43
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	d001      	beq.n	8005b34 <_printf_common+0x24>
 8005b30:	3301      	adds	r3, #1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	069b      	lsls	r3, r3, #26
 8005b38:	d502      	bpl.n	8005b40 <_printf_common+0x30>
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	2306      	movs	r3, #6
 8005b44:	0017      	movs	r7, r2
 8005b46:	401f      	ands	r7, r3
 8005b48:	421a      	tst	r2, r3
 8005b4a:	d027      	beq.n	8005b9c <_printf_common+0x8c>
 8005b4c:	0023      	movs	r3, r4
 8005b4e:	3343      	adds	r3, #67	; 0x43
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	1e5a      	subs	r2, r3, #1
 8005b54:	4193      	sbcs	r3, r2
 8005b56:	6822      	ldr	r2, [r4, #0]
 8005b58:	0692      	lsls	r2, r2, #26
 8005b5a:	d430      	bmi.n	8005bbe <_printf_common+0xae>
 8005b5c:	0022      	movs	r2, r4
 8005b5e:	9901      	ldr	r1, [sp, #4]
 8005b60:	9800      	ldr	r0, [sp, #0]
 8005b62:	9e08      	ldr	r6, [sp, #32]
 8005b64:	3243      	adds	r2, #67	; 0x43
 8005b66:	47b0      	blx	r6
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d025      	beq.n	8005bb8 <_printf_common+0xa8>
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	6820      	ldr	r0, [r4, #0]
 8005b70:	682a      	ldr	r2, [r5, #0]
 8005b72:	68e1      	ldr	r1, [r4, #12]
 8005b74:	2500      	movs	r5, #0
 8005b76:	4003      	ands	r3, r0
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d103      	bne.n	8005b84 <_printf_common+0x74>
 8005b7c:	1a8d      	subs	r5, r1, r2
 8005b7e:	43eb      	mvns	r3, r5
 8005b80:	17db      	asrs	r3, r3, #31
 8005b82:	401d      	ands	r5, r3
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	6922      	ldr	r2, [r4, #16]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	dd01      	ble.n	8005b90 <_printf_common+0x80>
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	18ed      	adds	r5, r5, r3
 8005b90:	2700      	movs	r7, #0
 8005b92:	42bd      	cmp	r5, r7
 8005b94:	d120      	bne.n	8005bd8 <_printf_common+0xc8>
 8005b96:	2000      	movs	r0, #0
 8005b98:	e010      	b.n	8005bbc <_printf_common+0xac>
 8005b9a:	3701      	adds	r7, #1
 8005b9c:	68e3      	ldr	r3, [r4, #12]
 8005b9e:	682a      	ldr	r2, [r5, #0]
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	42bb      	cmp	r3, r7
 8005ba4:	ddd2      	ble.n	8005b4c <_printf_common+0x3c>
 8005ba6:	0022      	movs	r2, r4
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9901      	ldr	r1, [sp, #4]
 8005bac:	9800      	ldr	r0, [sp, #0]
 8005bae:	9e08      	ldr	r6, [sp, #32]
 8005bb0:	3219      	adds	r2, #25
 8005bb2:	47b0      	blx	r6
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d1f0      	bne.n	8005b9a <_printf_common+0x8a>
 8005bb8:	2001      	movs	r0, #1
 8005bba:	4240      	negs	r0, r0
 8005bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bbe:	2030      	movs	r0, #48	; 0x30
 8005bc0:	18e1      	adds	r1, r4, r3
 8005bc2:	3143      	adds	r1, #67	; 0x43
 8005bc4:	7008      	strb	r0, [r1, #0]
 8005bc6:	0021      	movs	r1, r4
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	3145      	adds	r1, #69	; 0x45
 8005bcc:	7809      	ldrb	r1, [r1, #0]
 8005bce:	18a2      	adds	r2, r4, r2
 8005bd0:	3243      	adds	r2, #67	; 0x43
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	7011      	strb	r1, [r2, #0]
 8005bd6:	e7c1      	b.n	8005b5c <_printf_common+0x4c>
 8005bd8:	0022      	movs	r2, r4
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9901      	ldr	r1, [sp, #4]
 8005bde:	9800      	ldr	r0, [sp, #0]
 8005be0:	9e08      	ldr	r6, [sp, #32]
 8005be2:	321a      	adds	r2, #26
 8005be4:	47b0      	blx	r6
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d0e6      	beq.n	8005bb8 <_printf_common+0xa8>
 8005bea:	3701      	adds	r7, #1
 8005bec:	e7d1      	b.n	8005b92 <_printf_common+0x82>
	...

08005bf0 <_printf_i>:
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b08b      	sub	sp, #44	; 0x2c
 8005bf4:	9206      	str	r2, [sp, #24]
 8005bf6:	000a      	movs	r2, r1
 8005bf8:	3243      	adds	r2, #67	; 0x43
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	9005      	str	r0, [sp, #20]
 8005bfe:	9204      	str	r2, [sp, #16]
 8005c00:	7e0a      	ldrb	r2, [r1, #24]
 8005c02:	000c      	movs	r4, r1
 8005c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c06:	2a78      	cmp	r2, #120	; 0x78
 8005c08:	d807      	bhi.n	8005c1a <_printf_i+0x2a>
 8005c0a:	2a62      	cmp	r2, #98	; 0x62
 8005c0c:	d809      	bhi.n	8005c22 <_printf_i+0x32>
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	d100      	bne.n	8005c14 <_printf_i+0x24>
 8005c12:	e0c1      	b.n	8005d98 <_printf_i+0x1a8>
 8005c14:	2a58      	cmp	r2, #88	; 0x58
 8005c16:	d100      	bne.n	8005c1a <_printf_i+0x2a>
 8005c18:	e08c      	b.n	8005d34 <_printf_i+0x144>
 8005c1a:	0026      	movs	r6, r4
 8005c1c:	3642      	adds	r6, #66	; 0x42
 8005c1e:	7032      	strb	r2, [r6, #0]
 8005c20:	e022      	b.n	8005c68 <_printf_i+0x78>
 8005c22:	0010      	movs	r0, r2
 8005c24:	3863      	subs	r0, #99	; 0x63
 8005c26:	2815      	cmp	r0, #21
 8005c28:	d8f7      	bhi.n	8005c1a <_printf_i+0x2a>
 8005c2a:	f7fa fa81 	bl	8000130 <__gnu_thumb1_case_shi>
 8005c2e:	0016      	.short	0x0016
 8005c30:	fff6001f 	.word	0xfff6001f
 8005c34:	fff6fff6 	.word	0xfff6fff6
 8005c38:	001ffff6 	.word	0x001ffff6
 8005c3c:	fff6fff6 	.word	0xfff6fff6
 8005c40:	fff6fff6 	.word	0xfff6fff6
 8005c44:	003600a8 	.word	0x003600a8
 8005c48:	fff6009a 	.word	0xfff6009a
 8005c4c:	00b9fff6 	.word	0x00b9fff6
 8005c50:	0036fff6 	.word	0x0036fff6
 8005c54:	fff6fff6 	.word	0xfff6fff6
 8005c58:	009e      	.short	0x009e
 8005c5a:	0026      	movs	r6, r4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	3642      	adds	r6, #66	; 0x42
 8005c60:	1d11      	adds	r1, r2, #4
 8005c62:	6019      	str	r1, [r3, #0]
 8005c64:	6813      	ldr	r3, [r2, #0]
 8005c66:	7033      	strb	r3, [r6, #0]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0a7      	b.n	8005dbc <_printf_i+0x1cc>
 8005c6c:	6808      	ldr	r0, [r1, #0]
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	1d0a      	adds	r2, r1, #4
 8005c72:	0605      	lsls	r5, r0, #24
 8005c74:	d50b      	bpl.n	8005c8e <_printf_i+0x9e>
 8005c76:	680d      	ldr	r5, [r1, #0]
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	da03      	bge.n	8005c86 <_printf_i+0x96>
 8005c7e:	232d      	movs	r3, #45	; 0x2d
 8005c80:	9a04      	ldr	r2, [sp, #16]
 8005c82:	426d      	negs	r5, r5
 8005c84:	7013      	strb	r3, [r2, #0]
 8005c86:	4b61      	ldr	r3, [pc, #388]	; (8005e0c <_printf_i+0x21c>)
 8005c88:	270a      	movs	r7, #10
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	e01b      	b.n	8005cc6 <_printf_i+0xd6>
 8005c8e:	680d      	ldr	r5, [r1, #0]
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	0641      	lsls	r1, r0, #25
 8005c94:	d5f1      	bpl.n	8005c7a <_printf_i+0x8a>
 8005c96:	b22d      	sxth	r5, r5
 8005c98:	e7ef      	b.n	8005c7a <_printf_i+0x8a>
 8005c9a:	680d      	ldr	r5, [r1, #0]
 8005c9c:	6819      	ldr	r1, [r3, #0]
 8005c9e:	1d08      	adds	r0, r1, #4
 8005ca0:	6018      	str	r0, [r3, #0]
 8005ca2:	062e      	lsls	r6, r5, #24
 8005ca4:	d501      	bpl.n	8005caa <_printf_i+0xba>
 8005ca6:	680d      	ldr	r5, [r1, #0]
 8005ca8:	e003      	b.n	8005cb2 <_printf_i+0xc2>
 8005caa:	066d      	lsls	r5, r5, #25
 8005cac:	d5fb      	bpl.n	8005ca6 <_printf_i+0xb6>
 8005cae:	680d      	ldr	r5, [r1, #0]
 8005cb0:	b2ad      	uxth	r5, r5
 8005cb2:	4b56      	ldr	r3, [pc, #344]	; (8005e0c <_printf_i+0x21c>)
 8005cb4:	2708      	movs	r7, #8
 8005cb6:	9303      	str	r3, [sp, #12]
 8005cb8:	2a6f      	cmp	r2, #111	; 0x6f
 8005cba:	d000      	beq.n	8005cbe <_printf_i+0xce>
 8005cbc:	3702      	adds	r7, #2
 8005cbe:	0023      	movs	r3, r4
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	3343      	adds	r3, #67	; 0x43
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db03      	blt.n	8005cd6 <_printf_i+0xe6>
 8005cce:	2204      	movs	r2, #4
 8005cd0:	6821      	ldr	r1, [r4, #0]
 8005cd2:	4391      	bics	r1, r2
 8005cd4:	6021      	str	r1, [r4, #0]
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	d102      	bne.n	8005ce0 <_printf_i+0xf0>
 8005cda:	9e04      	ldr	r6, [sp, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <_printf_i+0x10a>
 8005ce0:	9e04      	ldr	r6, [sp, #16]
 8005ce2:	0028      	movs	r0, r5
 8005ce4:	0039      	movs	r1, r7
 8005ce6:	f7fa fab3 	bl	8000250 <__aeabi_uidivmod>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	3e01      	subs	r6, #1
 8005cee:	5c5b      	ldrb	r3, [r3, r1]
 8005cf0:	7033      	strb	r3, [r6, #0]
 8005cf2:	002b      	movs	r3, r5
 8005cf4:	0005      	movs	r5, r0
 8005cf6:	429f      	cmp	r7, r3
 8005cf8:	d9f3      	bls.n	8005ce2 <_printf_i+0xf2>
 8005cfa:	2f08      	cmp	r7, #8
 8005cfc:	d109      	bne.n	8005d12 <_printf_i+0x122>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	07db      	lsls	r3, r3, #31
 8005d02:	d506      	bpl.n	8005d12 <_printf_i+0x122>
 8005d04:	6863      	ldr	r3, [r4, #4]
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	dc02      	bgt.n	8005d12 <_printf_i+0x122>
 8005d0c:	2330      	movs	r3, #48	; 0x30
 8005d0e:	3e01      	subs	r6, #1
 8005d10:	7033      	strb	r3, [r6, #0]
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	1b9b      	subs	r3, r3, r6
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	9b07      	ldr	r3, [sp, #28]
 8005d1a:	0021      	movs	r1, r4
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	9805      	ldr	r0, [sp, #20]
 8005d20:	9b06      	ldr	r3, [sp, #24]
 8005d22:	aa09      	add	r2, sp, #36	; 0x24
 8005d24:	f7ff fef4 	bl	8005b10 <_printf_common>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d14c      	bne.n	8005dc6 <_printf_i+0x1d6>
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	4240      	negs	r0, r0
 8005d30:	b00b      	add	sp, #44	; 0x2c
 8005d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d34:	3145      	adds	r1, #69	; 0x45
 8005d36:	700a      	strb	r2, [r1, #0]
 8005d38:	4a34      	ldr	r2, [pc, #208]	; (8005e0c <_printf_i+0x21c>)
 8005d3a:	9203      	str	r2, [sp, #12]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	6821      	ldr	r1, [r4, #0]
 8005d40:	ca20      	ldmia	r2!, {r5}
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	0608      	lsls	r0, r1, #24
 8005d46:	d516      	bpl.n	8005d76 <_printf_i+0x186>
 8005d48:	07cb      	lsls	r3, r1, #31
 8005d4a:	d502      	bpl.n	8005d52 <_printf_i+0x162>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	4319      	orrs	r1, r3
 8005d50:	6021      	str	r1, [r4, #0]
 8005d52:	2710      	movs	r7, #16
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d1b2      	bne.n	8005cbe <_printf_i+0xce>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	439a      	bics	r2, r3
 8005d5e:	6022      	str	r2, [r4, #0]
 8005d60:	e7ad      	b.n	8005cbe <_printf_i+0xce>
 8005d62:	2220      	movs	r2, #32
 8005d64:	6809      	ldr	r1, [r1, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	2178      	movs	r1, #120	; 0x78
 8005d6e:	3245      	adds	r2, #69	; 0x45
 8005d70:	7011      	strb	r1, [r2, #0]
 8005d72:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <_printf_i+0x220>)
 8005d74:	e7e1      	b.n	8005d3a <_printf_i+0x14a>
 8005d76:	0648      	lsls	r0, r1, #25
 8005d78:	d5e6      	bpl.n	8005d48 <_printf_i+0x158>
 8005d7a:	b2ad      	uxth	r5, r5
 8005d7c:	e7e4      	b.n	8005d48 <_printf_i+0x158>
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	680d      	ldr	r5, [r1, #0]
 8005d82:	1d10      	adds	r0, r2, #4
 8005d84:	6949      	ldr	r1, [r1, #20]
 8005d86:	6018      	str	r0, [r3, #0]
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	062e      	lsls	r6, r5, #24
 8005d8c:	d501      	bpl.n	8005d92 <_printf_i+0x1a2>
 8005d8e:	6019      	str	r1, [r3, #0]
 8005d90:	e002      	b.n	8005d98 <_printf_i+0x1a8>
 8005d92:	066d      	lsls	r5, r5, #25
 8005d94:	d5fb      	bpl.n	8005d8e <_printf_i+0x19e>
 8005d96:	8019      	strh	r1, [r3, #0]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9e04      	ldr	r6, [sp, #16]
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	e7bb      	b.n	8005d18 <_printf_i+0x128>
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	1d11      	adds	r1, r2, #4
 8005da4:	6019      	str	r1, [r3, #0]
 8005da6:	6816      	ldr	r6, [r2, #0]
 8005da8:	2100      	movs	r1, #0
 8005daa:	0030      	movs	r0, r6
 8005dac:	6862      	ldr	r2, [r4, #4]
 8005dae:	f000 f833 	bl	8005e18 <memchr>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d001      	beq.n	8005dba <_printf_i+0x1ca>
 8005db6:	1b80      	subs	r0, r0, r6
 8005db8:	6060      	str	r0, [r4, #4]
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	7013      	strb	r3, [r2, #0]
 8005dc4:	e7a8      	b.n	8005d18 <_printf_i+0x128>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	0032      	movs	r2, r6
 8005dca:	9906      	ldr	r1, [sp, #24]
 8005dcc:	9805      	ldr	r0, [sp, #20]
 8005dce:	9d07      	ldr	r5, [sp, #28]
 8005dd0:	47a8      	blx	r5
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d0aa      	beq.n	8005d2c <_printf_i+0x13c>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	079b      	lsls	r3, r3, #30
 8005dda:	d415      	bmi.n	8005e08 <_printf_i+0x218>
 8005ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dde:	68e0      	ldr	r0, [r4, #12]
 8005de0:	4298      	cmp	r0, r3
 8005de2:	daa5      	bge.n	8005d30 <_printf_i+0x140>
 8005de4:	0018      	movs	r0, r3
 8005de6:	e7a3      	b.n	8005d30 <_printf_i+0x140>
 8005de8:	0022      	movs	r2, r4
 8005dea:	2301      	movs	r3, #1
 8005dec:	9906      	ldr	r1, [sp, #24]
 8005dee:	9805      	ldr	r0, [sp, #20]
 8005df0:	9e07      	ldr	r6, [sp, #28]
 8005df2:	3219      	adds	r2, #25
 8005df4:	47b0      	blx	r6
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d098      	beq.n	8005d2c <_printf_i+0x13c>
 8005dfa:	3501      	adds	r5, #1
 8005dfc:	68e3      	ldr	r3, [r4, #12]
 8005dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	42ab      	cmp	r3, r5
 8005e04:	dcf0      	bgt.n	8005de8 <_printf_i+0x1f8>
 8005e06:	e7e9      	b.n	8005ddc <_printf_i+0x1ec>
 8005e08:	2500      	movs	r5, #0
 8005e0a:	e7f7      	b.n	8005dfc <_printf_i+0x20c>
 8005e0c:	08006ca5 	.word	0x08006ca5
 8005e10:	08006cb6 	.word	0x08006cb6

08005e14 <__retarget_lock_acquire_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_release_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <memchr>:
 8005e18:	b2c9      	uxtb	r1, r1
 8005e1a:	1882      	adds	r2, r0, r2
 8005e1c:	4290      	cmp	r0, r2
 8005e1e:	d101      	bne.n	8005e24 <memchr+0xc>
 8005e20:	2000      	movs	r0, #0
 8005e22:	4770      	bx	lr
 8005e24:	7803      	ldrb	r3, [r0, #0]
 8005e26:	428b      	cmp	r3, r1
 8005e28:	d0fb      	beq.n	8005e22 <memchr+0xa>
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	e7f6      	b.n	8005e1c <memchr+0x4>

08005e2e <_realloc_r>:
 8005e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e30:	0007      	movs	r7, r0
 8005e32:	000e      	movs	r6, r1
 8005e34:	0014      	movs	r4, r2
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d105      	bne.n	8005e46 <_realloc_r+0x18>
 8005e3a:	0011      	movs	r1, r2
 8005e3c:	f7ff fc46 	bl	80056cc <_malloc_r>
 8005e40:	0005      	movs	r5, r0
 8005e42:	0028      	movs	r0, r5
 8005e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	d103      	bne.n	8005e52 <_realloc_r+0x24>
 8005e4a:	f7ff fbd3 	bl	80055f4 <_free_r>
 8005e4e:	0025      	movs	r5, r4
 8005e50:	e7f7      	b.n	8005e42 <_realloc_r+0x14>
 8005e52:	f000 f81b 	bl	8005e8c <_malloc_usable_size_r>
 8005e56:	9001      	str	r0, [sp, #4]
 8005e58:	4284      	cmp	r4, r0
 8005e5a:	d803      	bhi.n	8005e64 <_realloc_r+0x36>
 8005e5c:	0035      	movs	r5, r6
 8005e5e:	0843      	lsrs	r3, r0, #1
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d3ee      	bcc.n	8005e42 <_realloc_r+0x14>
 8005e64:	0021      	movs	r1, r4
 8005e66:	0038      	movs	r0, r7
 8005e68:	f7ff fc30 	bl	80056cc <_malloc_r>
 8005e6c:	1e05      	subs	r5, r0, #0
 8005e6e:	d0e8      	beq.n	8005e42 <_realloc_r+0x14>
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	0022      	movs	r2, r4
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d900      	bls.n	8005e7a <_realloc_r+0x4c>
 8005e78:	001a      	movs	r2, r3
 8005e7a:	0031      	movs	r1, r6
 8005e7c:	0028      	movs	r0, r5
 8005e7e:	f7ff fb69 	bl	8005554 <memcpy>
 8005e82:	0031      	movs	r1, r6
 8005e84:	0038      	movs	r0, r7
 8005e86:	f7ff fbb5 	bl	80055f4 <_free_r>
 8005e8a:	e7da      	b.n	8005e42 <_realloc_r+0x14>

08005e8c <_malloc_usable_size_r>:
 8005e8c:	1f0b      	subs	r3, r1, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1f18      	subs	r0, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da01      	bge.n	8005e9a <_malloc_usable_size_r+0xe>
 8005e96:	580b      	ldr	r3, [r1, r0]
 8005e98:	18c0      	adds	r0, r0, r3
 8005e9a:	4770      	bx	lr

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
