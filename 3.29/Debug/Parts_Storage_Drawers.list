
Parts_Storage_Drawers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005870  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ac  080066ac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b4  080066b4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080066bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  2000009c  08006758  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  08006758  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bba7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003edc  00000000  00000000  0003bc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011528  00000000  00000000  0003fb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00051070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ad0  00000000  00000000  00052068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166a8  00000000  00000000  00053b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed7b  00000000  00000000  0006a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080ecf  00000000  00000000  00088f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00109e2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003688  00000000  00000000  00109e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005918 	.word	0x08005918

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08005918 	.word	0x08005918

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004e4:	2300      	movs	r3, #0
{
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 80004ea:	ac05      	add	r4, sp, #20
{
 80004ec:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004ee:	210a      	movs	r1, #10
{
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 80004f4:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000508:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800051e:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000520:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000522:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000524:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fafe 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004c0 	.word	0x200004c0

08000554 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000554:	2300      	movs	r3, #0
{
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 800055c:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800055e:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000560:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
{
 8000566:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000568:	a902      	add	r1, sp, #8
{
 800056a:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fae7 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fb72 	bl	8003c6c <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000588:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058a:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 800058c:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058e:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000590:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fad4 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 fb5f 	bl	8003c6c <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fac1 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fb4c 	bl	8003c6c <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004c0 	.word	0x200004c0

08000610 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000610:	2304      	movs	r3, #4
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000616:	ac05      	add	r4, sp, #20
{
 8000618:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 800061a:	210a      	movs	r1, #10
{
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000620:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000634:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064a:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 800064c:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064e:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000650:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fa68 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004c0 	.word	0x200004c0

08000680 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000680:	2304      	movs	r3, #4
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000688:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068a:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 800068c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068e:	220f      	movs	r2, #15
{
 8000690:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
{
 8000694:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fa51 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fadc 	bl	8003c6c <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fa3e 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fac9 	bl	8003c6c <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fa2b 	bl	8003b48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fab6 	bl	8003c6c <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
}
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004c0 	.word	0x200004c0

08000738 <led_color>:
uint32_t ledData[36][3];



void led_color(uint8_t id, uint8_t r, uint8_t g, uint8_t b)
{
 8000738:	b530      	push	{r4, r5, lr}
	ledData[id][0] = g;
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
	ledData[id][1] = r;
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
	ledData[id][2] = b;
 8000746:	60a3      	str	r3, [r4, #8]
}
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000b8 	.word	0x200000b8

08000750 <led_update>:

void led_update(void)
{
	for(int i=0; i<36; i++)
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
{
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
	{
		spiBf[(i * 3)] = colLUT[ledData[i][0]];
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
	for(int i=0; i<36; i++)
 800075e:	3001      	adds	r0, #1
		spiBf[(i * 3)] = colLUT[ledData[i][0]];
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
		spiBf[(i * 3) + 1] = colLUT[ledData[i][1]];
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
		spiBf[(i * 3) + 2] = colLUT[ledData[i][2]];
 800076e:	6895      	ldr	r5, [r2, #8]
	for(int i=0; i<36; i++)
 8000770:	320c      	adds	r2, #12
		spiBf[(i * 3) + 2] = colLUT[ledData[i][2]];
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
	for(int i=0; i<36; i++)
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
	}

	spiBf[108] = 0;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]

	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)spiBf, 436);
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 f948 	bl	8004a20 <HAL_SPI_Transmit_DMA>
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000268 	.word	0x20000268
 8000798:	200000b8 	.word	0x200000b8
 800079c:	08005950 	.word	0x08005950
 80007a0:	2000050c 	.word	0x2000050c

080007a4 <led_clear>:
void led_clear(void)
{
	memset(ledData,0,sizeof(ledData));
 80007a4:	22d8      	movs	r2, #216	; 0xd8
{
 80007a6:	b510      	push	{r4, lr}
	memset(ledData,0,sizeof(ledData));
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 fc2b 	bl	8005008 <memset>

//	led_update();
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000b8 	.word	0x200000b8

080007b8 <led_cmp>:
uint8_t led_cmp(uint8_t id, uint8_t r, uint8_t g, uint8_t b)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t result = 0, return_value = 0;

	if(ledData[id][0] == g) { result++; }
 80007ba:	260c      	movs	r6, #12
 80007bc:	0035      	movs	r5, r6
 80007be:	4345      	muls	r5, r0
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <led_cmp+0x38>)
	if(ledData[id][1] == r) { result++; }
	if(ledData[id][2] == b) { result++; }
 80007c2:	4370      	muls	r0, r6
	if(ledData[id][0] == g) { result++; }
 80007c4:	592f      	ldr	r7, [r5, r4]
	if(ledData[id][1] == r) { result++; }
 80007c6:	1965      	adds	r5, r4, r5
 80007c8:	686d      	ldr	r5, [r5, #4]
	if(ledData[id][0] == g) { result++; }
 80007ca:	1aba      	subs	r2, r7, r2
	if(ledData[id][1] == r) { result++; }
 80007cc:	1a6d      	subs	r5, r5, r1
	if(ledData[id][0] == g) { result++; }
 80007ce:	4257      	negs	r7, r2
 80007d0:	417a      	adcs	r2, r7
	if(ledData[id][1] == r) { result++; }
 80007d2:	4269      	negs	r1, r5
 80007d4:	414d      	adcs	r5, r1
	if(ledData[id][2] == b) { result++; }
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	68a1      	ldr	r1, [r4, #8]
	uint8_t result = 0, return_value = 0;
 80007da:	b2d2      	uxtb	r2, r2
	if(ledData[id][1] == r) { result++; }
 80007dc:	1952      	adds	r2, r2, r5
	if(ledData[id][2] == b) { result++; }
 80007de:	4299      	cmp	r1, r3
 80007e0:	d101      	bne.n	80007e6 <led_cmp+0x2e>
 80007e2:	3201      	adds	r2, #1
 80007e4:	b2d2      	uxtb	r2, r2
	return_value = result == 3;
 80007e6:	3a03      	subs	r2, #3
 80007e8:	4253      	negs	r3, r2
 80007ea:	415a      	adcs	r2, r3
	return return_value;
 80007ec:	b2d0      	uxtb	r0, r2
}
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	200000b8 	.word	0x200000b8

080007f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007f4:	b510      	push	{r4, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f8:	2224      	movs	r2, #36	; 0x24
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80f      	add	r0, sp, #60	; 0x3c
 80007fe:	f004 fc03 	bl	8005008 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a801      	add	r0, sp, #4
 8000808:	f004 fbfe 	bl	8005008 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	a806      	add	r0, sp, #24
 8000812:	f004 fbf9 	bl	8005008 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <SystemClock_Config+0x90>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0x94>)
 800081a:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4313      	orrs	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	2300      	movs	r3, #0
 8000830:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000832:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000834:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000838:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f003 fbdb 	bl	8003ffc <HAL_RCC_OscConfig>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800084c:	e7fe      	b.n	800084c <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085a:	0021      	movs	r1, r4
 800085c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000860:	f003 fe4e 	bl	8004500 <HAL_RCC_ClockConfig>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x78>
 8000868:	b672      	cpsid	i
	while (1)
 800086a:	e7fe      	b.n	800086a <SystemClock_Config+0x76>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086c:	2308      	movs	r3, #8
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800086e:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000872:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	f003 ff12 	bl	800469c <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x8c>
 800087c:	b672      	cpsid	i
	while (1)
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x8a>
}
 8000880:	b01c      	add	sp, #112	; 0x70
 8000882:	bd10      	pop	{r4, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <main>:
{
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2601      	movs	r6, #1
{
 8000890:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8000892:	f002 fa4b 	bl	8002d2c <HAL_Init>
	SystemClock_Config();
 8000896:	f7ff ffad 	bl	80007f4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f004 fbb2 	bl	8005008 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008a6:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4f7a      	ldr	r7, [pc, #488]	; (8000a94 <main+0x208>)
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008aa:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2500      	movs	r5, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	4033      	ands	r3, r6
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	430a      	orrs	r2, r1
 80008c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	400b      	ands	r3, r1
 80008c8:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008ca:	3106      	adds	r1, #6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008ce:	f002 ffbf 	bl	8003850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	0031      	movs	r1, r6
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <main+0x20c>)
 80008d8:	f002 ffba 	bl	8003850 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008dc:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80008de:	2304      	movs	r3, #4
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008e0:	a905      	add	r1, sp, #20
 80008e2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80008e4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f002 feeb 	bl	80036c4 <HAL_GPIO_Init>
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008ee:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = BUZ_Pin;
 80008f0:	2208      	movs	r2, #8
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008f2:	a905      	add	r1, sp, #20
 80008f4:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = BUZ_Pin;
 80008f6:	9205      	str	r2, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f002 fee1 	bl	80036c4 <HAL_GPIO_Init>
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8000902:	4865      	ldr	r0, [pc, #404]	; (8000a98 <main+0x20c>)
 8000904:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = RGB_DATA_Pin;
 8000906:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 800090e:	f002 fed9 	bl	80036c4 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	2208      	movs	r2, #8
 8000914:	0029      	movs	r1, r5
 8000916:	a805      	add	r0, sp, #20
 8000918:	f004 fb76 	bl	8005008 <memset>
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 800091c:	2306      	movs	r3, #6
	hadc.Init.OversamplingMode = DISABLE;
 800091e:	4c5f      	ldr	r4, [pc, #380]	; (8000a9c <main+0x210>)
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8000920:	63a3      	str	r3, [r4, #56]	; 0x38
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	33ff      	adds	r3, #255	; 0xff
 8000926:	6263      	str	r3, [r4, #36]	; 0x24
	hadc.Instance = ADC1;
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x214>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 800092a:	0022      	movs	r2, r4
	hadc.Instance = ADC1;
 800092c:	6023      	str	r3, [r4, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	2304      	movs	r3, #4
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000930:	322c      	adds	r2, #44	; 0x2c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000932:	0020      	movs	r0, r4
	hadc.Init.ContinuousConvMode = DISABLE;
 8000934:	8425      	strh	r5, [r4, #32]
	hadc.Init.OversamplingMode = DISABLE;
 8000936:	63e5      	str	r5, [r4, #60]	; 0x3c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000938:	62a5      	str	r5, [r4, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 800093a:	7015      	strb	r5, [r2, #0]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093c:	6325      	str	r5, [r4, #48]	; 0x30
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800093e:	6365      	str	r5, [r4, #52]	; 0x34
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000940:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000942:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000944:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000946:	6126      	str	r6, [r4, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	6163      	str	r3, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800094a:	61a5      	str	r5, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800094c:	61e5      	str	r5, [r4, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800094e:	f002 fadd 	bl	8002f0c <HAL_ADC_Init>
 8000952:	42a8      	cmp	r0, r5
 8000954:	d001      	beq.n	800095a <main+0xce>
 8000956:	b672      	cpsid	i
	while (1)
 8000958:	e7fe      	b.n	8000958 <main+0xcc>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800095a:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800095c:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800095e:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000960:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_0;
 8000962:	9605      	str	r6, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000964:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000966:	f002 fc5d 	bl	8003224 <HAL_ADC_ConfigChannel>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <main+0xe6>
 800096e:	b672      	cpsid	i
	while (1)
 8000970:	e7fe      	b.n	8000970 <main+0xe4>
	sConfig.Channel = ADC_CHANNEL_1;
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x218>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000974:	0020      	movs	r0, r4
 8000976:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_1;
 8000978:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800097a:	f002 fc53 	bl	8003224 <HAL_ADC_ConfigChannel>
 800097e:	1e04      	subs	r4, r0, #0
 8000980:	d001      	beq.n	8000986 <main+0xfa>
 8000982:	b672      	cpsid	i
	while (1)
 8000984:	e7fe      	b.n	8000984 <main+0xf8>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000988:	0001      	movs	r1, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4333      	orrs	r3, r6
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000990:	0002      	movs	r2, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000992:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000994:	200a      	movs	r0, #10
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800099a:	f002 fc97 	bl	80032cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 fcbe 	bl	8003320 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 80009a4:	4d40      	ldr	r5, [pc, #256]	; (8000aa8 <main+0x21c>)
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x220>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 80009aa:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x00200C28;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <main+0x224>)
	hi2c1.Init.OwnAddress1 = 0;
 80009ae:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.Timing = 0x00200C28;
 80009b0:	606b      	str	r3, [r5, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	60ee      	str	r6, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009b6:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009bc:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	f003 f86d 	bl	8003a9c <HAL_I2C_Init>
 80009c2:	1e01      	subs	r1, r0, #0
 80009c4:	d001      	beq.n	80009ca <main+0x13e>
 80009c6:	b672      	cpsid	i
	while (1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x13c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	0028      	movs	r0, r5
 80009cc:	f003 fa84 	bl	8003ed8 <HAL_I2CEx_ConfigAnalogFilter>
 80009d0:	1e01      	subs	r1, r0, #0
 80009d2:	d001      	beq.n	80009d8 <main+0x14c>
 80009d4:	b672      	cpsid	i
	while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x14a>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	0028      	movs	r0, r5
 80009da:	f003 faa3 	bl	8003f24 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x15a>
 80009e2:	b672      	cpsid	i
	while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x158>
	hspi1.Instance = SPI1;
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <main+0x228>)
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <main+0x22c>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	6083      	str	r3, [r0, #8]
	hspi1.Instance = SPI1;
 80009ec:	6002      	str	r2, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	2282      	movs	r2, #130	; 0x82
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	6143      	str	r3, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f8:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009fc:	2410      	movs	r4, #16
	hspi1.Init.CRCPolynomial = 7;
 80009fe:	2307      	movs	r3, #7
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	6042      	str	r2, [r0, #4]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a04:	32fc      	adds	r2, #252	; 0xfc
 8000a06:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a08:	61c4      	str	r4, [r0, #28]
	hspi1.Init.CRCPolynomial = 7;
 8000a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	f003 ffa6 	bl	800495c <HAL_SPI_Init>
 8000a10:	1e05      	subs	r5, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x18c>
 8000a14:	b672      	cpsid	i
	while (1)
 8000a16:	e7fe      	b.n	8000a16 <main+0x18a>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a18:	0022      	movs	r2, r4
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	a805      	add	r0, sp, #20
 8000a1e:	f004 faf3 	bl	8005008 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	2208      	movs	r2, #8
 8000a24:	0029      	movs	r1, r5
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f004 faee 	bl	8005008 <memset>
	htim2.Instance = TIM2;
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	4c23      	ldr	r4, [pc, #140]	; (8000abc <main+0x230>)
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 8000a34:	231f      	movs	r3, #31
 8000a36:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 1000-1;
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <main+0x234>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a3a:	0020      	movs	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 1000-1;
 8000a3e:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a44:	f004 f8d0 	bl	8004be8 <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1c4>
 8000a4c:	b672      	cpsid	i
	while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1c2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a52:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a56:	a905      	add	r1, sp, #20
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f004 f915 	bl	8004c88 <HAL_TIM_ConfigClockSource>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x1da>
 8000a62:	b672      	cpsid	i
	while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x1d8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6a:	a903      	add	r1, sp, #12
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f004 fa45 	bl	8004efc <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x1ee>
 8000a76:	b672      	cpsid	i
	while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x1ec>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	0011      	movs	r1, r2
 8000a80:	f002 fc24 	bl	80032cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f002 fc4b 	bl	8003320 <HAL_NVIC_EnableIRQ>
	PSDrawers_Initialized();
 8000a8a:	f002 f85f 	bl	8002b4c <PSDrawers_Initialized>
	PSDrawers_Main();
 8000a8e:	f002 f883 	bl	8002b98 <PSDrawers_Main>
	while (1)
 8000a92:	e7fe      	b.n	8000a92 <main+0x206>
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	2000041c 	.word	0x2000041c
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	04000002 	.word	0x04000002
 8000aa8:	200004c0 	.word	0x200004c0
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00200c28 	.word	0x00200c28
 8000ab4:	2000050c 	.word	0x2000050c
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	20000564 	.word	0x20000564
 8000ac0:	000003e7 	.word	0x000003e7

08000ac4 <Error_Handler>:
 8000ac4:	b672      	cpsid	i
	while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x2>

08000ac8 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ac8:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000aca:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000acc:	4288      	cmp	r0, r1
 8000ace:	d000      	beq.n	8000ad2 <SSD1306_Fill+0xa>
 8000ad0:	31ff      	adds	r1, #255	; 0xff
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SSD1306_Fill+0x18>)
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	f004 fa96 	bl	8005008 <memset>
}
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200005aa 	.word	0x200005aa

08000ae4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	0004      	movs	r4, r0
	if (
 8000ae8:	287f      	cmp	r0, #127	; 0x7f
 8000aea:	d812      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
			x >= SSD1306_WIDTH ||
 8000aec:	293f      	cmp	r1, #63	; 0x3f
 8000aee:	d810      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0x48>)
 8000af2:	4d0f      	ldr	r5, [pc, #60]	; (8000b30 <SSD1306_DrawPixel+0x4c>)
 8000af4:	7918      	ldrb	r0, [r3, #4]
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d00b      	beq.n	8000b14 <SSD1306_DrawPixel+0x30>
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d10b      	bne.n	8000b18 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b00:	01d8      	lsls	r0, r3, #7
 8000b02:	2307      	movs	r3, #7
 8000b04:	4019      	ands	r1, r3
 8000b06:	3b06      	subs	r3, #6
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1900      	adds	r0, r0, r4
 8000b0c:	5c2a      	ldrb	r2, [r5, r0]
 8000b0e:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b10:	542b      	strb	r3, [r5, r0]
	}
}
 8000b12:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d0f3      	beq.n	8000b00 <SSD1306_DrawPixel+0x1c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b18:	01d8      	lsls	r0, r3, #7
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4019      	ands	r1, r3
 8000b20:	408a      	lsls	r2, r1
 8000b22:	1900      	adds	r0, r0, r4
 8000b24:	5c2b      	ldrb	r3, [r5, r0]
 8000b26:	4393      	bics	r3, r2
 8000b28:	e7f2      	b.n	8000b10 <SSD1306_DrawPixel+0x2c>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200005a4 	.word	0x200005a4
 8000b30:	200005aa 	.word	0x200005aa

08000b34 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <SSD1306_GotoXY+0x8>)
 8000b36:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000b38:	8059      	strh	r1, [r3, #2]
}
 8000b3a:	4770      	bx	lr
 8000b3c:	200005a4 	.word	0x200005a4

08000b40 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b42:	0007      	movs	r7, r0
 8000b44:	000c      	movs	r4, r1
	//		/* Error */
	//		return 0;
	//	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b46:	2500      	movs	r5, #0
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b48:	9200      	str	r2, [sp, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 8000b4a:	7863      	ldrb	r3, [r4, #1]
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d806      	bhi.n	8000b5e <SSD1306_Putc+0x1e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b52:	7823      	ldrb	r3, [r4, #0]
 8000b54:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8000b56:	0038      	movs	r0, r7
	SSD1306.CurrentX += Font->FontWidth;
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	8013      	strh	r3, [r2, #0]
}
 8000b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b5e:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8000b60:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b62:	3a20      	subs	r2, #32
 8000b64:	4353      	muls	r3, r2
 8000b66:	6862      	ldr	r2, [r4, #4]
 8000b68:	195b      	adds	r3, r3, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	5a9b      	ldrh	r3, [r3, r2]
 8000b6e:	9301      	str	r3, [sp, #4]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SSD1306_Putc+0x68>)
		for (j = 0; j < Font->FontWidth; j++) {
 8000b72:	7822      	ldrb	r2, [r4, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b74:	8818      	ldrh	r0, [r3, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b76:	42b2      	cmp	r2, r6
 8000b78:	d801      	bhi.n	8000b7e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7e5      	b.n	8000b4a <SSD1306_Putc+0xa>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b7e:	8859      	ldrh	r1, [r3, #2]
			if ((b << j) & 0x8000) {
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	40b3      	lsls	r3, r6
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b86:	1980      	adds	r0, r0, r6
 8000b88:	1949      	adds	r1, r1, r5
			if ((b << j) & 0x8000) {
 8000b8a:	0212      	lsls	r2, r2, #8
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	b289      	uxth	r1, r1
			if ((b << j) & 0x8000) {
 8000b90:	4213      	tst	r3, r2
 8000b92:	d004      	beq.n	8000b9e <SSD1306_Putc+0x5e>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b94:	9a00      	ldr	r2, [sp, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b96:	f7ff ffa5 	bl	8000ae4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7e8      	b.n	8000b70 <SSD1306_Putc+0x30>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	425a      	negs	r2, r3
 8000ba2:	415a      	adcs	r2, r3
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	e7f6      	b.n	8000b96 <SSD1306_Putc+0x56>
 8000ba8:	200005a4 	.word	0x200005a4

08000bac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <SSD1306_Puts+0x10>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	f7ff ffbe 	bl	8000b40 <SSD1306_Putc>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	7820      	ldrb	r0, [r4, #0]
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	d1f6      	bne.n	8000bba <SSD1306_Puts+0xe>
		str++;
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7f1      	b.n	8000bb4 <SSD1306_Puts+0x8>

08000bd0 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	ac0c      	add	r4, sp, #48	; 0x30
 8000bd6:	7824      	ldrb	r4, [r4, #0]
 8000bd8:	9405      	str	r4, [sp, #20]
 8000bda:	1c04      	adds	r4, r0, #0
 8000bdc:	287f      	cmp	r0, #127	; 0x7f
 8000bde:	d900      	bls.n	8000be2 <SSD1306_DrawLine+0x12>
 8000be0:	247f      	movs	r4, #127	; 0x7f
 8000be2:	b2a4      	uxth	r4, r4

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8000be4:	1c16      	adds	r6, r2, #0
 8000be6:	2a7f      	cmp	r2, #127	; 0x7f
 8000be8:	d900      	bls.n	8000bec <SSD1306_DrawLine+0x1c>
 8000bea:	267f      	movs	r6, #127	; 0x7f
 8000bec:	b2b6      	uxth	r6, r6
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000bee:	1c0d      	adds	r5, r1, #0
 8000bf0:	293f      	cmp	r1, #63	; 0x3f
 8000bf2:	d900      	bls.n	8000bf6 <SSD1306_DrawLine+0x26>
 8000bf4:	253f      	movs	r5, #63	; 0x3f
 8000bf6:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000bf8:	1c1f      	adds	r7, r3, #0
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d900      	bls.n	8000c00 <SSD1306_DrawLine+0x30>
 8000bfe:	273f      	movs	r7, #63	; 0x3f
 8000c00:	b2bf      	uxth	r7, r7
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000c02:	1b33      	subs	r3, r6, r4
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d800      	bhi.n	8000c0a <SSD1306_DrawLine+0x3a>
 8000c08:	1ba3      	subs	r3, r4, r6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d224      	bcs.n	8000c5c <SSD1306_DrawLine+0x8c>
 8000c12:	1b7b      	subs	r3, r7, r5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000c1c:	9304      	str	r3, [sp, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d801      	bhi.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	9303      	str	r3, [sp, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd23      	ble.n	8000c76 <SSD1306_DrawLine+0xa6>
 8000c2e:	9a00      	ldr	r2, [sp, #0]
 8000c30:	0fdb      	lsrs	r3, r3, #31
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12b      	bne.n	8000c96 <SSD1306_DrawLine+0xc6>
		if (y1 < y0) {
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	d902      	bls.n	8000c48 <SSD1306_DrawLine+0x78>
 8000c42:	002b      	movs	r3, r5
 8000c44:	003d      	movs	r5, r7
 8000c46:	001f      	movs	r7, r3
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
 8000c48:	1c33      	adds	r3, r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d900      	bls.n	8000c50 <SSD1306_DrawLine+0x80>
 8000c4e:	1c23      	adds	r3, r4, #0
 8000c50:	b29c      	uxth	r4, r3
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000c52:	b22d      	sxth	r5, r5
 8000c54:	42bd      	cmp	r5, r7
 8000c56:	dd16      	ble.n	8000c86 <SSD1306_DrawLine+0xb6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8000c58:	b007      	add	sp, #28
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000c5c:	1beb      	subs	r3, r5, r7
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8000c62:	2301      	movs	r3, #1
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d903      	bls.n	8000c70 <SSD1306_DrawLine+0xa0>
 8000c68:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7da      	b.n	8000c26 <SSD1306_DrawLine+0x56>
	sx = (x0 < x1) ? 1 : -1; 
 8000c70:	425b      	negs	r3, r3
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	e7fa      	b.n	8000c6c <SSD1306_DrawLine+0x9c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0fdb      	lsrs	r3, r3, #31
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	e7d7      	b.n	8000c36 <SSD1306_DrawLine+0x66>
			SSD1306_DrawPixel(x0, i, c);
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	0029      	movs	r1, r5
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	9a05      	ldr	r2, [sp, #20]
 8000c8e:	f7ff ff29 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7dd      	b.n	8000c52 <SSD1306_DrawLine+0x82>
	if (dy == 0) {
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d115      	bne.n	8000cc8 <SSD1306_DrawLine+0xf8>
		if (y1 < y0) {
 8000c9c:	1c2b      	adds	r3, r5, #0
 8000c9e:	42bd      	cmp	r5, r7
 8000ca0:	d900      	bls.n	8000ca4 <SSD1306_DrawLine+0xd4>
 8000ca2:	1c3b      	adds	r3, r7, #0
 8000ca4:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d202      	bcs.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000caa:	0023      	movs	r3, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	001e      	movs	r6, r3
		for (i = x0; i <= x1; i++) {
 8000cb0:	b224      	sxth	r4, r4
 8000cb2:	42b4      	cmp	r4, r6
 8000cb4:	dcd0      	bgt.n	8000c58 <SSD1306_DrawLine+0x88>
			SSD1306_DrawPixel(i, y0, c);
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	0020      	movs	r0, r4
 8000cba:	0029      	movs	r1, r5
 8000cbc:	9a05      	ldr	r2, [sp, #20]
 8000cbe:	f7ff ff11 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	e7f4      	b.n	8000cb0 <SSD1306_DrawLine+0xe0>
		if (x1 < x0) {
 8000cc6:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8000cc8:	0029      	movs	r1, r5
 8000cca:	0020      	movs	r0, r4
 8000ccc:	9a05      	ldr	r2, [sp, #20]
 8000cce:	f7ff ff09 	bl	8000ae4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d101      	bne.n	8000cda <SSD1306_DrawLine+0x10a>
 8000cd6:	42bd      	cmp	r5, r7
 8000cd8:	d0be      	beq.n	8000c58 <SSD1306_DrawLine+0x88>
		if (e2 > -dx) {
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	425a      	negs	r2, r3
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd05      	ble.n	8000cf0 <SSD1306_DrawLine+0x120>
			err -= dy;
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 8000ce8:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 8000cea:	b21b      	sxth	r3, r3
			x0 += sx;
 8000cec:	18a4      	adds	r4, r4, r2
 8000cee:	b2a4      	uxth	r4, r4
		if (e2 < dy) {
 8000cf0:	9a02      	ldr	r2, [sp, #8]
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	dae6      	bge.n	8000cc6 <SSD1306_DrawLine+0xf6>
			err += dx;
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	189b      	adds	r3, r3, r2
			y0 += sy;
 8000cfc:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 8000cfe:	b21b      	sxth	r3, r3
			y0 += sy;
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	e7df      	b.n	8000cc6 <SSD1306_DrawLine+0xf6>

08000d06 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0007      	movs	r7, r0
 8000d12:	000e      	movs	r6, r1
 8000d14:	9303      	str	r3, [sp, #12]
	/* Check input parameters */
	if (
 8000d16:	287f      	cmp	r0, #127	; 0x7f
 8000d18:	d831      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
			x >= SSD1306_WIDTH ||
 8000d1a:	293f      	cmp	r1, #63	; 0x3f
 8000d1c:	d82f      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000d1e:	1883      	adds	r3, r0, r2
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dd02      	ble.n	8000d2a <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000d2a:	1973      	adds	r3, r6, r5
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd02      	ble.n	8000d36 <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1bad      	subs	r5, r5, r6
 8000d34:	b2ad      	uxth	r5, r5
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	19d2      	adds	r2, r2, r7
 8000d3a:	b294      	uxth	r4, r2
 8000d3c:	0022      	movs	r2, r4
 8000d3e:	0031      	movs	r1, r6
 8000d40:	0038      	movs	r0, r7
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0033      	movs	r3, r6
 8000d46:	f7ff ff43 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000d4a:	19ad      	adds	r5, r5, r6
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	0022      	movs	r2, r4
 8000d52:	0029      	movs	r1, r5
 8000d54:	0038      	movs	r0, r7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	f7ff ff39 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	003a      	movs	r2, r7
 8000d62:	0031      	movs	r1, r6
 8000d64:	0038      	movs	r0, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	002b      	movs	r3, r5
 8000d6a:	f7ff ff31 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	0022      	movs	r2, r4
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0031      	movs	r1, r6
 8000d76:	002b      	movs	r3, r5
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff ff29 	bl	8000bd0 <SSD1306_DrawLine>
}
 8000d7e:	b005      	add	sp, #20
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	ab0a      	add	r3, sp, #40	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000f      	movs	r7, r1
 8000d90:	0014      	movs	r4, r2
 8000d92:	9303      	str	r3, [sp, #12]
	uint8_t i;

	/* Check input parameters */
	if (
 8000d94:	287f      	cmp	r0, #127	; 0x7f
 8000d96:	d814      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
			x >= SSD1306_WIDTH ||
 8000d98:	293f      	cmp	r1, #63	; 0x3f
 8000d9a:	d812      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000d9c:	1883      	adds	r3, r0, r2
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	dd02      	ble.n	8000da8 <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	1a24      	subs	r4, r4, r0
 8000da6:	b2a4      	uxth	r4, r4
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000da8:	9b02      	ldr	r3, [sp, #8]
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	dd03      	ble.n	8000db8 <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	9302      	str	r3, [sp, #8]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000db8:	2600      	movs	r6, #0
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	b2b1      	uxth	r1, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawFilledRectangle+0x44>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	19c9      	adds	r1, r1, r7
 8000dca:	b289      	uxth	r1, r1
 8000dcc:	1962      	adds	r2, r4, r5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	b292      	uxth	r2, r2
	for (i = 0; i <= h; i++) {
 8000dd6:	3601      	adds	r6, #1
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000dd8:	f7ff fefa 	bl	8000bd0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000ddc:	b2f6      	uxtb	r6, r6
 8000dde:	e7ec      	b.n	8000dba <SSD1306_DrawFilledRectangle+0x38>

08000de0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000de0:	b570      	push	{r4, r5, r6, lr}
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
 8000de2:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000de4:	b0c2      	sub	sp, #264	; 0x108
 8000de6:	0015      	movs	r5, r2
	dt[0] = reg;
 8000de8:	aa02      	add	r2, sp, #8
 8000dea:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < count; i++)
 8000dec:	429c      	cmp	r4, r3
 8000dee:	d309      	bcc.n	8000e04 <ssd1306_I2C_WriteMulti+0x24>
		dt[i+1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000df0:	b281      	uxth	r1, r0
 8000df2:	200a      	movs	r0, #10
 8000df4:	3301      	adds	r3, #1
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ssd1306_I2C_WriteMulti+0x30>)
 8000dfc:	f002 fea4 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8000e00:	b042      	add	sp, #264	; 0x108
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
		dt[i+1] = data[i];
 8000e04:	5d2e      	ldrb	r6, [r5, r4]
 8000e06:	1911      	adds	r1, r2, r4
	for(i = 0; i < count; i++)
 8000e08:	3401      	adds	r4, #1
		dt[i+1] = data[i];
 8000e0a:	704e      	strb	r6, [r1, #1]
	for(i = 0; i < count; i++)
 8000e0c:	b2e4      	uxtb	r4, r4
 8000e0e:	e7ed      	b.n	8000dec <ssd1306_I2C_WriteMulti+0xc>
 8000e10:	200004c0 	.word	0x200004c0

08000e14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
 8000e16:	466b      	mov	r3, sp
 8000e18:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 8000e1a:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	0001      	movs	r1, r0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	aa03      	add	r2, sp, #12
 8000e24:	3b08      	subs	r3, #8
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <ssd1306_I2C_Write+0x1c>)
 8000e28:	f002 fe8e 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8000e2c:	b005      	add	sp, #20
 8000e2e:	bd00      	pop	{pc}
 8000e30:	200004c0 	.word	0x200004c0

08000e34 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e38:	2578      	movs	r5, #120	; 0x78
 8000e3a:	4e0e      	ldr	r6, [pc, #56]	; (8000e74 <SSD1306_UpdateScreen+0x40>)
 8000e3c:	0022      	movs	r2, r4
 8000e3e:	2100      	movs	r1, #0
 8000e40:	0028      	movs	r0, r5
 8000e42:	f7ff ffe7 	bl	8000e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e46:	2200      	movs	r2, #0
 8000e48:	0028      	movs	r0, r5
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	f7ff ffe2 	bl	8000e14 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8000e50:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	0028      	movs	r0, r5
 8000e58:	f7ff ffdc 	bl	8000e14 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8000e5c:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e5e:	0032      	movs	r2, r6
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	0028      	movs	r0, r5
 8000e66:	f7ff ffbb 	bl	8000de0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e6a:	3680      	adds	r6, #128	; 0x80
 8000e6c:	2cb8      	cmp	r4, #184	; 0xb8
 8000e6e:	d1e5      	bne.n	8000e3c <SSD1306_UpdateScreen+0x8>
}
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	200005aa 	.word	0x200005aa

08000e78 <SSD1306_Clear>:
{
 8000e78:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe24 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000e80:	f7ff ffd8 	bl	8000e34 <SSD1306_UpdateScreen>
}
 8000e84:	bd10      	pop	{r4, pc}
	...

08000e88 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8000e88:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2178      	movs	r1, #120	; 0x78
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <SSD1306_Init+0x150>)
 8000e90:	4852      	ldr	r0, [pc, #328]	; (8000fdc <SSD1306_Init+0x154>)
 8000e92:	f002 ff7d 	bl	8003d90 <HAL_I2C_IsDeviceReady>
		return 0;
 8000e96:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d000      	beq.n	8000e9e <SSD1306_Init+0x16>
 8000e9c:	e09a      	b.n	8000fd4 <SSD1306_Init+0x14c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e9e:	0021      	movs	r1, r4
 8000ea0:	22ae      	movs	r2, #174	; 0xae
 8000ea2:	2078      	movs	r0, #120	; 0x78
 8000ea4:	f7ff ffb6 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2078      	movs	r0, #120	; 0x78
 8000eae:	f7ff ffb1 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	2078      	movs	r0, #120	; 0x78
 8000eb8:	f7ff ffac 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	22b0      	movs	r2, #176	; 0xb0
 8000ec0:	2078      	movs	r0, #120	; 0x78
 8000ec2:	f7ff ffa7 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	22c8      	movs	r2, #200	; 0xc8
 8000eca:	2078      	movs	r0, #120	; 0x78
 8000ecc:	f7ff ffa2 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ed0:	0022      	movs	r2, r4
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	2078      	movs	r0, #120	; 0x78
 8000ed6:	f7ff ff9d 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000eda:	0021      	movs	r1, r4
 8000edc:	2210      	movs	r2, #16
 8000ede:	2078      	movs	r0, #120	; 0x78
 8000ee0:	f7ff ff98 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f7ff ff93 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000eee:	0021      	movs	r1, r4
 8000ef0:	2281      	movs	r2, #129	; 0x81
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f7ff ff8e 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ef8:	0021      	movs	r1, r4
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	2078      	movs	r0, #120	; 0x78
 8000efe:	f7ff ff89 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f02:	0021      	movs	r1, r4
 8000f04:	22a1      	movs	r2, #161	; 0xa1
 8000f06:	2078      	movs	r0, #120	; 0x78
 8000f08:	f7ff ff84 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f0c:	0021      	movs	r1, r4
 8000f0e:	22a6      	movs	r2, #166	; 0xa6
 8000f10:	2078      	movs	r0, #120	; 0x78
 8000f12:	f7ff ff7f 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f16:	0021      	movs	r1, r4
 8000f18:	22a8      	movs	r2, #168	; 0xa8
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f7ff ff7a 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f20:	0021      	movs	r1, r4
 8000f22:	223f      	movs	r2, #63	; 0x3f
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f7ff ff75 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	22a4      	movs	r2, #164	; 0xa4
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f7ff ff70 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f34:	0021      	movs	r1, r4
 8000f36:	22d3      	movs	r2, #211	; 0xd3
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f7ff ff6b 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f3e:	0022      	movs	r2, r4
 8000f40:	0021      	movs	r1, r4
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f7ff ff66 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f48:	0021      	movs	r1, r4
 8000f4a:	22d5      	movs	r2, #213	; 0xd5
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f7ff ff61 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f52:	0021      	movs	r1, r4
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f7ff ff5c 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	22d9      	movs	r2, #217	; 0xd9
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f7ff ff57 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f66:	0021      	movs	r1, r4
 8000f68:	2222      	movs	r2, #34	; 0x22
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f7ff ff52 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f70:	0021      	movs	r1, r4
 8000f72:	22da      	movs	r2, #218	; 0xda
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f7ff ff4d 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f7ff ff48 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f84:	0021      	movs	r1, r4
 8000f86:	22db      	movs	r2, #219	; 0xdb
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f7ff ff43 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f8e:	0021      	movs	r1, r4
 8000f90:	2220      	movs	r2, #32
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f7ff ff3e 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f98:	0021      	movs	r1, r4
 8000f9a:	228d      	movs	r2, #141	; 0x8d
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f7ff ff39 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f7ff ff34 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fac:	0021      	movs	r1, r4
 8000fae:	22af      	movs	r2, #175	; 0xaf
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f7ff ff2f 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	222e      	movs	r2, #46	; 0x2e
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f7ff ff2a 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	f7ff fd81 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000fc6:	f7ff ff35 	bl	8000e34 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SSD1306_Init+0x158>)
 8000fcc:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fce:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8000fd0:	3401      	adds	r4, #1
 8000fd2:	715c      	strb	r4, [r3, #5]
}
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	00004e20 	.word	0x00004e20
 8000fdc:	200004c0 	.word	0x200004c0
 8000fe0:	200005a4 	.word	0x200005a4

08000fe4 <eepWriteData>:
 */
#include "stm32l0xx_EEPROM.h"
#include "stm32l052xx.h"

void eepWriteData(uint16_t addr, uint8_t inData)
{
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	000d      	movs	r5, r1
 8000fe8:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8000fea:	f002 fb1f 	bl	800362c <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,(DATA_EEPROM_BASE+addr),inData);
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <eepWriteData+0x1c>)
 8000ff0:	002a      	movs	r2, r5
 8000ff2:	18e1      	adds	r1, r4, r3
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 fb3b 	bl	8003670 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8000ffa:	f002 fb2f 	bl	800365c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	08080000 	.word	0x08080000

08001004 <eepReadData>:
uint8_t eepReadData(uint16_t addr)
{
	//return (*(__IO uint32_t *)(EEP_START_ADRESS+addr));
	return (*(__IO uint8_t*)(DATA_EEPROM_BASE+addr));
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <eepReadData+0xc>)
 8001006:	18c0      	adds	r0, r0, r3
 8001008:	7800      	ldrb	r0, [r0, #0]
 800100a:	b2c0      	uxtb	r0, r0
}
 800100c:	4770      	bx	lr
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	08080000 	.word	0x08080000

08001014 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	2201      	movs	r2, #1
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_MspInit+0x18>)
 8001018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001022:	0552      	lsls	r2, r2, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	4770      	bx	lr
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b510      	push	{r4, lr}
 8001032:	0004      	movs	r4, r0
 8001034:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	2214      	movs	r2, #20
 8001038:	2100      	movs	r1, #0
 800103a:	a801      	add	r0, sp, #4
 800103c:	f003 ffe4 	bl	8005008 <memset>
  if(hadc->Instance==ADC1)
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x48>)
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d115      	bne.n	8001074 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x4c>)
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	400b      	ands	r3, r1
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8001068:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 800106c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f002 fb28 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001074:	b006      	add	sp, #24
 8001076:	bd10      	pop	{r4, pc}
 8001078:	40012400 	.word	0x40012400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b510      	push	{r4, lr}
 8001082:	0004      	movs	r4, r0
 8001084:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a801      	add	r0, sp, #4
 800108c:	f003 ffbc 	bl	8005008 <memset>
  if(hi2c->Instance==I2C1)
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_I2C_MspInit+0x50>)
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d119      	bne.n	80010cc <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	2102      	movs	r1, #2
 800109a:	4c0e      	ldr	r4, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010a0:	430a      	orrs	r2, r1
 80010a2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80010a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a6:	400b      	ands	r3, r1
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ac:	23c0      	movs	r3, #192	; 0xc0
 80010ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	3bae      	subs	r3, #174	; 0xae
 80010b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	3b0f      	subs	r3, #15
 80010b6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80010ba:	3b02      	subs	r3, #2
 80010bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f002 fb01 	bl	80036c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4313      	orrs	r3, r2
 80010ca:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	b006      	add	sp, #24
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	50000400 	.word	0x50000400

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	0005      	movs	r5, r0
 80010e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	2214      	movs	r2, #20
 80010e4:	2100      	movs	r1, #0
 80010e6:	a801      	add	r0, sp, #4
 80010e8:	f003 ff8e 	bl	8005008 <memset>
  if(hspi->Instance==SPI1)
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_SPI_MspInit+0x7c>)
 80010ee:	682a      	ldr	r2, [r5, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d12f      	bne.n	8001154 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f4:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_SPI_MspInit+0x80>)
 80010fa:	0152      	lsls	r2, r2, #5
 80010fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4332      	orrs	r2, r6
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4033      	ands	r3, r6
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	3b9e      	subs	r3, #158	; 0x9e
 800111c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	199b      	adds	r3, r3, r6
 8001120:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f002 facf 	bl	80036c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001126:	4c0e      	ldr	r4, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x84>)
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0x88>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800112c:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112e:	2310      	movs	r3, #16
 8001130:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001134:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001136:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001140:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001142:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001144:	f002 f912 	bl	800336c <HAL_DMA_Init>
 8001148:	2800      	cmp	r0, #0
 800114a:	d001      	beq.n	8001150 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800114c:	f7ff fcba 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001150:	64ac      	str	r4, [r5, #72]	; 0x48
 8001152:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001154:	b006      	add	sp, #24
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000
 8001160:	20000478 	.word	0x20000478
 8001164:	40020030 	.word	0x40020030

08001168 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	429a      	cmp	r2, r3
 8001170:	d104      	bne.n	800117c <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001172:	2301      	movs	r3, #1
 8001174:	4a02      	ldr	r2, [pc, #8]	; (8001180 <HAL_TIM_Base_MspInit+0x18>)
 8001176:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001178:	430b      	orrs	r3, r1
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800117c:	4770      	bx	lr
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler>

08001186 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler>

08001188 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f001 fde1 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bd10      	pop	{r4, pc}

08001194 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001194:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001198:	f002 f96c 	bl	8003474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000478 	.word	0x20000478

080011a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0xc>)
 80011a8:	f003 fe20 	bl	8004dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000564 	.word	0x20000564

080011b4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <_sbrk+0x30>)
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <_sbrk+0x34>)
{
 80011b8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ba:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <_sbrk+0x38>)
{
 80011be:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d101      	bne.n	80011ca <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <_sbrk+0x3c>)
 80011c8:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	18c3      	adds	r3, r0, r3
 80011ce:	428b      	cmp	r3, r1
 80011d0:	d906      	bls.n	80011e0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80011d2:	f003 fec9 	bl	8004f68 <__errno>
 80011d6:	230c      	movs	r3, #12
 80011d8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011da:	2001      	movs	r0, #1
 80011dc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011de:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011e0:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80011e2:	e7fc      	b.n	80011de <_sbrk+0x2a>
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20002000 	.word	0x20002000
 80011ec:	200009ac 	.word	0x200009ac
 80011f0:	20000eb8 	.word	0x20000eb8

080011f4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	4770      	bx	lr
	...

080011f8 <ssd1306_putsXY>:
CATE cate_sel = res;
POS temp, ptionS, ptionE, min, max;

/* Functions */

void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80011fc:	2306      	movs	r3, #6
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80011fe:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 8001200:	4358      	muls	r0, r3
 8001202:	00c9      	lsls	r1, r1, #3
 8001204:	f7ff fc96 	bl	8000b34 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 8001208:	002a      	movs	r2, r5
 800120a:	0020      	movs	r0, r4
 800120c:	4901      	ldr	r1, [pc, #4]	; (8001214 <ssd1306_putsXY+0x1c>)
 800120e:	f7ff fccd 	bl	8000bac <SSD1306_Puts>
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	20000000 	.word	0x20000000

08001218 <array_puts>:

void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	001e      	movs	r6, r3
 800121e:	ab0a      	add	r3, sp, #40	; 0x28
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0004      	movs	r4, r0
	SSD1306_Fill(0);
 8001224:	2000      	movs	r0, #0
void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 8001226:	000f      	movs	r7, r1
 8001228:	0015      	movs	r5, r2
 800122a:	9303      	str	r3, [sp, #12]
	SSD1306_Fill(0);
 800122c:	f7ff fc4c 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8001230:	2100      	movs	r1, #0
 8001232:	2301      	movs	r3, #1
 8001234:	0008      	movs	r0, r1
 8001236:	227f      	movs	r2, #127	; 0x7f
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	3306      	adds	r3, #6
 800123c:	f7ff fda1 	bl	8000d82 <SSD1306_DrawFilledRectangle>
	ssd1306_putsXY(0, 0, title, 0);
 8001240:	2300      	movs	r3, #0
 8001242:	003a      	movs	r2, r7
 8001244:	0019      	movs	r1, r3
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff ffd6 	bl	80011f8 <ssd1306_putsXY>
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 800124c:	9b03      	ldr	r3, [sp, #12]
 800124e:	005f      	lsls	r7, r3, #1
 8001250:	19e7      	adds	r7, r4, r7
 8001252:	42bc      	cmp	r4, r7
 8001254:	d101      	bne.n	800125a <array_puts+0x42>
}
 8001256:	b005      	add	sp, #20
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 800125a:	7861      	ldrb	r1, [r4, #1]
 800125c:	7820      	ldrb	r0, [r4, #0]
 800125e:	0033      	movs	r3, r6
 8001260:	cd04      	ldmia	r5!, {r2}
 8001262:	f7ff ffc9 	bl	80011f8 <ssd1306_putsXY>
 8001266:	3402      	adds	r4, #2
 8001268:	e7f3      	b.n	8001252 <array_puts+0x3a>
	...

0800126c <get_time>:

void get_time(void){
 800126c:	b510      	push	{r4, lr}
	DS3231_get_date(&time.day, &time.month, &time.year);
 800126e:	4c06      	ldr	r4, [pc, #24]	; (8001288 <get_time+0x1c>)
 8001270:	0022      	movs	r2, r4
 8001272:	1c61      	adds	r1, r4, #1
 8001274:	1ca0      	adds	r0, r4, #2
 8001276:	f7ff fa03 	bl	8000680 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 800127a:	1ce2      	adds	r2, r4, #3
 800127c:	1d21      	adds	r1, r4, #4
 800127e:	1d60      	adds	r0, r4, #5
 8001280:	f7ff f968 	bl	8000554 <DS3231_get_time>
}
 8001284:	bd10      	pop	{r4, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000029 	.word	0x20000029

0800128c <set_time>:

void set_time(void){
 800128c:	b510      	push	{r4, lr}
	DS3231_set_date(time.day, time.month, time.year);
 800128e:	4c06      	ldr	r4, [pc, #24]	; (80012a8 <set_time+0x1c>)
 8001290:	7822      	ldrb	r2, [r4, #0]
 8001292:	7861      	ldrb	r1, [r4, #1]
 8001294:	78a0      	ldrb	r0, [r4, #2]
 8001296:	f7ff f9bb 	bl	8000610 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 800129a:	78e2      	ldrb	r2, [r4, #3]
 800129c:	7921      	ldrb	r1, [r4, #4]
 800129e:	7960      	ldrb	r0, [r4, #5]
 80012a0:	f7ff f920 	bl	80004e4 <DS3231_set_time>
}
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	20000029 	.word	0x20000029

080012ac <get_adc>:

void get_adc(void){
 80012ac:	b510      	push	{r4, lr}
	static uint32_t frev_tick;
	uint32_t now_tick = HAL_GetTick();
 80012ae:	f001 fd5d 	bl	8002d6c <HAL_GetTick>

	if(now_tick - frev_tick > 150){
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <get_adc+0x48>)
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	1ac3      	subs	r3, r0, r3
 80012b8:	2b96      	cmp	r3, #150	; 0x96
 80012ba:	d908      	bls.n	80012ce <get_adc+0x22>
		frev_tick = now_tick;
 80012bc:	6010      	str	r0, [r2, #0]
		if(JOY_U) joy_result = up;
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <get_adc+0x4c>)
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <get_adc+0x50>)
 80012c2:	8850      	ldrh	r0, [r2, #2]
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d903      	bls.n	80012d0 <get_adc+0x24>
 80012c8:	2203      	movs	r2, #3
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <get_adc+0x54>)
		else if(JOY_D) joy_result = down;
		else if(JOY_L) joy_result = left;
		else if(JOY_R) joy_result = right;
 80012cc:	701a      	strb	r2, [r3, #0]
	}
}
 80012ce:	bd10      	pop	{r4, pc}
		else if(JOY_D) joy_result = down;
 80012d0:	2196      	movs	r1, #150	; 0x96
 80012d2:	0049      	lsls	r1, r1, #1
 80012d4:	4288      	cmp	r0, r1
 80012d6:	d202      	bcs.n	80012de <get_adc+0x32>
 80012d8:	2204      	movs	r2, #4
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <get_adc+0x54>)
 80012dc:	e7f6      	b.n	80012cc <get_adc+0x20>
		else if(JOY_L) joy_result = left;
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	428a      	cmp	r2, r1
 80012e2:	d202      	bcs.n	80012ea <get_adc+0x3e>
 80012e4:	2201      	movs	r2, #1
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <get_adc+0x54>)
 80012e8:	e7f0      	b.n	80012cc <get_adc+0x20>
		else if(JOY_R) joy_result = right;
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d9ef      	bls.n	80012ce <get_adc+0x22>
 80012ee:	2202      	movs	r2, #2
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <get_adc+0x54>)
 80012f2:	e7eb      	b.n	80012cc <get_adc+0x20>
 80012f4:	200009c4 	.word	0x200009c4
 80012f8:	200009b2 	.word	0x200009b2
 80012fc:	00000dac 	.word	0x00000dac
 8001300:	200009cc 	.word	0x200009cc

08001304 <get_sel>:

void get_sel(uint8_t* sel , uint8_t max, uint8_t min, uint8_t state){
 8001304:	b510      	push	{r4, lr}
	switch(state){
 8001306:	2b01      	cmp	r3, #1
 8001308:	d015      	beq.n	8001336 <get_sel+0x32>
 800130a:	2b02      	cmp	r3, #2
 800130c:	d020      	beq.n	8001350 <get_sel+0x4c>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11d      	bne.n	800134e <get_sel+0x4a>
	case 0:
		if(joy_result == up) { if(*sel < max) *sel += 1; }
 8001312:	4c16      	ldr	r4, [pc, #88]	; (800136c <get_sel+0x68>)
 8001314:	7823      	ldrb	r3, [r4, #0]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d104      	bne.n	8001324 <get_sel+0x20>
 800131a:	7803      	ldrb	r3, [r0, #0]
 800131c:	428b      	cmp	r3, r1
 800131e:	d216      	bcs.n	800134e <get_sel+0x4a>
 8001320:	3301      	adds	r3, #1
 8001322:	7003      	strb	r3, [r0, #0]
		if(joy_result == down) { if(*sel > min) *sel -= 1; }
 8001324:	7823      	ldrb	r3, [r4, #0]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d111      	bne.n	800134e <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
		break;
	case 2:
		if(joy_result == down) { if(*sel < max) *sel += 1; }
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 800132a:	7803      	ldrb	r3, [r0, #0]
 800132c:	4293      	cmp	r3, r2
 800132e:	d90e      	bls.n	800134e <get_sel+0x4a>
 8001330:	3b01      	subs	r3, #1
 8001332:	7003      	strb	r3, [r0, #0]
		break;
	}
}
 8001334:	e00b      	b.n	800134e <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
 8001336:	4c0d      	ldr	r4, [pc, #52]	; (800136c <get_sel+0x68>)
 8001338:	7823      	ldrb	r3, [r4, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d104      	bne.n	8001348 <get_sel+0x44>
 800133e:	7803      	ldrb	r3, [r0, #0]
 8001340:	428b      	cmp	r3, r1
 8001342:	d204      	bcs.n	800134e <get_sel+0x4a>
 8001344:	3301      	adds	r3, #1
 8001346:	7003      	strb	r3, [r0, #0]
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
 8001348:	7823      	ldrb	r3, [r4, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d0ed      	beq.n	800132a <get_sel+0x26>
}
 800134e:	bd10      	pop	{r4, pc}
		if(joy_result == down) { if(*sel < max) *sel += 1; }
 8001350:	4c06      	ldr	r4, [pc, #24]	; (800136c <get_sel+0x68>)
 8001352:	7823      	ldrb	r3, [r4, #0]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d104      	bne.n	8001362 <get_sel+0x5e>
 8001358:	7803      	ldrb	r3, [r0, #0]
 800135a:	428b      	cmp	r3, r1
 800135c:	d2f7      	bcs.n	800134e <get_sel+0x4a>
 800135e:	3301      	adds	r3, #1
 8001360:	7003      	strb	r3, [r0, #0]
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 8001362:	7823      	ldrb	r3, [r4, #0]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d1f2      	bne.n	800134e <get_sel+0x4a>
 8001368:	e7df      	b.n	800132a <get_sel+0x26>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	200009cc 	.word	0x200009cc

08001370 <read_sw>:

uint8_t read_sw(void){
	static uint8_t oldSW;
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001370:	20a0      	movs	r0, #160	; 0xa0
uint8_t read_sw(void){
 8001372:	b510      	push	{r4, lr}
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001374:	2104      	movs	r1, #4
 8001376:	05c0      	lsls	r0, r0, #23
 8001378:	f002 fa64 	bl	8003844 <HAL_GPIO_ReadPin>
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <read_sw+0x38>)
 800137e:	7823      	ldrb	r3, [r4, #0]
 8001380:	4318      	orrs	r0, r3
 8001382:	b2c0      	uxtb	r0, r0
 8001384:	2800      	cmp	r0, #0
 8001386:	d102      	bne.n	800138e <read_sw+0x1e>
 8001388:	3001      	adds	r0, #1
	if(!JOY_P && oldSW) { oldSW = 0; }
 800138a:	7020      	strb	r0, [r4, #0]
	return 0;
}
 800138c:	bd10      	pop	{r4, pc}
	if(!JOY_P && oldSW) { oldSW = 0; }
 800138e:	20a0      	movs	r0, #160	; 0xa0
 8001390:	2104      	movs	r1, #4
 8001392:	05c0      	lsls	r0, r0, #23
 8001394:	f002 fa56 	bl	8003844 <HAL_GPIO_ReadPin>
 8001398:	2800      	cmp	r0, #0
 800139a:	d0f7      	beq.n	800138c <read_sw+0x1c>
 800139c:	7820      	ldrb	r0, [r4, #0]
 800139e:	2800      	cmp	r0, #0
 80013a0:	d0f4      	beq.n	800138c <read_sw+0x1c>
 80013a2:	2000      	movs	r0, #0
 80013a4:	e7f1      	b.n	800138a <read_sw+0x1a>
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	200009d6 	.word	0x200009d6

080013ac <led_display>:

void led_display(struct Part* a, uint8_t i){
 80013ac:	b510      	push	{r4, lr}
	switch(a->cate){
 80013ae:	7ac0      	ldrb	r0, [r0, #11]
void led_display(struct Part* a, uint8_t i){
 80013b0:	000c      	movs	r4, r1
	switch(a->cate){
 80013b2:	3801      	subs	r0, #1
 80013b4:	2803      	cmp	r0, #3
 80013b6:	d816      	bhi.n	80013e6 <led_display+0x3a>
 80013b8:	f7fe feb0 	bl	800011c <__gnu_thumb1_case_uqi>
 80013bc:	110d0902 	.word	0x110d0902
	case 1: led_color(i, 4, 1, 0); break;
 80013c0:	2300      	movs	r3, #0
 80013c2:	2201      	movs	r2, #1
 80013c4:	2104      	movs	r1, #4
	case 2: led_color(i, 1, 0, 4); break;
	case 3: led_color(i, 4, 4, 0); break;
	case 4: led_color(i, 0, 4, 4); break;
	default: led_color(i, 0, 0, 0); break;
 80013c6:	0020      	movs	r0, r4
 80013c8:	f7ff f9b6 	bl	8000738 <led_color>
	}
}
 80013cc:	bd10      	pop	{r4, pc}
	case 2: led_color(i, 1, 0, 4); break;
 80013ce:	2304      	movs	r3, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	2101      	movs	r1, #1
 80013d4:	e7f7      	b.n	80013c6 <led_display+0x1a>
	case 3: led_color(i, 4, 4, 0); break;
 80013d6:	2300      	movs	r3, #0
 80013d8:	2204      	movs	r2, #4
	default: led_color(i, 0, 0, 0); break;
 80013da:	0011      	movs	r1, r2
 80013dc:	e7f3      	b.n	80013c6 <led_display+0x1a>
	case 4: led_color(i, 0, 4, 4); break;
 80013de:	2304      	movs	r3, #4
 80013e0:	2100      	movs	r1, #0
 80013e2:	001a      	movs	r2, r3
 80013e4:	e7ef      	b.n	80013c6 <led_display+0x1a>
	default: led_color(i, 0, 0, 0); break;
 80013e6:	2300      	movs	r3, #0
 80013e8:	001a      	movs	r2, r3
 80013ea:	e7f6      	b.n	80013da <led_display+0x2e>

080013ec <main_menu>:
	}
	set_time();
	eepWriteData(0, 1);
}

void main_menu(void){
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t check;
	if(!firF){
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <main_menu+0x14c>)
void main_menu(void){
 80013f0:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 80013f2:	781c      	ldrb	r4, [r3, #0]
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d11b      	bne.n	8001430 <main_menu+0x44>
		firF = 1;
 80013f8:	2201      	movs	r2, #1

		led_clear();
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80013fa:	2514      	movs	r5, #20
		firF = 1;
 80013fc:	701a      	strb	r2, [r3, #0]
		led_clear();
 80013fe:	f7ff f9d1 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001402:	0028      	movs	r0, r5
 8001404:	4360      	muls	r0, r4
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <main_menu+0x150>)
 8001408:	b2e1      	uxtb	r1, r4
 800140a:	18c0      	adds	r0, r0, r3
 800140c:	3401      	adds	r4, #1
 800140e:	f7ff ffcd 	bl	80013ac <led_display>
 8001412:	2c24      	cmp	r4, #36	; 0x24
 8001414:	d1f5      	bne.n	8001402 <main_menu+0x16>
		led_update();
 8001416:	f7ff f99b 	bl	8000750 <led_update>

		for(uint8_t i = 0 ; i < 36 ; i++)
 800141a:	21b4      	movs	r1, #180	; 0xb4
		led_update();
 800141c:	2300      	movs	r3, #0
			if(pt[i].cate != 0) { check = 1; break; }
 800141e:	4848      	ldr	r0, [pc, #288]	; (8001540 <main_menu+0x154>)
		for(uint8_t i = 0 ; i < 36 ; i++)
 8001420:	0089      	lsls	r1, r1, #2
			if(pt[i].cate != 0) { check = 1; break; }
 8001422:	5cc2      	ldrb	r2, [r0, r3]
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <main_menu+0x3e>
 8001428:	e07c      	b.n	8001524 <main_menu+0x138>
 800142a:	2201      	movs	r2, #1
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <main_menu+0x158>)
 800142e:	701a      	strb	r2, [r3, #0]
			else check = 0;
	}
	get_time();
 8001430:	f7ff ff1c 	bl	800126c <get_time>
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 8001434:	2300      	movs	r3, #0
 8001436:	2102      	movs	r1, #2
 8001438:	4f43      	ldr	r7, [pc, #268]	; (8001548 <main_menu+0x15c>)
 800143a:	ac02      	add	r4, sp, #8
 800143c:	7023      	strb	r3, [r4, #0]
 800143e:	783b      	ldrb	r3, [r7, #0]
 8001440:	2501      	movs	r5, #1
 8001442:	2205      	movs	r2, #5
 8001444:	3302      	adds	r3, #2
 8001446:	7063      	strb	r3, [r4, #1]
 8001448:	70e1      	strb	r1, [r4, #3]
 800144a:	2303      	movs	r3, #3
 800144c:	1849      	adds	r1, r1, r1
 800144e:	71e1      	strb	r1, [r4, #7]
 8001450:	73e1      	strb	r1, [r4, #15]
	char bf[2][20];
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001452:	21fa      	movs	r1, #250	; 0xfa
 8001454:	4e3d      	ldr	r6, [pc, #244]	; (800154c <main_menu+0x160>)
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 8001456:	7262      	strb	r2, [r4, #9]
 8001458:	1952      	adds	r2, r2, r5
 800145a:	72e2      	strb	r2, [r4, #11]
 800145c:	3205      	adds	r2, #5
 800145e:	7163      	strb	r3, [r4, #5]
 8001460:	7322      	strb	r2, [r4, #12]
 8001462:	7363      	strb	r3, [r4, #13]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001464:	7832      	ldrb	r2, [r6, #0]
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 8001466:	330a      	adds	r3, #10
 8001468:	70a5      	strb	r5, [r4, #2]
 800146a:	7125      	strb	r5, [r4, #4]
 800146c:	71a5      	strb	r5, [r4, #6]
 800146e:	7225      	strb	r5, [r4, #8]
 8001470:	72a5      	strb	r5, [r4, #10]
 8001472:	73a3      	strb	r3, [r4, #14]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001474:	00c9      	lsls	r1, r1, #3
 8001476:	1852      	adds	r2, r2, r1
 8001478:	78b1      	ldrb	r1, [r6, #2]
 800147a:	7873      	ldrb	r3, [r6, #1]
 800147c:	a80e      	add	r0, sp, #56	; 0x38
 800147e:	9100      	str	r1, [sp, #0]
 8001480:	4933      	ldr	r1, [pc, #204]	; (8001550 <main_menu+0x164>)
 8001482:	f003 fee9 	bl	8005258 <siprintf>
	sprintf(bf[1], "%02d:%02d:%02d", time.hour, time.min, time.sec);
 8001486:	7971      	ldrb	r1, [r6, #5]
 8001488:	7933      	ldrb	r3, [r6, #4]
 800148a:	78f2      	ldrb	r2, [r6, #3]
 800148c:	a813      	add	r0, sp, #76	; 0x4c
 800148e:	9100      	str	r1, [sp, #0]
 8001490:	4930      	ldr	r1, [pc, #192]	; (8001554 <main_menu+0x168>)
 8001492:	f003 fee1 	bl	8005258 <siprintf>
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <main_menu+0x16c>)
 8001498:	a90e      	add	r1, sp, #56	; 0x38
 800149a:	9306      	str	r3, [sp, #24]
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <main_menu+0x170>)
 800149e:	910c      	str	r1, [sp, #48]	; 0x30
 80014a0:	9307      	str	r3, [sp, #28]
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <main_menu+0x174>)
 80014a4:	a913      	add	r1, sp, #76	; 0x4c
 80014a6:	9308      	str	r3, [sp, #32]
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <main_menu+0x178>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014aa:	0020      	movs	r0, r4
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014ac:	9309      	str	r3, [sp, #36]	; 0x24
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <main_menu+0x17c>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014b0:	aa06      	add	r2, sp, #24
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014b2:	930a      	str	r3, [sp, #40]	; 0x28
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <main_menu+0x180>)
 80014b6:	910d      	str	r1, [sp, #52]	; 0x34
 80014b8:	930b      	str	r3, [sp, #44]	; 0x2c
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014ba:	2308      	movs	r3, #8
 80014bc:	492c      	ldr	r1, [pc, #176]	; (8001570 <main_menu+0x184>)
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	002b      	movs	r3, r5
 80014c2:	f7ff fea9 	bl	8001218 <array_puts>
	SSD1306_UpdateScreen();
 80014c6:	f7ff fcb5 	bl	8000e34 <SSD1306_UpdateScreen>

	get_adc();
 80014ca:	f7ff feef 	bl	80012ac <get_adc>
	get_sel(&sel, 4, 0, 2);
 80014ce:	2302      	movs	r3, #2
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	0038      	movs	r0, r7
 80014d6:	f7ff ff15 	bl	8001304 <get_sel>
	joy_result = basic;
 80014da:	2200      	movs	r2, #0
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <main_menu+0x188>)
 80014de:	701a      	strb	r2, [r3, #0]

	if(read_sw()){
 80014e0:	f7ff ff46 	bl	8001370 <read_sw>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d01b      	beq.n	8001520 <main_menu+0x134>
		if(sel == 0) { led_clear(); led_update(); start_check++; }
 80014e8:	783b      	ldrb	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <main_menu+0x112>
 80014ee:	f7ff f959 	bl	80007a4 <led_clear>
 80014f2:	f7ff f92d 	bl	8000750 <led_update>
 80014f6:	4a20      	ldr	r2, [pc, #128]	; (8001578 <main_menu+0x18c>)
 80014f8:	7813      	ldrb	r3, [r2, #0]
 80014fa:	195b      	adds	r3, r3, r5
 80014fc:	7013      	strb	r3, [r2, #0]
		ModeF = sel + 1;
		firF = 0;
 80014fe:	2000      	movs	r0, #0
		ModeF = sel + 1;
 8001500:	783b      	ldrb	r3, [r7, #0]
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <main_menu+0x190>)
 8001504:	1c59      	adds	r1, r3, #1
 8001506:	7011      	strb	r1, [r2, #0]
		firF = 0;
 8001508:	490b      	ldr	r1, [pc, #44]	; (8001538 <main_menu+0x14c>)
 800150a:	7008      	strb	r0, [r1, #0]
		if(sel != 0 && !check) { buzM = 1; ModeF = 0; }
 800150c:	4283      	cmp	r3, r0
 800150e:	d00f      	beq.n	8001530 <main_menu+0x144>
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <main_menu+0x158>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4283      	cmp	r3, r0
 8001516:	d10b      	bne.n	8001530 <main_menu+0x144>
 8001518:	4919      	ldr	r1, [pc, #100]	; (8001580 <main_menu+0x194>)
 800151a:	3001      	adds	r0, #1
 800151c:	7008      	strb	r0, [r1, #0]
 800151e:	7013      	strb	r3, [r2, #0]
		else sel = 0;
	}
}
 8001520:	b019      	add	sp, #100	; 0x64
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0 ; i < 36 ; i++)
 8001524:	3314      	adds	r3, #20
 8001526:	428b      	cmp	r3, r1
 8001528:	d000      	beq.n	800152c <main_menu+0x140>
 800152a:	e77a      	b.n	8001422 <main_menu+0x36>
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <main_menu+0x158>)
 800152e:	e77e      	b.n	800142e <main_menu+0x42>
		else sel = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	703b      	strb	r3, [r7, #0]
}
 8001534:	e7f4      	b.n	8001520 <main_menu+0x134>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	2000000c 	.word	0x2000000c
 800153c:	200009d8 	.word	0x200009d8
 8001540:	200009e3 	.word	0x200009e3
 8001544:	200009ba 	.word	0x200009ba
 8001548:	20000e7f 	.word	0x20000e7f
 800154c:	20000029 	.word	0x20000029
 8001550:	08006359 	.word	0x08006359
 8001554:	08006368 	.word	0x08006368
 8001558:	08006377 	.word	0x08006377
 800155c:	08006379 	.word	0x08006379
 8001560:	08006383 	.word	0x08006383
 8001564:	0800638c 	.word	0x0800638c
 8001568:	08006576 	.word	0x08006576
 800156c:	08006396 	.word	0x08006396
 8001570:	0800639f 	.word	0x0800639f
 8001574:	200009cc 	.word	0x200009cc
 8001578:	20000e80 	.word	0x20000e80
 800157c:	200009b0 	.word	0x200009b0
 8001580:	200009b8 	.word	0x200009b8

08001584 <input_string>:
char* input_string(char* str){
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t input_sel = 0;
 8001586:	2700      	movs	r7, #0
char* input_string(char* str){
 8001588:	b08f      	sub	sp, #60	; 0x3c
 800158a:	9007      	str	r0, [sp, #28]
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 800158c:	210b      	movs	r1, #11
 800158e:	2001      	movs	r0, #1
 8001590:	f003 fce0 	bl	8004f54 <calloc>
	uint8_t keyX = 0, keyY = 0;
 8001594:	003c      	movs	r4, r7
 8001596:	003d      	movs	r5, r7
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 8001598:	9003      	str	r0, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 800159a:	2201      	movs	r2, #1
 800159c:	18bb      	adds	r3, r7, r2
 800159e:	a809      	add	r0, sp, #36	; 0x24
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	7083      	strb	r3, [r0, #2]
 80015a4:	9304      	str	r3, [sp, #16]
 80015a6:	2302      	movs	r3, #2
 80015a8:	70c3      	strb	r3, [r0, #3]
		char* array[3] = { ">", "^", input_keyboard };
 80015aa:	4b59      	ldr	r3, [pc, #356]	; (8001710 <input_string+0x18c>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015ac:	2600      	movs	r6, #0
		char* array[3] = { ">", "^", input_keyboard };
 80015ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <input_string+0x190>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015b2:	7042      	strb	r2, [r0, #1]
		char* array[3] = { ">", "^", input_keyboard };
 80015b4:	930c      	str	r3, [sp, #48]	; 0x30
 80015b6:	9b03      	ldr	r3, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015b8:	7102      	strb	r2, [r0, #4]
		char* array[3] = { ">", "^", input_keyboard };
 80015ba:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 80015bc:	2303      	movs	r3, #3
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015be:	7142      	strb	r2, [r0, #5]
 80015c0:	7006      	strb	r6, [r0, #0]
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 80015c2:	9907      	ldr	r1, [sp, #28]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	0013      	movs	r3, r2
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	f7ff fe25 	bl	8001218 <array_puts>
				SSD1306_GotoXY(14 + j * 10, (4 * 8) + (i * 8));
 80015ce:	00f3      	lsls	r3, r6, #3
 80015d0:	3320      	adds	r3, #32
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	9305      	str	r3, [sp, #20]
 80015d6:	230b      	movs	r3, #11
 80015d8:	4373      	muls	r3, r6
 80015da:	4a4f      	ldr	r2, [pc, #316]	; (8001718 <input_string+0x194>)
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	9306      	str	r3, [sp, #24]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	200a      	movs	r0, #10
 80015e6:	9b02      	ldr	r3, [sp, #8]
 80015e8:	9905      	ldr	r1, [sp, #20]
 80015ea:	4358      	muls	r0, r3
 80015ec:	300e      	adds	r0, #14
 80015ee:	b280      	uxth	r0, r0
 80015f0:	f7ff faa0 	bl	8000b34 <SSD1306_GotoXY>
				SSD1306_Putc(keyboard[i][j], &Font_6x8, !(keyX == j && keyY == i));
 80015f4:	9b06      	ldr	r3, [sp, #24]
 80015f6:	9a02      	ldr	r2, [sp, #8]
 80015f8:	5c98      	ldrb	r0, [r3, r2]
 80015fa:	466b      	mov	r3, sp
 80015fc:	7a1b      	ldrb	r3, [r3, #8]
 80015fe:	2201      	movs	r2, #1
 8001600:	429d      	cmp	r5, r3
 8001602:	d103      	bne.n	800160c <input_string+0x88>
 8001604:	b2f2      	uxtb	r2, r6
 8001606:	1b12      	subs	r2, r2, r4
 8001608:	1e53      	subs	r3, r2, #1
 800160a:	419a      	sbcs	r2, r3
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <input_string+0x198>)
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f7ff fa96 	bl	8000b40 <SSD1306_Putc>
			for(uint8_t j = 0 ; j < 10 ; j++){
 8001614:	9b02      	ldr	r3, [sp, #8]
 8001616:	3301      	adds	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d1e2      	bne.n	80015e4 <input_string+0x60>
		for(uint8_t i = 0 ; i < 4 ; i++)
 800161e:	3601      	adds	r6, #1
 8001620:	2e04      	cmp	r6, #4
 8001622:	d1d4      	bne.n	80015ce <input_string+0x4a>
		ssd1306_putsXY(19, 4, "&", !(keyX == 10 && keyY == 0));
 8001624:	2301      	movs	r3, #1
 8001626:	2d0a      	cmp	r5, #10
 8001628:	d102      	bne.n	8001630 <input_string+0xac>
 800162a:	0023      	movs	r3, r4
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	4193      	sbcs	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2104      	movs	r1, #4
 8001634:	2013      	movs	r0, #19
 8001636:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <input_string+0x19c>)
 8001638:	f7ff fdde 	bl	80011f8 <ssd1306_putsXY>
		ssd1306_putsXY(19, 6, "*", !(keyX == 10 && keyY == 2));
 800163c:	2301      	movs	r3, #1
 800163e:	2d0a      	cmp	r5, #10
 8001640:	d102      	bne.n	8001648 <input_string+0xc4>
 8001642:	1ea3      	subs	r3, r4, #2
 8001644:	1e5a      	subs	r2, r3, #1
 8001646:	4193      	sbcs	r3, r2
 8001648:	2106      	movs	r1, #6
 800164a:	2013      	movs	r0, #19
 800164c:	4a35      	ldr	r2, [pc, #212]	; (8001724 <input_string+0x1a0>)
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f7ff fdd2 	bl	80011f8 <ssd1306_putsXY>
		if(keyY == 0 || keyY == 2) limitX = 10;
 8001654:	260a      	movs	r6, #10
		SSD1306_UpdateScreen();
 8001656:	f7ff fbed 	bl	8000e34 <SSD1306_UpdateScreen>
		if(keyY == 0 || keyY == 2) limitX = 10;
 800165a:	2c00      	cmp	r4, #0
 800165c:	d003      	beq.n	8001666 <input_string+0xe2>
 800165e:	1ea6      	subs	r6, r4, #2
 8001660:	4273      	negs	r3, r6
 8001662:	415e      	adcs	r6, r3
 8001664:	3609      	adds	r6, #9
		get_adc();
 8001666:	f7ff fe21 	bl	80012ac <get_adc>
		if(joy_result == left) { keyX = keyX > 0 ? keyX - 1 : limitX; }
 800166a:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <input_string+0x1a4>)
 800166c:	7813      	ldrb	r3, [r2, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <input_string+0xfa>
 8001672:	2d00      	cmp	r5, #0
 8001674:	d001      	beq.n	800167a <input_string+0xf6>
 8001676:	3d01      	subs	r5, #1
 8001678:	b2ee      	uxtb	r6, r5
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 800167a:	0035      	movs	r5, r6
 800167c:	e00f      	b.n	800169e <input_string+0x11a>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 800167e:	2b02      	cmp	r3, #2
 8001680:	d009      	beq.n	8001696 <input_string+0x112>
		if(joy_result == up){
 8001682:	2b03      	cmp	r3, #3
 8001684:	d020      	beq.n	80016c8 <input_string+0x144>
		if(joy_result == down){
 8001686:	2b04      	cmp	r3, #4
 8001688:	d109      	bne.n	800169e <input_string+0x11a>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 800168a:	2d0a      	cmp	r5, #10
 800168c:	d01e      	beq.n	80016cc <input_string+0x148>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 800168e:	2c03      	cmp	r4, #3
 8001690:	d027      	beq.n	80016e2 <input_string+0x15e>
 8001692:	3401      	adds	r4, #1
 8001694:	e021      	b.n	80016da <input_string+0x156>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001696:	42b5      	cmp	r5, r6
 8001698:	d238      	bcs.n	800170c <input_string+0x188>
 800169a:	3501      	adds	r5, #1
 800169c:	b2ed      	uxtb	r5, r5
		joy_result = basic;
 800169e:	2300      	movs	r3, #0
 80016a0:	7013      	strb	r3, [r2, #0]
		if(read_sw()){
 80016a2:	f7ff fe65 	bl	8001370 <read_sw>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d100      	bne.n	80016ac <input_string+0x128>
 80016aa:	e776      	b.n	800159a <input_string+0x16>
			if(keyX < 10) input_keyboard[input_sel++] = keyboard[keyY][keyX];
 80016ac:	2d0a      	cmp	r5, #10
 80016ae:	d01a      	beq.n	80016e6 <input_string+0x162>
 80016b0:	220b      	movs	r2, #11
 80016b2:	4362      	muls	r2, r4
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <input_string+0x194>)
 80016b6:	189b      	adds	r3, r3, r2
 80016b8:	5d5b      	ldrb	r3, [r3, r5]
 80016ba:	9a03      	ldr	r2, [sp, #12]
 80016bc:	55d3      	strb	r3, [r2, r7]
		if(input_sel >= 10) break;
 80016be:	9b04      	ldr	r3, [sp, #16]
 80016c0:	2b0a      	cmp	r3, #10
 80016c2:	d01d      	beq.n	8001700 <input_string+0x17c>
 80016c4:	001f      	movs	r7, r3
 80016c6:	e768      	b.n	800159a <input_string+0x16>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 80016c8:	2d0a      	cmp	r5, #10
 80016ca:	d103      	bne.n	80016d4 <input_string+0x150>
 80016cc:	4263      	negs	r3, r4
 80016ce:	415c      	adcs	r4, r3
 80016d0:	0064      	lsls	r4, r4, #1
 80016d2:	e7e4      	b.n	800169e <input_string+0x11a>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	d002      	beq.n	80016de <input_string+0x15a>
 80016d8:	3c01      	subs	r4, #1
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 80016da:	b2e4      	uxtb	r4, r4
 80016dc:	e7df      	b.n	800169e <input_string+0x11a>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 80016de:	001c      	movs	r4, r3
 80016e0:	e7dd      	b.n	800169e <input_string+0x11a>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 80016e2:	2400      	movs	r4, #0
 80016e4:	e7db      	b.n	800169e <input_string+0x11a>
				if(keyY == 0) input_keyboard[input_sel > 0 ? --input_sel : 0] = '\0';
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d107      	bne.n	80016fa <input_string+0x176>
 80016ea:	2f00      	cmp	r7, #0
 80016ec:	d001      	beq.n	80016f2 <input_string+0x16e>
 80016ee:	3f01      	subs	r7, #1
 80016f0:	b2ff      	uxtb	r7, r7
 80016f2:	2300      	movs	r3, #0
 80016f4:	9a03      	ldr	r2, [sp, #12]
 80016f6:	55d3      	strb	r3, [r2, r7]
				if(keyY == 2) break;
 80016f8:	e74f      	b.n	800159a <input_string+0x16>
 80016fa:	2c02      	cmp	r4, #2
 80016fc:	d000      	beq.n	8001700 <input_string+0x17c>
 80016fe:	e74c      	b.n	800159a <input_string+0x16>
	firF = 0;
 8001700:	2200      	movs	r2, #0
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <input_string+0x1a8>)
}
 8001704:	9803      	ldr	r0, [sp, #12]
	firF = 0;
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	b00f      	add	sp, #60	; 0x3c
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 800170c:	2500      	movs	r5, #0
		if(joy_result == down){
 800170e:	e7c6      	b.n	800169e <input_string+0x11a>
 8001710:	08006377 	.word	0x08006377
 8001714:	080063a5 	.word	0x080063a5
 8001718:	080065dc 	.word	0x080065dc
 800171c:	20000000 	.word	0x20000000
 8001720:	080063a7 	.word	0x080063a7
 8001724:	080063a9 	.word	0x080063a9
 8001728:	200009cc 	.word	0x200009cc
 800172c:	2000000c 	.word	0x2000000c

08001730 <logShift>:
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 8001730:	234a      	movs	r3, #74	; 0x4a
 8001732:	214a      	movs	r1, #74	; 0x4a
 8001734:	001a      	movs	r2, r3
void logShift(uint8_t workCate){
 8001736:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 8001738:	4f4e      	ldr	r7, [pc, #312]	; (8001874 <logShift+0x144>)
 800173a:	4249      	negs	r1, r1
 800173c:	783c      	ldrb	r4, [r7, #0]
void logShift(uint8_t workCate){
 800173e:	0005      	movs	r5, r0
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 8001740:	4361      	muls	r1, r4
 8001742:	1e60      	subs	r0, r4, #1
 8001744:	18c9      	adds	r1, r1, r3
 8001746:	4343      	muls	r3, r0
 8001748:	4e4b      	ldr	r6, [pc, #300]	; (8001878 <logShift+0x148>)
 800174a:	18c9      	adds	r1, r1, r3
void logShift(uint8_t workCate){
 800174c:	b085      	sub	sp, #20
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800174e:	4362      	muls	r2, r4
 8001750:	484a      	ldr	r0, [pc, #296]	; (800187c <logShift+0x14c>)
 8001752:	1989      	adds	r1, r1, r6
 8001754:	f003 fc45 	bl	8004fe2 <memmove>
	if(work_cnt < 5) work_cnt++;
 8001758:	2c04      	cmp	r4, #4
 800175a:	d801      	bhi.n	8001760 <logShift+0x30>
 800175c:	3401      	adds	r4, #1
 800175e:	703c      	strb	r4, [r7, #0]
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001760:	2405      	movs	r4, #5
 8001762:	436c      	muls	r4, r5
	get_time();
 8001764:	f7ff fd82 	bl	800126c <get_time>
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001768:	4845      	ldr	r0, [pc, #276]	; (8001880 <logShift+0x150>)
 800176a:	4946      	ldr	r1, [pc, #280]	; (8001884 <logShift+0x154>)
 800176c:	1900      	adds	r0, r0, r4
 800176e:	784b      	ldrb	r3, [r1, #1]
 8001770:	780a      	ldrb	r2, [r1, #0]
 8001772:	9003      	str	r0, [sp, #12]
 8001774:	7908      	ldrb	r0, [r1, #4]
 8001776:	9002      	str	r0, [sp, #8]
 8001778:	78c8      	ldrb	r0, [r1, #3]
 800177a:	9001      	str	r0, [sp, #4]
 800177c:	7889      	ldrb	r1, [r1, #2]
 800177e:	0030      	movs	r0, r6
 8001780:	9100      	str	r1, [sp, #0]
 8001782:	4941      	ldr	r1, [pc, #260]	; (8001888 <logShift+0x158>)
 8001784:	f003 fd68 	bl	8005258 <siprintf>
	switch(workCate){
 8001788:	2d03      	cmp	r5, #3
 800178a:	d82d      	bhi.n	80017e8 <logShift+0xb8>
 800178c:	0028      	movs	r0, r5
 800178e:	4c3f      	ldr	r4, [pc, #252]	; (800188c <logShift+0x15c>)
 8001790:	4d3f      	ldr	r5, [pc, #252]	; (8001890 <logShift+0x160>)
 8001792:	f7fe fcc3 	bl	800011c <__gnu_thumb1_case_uqi>
 8001796:	2b02      	.short	0x2b02
 8001798:	5a4d      	.short	0x5a4d
		sprintf(ptLog[0].content1, "%s/%s", pt[CURXY].name, ptCate[pt[CURXY].cate - 1]);
 800179a:	2505      	movs	r5, #5
 800179c:	2406      	movs	r4, #6
 800179e:	2614      	movs	r6, #20
 80017a0:	4f3c      	ldr	r7, [pc, #240]	; (8001894 <logShift+0x164>)
 80017a2:	493d      	ldr	r1, [pc, #244]	; (8001898 <logShift+0x168>)
 80017a4:	787a      	ldrb	r2, [r7, #1]
 80017a6:	783b      	ldrb	r3, [r7, #0]
 80017a8:	1aaa      	subs	r2, r5, r2
 80017aa:	4362      	muls	r2, r4
 80017ac:	18d2      	adds	r2, r2, r3
 80017ae:	4372      	muls	r2, r6
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <logShift+0x16c>)
 80017b2:	4837      	ldr	r0, [pc, #220]	; (8001890 <logShift+0x160>)
 80017b4:	189a      	adds	r2, r3, r2
 80017b6:	7ad3      	ldrb	r3, [r2, #11]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	436b      	muls	r3, r5
 80017bc:	18cb      	adds	r3, r1, r3
 80017be:	4938      	ldr	r1, [pc, #224]	; (80018a0 <logShift+0x170>)
 80017c0:	f003 fd4a 	bl	8005258 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", pt[CURXY].store, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	1aed      	subs	r5, r5, r3
 80017c8:	436c      	muls	r4, r5
 80017ca:	783d      	ldrb	r5, [r7, #0]
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <logShift+0x16c>)
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	4366      	muls	r6, r4
 80017d2:	199e      	adds	r6, r3, r6
 80017d4:	7c73      	ldrb	r3, [r6, #17]
 80017d6:	89b2      	ldrh	r2, [r6, #12]
 80017d8:	3301      	adds	r3, #1
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 80017da:	7cb1      	ldrb	r1, [r6, #18]
 80017dc:	482b      	ldr	r0, [pc, #172]	; (800188c <logShift+0x15c>)
 80017de:	3101      	adds	r1, #1
 80017e0:	9100      	str	r1, [sp, #0]
 80017e2:	4930      	ldr	r1, [pc, #192]	; (80018a4 <logShift+0x174>)
 80017e4:	f003 fd38 	bl	8005258 <siprintf>
}
 80017e8:	b005      	add	sp, #20
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(ptLog[0].content1, "%s/%s", pt[CURXY].name, ptCate[pt[CURXY].cate - 1]);
 80017ec:	2505      	movs	r5, #5
 80017ee:	2406      	movs	r4, #6
 80017f0:	2614      	movs	r6, #20
 80017f2:	4f28      	ldr	r7, [pc, #160]	; (8001894 <logShift+0x164>)
 80017f4:	4928      	ldr	r1, [pc, #160]	; (8001898 <logShift+0x168>)
 80017f6:	787a      	ldrb	r2, [r7, #1]
 80017f8:	783b      	ldrb	r3, [r7, #0]
 80017fa:	1aaa      	subs	r2, r5, r2
 80017fc:	4362      	muls	r2, r4
 80017fe:	18d2      	adds	r2, r2, r3
 8001800:	4372      	muls	r2, r6
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <logShift+0x16c>)
 8001804:	4822      	ldr	r0, [pc, #136]	; (8001890 <logShift+0x160>)
 8001806:	189a      	adds	r2, r3, r2
 8001808:	7ad3      	ldrb	r3, [r2, #11]
 800180a:	3b01      	subs	r3, #1
 800180c:	436b      	muls	r3, r5
 800180e:	18cb      	adds	r3, r1, r3
 8001810:	4923      	ldr	r1, [pc, #140]	; (80018a0 <logShift+0x170>)
 8001812:	f003 fd21 	bl	8005258 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <logShift+0x178>)
 800181a:	1aed      	subs	r5, r5, r3
 800181c:	436c      	muls	r4, r5
 800181e:	783d      	ldrb	r5, [r7, #0]
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <logShift+0x16c>)
 8001822:	1964      	adds	r4, r4, r5
 8001824:	4366      	muls	r6, r4
 8001826:	199e      	adds	r6, r3, r6
 8001828:	7c73      	ldrb	r3, [r6, #17]
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	e7d4      	b.n	80017da <logShift+0xaa>
		sprintf(ptLog[0].content1, "Sear:%s", find_name);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <logShift+0x17c>)
 8001832:	491f      	ldr	r1, [pc, #124]	; (80018b0 <logShift+0x180>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	0028      	movs	r0, r5
 8001838:	f003 fd0e 	bl	8005258 <siprintf>
		sprintf(ptLog[0].content2, "Num of Find:%d", findC);
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <logShift+0x184>)
 800183e:	491e      	ldr	r1, [pc, #120]	; (80018b8 <logShift+0x188>)
 8001840:	781a      	ldrb	r2, [r3, #0]
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 8001842:	0020      	movs	r0, r4
 8001844:	f003 fd08 	bl	8005258 <siprintf>
}
 8001848:	e7ce      	b.n	80017e8 <logShift+0xb8>
		sprintf(ptLog[0].content1, "S(%d,%d) E(%d,%d)", ptionS.x + 1, ptionS.y + 1, ptionE.x + 1, ptionE.y + 1);
 800184a:	481c      	ldr	r0, [pc, #112]	; (80018bc <logShift+0x18c>)
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <logShift+0x190>)
 800184e:	7841      	ldrb	r1, [r0, #1]
 8001850:	7853      	ldrb	r3, [r2, #1]
 8001852:	3101      	adds	r1, #1
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	9101      	str	r1, [sp, #4]
 8001858:	7801      	ldrb	r1, [r0, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	3101      	adds	r1, #1
 800185e:	3201      	adds	r2, #1
 8001860:	9100      	str	r1, [sp, #0]
 8001862:	0028      	movs	r0, r5
 8001864:	4917      	ldr	r1, [pc, #92]	; (80018c4 <logShift+0x194>)
 8001866:	f003 fcf7 	bl	8005258 <siprintf>
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <logShift+0x198>)
 800186c:	4917      	ldr	r1, [pc, #92]	; (80018cc <logShift+0x19c>)
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	e7e7      	b.n	8001842 <logShift+0x112>
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	20000e84 	.word	0x20000e84
 8001878:	20000ca8 	.word	0x20000ca8
 800187c:	20000cf2 	.word	0x20000cf2
 8001880:	08006664 	.word	0x08006664
 8001884:	20000029 	.word	0x20000029
 8001888:	080063ab 	.word	0x080063ab
 800188c:	20000cdc 	.word	0x20000cdc
 8001890:	20000cc6 	.word	0x20000cc6
 8001894:	20000e82 	.word	0x20000e82
 8001898:	08006614 	.word	0x08006614
 800189c:	200009d8 	.word	0x200009d8
 80018a0:	080063c7 	.word	0x080063c7
 80018a4:	080063cd 	.word	0x080063cd
 80018a8:	2000002f 	.word	0x2000002f
 80018ac:	200009c0 	.word	0x200009c0
 80018b0:	080063db 	.word	0x080063db
 80018b4:	200009be 	.word	0x200009be
 80018b8:	080063e3 	.word	0x080063e3
 80018bc:	20000e79 	.word	0x20000e79
 80018c0:	20000e7b 	.word	0x20000e7b
 80018c4:	080063f2 	.word	0x080063f2
 80018c8:	20000e78 	.word	0x20000e78
 80018cc:	08006404 	.word	0x08006404

080018d0 <start>:
uint8_t start(void){
 80018d0:	b570      	push	{r4, r5, r6, lr}
	led_clear();
 80018d2:	f7fe ff67 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++)
 80018d6:	2400      	movs	r4, #0
		if(i / 6 == 0 || i / 6 == 3) led_color(i, 4, 0, 0);
 80018d8:	2c05      	cmp	r4, #5
 80018da:	d903      	bls.n	80018e4 <start+0x14>
 80018dc:	0023      	movs	r3, r4
 80018de:	3b12      	subs	r3, #18
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d83b      	bhi.n	800195c <start+0x8c>
 80018e4:	2300      	movs	r3, #0
 80018e6:	2104      	movs	r1, #4
 80018e8:	001a      	movs	r2, r3
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 80018ea:	0020      	movs	r0, r4
 80018ec:	f7fe ff24 	bl	8000738 <led_color>
	for(uint8_t i = 0 ; i < 36 ; i++)
 80018f0:	3401      	adds	r4, #1
 80018f2:	b2e4      	uxtb	r4, r4
 80018f4:	2c24      	cmp	r4, #36	; 0x24
 80018f6:	d1ef      	bne.n	80018d8 <start+0x8>
	led_update();
 80018f8:	f7fe ff2a 	bl	8000750 <led_update>
	SSD1306_Clear();
 80018fc:	f7ff fabc 	bl	8000e78 <SSD1306_Clear>
 8001900:	3c0c      	subs	r4, #12
		SSD1306_GotoXY(43, 24 + i);
 8001902:	0021      	movs	r1, r4
 8001904:	202b      	movs	r0, #43	; 0x2b
 8001906:	f7ff f915 	bl	8000b34 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 800190a:	4d1f      	ldr	r5, [pc, #124]	; (8001988 <start+0xb8>)
 800190c:	2200      	movs	r2, #0
 800190e:	0029      	movs	r1, r5
 8001910:	481e      	ldr	r0, [pc, #120]	; (800198c <start+0xbc>)
 8001912:	f7ff f94b 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY(39, 24);
 8001916:	2118      	movs	r1, #24
 8001918:	2027      	movs	r0, #39	; 0x27
 800191a:	f7ff f90b 	bl	8000b34 <SSD1306_GotoXY>
	for(uint8_t i = 0 ; i < 9 ; i++){
 800191e:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	0029      	movs	r1, r5
 8001924:	481a      	ldr	r0, [pc, #104]	; (8001990 <start+0xc0>)
 8001926:	f7ff f941 	bl	8000bac <SSD1306_Puts>
	for(uint8_t i = 0 ; i < 9 ; i++){
 800192a:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 800192c:	f7ff fa82 	bl	8000e34 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 8001930:	20c8      	movs	r0, #200	; 0xc8
 8001932:	f001 fa21 	bl	8002d78 <HAL_Delay>
	for(uint8_t i = 0 ; i < 9 ; i++){
 8001936:	2c21      	cmp	r4, #33	; 0x21
 8001938:	d1e3      	bne.n	8001902 <start+0x32>
	HAL_Delay(1000);
 800193a:	20fa      	movs	r0, #250	; 0xfa
 800193c:	0080      	lsls	r0, r0, #2
 800193e:	f001 fa1b 	bl	8002d78 <HAL_Delay>
	SSD1306_Clear();
 8001942:	f7ff fa99 	bl	8000e78 <SSD1306_Clear>
	led_clear();
 8001946:	f7fe ff2d 	bl	80007a4 <led_clear>
	led_update();
 800194a:	f7fe ff01 	bl	8000750 <led_update>
	if(!eepReadData(0)) return 1;
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fb58 	bl	8001004 <eepReadData>
 8001954:	4243      	negs	r3, r0
 8001956:	4158      	adcs	r0, r3
}
 8001958:	b2c0      	uxtb	r0, r0
 800195a:	bd70      	pop	{r4, r5, r6, pc}
		else if(i / 6 == 1 || i / 6 == 4) led_color(i, 0, 4, 0);
 800195c:	1fa3      	subs	r3, r4, #6
 800195e:	2b05      	cmp	r3, #5
 8001960:	d902      	bls.n	8001968 <start+0x98>
 8001962:	3b12      	subs	r3, #18
 8001964:	2b05      	cmp	r3, #5
 8001966:	d803      	bhi.n	8001970 <start+0xa0>
 8001968:	2300      	movs	r3, #0
 800196a:	2204      	movs	r2, #4
 800196c:	0019      	movs	r1, r3
 800196e:	e7bc      	b.n	80018ea <start+0x1a>
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 8001970:	0023      	movs	r3, r4
 8001972:	3b0c      	subs	r3, #12
 8001974:	2b05      	cmp	r3, #5
 8001976:	d902      	bls.n	800197e <start+0xae>
 8001978:	3b12      	subs	r3, #18
 800197a:	2b05      	cmp	r3, #5
 800197c:	d8b8      	bhi.n	80018f0 <start+0x20>
 800197e:	2200      	movs	r2, #0
 8001980:	2304      	movs	r3, #4
 8001982:	0011      	movs	r1, r2
 8001984:	e7b1      	b.n	80018ea <start+0x1a>
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000000 	.word	0x20000000
 800198c:	08006415 	.word	0x08006415
 8001990:	0800641c 	.word	0x0800641c

08001994 <time_setting>:
void time_setting(void){
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	b08b      	sub	sp, #44	; 0x2c
	while(!read_sw()){
 8001998:	f7ff fcea 	bl	8001370 <read_sw>
 800199c:	1e04      	subs	r4, r0, #0
 800199e:	d007      	beq.n	80019b0 <time_setting+0x1c>
	set_time();
 80019a0:	f7ff fc74 	bl	800128c <set_time>
	eepWriteData(0, 1);
 80019a4:	2101      	movs	r1, #1
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fb1c 	bl	8000fe4 <eepWriteData>
}
 80019ac:	b00b      	add	sp, #44	; 0x2c
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		get_adc();
 80019b0:	f7ff fc7c 	bl	80012ac <get_adc>
		get_sel(&sel, 5, 0, 1);
 80019b4:	4e3f      	ldr	r6, [pc, #252]	; (8001ab4 <time_setting+0x120>)
 80019b6:	0022      	movs	r2, r4
 80019b8:	2301      	movs	r3, #1
 80019ba:	2105      	movs	r1, #5
 80019bc:	0030      	movs	r0, r6
 80019be:	f7ff fca1 	bl	8001304 <get_sel>
		if(sel == 0) get_sel(&time.year, 99, 0, 0);
 80019c2:	7832      	ldrb	r2, [r6, #0]
 80019c4:	4c3c      	ldr	r4, [pc, #240]	; (8001ab8 <time_setting+0x124>)
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d104      	bne.n	80019d4 <time_setting+0x40>
 80019ca:	0013      	movs	r3, r2
 80019cc:	2163      	movs	r1, #99	; 0x63
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fc98 	bl	8001304 <get_sel>
		if(sel == 1) get_sel(&time.month, 12, 1, 0);
 80019d4:	7832      	ldrb	r2, [r6, #0]
 80019d6:	2a01      	cmp	r2, #1
 80019d8:	d104      	bne.n	80019e4 <time_setting+0x50>
 80019da:	2300      	movs	r3, #0
 80019dc:	210c      	movs	r1, #12
 80019de:	1c60      	adds	r0, r4, #1
 80019e0:	f7ff fc90 	bl	8001304 <get_sel>
		if(sel == 2) get_sel(&time.day, lastDay[time.month - 1], 1, 0);
 80019e4:	7833      	ldrb	r3, [r6, #0]
 80019e6:	4f35      	ldr	r7, [pc, #212]	; (8001abc <time_setting+0x128>)
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d108      	bne.n	80019fe <time_setting+0x6a>
 80019ec:	7863      	ldrb	r3, [r4, #1]
 80019ee:	2201      	movs	r2, #1
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	1ca0      	adds	r0, r4, #2
 80019f8:	2300      	movs	r3, #0
 80019fa:	f7ff fc83 	bl	8001304 <get_sel>
		if(sel == 3) get_sel(&time.hour, 23, 0, 0);
 80019fe:	7833      	ldrb	r3, [r6, #0]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d105      	bne.n	8001a10 <time_setting+0x7c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2117      	movs	r1, #23
 8001a08:	001a      	movs	r2, r3
 8001a0a:	1ce0      	adds	r0, r4, #3
 8001a0c:	f7ff fc7a 	bl	8001304 <get_sel>
		if(sel == 4) get_sel(&time.min, 59, 0, 0);
 8001a10:	7833      	ldrb	r3, [r6, #0]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d105      	bne.n	8001a22 <time_setting+0x8e>
 8001a16:	2300      	movs	r3, #0
 8001a18:	213b      	movs	r1, #59	; 0x3b
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	1d20      	adds	r0, r4, #4
 8001a1e:	f7ff fc71 	bl	8001304 <get_sel>
		if(sel == 5) get_sel(&time.sec, 59, 0, 0);
 8001a22:	7833      	ldrb	r3, [r6, #0]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d105      	bne.n	8001a34 <time_setting+0xa0>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	213b      	movs	r1, #59	; 0x3b
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	1d60      	adds	r0, r4, #5
 8001a30:	f7ff fc68 	bl	8001304 <get_sel>
		if(time.day > lastDay[time.month - 1]) time.day = lastDay[time.month - 1];
 8001a34:	7865      	ldrb	r5, [r4, #1]
 8001a36:	78a2      	ldrb	r2, [r4, #2]
 8001a38:	197f      	adds	r7, r7, r5
 8001a3a:	3f01      	subs	r7, #1
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d900      	bls.n	8001a44 <time_setting+0xb0>
 8001a42:	70a3      	strb	r3, [r4, #2]
		joy_result = basic;
 8001a44:	2200      	movs	r2, #0
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <time_setting+0x12c>)
		POS pos[2] = {{0, 2}, {0, 4}};
 8001a48:	491e      	ldr	r1, [pc, #120]	; (8001ac4 <time_setting+0x130>)
		joy_result = basic;
 8001a4a:	701a      	strb	r2, [r3, #0]
		POS pos[2] = {{0, 2}, {0, 4}};
 8001a4c:	a802      	add	r0, sp, #8
 8001a4e:	3204      	adds	r2, #4
 8001a50:	f003 fabe 	bl	8004fd0 <memcpy>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001a54:	210a      	movs	r1, #10
 8001a56:	7833      	ldrb	r3, [r6, #0]
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <time_setting+0x134>)
 8001a5a:	4359      	muls	r1, r3
 8001a5c:	1852      	adds	r2, r2, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d117      	bne.n	8001a92 <time_setting+0xfe>
 8001a62:	23fa      	movs	r3, #250	; 0xfa
 8001a64:	7825      	ldrb	r5, [r4, #0]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	18ed      	adds	r5, r5, r3
 8001a6a:	ac05      	add	r4, sp, #20
 8001a6c:	002b      	movs	r3, r5
 8001a6e:	0020      	movs	r0, r4
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <time_setting+0x138>)
 8001a72:	f003 fbf1 	bl	8005258 <siprintf>
		char* array[2] = { "RTC Time setting.", bf };
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <time_setting+0x13c>)
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <time_setting+0x140>)
		char* array[2] = { "RTC Time setting.", bf };
 8001a7a:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	aa03      	add	r2, sp, #12
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	a802      	add	r0, sp, #8
 8001a84:	3b01      	subs	r3, #1
		char* array[2] = { "RTC Time setting.", bf };
 8001a86:	9404      	str	r4, [sp, #16]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a88:	f7ff fbc6 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 8001a8c:	f7ff f9d2 	bl	8000e34 <SSD1306_UpdateScreen>
 8001a90:	e782      	b.n	8001998 <time_setting+0x4>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d0e9      	beq.n	8001a6a <time_setting+0xd6>
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d101      	bne.n	8001a9e <time_setting+0x10a>
 8001a9a:	78a5      	ldrb	r5, [r4, #2]
 8001a9c:	e7e5      	b.n	8001a6a <time_setting+0xd6>
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d101      	bne.n	8001aa6 <time_setting+0x112>
 8001aa2:	78e5      	ldrb	r5, [r4, #3]
 8001aa4:	e7e1      	b.n	8001a6a <time_setting+0xd6>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d101      	bne.n	8001aae <time_setting+0x11a>
 8001aaa:	7925      	ldrb	r5, [r4, #4]
 8001aac:	e7dd      	b.n	8001a6a <time_setting+0xd6>
 8001aae:	7965      	ldrb	r5, [r4, #5]
 8001ab0:	e7db      	b.n	8001a6a <time_setting+0xd6>
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20000e7f 	.word	0x20000e7f
 8001ab8:	20000029 	.word	0x20000029
 8001abc:	08006608 	.word	0x08006608
 8001ac0:	200009cc 	.word	0x200009cc
 8001ac4:	08005930 	.word	0x08005930
 8001ac8:	08006628 	.word	0x08006628
 8001acc:	08006424 	.word	0x08006424
 8001ad0:	0800642c 	.word	0x0800642c
 8001ad4:	0800643e 	.word	0x0800643e

08001ad8 <position_set>:

void position_set(void){
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS new = temp;
 8001ada:	4f57      	ldr	r7, [pc, #348]	; (8001c38 <position_set+0x160>)
void position_set(void){
 8001adc:	b089      	sub	sp, #36	; 0x24
	POS new = temp;
 8001ade:	783c      	ldrb	r4, [r7, #0]
 8001ae0:	787e      	ldrb	r6, [r7, #1]
	while(!read_sw()){
 8001ae2:	f7ff fc45 	bl	8001370 <read_sw>
 8001ae6:	1e05      	subs	r5, r0, #0
 8001ae8:	d004      	beq.n	8001af4 <position_set+0x1c>
		}
		if(new.x > 5) new.x = temp.x;
		if(new.y > 5) new.y = temp.y;
		temp = new;
	}
	firF = 0;
 8001aea:	2200      	movs	r2, #0
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <position_set+0x164>)
 8001aee:	701a      	strb	r2, [r3, #0]
}
 8001af0:	b009      	add	sp, #36	; 0x24
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	783a      	ldrb	r2, [r7, #0]
 8001af8:	4951      	ldr	r1, [pc, #324]	; (8001c40 <position_set+0x168>)
 8001afa:	3301      	adds	r3, #1
 8001afc:	3201      	adds	r2, #1
 8001afe:	a803      	add	r0, sp, #12
 8001b00:	f003 fbaa 	bl	8005258 <siprintf>
		ssd1306_putsXY(1, 6, bf, 0);
 8001b04:	002b      	movs	r3, r5
 8001b06:	2106      	movs	r1, #6
 8001b08:	2001      	movs	r0, #1
 8001b0a:	aa03      	add	r2, sp, #12
 8001b0c:	f7ff fb74 	bl	80011f8 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8001b10:	f7ff f990 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 8001b14:	f7fe fe46 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001b18:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <position_set+0x16c>)
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	9b01      	ldr	r3, [sp, #4]
 8001b1e:	7ad9      	ldrb	r1, [r3, #11]
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d100      	bne.n	8001b26 <position_set+0x4e>
 8001b24:	e084      	b.n	8001c30 <position_set+0x158>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2104      	movs	r1, #4
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	0028      	movs	r0, r5
 8001b2e:	f7fe fe03 	bl	8000738 <led_color>
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	3501      	adds	r5, #1
 8001b36:	3314      	adds	r3, #20
 8001b38:	b2ed      	uxtb	r5, r5
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	2d24      	cmp	r5, #36	; 0x24
 8001b3e:	d1ed      	bne.n	8001b1c <position_set+0x44>
		led_color(CURXY, 4, 4, 4);
 8001b40:	2305      	movs	r3, #5
 8001b42:	7878      	ldrb	r0, [r7, #1]
 8001b44:	1a18      	subs	r0, r3, r0
 8001b46:	3301      	adds	r3, #1
 8001b48:	4358      	muls	r0, r3
 8001b4a:	783b      	ldrb	r3, [r7, #0]
 8001b4c:	18c0      	adds	r0, r0, r3
 8001b4e:	2304      	movs	r3, #4
 8001b50:	b2c0      	uxtb	r0, r0
 8001b52:	001a      	movs	r2, r3
 8001b54:	0019      	movs	r1, r3
 8001b56:	f7fe fdef 	bl	8000738 <led_color>
		led_update();
 8001b5a:	f7fe fdf9 	bl	8000750 <led_update>
		if(cnt > 150){
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <position_set+0x170>)
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	2a96      	cmp	r2, #150	; 0x96
 8001b64:	d95b      	bls.n	8001c1e <position_set+0x146>
			cnt = 0;
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
			if(JOY_U) do{ new.y++; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <position_set+0x174>)
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <position_set+0x178>)
 8001b6e:	885b      	ldrh	r3, [r3, #2]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d911      	bls.n	8001b98 <position_set+0xc0>
 8001b74:	3601      	adds	r6, #1
 8001b76:	b2f5      	uxtb	r5, r6
 8001b78:	2305      	movs	r3, #5
 8001b7a:	1b58      	subs	r0, r3, r5
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4358      	muls	r0, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	1820      	adds	r0, r4, r0
 8001b84:	001a      	movs	r2, r3
 8001b86:	2104      	movs	r1, #4
 8001b88:	b2c0      	uxtb	r0, r0
 8001b8a:	f7fe fe15 	bl	80007b8 <led_cmp>
 8001b8e:	002e      	movs	r6, r5
 8001b90:	3501      	adds	r5, #1
 8001b92:	b2ed      	uxtb	r5, r5
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d1ef      	bne.n	8001b78 <position_set+0xa0>
			if(JOY_D) do{ new.y--; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001b98:	2296      	movs	r2, #150	; 0x96
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <position_set+0x174>)
 8001b9c:	0052      	lsls	r2, r2, #1
 8001b9e:	885b      	ldrh	r3, [r3, #2]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d211      	bcs.n	8001bc8 <position_set+0xf0>
 8001ba4:	3e01      	subs	r6, #1
 8001ba6:	b2f5      	uxtb	r5, r6
 8001ba8:	2305      	movs	r3, #5
 8001baa:	1b58      	subs	r0, r3, r5
 8001bac:	3301      	adds	r3, #1
 8001bae:	4358      	muls	r0, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	1820      	adds	r0, r4, r0
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	b2c0      	uxtb	r0, r0
 8001bba:	f7fe fdfd 	bl	80007b8 <led_cmp>
 8001bbe:	002e      	movs	r6, r5
 8001bc0:	3d01      	subs	r5, #1
 8001bc2:	b2ed      	uxtb	r5, r5
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d1ef      	bne.n	8001ba8 <position_set+0xd0>
			if(JOY_L) do{ new.x--; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001bc8:	2296      	movs	r2, #150	; 0x96
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <position_set+0x174>)
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d20f      	bcs.n	8001bf4 <position_set+0x11c>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	2506      	movs	r5, #6
 8001bd8:	1b9b      	subs	r3, r3, r6
 8001bda:	435d      	muls	r5, r3
 8001bdc:	b2ed      	uxtb	r5, r5
 8001bde:	2300      	movs	r3, #0
 8001be0:	3c01      	subs	r4, #1
 8001be2:	b2e4      	uxtb	r4, r4
 8001be4:	1960      	adds	r0, r4, r5
 8001be6:	001a      	movs	r2, r3
 8001be8:	2104      	movs	r1, #4
 8001bea:	b2c0      	uxtb	r0, r0
 8001bec:	f7fe fde4 	bl	80007b8 <led_cmp>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1f4      	bne.n	8001bde <position_set+0x106>
			if(JOY_R) do{ new.x++; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <position_set+0x174>)
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <position_set+0x178>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d90f      	bls.n	8001c1e <position_set+0x146>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	2506      	movs	r5, #6
 8001c02:	1b9b      	subs	r3, r3, r6
 8001c04:	435d      	muls	r5, r3
 8001c06:	b2ed      	uxtb	r5, r5
 8001c08:	2300      	movs	r3, #0
 8001c0a:	3401      	adds	r4, #1
 8001c0c:	b2e4      	uxtb	r4, r4
 8001c0e:	1960      	adds	r0, r4, r5
 8001c10:	001a      	movs	r2, r3
 8001c12:	2104      	movs	r1, #4
 8001c14:	b2c0      	uxtb	r0, r0
 8001c16:	f7fe fdcf 	bl	80007b8 <led_cmp>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d1f4      	bne.n	8001c08 <position_set+0x130>
		if(new.x > 5) new.x = temp.x;
 8001c1e:	2c05      	cmp	r4, #5
 8001c20:	d900      	bls.n	8001c24 <position_set+0x14c>
 8001c22:	783c      	ldrb	r4, [r7, #0]
		if(new.y > 5) new.y = temp.y;
 8001c24:	2e05      	cmp	r6, #5
 8001c26:	d900      	bls.n	8001c2a <position_set+0x152>
 8001c28:	787e      	ldrb	r6, [r7, #1]
		temp = new;
 8001c2a:	703c      	strb	r4, [r7, #0]
 8001c2c:	707e      	strb	r6, [r7, #1]
 8001c2e:	e758      	b.n	8001ae2 <position_set+0xa>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001c30:	000b      	movs	r3, r1
 8001c32:	2204      	movs	r2, #4
 8001c34:	e77a      	b.n	8001b2c <position_set+0x54>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000e82 	.word	0x20000e82
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	08006448 	.word	0x08006448
 8001c44:	200009d8 	.word	0x200009d8
 8001c48:	200009bc 	.word	0x200009bc
 8001c4c:	200009b2 	.word	0x200009b2
 8001c50:	00000dac 	.word	0x00000dac

08001c54 <save_mode>:

void save_mode(void){
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t store_num = 1, store_max;
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001c56:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <save_mode+0x1e0>)
void save_mode(void){
 8001c58:	b0a5      	sub	sp, #148	; 0x94
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001c5a:	781e      	ldrb	r6, [r3, #0]
 8001c5c:	23c8      	movs	r3, #200	; 0xc8
 8001c5e:	2e00      	cmp	r6, #0
 8001c60:	d006      	beq.n	8001c70 <save_mode+0x1c>
 8001c62:	3b64      	subs	r3, #100	; 0x64
 8001c64:	2e01      	cmp	r6, #1
 8001c66:	d003      	beq.n	8001c70 <save_mode+0x1c>
 8001c68:	3b32      	subs	r3, #50	; 0x32
 8001c6a:	2e02      	cmp	r6, #2
 8001c6c:	d000      	beq.n	8001c70 <save_mode+0x1c>
 8001c6e:	3b28      	subs	r3, #40	; 0x28
 8001c70:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <save_mode+0x1e4>)
 8001c72:	7013      	strb	r3, [r2, #0]
	if(!firF){
 8001c74:	4b71      	ldr	r3, [pc, #452]	; (8001e3c <save_mode+0x1e8>)
 8001c76:	7819      	ldrb	r1, [r3, #0]
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d156      	bne.n	8001d2a <save_mode+0xd6>
		firF = 1;
 8001c7c:	2501      	movs	r5, #1
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001c7e:	ac04      	add	r4, sp, #16
 8001c80:	2210      	movs	r2, #16
 8001c82:	0020      	movs	r0, r4
		firF = 1;
 8001c84:	701d      	strb	r5, [r3, #0]
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001c86:	f003 f9bf 	bl	8005008 <memset>
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <save_mode+0x1ec>)
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	7262      	strb	r2, [r4, #9]
 8001c92:	3303      	adds	r3, #3
 8001c94:	7063      	strb	r3, [r4, #1]
 8001c96:	2303      	movs	r3, #3
		char bf[4][20];
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001c98:	4372      	muls	r2, r6
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001c9a:	7163      	strb	r3, [r4, #5]
 8001c9c:	195b      	adds	r3, r3, r5
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001c9e:	4e69      	ldr	r6, [pc, #420]	; (8001e44 <save_mode+0x1f0>)
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001ca0:	71e3      	strb	r3, [r4, #7]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	72e3      	strb	r3, [r4, #11]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001ca6:	af10      	add	r7, sp, #64	; 0x40
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001ca8:	195b      	adds	r3, r3, r5
 8001caa:	7363      	strb	r3, [r4, #13]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001cac:	18b2      	adds	r2, r6, r2
 8001cae:	0038      	movs	r0, r7
 8001cb0:	4965      	ldr	r1, [pc, #404]	; (8001e48 <save_mode+0x1f4>)
		POS pos[8] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001cb2:	70e5      	strb	r5, [r4, #3]
 8001cb4:	7125      	strb	r5, [r4, #4]
 8001cb6:	71a5      	strb	r5, [r4, #6]
 8001cb8:	7225      	strb	r5, [r4, #8]
 8001cba:	72a5      	strb	r5, [r4, #10]
 8001cbc:	7325      	strb	r5, [r4, #12]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001cbe:	f003 facb 	bl	8005258 <siprintf>
		sprintf(bf[1], "Name:%s", input_name[0] > 0 ? input_name : "(NONE)");
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <save_mode+0x1f8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	7813      	ldrb	r3, [r2, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <save_mode+0x7a>
 8001ccc:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <save_mode+0x1fc>)
 8001cce:	ae15      	add	r6, sp, #84	; 0x54
 8001cd0:	4960      	ldr	r1, [pc, #384]	; (8001e54 <save_mode+0x200>)
 8001cd2:	0030      	movs	r0, r6
 8001cd4:	f003 fac0 	bl	8005258 <siprintf>
		sprintf(bf[2], "Store: %d/%d", store_num, store_max);
 8001cd8:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <save_mode+0x1e4>)
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <save_mode+0x204>)
 8001cdc:	ad1a      	add	r5, sp, #104	; 0x68
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	495e      	ldr	r1, [pc, #376]	; (8001e5c <save_mode+0x208>)
 8001ce4:	0028      	movs	r0, r5
 8001ce6:	f003 fab7 	bl	8005258 <siprintf>
		sprintf(bf[3], "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001cea:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <save_mode+0x20c>)
 8001cec:	ac1f      	add	r4, sp, #124	; 0x7c
 8001cee:	7853      	ldrb	r3, [r2, #1]
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	495c      	ldr	r1, [pc, #368]	; (8001e64 <save_mode+0x210>)
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	3201      	adds	r2, #1
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	f003 faad 	bl	8005258 <siprintf>
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001cfe:	2300      	movs	r3, #0
 8001d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <save_mode+0x214>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d04:	4959      	ldr	r1, [pc, #356]	; (8001e6c <save_mode+0x218>)
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d06:	9308      	str	r3, [sp, #32]
 8001d08:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <save_mode+0x21c>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d0a:	aa08      	add	r2, sp, #32
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <save_mode+0x220>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d10:	a804      	add	r0, sp, #16
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d12:	930e      	str	r3, [sp, #56]	; 0x38
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d14:	2308      	movs	r3, #8
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	3b07      	subs	r3, #7
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001d1a:	970a      	str	r7, [sp, #40]	; 0x28
 8001d1c:	960b      	str	r6, [sp, #44]	; 0x2c
 8001d1e:	950c      	str	r5, [sp, #48]	; 0x30
 8001d20:	940d      	str	r4, [sp, #52]	; 0x34
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d22:	f7ff fa79 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 8001d26:	f7ff f885 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	get_adc();
 8001d2a:	f7ff fabf 	bl	80012ac <get_adc>
	get_sel(&sel, 4, 0, 2);
 8001d2e:	4d44      	ldr	r5, [pc, #272]	; (8001e40 <save_mode+0x1ec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	2302      	movs	r3, #2
 8001d34:	2104      	movs	r1, #4
 8001d36:	0028      	movs	r0, r5
 8001d38:	f7ff fae4 	bl	8001304 <get_sel>
	if(sel == 0) get_sel(&cate_sel, etc, res, 1);
 8001d3c:	782a      	ldrb	r2, [r5, #0]
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d104      	bne.n	8001d4c <save_mode+0xf8>
 8001d42:	2301      	movs	r3, #1
 8001d44:	2103      	movs	r1, #3
 8001d46:	483b      	ldr	r0, [pc, #236]	; (8001e34 <save_mode+0x1e0>)
 8001d48:	f7ff fadc 	bl	8001304 <get_sel>
	if(sel == 2) get_sel(&store_num, store_max, 1, 1);
 8001d4c:	782b      	ldrb	r3, [r5, #0]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d106      	bne.n	8001d60 <save_mode+0x10c>
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <save_mode+0x1e4>)
 8001d54:	4840      	ldr	r0, [pc, #256]	; (8001e58 <save_mode+0x204>)
 8001d56:	7819      	ldrb	r1, [r3, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	f7ff fad2 	bl	8001304 <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <save_mode+0x224>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <save_mode+0x11e>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	4a43      	ldr	r2, [pc, #268]	; (8001e78 <save_mode+0x224>)
 8001d6c:	7013      	strb	r3, [r2, #0]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <save_mode+0x1e8>)
 8001d70:	7013      	strb	r3, [r2, #0]

	if(read_sw()){
 8001d72:	f7ff fafd 	bl	8001370 <read_sw>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d055      	beq.n	8001e26 <save_mode+0x1d2>
		if(sel == 1) input_name = input_string("#input Name");
 8001d7a:	782b      	ldrb	r3, [r5, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d104      	bne.n	8001d8a <save_mode+0x136>
 8001d80:	483e      	ldr	r0, [pc, #248]	; (8001e7c <save_mode+0x228>)
 8001d82:	f7ff fbff 	bl	8001584 <input_string>
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <save_mode+0x1f8>)
 8001d88:	6018      	str	r0, [r3, #0]
		if(sel == 3) position_set();
 8001d8a:	782b      	ldrb	r3, [r5, #0]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d101      	bne.n	8001d94 <save_mode+0x140>
 8001d90:	f7ff fea2 	bl	8001ad8 <position_set>
		if(sel == 4){
 8001d94:	782b      	ldrb	r3, [r5, #0]
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d145      	bne.n	8001e26 <save_mode+0x1d2>
			if(input_name[0] > 0){
 8001d9a:	4f2c      	ldr	r7, [pc, #176]	; (8001e4c <save_mode+0x1f8>)
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	780b      	ldrb	r3, [r1, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d042      	beq.n	8001e2a <save_mode+0x1d6>
				strcpy(pt[CURXY].name, input_name);
 8001da4:	2405      	movs	r4, #5
 8001da6:	4e2e      	ldr	r6, [pc, #184]	; (8001e60 <save_mode+0x20c>)
 8001da8:	7873      	ldrb	r3, [r6, #1]
 8001daa:	1ae3      	subs	r3, r4, r3
 8001dac:	3401      	adds	r4, #1
 8001dae:	435c      	muls	r4, r3
 8001db0:	7833      	ldrb	r3, [r6, #0]
 8001db2:	18e4      	adds	r4, r4, r3
 8001db4:	2314      	movs	r3, #20
 8001db6:	435c      	muls	r4, r3
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <save_mode+0x22c>)
 8001dba:	18e4      	adds	r4, r4, r3
 8001dbc:	0020      	movs	r0, r4
 8001dbe:	f003 fa6b 	bl	8005298 <strcpy>
				pt[CURXY].cate = cate_sel + 1;
				pt[CURXY].pos = start_check;
				pt[CURXY].store = store_num;
				pt[CURXY].max = store_max;
				pt[CURXY].temp = temp;
 8001dc2:	0020      	movs	r0, r4
				pt[CURXY].cate = cate_sel + 1;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <save_mode+0x1e0>)
				pt[CURXY].temp = temp;
 8001dc6:	2202      	movs	r2, #2
				pt[CURXY].cate = cate_sel + 1;
 8001dc8:	781b      	ldrb	r3, [r3, #0]
				pt[CURXY].temp = temp;
 8001dca:	0031      	movs	r1, r6
				pt[CURXY].cate = cate_sel + 1;
 8001dcc:	3301      	adds	r3, #1
 8001dce:	72e3      	strb	r3, [r4, #11]
				pt[CURXY].pos = start_check;
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <save_mode+0x230>)
				pt[CURXY].temp = temp;
 8001dd2:	3011      	adds	r0, #17
				pt[CURXY].pos = start_check;
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	9303      	str	r3, [sp, #12]
 8001dd8:	7423      	strb	r3, [r4, #16]
				pt[CURXY].store = store_num;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <save_mode+0x204>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	81a3      	strh	r3, [r4, #12]
				pt[CURXY].max = store_max;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <save_mode+0x1e4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	81e3      	strh	r3, [r4, #14]
				pt[CURXY].temp = temp;
 8001de6:	f003 f8f3 	bl	8004fd0 <memcpy>

				if(start_check == 1) ptfirst = pt[CURXY];
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d104      	bne.n	8001dfa <save_mode+0x1a6>
 8001df0:	2214      	movs	r2, #20
 8001df2:	0021      	movs	r1, r4
 8001df4:	4824      	ldr	r0, [pc, #144]	; (8001e88 <save_mode+0x234>)
 8001df6:	f003 f8eb 	bl	8004fd0 <memcpy>

				logShift(0);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fc98 	bl	8001730 <logShift>

				{ free(input_name); input_name = NULL; }
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f003 f8db 	bl	8004fbc <free>
				store_num = 1;
 8001e06:	2201      	movs	r2, #1
				{ free(input_name); input_name = NULL; }
 8001e08:	2300      	movs	r3, #0
				store_num = 1;
 8001e0a:	4913      	ldr	r1, [pc, #76]	; (8001e58 <save_mode+0x204>)
				{ free(input_name); input_name = NULL; }
 8001e0c:	603b      	str	r3, [r7, #0]
				store_num = 1;
 8001e0e:	700a      	strb	r2, [r1, #0]
				cate_sel = res;
 8001e10:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <save_mode+0x1e0>)
				init_value;
 8001e12:	7073      	strb	r3, [r6, #1]
				cate_sel = res;
 8001e14:	7013      	strb	r3, [r2, #0]
				init_value;
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <save_mode+0x224>)
 8001e18:	7033      	strb	r3, [r6, #0]
 8001e1a:	7013      	strb	r3, [r2, #0]
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <save_mode+0x238>)
 8001e1e:	702b      	strb	r3, [r5, #0]
 8001e20:	7013      	strb	r3, [r2, #0]
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <save_mode+0x1e8>)
 8001e24:	7013      	strb	r3, [r2, #0]
			}
			else buzM = 2;
		}
	}
}
 8001e26:	b025      	add	sp, #148	; 0x94
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else buzM = 2;
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <save_mode+0x23c>)
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	e7f9      	b.n	8001e26 <save_mode+0x1d2>
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	200009b9 	.word	0x200009b9
 8001e38:	20000e81 	.word	0x20000e81
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000e7f 	.word	0x20000e7f
 8001e44:	08006614 	.word	0x08006614
 8001e48:	08006460 	.word	0x08006460
 8001e4c:	200009c8 	.word	0x200009c8
 8001e50:	08006459 	.word	0x08006459
 8001e54:	08006468 	.word	0x08006468
 8001e58:	20000028 	.word	0x20000028
 8001e5c:	08006470 	.word	0x08006470
 8001e60:	20000e82 	.word	0x20000e82
 8001e64:	08006448 	.word	0x08006448
 8001e68:	08006377 	.word	0x08006377
 8001e6c:	08006499 	.word	0x08006499
 8001e70:	0800647d 	.word	0x0800647d
 8001e74:	08006493 	.word	0x08006493
 8001e78:	200009cc 	.word	0x200009cc
 8001e7c:	0800649f 	.word	0x0800649f
 8001e80:	200009d8 	.word	0x200009d8
 8001e84:	20000e80 	.word	0x20000e80
 8001e88:	20000e64 	.word	0x20000e64
 8001e8c:	200009b0 	.word	0x200009b0
 8001e90:	200009b8 	.word	0x200009b8

08001e94 <part_refill>:

void part_refill(void){
	uint8_t refill_num = 0;
 8001e94:	230f      	movs	r3, #15
 8001e96:	2200      	movs	r2, #0
void part_refill(void){
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	b08d      	sub	sp, #52	; 0x34
	uint8_t refill_num = 0;
 8001e9c:	446b      	add	r3, sp
 8001e9e:	701a      	strb	r2, [r3, #0]
	while(!read_sw()){
 8001ea0:	f7ff fa66 	bl	8001370 <read_sw>
 8001ea4:	1e04      	subs	r4, r0, #0
 8001ea6:	d018      	beq.n	8001eda <part_refill+0x46>

		get_adc();
		get_sel(&refill_num, pt[CURXY].max, 0, 0);
		joy_result = basic;
	}
	if(refill_num > 0) { pt[CURXY].store += refill_num; logShift(0); }
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	446b      	add	r3, sp
 8001eac:	7819      	ldrb	r1, [r3, #0]
		sprintf(bf, "IN:%d/%d", refill_num, pt[CURXY].max);
 8001eae:	2305      	movs	r3, #5
 8001eb0:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <part_refill+0xd0>)
 8001eb2:	7850      	ldrb	r0, [r2, #1]
 8001eb4:	1a18      	subs	r0, r3, r0
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4343      	muls	r3, r0
 8001eba:	7810      	ldrb	r0, [r2, #0]
 8001ebc:	2214      	movs	r2, #20
 8001ebe:	181b      	adds	r3, r3, r0
 8001ec0:	4829      	ldr	r0, [pc, #164]	; (8001f68 <part_refill+0xd4>)
	if(refill_num > 0) { pt[CURXY].store += refill_num; logShift(0); }
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d049      	beq.n	8001f5a <part_refill+0xc6>
 8001ec6:	435a      	muls	r2, r3
 8001ec8:	1880      	adds	r0, r0, r2
 8001eca:	8983      	ldrh	r3, [r0, #12]
 8001ecc:	1859      	adds	r1, r3, r1
 8001ece:	8181      	strh	r1, [r0, #12]
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fc2d 	bl	8001730 <logShift>
	else memset(&pt[CURXY], 0, sizeof(struct Part));
}
 8001ed6:	b00d      	add	sp, #52	; 0x34
 8001ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8001eda:	2204      	movs	r2, #4
 8001edc:	4923      	ldr	r1, [pc, #140]	; (8001f6c <part_refill+0xd8>)
 8001ede:	a804      	add	r0, sp, #16
 8001ee0:	1889      	adds	r1, r1, r2
 8001ee2:	f003 f875 	bl	8004fd0 <memcpy>
		sprintf(bf, "IN:%d/%d", refill_num, pt[CURXY].max);
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	2106      	movs	r1, #6
 8001eea:	2014      	movs	r0, #20
 8001eec:	4d1d      	ldr	r5, [pc, #116]	; (8001f64 <part_refill+0xd0>)
 8001eee:	4e1e      	ldr	r6, [pc, #120]	; (8001f68 <part_refill+0xd4>)
 8001ef0:	786b      	ldrb	r3, [r5, #1]
 8001ef2:	af07      	add	r7, sp, #28
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	434b      	muls	r3, r1
 8001ef8:	782a      	ldrb	r2, [r5, #0]
 8001efa:	491d      	ldr	r1, [pc, #116]	; (8001f70 <part_refill+0xdc>)
 8001efc:	189b      	adds	r3, r3, r2
 8001efe:	4343      	muls	r3, r0
 8001f00:	18f3      	adds	r3, r6, r3
 8001f02:	260f      	movs	r6, #15
 8001f04:	446e      	add	r6, sp
 8001f06:	0038      	movs	r0, r7
 8001f08:	89db      	ldrh	r3, [r3, #14]
 8001f0a:	7832      	ldrb	r2, [r6, #0]
 8001f0c:	f003 f9a4 	bl	8005258 <siprintf>
		char* array[2] = { "Part has all used.", bf };
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <part_refill+0xe0>)
 8001f12:	9706      	str	r7, [sp, #24]
 8001f14:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001f16:	2302      	movs	r3, #2
 8001f18:	af05      	add	r7, sp, #20
 8001f1a:	003a      	movs	r2, r7
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	0038      	movs	r0, r7
 8001f20:	4915      	ldr	r1, [pc, #84]	; (8001f78 <part_refill+0xe4>)
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	f7ff f977 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 8001f2a:	f7fe ff83 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8001f2e:	f7ff f9bd 	bl	80012ac <get_adc>
		get_sel(&refill_num, pt[CURXY].max, 0, 0);
 8001f32:	2205      	movs	r2, #5
 8001f34:	2106      	movs	r1, #6
 8001f36:	2014      	movs	r0, #20
 8001f38:	786b      	ldrb	r3, [r5, #1]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	434b      	muls	r3, r1
 8001f3e:	782a      	ldrb	r2, [r5, #0]
 8001f40:	189b      	adds	r3, r3, r2
 8001f42:	4343      	muls	r3, r0
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <part_refill+0xd4>)
 8001f46:	0030      	movs	r0, r6
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	7b99      	ldrb	r1, [r3, #14]
 8001f4c:	0022      	movs	r2, r4
 8001f4e:	0023      	movs	r3, r4
 8001f50:	f7ff f9d8 	bl	8001304 <get_sel>
		joy_result = basic;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <part_refill+0xe8>)
 8001f56:	701c      	strb	r4, [r3, #0]
 8001f58:	e7a2      	b.n	8001ea0 <part_refill+0xc>
	else memset(&pt[CURXY], 0, sizeof(struct Part));
 8001f5a:	4353      	muls	r3, r2
 8001f5c:	18c0      	adds	r0, r0, r3
 8001f5e:	f003 f853 	bl	8005008 <memset>
}
 8001f62:	e7b8      	b.n	8001ed6 <part_refill+0x42>
 8001f64:	20000e82 	.word	0x20000e82
 8001f68:	200009d8 	.word	0x200009d8
 8001f6c:	08005930 	.word	0x08005930
 8001f70:	080064ab 	.word	0x080064ab
 8001f74:	080064b4 	.word	0x080064b4
 8001f78:	080064c7 	.word	0x080064c7
 8001f7c:	200009cc 	.word	0x200009cc

08001f80 <part_use>:

void part_use(void){
	use_num = 1;
 8001f80:	2201      	movs	r2, #1
void part_use(void){
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
	use_num = 1;
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <part_use+0xf8>)
void part_use(void){
 8001f86:	b08b      	sub	sp, #44	; 0x2c
	use_num = 1;
 8001f88:	701a      	strb	r2, [r3, #0]

	led_clear();
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	f7fe fc0a 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001f90:	2514      	movs	r5, #20
 8001f92:	0028      	movs	r0, r5
 8001f94:	4360      	muls	r0, r4
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <part_use+0xfc>)
 8001f98:	b2e1      	uxtb	r1, r4
 8001f9a:	18c0      	adds	r0, r0, r3
 8001f9c:	3401      	adds	r4, #1
 8001f9e:	f7ff fa05 	bl	80013ac <led_display>
 8001fa2:	2c24      	cmp	r4, #36	; 0x24
 8001fa4:	d1f5      	bne.n	8001f92 <part_use+0x12>
	led_color(CURXY, 4, 4, 4);
 8001fa6:	2605      	movs	r6, #5
 8001fa8:	2706      	movs	r7, #6
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <part_use+0x100>)
 8001fac:	7858      	ldrb	r0, [r3, #1]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	1a30      	subs	r0, r6, r0
 8001fb2:	4378      	muls	r0, r7
 8001fb4:	18c0      	adds	r0, r0, r3
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	b2c0      	uxtb	r0, r0
 8001fba:	001a      	movs	r2, r3
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	f7fe fbbb 	bl	8000738 <led_color>
	led_update();
 8001fc2:	f7fe fbc5 	bl	8000750 <led_update>

	while(!read_sw()){
 8001fc6:	f7ff f9d3 	bl	8001370 <read_sw>
 8001fca:	1e04      	subs	r4, r0, #0
 8001fcc:	d01a      	beq.n	8002004 <part_use+0x84>

		get_adc();
		get_sel(&use_num, pt[CURXY].store, 1, 0);
		joy_result = basic;
	}
	logShift(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fbae 	bl	8001730 <logShift>
	pt[CURXY].store -= use_num;
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	492a      	ldr	r1, [pc, #168]	; (8002080 <part_use+0x100>)
 8001fd8:	784a      	ldrb	r2, [r1, #1]
 8001fda:	1a9a      	subs	r2, r3, r2
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4353      	muls	r3, r2
 8001fe0:	780a      	ldrb	r2, [r1, #0]
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	2214      	movs	r2, #20
 8001fe6:	4353      	muls	r3, r2
 8001fe8:	4a24      	ldr	r2, [pc, #144]	; (800207c <part_use+0xfc>)
 8001fea:	18d2      	adds	r2, r2, r3
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <part_use+0xf8>)
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	8993      	ldrh	r3, [r2, #12]
 8001ff2:	1a5b      	subs	r3, r3, r1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	8193      	strh	r3, [r2, #12]
	if(pt[CURXY].store == 0) part_refill();
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <part_use+0x80>
 8001ffc:	f7ff ff4a 	bl	8001e94 <part_refill>
}
 8002000:	b00b      	add	sp, #44	; 0x2c
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8002004:	2204      	movs	r2, #4
 8002006:	491f      	ldr	r1, [pc, #124]	; (8002084 <part_use+0x104>)
 8002008:	a802      	add	r0, sp, #8
 800200a:	1889      	adds	r1, r1, r2
 800200c:	f002 ffe0 	bl	8004fd0 <memcpy>
		sprintf(bf, "(%d/%d)", use_num, pt[CURXY].store);
 8002010:	4d1b      	ldr	r5, [pc, #108]	; (8002080 <part_use+0x100>)
 8002012:	491a      	ldr	r1, [pc, #104]	; (800207c <part_use+0xfc>)
 8002014:	786b      	ldrb	r3, [r5, #1]
 8002016:	782a      	ldrb	r2, [r5, #0]
 8002018:	1af3      	subs	r3, r6, r3
 800201a:	437b      	muls	r3, r7
 800201c:	189b      	adds	r3, r3, r2
 800201e:	2214      	movs	r2, #20
 8002020:	4353      	muls	r3, r2
 8002022:	18cb      	adds	r3, r1, r3
 8002024:	4914      	ldr	r1, [pc, #80]	; (8002078 <part_use+0xf8>)
 8002026:	899b      	ldrh	r3, [r3, #12]
 8002028:	780a      	ldrb	r2, [r1, #0]
 800202a:	a805      	add	r0, sp, #20
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <part_use+0x108>)
 800202e:	f003 f913 	bl	8005258 <siprintf>
		char* array[2] = { "How many use?", bf };
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <part_use+0x10c>)
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8002034:	a903      	add	r1, sp, #12
		char* array[2] = { "How many use?", bf };
 8002036:	9303      	str	r3, [sp, #12]
 8002038:	ab05      	add	r3, sp, #20
 800203a:	9304      	str	r3, [sp, #16]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800203c:	2302      	movs	r3, #2
 800203e:	000a      	movs	r2, r1
 8002040:	a802      	add	r0, sp, #8
 8002042:	4913      	ldr	r1, [pc, #76]	; (8002090 <part_use+0x110>)
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	f7ff f8e6 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 800204c:	f7fe fef2 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8002050:	f7ff f92c 	bl	80012ac <get_adc>
		get_sel(&use_num, pt[CURXY].store, 1, 0);
 8002054:	786b      	ldrb	r3, [r5, #1]
 8002056:	782a      	ldrb	r2, [r5, #0]
 8002058:	1af3      	subs	r3, r6, r3
 800205a:	437b      	muls	r3, r7
 800205c:	189b      	adds	r3, r3, r2
 800205e:	2214      	movs	r2, #20
 8002060:	4353      	muls	r3, r2
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <part_use+0xfc>)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <part_use+0xf8>)
 8002066:	18d3      	adds	r3, r2, r3
 8002068:	7b19      	ldrb	r1, [r3, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	0023      	movs	r3, r4
 800206e:	f7ff f949 	bl	8001304 <get_sel>
		joy_result = basic;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <part_use+0x114>)
 8002074:	701c      	strb	r4, [r3, #0]
 8002076:	e7a6      	b.n	8001fc6 <part_use+0x46>
 8002078:	2000002f 	.word	0x2000002f
 800207c:	200009d8 	.word	0x200009d8
 8002080:	20000e82 	.word	0x20000e82
 8002084:	08005930 	.word	0x08005930
 8002088:	080064cf 	.word	0x080064cf
 800208c:	080064d7 	.word	0x080064d7
 8002090:	080064e5 	.word	0x080064e5
 8002094:	200009cc 	.word	0x200009cc

08002098 <use_mode>:

void use_mode(void){
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800209a:	4b70      	ldr	r3, [pc, #448]	; (800225c <use_mode+0x1c4>)
void use_mode(void){
 800209c:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d175      	bne.n	8002190 <use_mode+0xf8>
		firF = 1;
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020a4:	496e      	ldr	r1, [pc, #440]	; (8002260 <use_mode+0x1c8>)
		firF = 1;
 80020a6:	3201      	adds	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020aa:	3207      	adds	r2, #7
 80020ac:	1889      	adds	r1, r1, r2
		char bf[3][20];
		sprintf(bf[0], pt[CURXY].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[CURXY].cate - 1]);
 80020ae:	2505      	movs	r5, #5
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80020b0:	a803      	add	r0, sp, #12
 80020b2:	f002 ff8d 	bl	8004fd0 <memcpy>
		sprintf(bf[0], pt[CURXY].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[CURXY].cate - 1]);
 80020b6:	2306      	movs	r3, #6
 80020b8:	496a      	ldr	r1, [pc, #424]	; (8002264 <use_mode+0x1cc>)
 80020ba:	784a      	ldrb	r2, [r1, #1]
 80020bc:	7809      	ldrb	r1, [r1, #0]
 80020be:	1aaa      	subs	r2, r5, r2
 80020c0:	4353      	muls	r3, r2
 80020c2:	2214      	movs	r2, #20
 80020c4:	185b      	adds	r3, r3, r1
 80020c6:	435a      	muls	r2, r3
 80020c8:	4b67      	ldr	r3, [pc, #412]	; (8002268 <use_mode+0x1d0>)
 80020ca:	4968      	ldr	r1, [pc, #416]	; (800226c <use_mode+0x1d4>)
 80020cc:	189b      	adds	r3, r3, r2
 80020ce:	7ada      	ldrb	r2, [r3, #11]
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d100      	bne.n	80020d6 <use_mode+0x3e>
 80020d4:	4966      	ldr	r1, [pc, #408]	; (8002270 <use_mode+0x1d8>)
 80020d6:	3a01      	subs	r2, #1
 80020d8:	436a      	muls	r2, r5
 80020da:	4b66      	ldr	r3, [pc, #408]	; (8002274 <use_mode+0x1dc>)
 80020dc:	a809      	add	r0, sp, #36	; 0x24
 80020de:	189a      	adds	r2, r3, r2
 80020e0:	f003 f8ba 	bl	8005258 <siprintf>
		sprintf(bf[1], "Name:%s", pt[CURXY].name);
 80020e4:	2306      	movs	r3, #6
 80020e6:	2714      	movs	r7, #20
 80020e8:	4c5e      	ldr	r4, [pc, #376]	; (8002264 <use_mode+0x1cc>)
 80020ea:	4e5f      	ldr	r6, [pc, #380]	; (8002268 <use_mode+0x1d0>)
 80020ec:	7862      	ldrb	r2, [r4, #1]
 80020ee:	4962      	ldr	r1, [pc, #392]	; (8002278 <use_mode+0x1e0>)
 80020f0:	1aaa      	subs	r2, r5, r2
 80020f2:	435a      	muls	r2, r3
 80020f4:	7823      	ldrb	r3, [r4, #0]
 80020f6:	a80e      	add	r0, sp, #56	; 0x38
 80020f8:	18d2      	adds	r2, r2, r3
 80020fa:	437a      	muls	r2, r7
 80020fc:	1992      	adds	r2, r2, r6
 80020fe:	f003 f8ab 	bl	8005258 <siprintf>
		sprintf(bf[2], "Store:%d", pt[CURXY].store);
 8002102:	2106      	movs	r1, #6
 8002104:	7863      	ldrb	r3, [r4, #1]
 8002106:	7822      	ldrb	r2, [r4, #0]
 8002108:	1aeb      	subs	r3, r5, r3
 800210a:	434b      	muls	r3, r1
 800210c:	189b      	adds	r3, r3, r2
 800210e:	437b      	muls	r3, r7
 8002110:	18f3      	adds	r3, r6, r3
 8002112:	899a      	ldrh	r2, [r3, #12]
 8002114:	4959      	ldr	r1, [pc, #356]	; (800227c <use_mode+0x1e4>)
 8002116:	a813      	add	r0, sp, #76	; 0x4c
 8002118:	f003 f89e 	bl	8005258 <siprintf>
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
		array_puts(pos, "#Use", array, 1, pt[CURXY].cate != 0 ? sizeof(pos) / 2 : 2);
 800211c:	2106      	movs	r1, #6
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
 800211e:	aa09      	add	r2, sp, #36	; 0x24
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <use_mode+0x1e8>)
 8002122:	9206      	str	r2, [sp, #24]
 8002124:	aa0e      	add	r2, sp, #56	; 0x38
 8002126:	9207      	str	r2, [sp, #28]
 8002128:	aa13      	add	r2, sp, #76	; 0x4c
 800212a:	9208      	str	r2, [sp, #32]
 800212c:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#Use", array, 1, pt[CURXY].cate != 0 ? sizeof(pos) / 2 : 2);
 800212e:	7863      	ldrb	r3, [r4, #1]
 8002130:	1aed      	subs	r5, r5, r3
 8002132:	434d      	muls	r5, r1
 8002134:	7823      	ldrb	r3, [r4, #0]
 8002136:	18ed      	adds	r5, r5, r3
 8002138:	437d      	muls	r5, r7
 800213a:	1975      	adds	r5, r6, r5
 800213c:	7aea      	ldrb	r2, [r5, #11]
 800213e:	2304      	movs	r3, #4
 8002140:	2a00      	cmp	r2, #0
 8002142:	d100      	bne.n	8002146 <use_mode+0xae>
 8002144:	3b02      	subs	r3, #2
 8002146:	494f      	ldr	r1, [pc, #316]	; (8002284 <use_mode+0x1ec>)
 8002148:	aa05      	add	r2, sp, #20
 800214a:	a803      	add	r0, sp, #12
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	f7ff f862 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();

		led_clear();
 8002154:	2500      	movs	r5, #0
		SSD1306_UpdateScreen();
 8002156:	f7fe fe6d 	bl	8000e34 <SSD1306_UpdateScreen>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800215a:	2714      	movs	r7, #20
		led_clear();
 800215c:	f7fe fb22 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002160:	0038      	movs	r0, r7
 8002162:	4368      	muls	r0, r5
 8002164:	b2e9      	uxtb	r1, r5
 8002166:	1830      	adds	r0, r6, r0
 8002168:	3501      	adds	r5, #1
 800216a:	f7ff f91f 	bl	80013ac <led_display>
 800216e:	2d24      	cmp	r5, #36	; 0x24
 8002170:	d1f6      	bne.n	8002160 <use_mode+0xc8>
		led_color(CURXY, 4, 4, 4);
 8002172:	2005      	movs	r0, #5
 8002174:	7863      	ldrb	r3, [r4, #1]
 8002176:	1ac3      	subs	r3, r0, r3
 8002178:	3001      	adds	r0, #1
 800217a:	4358      	muls	r0, r3
 800217c:	7823      	ldrb	r3, [r4, #0]
 800217e:	18c0      	adds	r0, r0, r3
 8002180:	2304      	movs	r3, #4
 8002182:	b2c0      	uxtb	r0, r0
 8002184:	001a      	movs	r2, r3
 8002186:	0019      	movs	r1, r3
 8002188:	f7fe fad6 	bl	8000738 <led_color>
		led_update();
 800218c:	f7fe fae0 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 8002190:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <use_mode+0x1f0>)
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	2a96      	cmp	r2, #150	; 0x96
 8002196:	d928      	bls.n	80021ea <use_mode+0x152>
		cnt = 0;
 8002198:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800219a:	483c      	ldr	r0, [pc, #240]	; (800228c <use_mode+0x1f4>)
		cnt = 0;
 800219c:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800219e:	8842      	ldrh	r2, [r0, #2]
 80021a0:	493b      	ldr	r1, [pc, #236]	; (8002290 <use_mode+0x1f8>)
 80021a2:	428a      	cmp	r2, r1
 80021a4:	d943      	bls.n	800222e <use_mode+0x196>
 80021a6:	4c2f      	ldr	r4, [pc, #188]	; (8002264 <use_mode+0x1cc>)
 80021a8:	7863      	ldrb	r3, [r4, #1]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d801      	bhi.n	80021b2 <use_mode+0x11a>
 80021ae:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	7063      	strb	r3, [r4, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 80021b4:	8803      	ldrh	r3, [r0, #0]
 80021b6:	2096      	movs	r0, #150	; 0x96
 80021b8:	0040      	lsls	r0, r0, #1
 80021ba:	4283      	cmp	r3, r0
 80021bc:	d241      	bcs.n	8002242 <use_mode+0x1aa>
 80021be:	4829      	ldr	r0, [pc, #164]	; (8002264 <use_mode+0x1cc>)
 80021c0:	7801      	ldrb	r1, [r0, #0]
 80021c2:	2900      	cmp	r1, #0
 80021c4:	d001      	beq.n	80021ca <use_mode+0x132>
 80021c6:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80021c8:	b2c9      	uxtb	r1, r1
 80021ca:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 80021cc:	21c8      	movs	r1, #200	; 0xc8
 80021ce:	3a2d      	subs	r2, #45	; 0x2d
 80021d0:	3aff      	subs	r2, #255	; 0xff
 80021d2:	b292      	uxth	r2, r2
 80021d4:	0109      	lsls	r1, r1, #4
 80021d6:	428a      	cmp	r2, r1
 80021d8:	d804      	bhi.n	80021e4 <use_mode+0x14c>
 80021da:	3b2d      	subs	r3, #45	; 0x2d
 80021dc:	3bff      	subs	r3, #255	; 0xff
 80021de:	b29b      	uxth	r3, r3
 80021e0:	428b      	cmp	r3, r1
 80021e2:	d902      	bls.n	80021ea <use_mode+0x152>
 80021e4:	2200      	movs	r2, #0
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <use_mode+0x1c4>)
 80021e8:	701a      	strb	r2, [r3, #0]
	}
	if(read_sw()){
 80021ea:	f7ff f8c1 	bl	8001370 <read_sw>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d01b      	beq.n	800222a <use_mode+0x192>
		if(pt[CURXY].cate != 0) { part_use(); init_value; }
 80021f2:	2305      	movs	r3, #5
 80021f4:	4c1b      	ldr	r4, [pc, #108]	; (8002264 <use_mode+0x1cc>)
 80021f6:	7862      	ldrb	r2, [r4, #1]
 80021f8:	7821      	ldrb	r1, [r4, #0]
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	3301      	adds	r3, #1
 80021fe:	4353      	muls	r3, r2
 8002200:	2214      	movs	r2, #20
 8002202:	185b      	adds	r3, r3, r1
 8002204:	435a      	muls	r2, r3
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <use_mode+0x1d0>)
 8002208:	189b      	adds	r3, r3, r2
 800220a:	7adb      	ldrb	r3, [r3, #11]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <use_mode+0x1ba>
 8002210:	f7ff feb6 	bl	8001f80 <part_use>
 8002214:	2300      	movs	r3, #0
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <use_mode+0x1fc>)
 8002218:	7063      	strb	r3, [r4, #1]
 800221a:	7013      	strb	r3, [r2, #0]
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <use_mode+0x200>)
 800221e:	7023      	strb	r3, [r4, #0]
 8002220:	7013      	strb	r3, [r2, #0]
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <use_mode+0x1c4>)
 8002224:	7013      	strb	r3, [r2, #0]
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <use_mode+0x204>)
 8002228:	7013      	strb	r3, [r2, #0]
		else buzM = 2;
	}
}
 800222a:	b019      	add	sp, #100	; 0x64
 800222c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 800222e:	2396      	movs	r3, #150	; 0x96
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	429a      	cmp	r2, r3
 8002234:	d2be      	bcs.n	80021b4 <use_mode+0x11c>
 8002236:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <use_mode+0x1cc>)
 8002238:	7863      	ldrb	r3, [r4, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0b9      	beq.n	80021b2 <use_mode+0x11a>
 800223e:	3b01      	subs	r3, #1
 8002240:	e7b6      	b.n	80021b0 <use_mode+0x118>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002242:	428b      	cmp	r3, r1
 8002244:	d9c2      	bls.n	80021cc <use_mode+0x134>
 8002246:	4807      	ldr	r0, [pc, #28]	; (8002264 <use_mode+0x1cc>)
 8002248:	7801      	ldrb	r1, [r0, #0]
 800224a:	2904      	cmp	r1, #4
 800224c:	d8bd      	bhi.n	80021ca <use_mode+0x132>
 800224e:	3101      	adds	r1, #1
 8002250:	e7ba      	b.n	80021c8 <use_mode+0x130>
		else buzM = 2;
 8002252:	2202      	movs	r2, #2
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <use_mode+0x208>)
 8002256:	701a      	strb	r2, [r3, #0]
}
 8002258:	e7e7      	b.n	800222a <use_mode+0x192>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	2000000c 	.word	0x2000000c
 8002260:	08005930 	.word	0x08005930
 8002264:	20000e82 	.word	0x20000e82
 8002268:	200009d8 	.word	0x200009d8
 800226c:	08006460 	.word	0x08006460
 8002270:	080064ea 	.word	0x080064ea
 8002274:	08006614 	.word	0x08006614
 8002278:	08006468 	.word	0x08006468
 800227c:	080064f2 	.word	0x080064f2
 8002280:	080064fb 	.word	0x080064fb
 8002284:	080064e5 	.word	0x080064e5
 8002288:	200009bc 	.word	0x200009bc
 800228c:	200009b2 	.word	0x200009b2
 8002290:	00000dac 	.word	0x00000dac
 8002294:	200009cc 	.word	0x200009cc
 8002298:	200009b0 	.word	0x200009b0
 800229c:	20000e7f 	.word	0x20000e7f
 80022a0:	200009b8 	.word	0x200009b8

080022a4 <find_result>:

void find_result(char* str){
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	2500      	movs	r5, #0
 80022a8:	0006      	movs	r6, r0
	uint8_t find_num = 0;
 80022aa:	002c      	movs	r4, r5
void find_result(char* str){
 80022ac:	b085      	sub	sp, #20
 80022ae:	af02      	add	r7, sp, #8
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(pt[i].name, str)) find_num++;
 80022b0:	2014      	movs	r0, #20
 80022b2:	4368      	muls	r0, r5
 80022b4:	4b79      	ldr	r3, [pc, #484]	; (800249c <find_result+0x1f8>)
 80022b6:	0031      	movs	r1, r6
 80022b8:	18c0      	adds	r0, r0, r3
 80022ba:	f7fd ff25 	bl	8000108 <strcmp>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d101      	bne.n	80022c6 <find_result+0x22>
 80022c2:	3401      	adds	r4, #1
 80022c4:	b2e4      	uxtb	r4, r4
 80022c6:	3501      	adds	r5, #1
 80022c8:	2d24      	cmp	r5, #36	; 0x24
 80022ca:	d1f1      	bne.n	80022b0 <find_result+0xc>
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 80022cc:	0021      	movs	r1, r4
 80022ce:	2014      	movs	r0, #20
 80022d0:	f002 fe40 	bl	8004f54 <calloc>
	findC = 0;
 80022d4:	2400      	movs	r4, #0
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <find_result+0x1fc>)
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 80022d8:	6078      	str	r0, [r7, #4]
	findC = 0;
 80022da:	701c      	strb	r4, [r3, #0]
	for(uint8_t i = 0 ; i < start_check ; i++)
 80022dc:	4b71      	ldr	r3, [pc, #452]	; (80024a4 <find_result+0x200>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	42a3      	cmp	r3, r4
 80022e2:	d819      	bhi.n	8002318 <find_result+0x74>
		for(uint8_t j = 0 ; j < 36 ; j++)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];

	while(!read_sw()){
 80022e4:	f7ff f844 	bl	8001370 <read_sw>
 80022e8:	4d6d      	ldr	r5, [pc, #436]	; (80024a0 <find_result+0x1fc>)
 80022ea:	1e06      	subs	r6, r0, #0
 80022ec:	d032      	beq.n	8002354 <find_result+0xb0>
		array[1] = ">";
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
		SSD1306_UpdateScreen();
	}
	logShift(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7ff fa1e 	bl	8001730 <logShift>
	if(findC > 0) { temp = find_part[sel].temp; part_use(); }
 80022f4:	782b      	ldrb	r3, [r5, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <find_result+0x70>
 80022fa:	2114      	movs	r1, #20
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <find_result+0x204>)
 80022fe:	2202      	movs	r2, #2
 8002300:	7818      	ldrb	r0, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4341      	muls	r1, r0
 8002306:	1859      	adds	r1, r3, r1
 8002308:	3111      	adds	r1, #17
 800230a:	4868      	ldr	r0, [pc, #416]	; (80024ac <find_result+0x208>)
 800230c:	f002 fe60 	bl	8004fd0 <memcpy>
 8002310:	f7ff fe36 	bl	8001f80 <part_use>
}
 8002314:	46bd      	mov	sp, r7
 8002316:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002318:	4d60      	ldr	r5, [pc, #384]	; (800249c <find_result+0x1f8>)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
 800231a:	0031      	movs	r1, r6
 800231c:	0028      	movs	r0, r5
 800231e:	f7fd fef3 	bl	8000108 <strcmp>
 8002322:	2800      	cmp	r0, #0
 8002324:	d10f      	bne.n	8002346 <find_result+0xa2>
 8002326:	7c2b      	ldrb	r3, [r5, #16]
 8002328:	3b01      	subs	r3, #1
 800232a:	42a3      	cmp	r3, r4
 800232c:	d10b      	bne.n	8002346 <find_result+0xa2>
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <find_result+0x1fc>)
 8002330:	0029      	movs	r1, r5
 8002332:	7818      	ldrb	r0, [r3, #0]
 8002334:	1c42      	adds	r2, r0, #1
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	2314      	movs	r3, #20
 800233a:	4358      	muls	r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2214      	movs	r2, #20
 8002340:	1818      	adds	r0, r3, r0
 8002342:	f002 fe45 	bl	8004fd0 <memcpy>
		for(uint8_t j = 0 ; j < 36 ; j++)
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <find_result+0x20c>)
 8002348:	3514      	adds	r5, #20
 800234a:	429d      	cmp	r5, r3
 800234c:	d1e5      	bne.n	800231a <find_result+0x76>
	for(uint8_t i = 0 ; i < start_check ; i++)
 800234e:	3401      	adds	r4, #1
 8002350:	b2e4      	uxtb	r4, r4
 8002352:	e7c3      	b.n	80022dc <find_result+0x38>
		if(findC > 0){
 8002354:	782b      	ldrb	r3, [r5, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <find_result+0x11c>
			get_adc();
 800235a:	f7fe ffa7 	bl	80012ac <get_adc>
			get_sel(&sel, findC - 1, 0, 2);
 800235e:	7829      	ldrb	r1, [r5, #0]
 8002360:	2302      	movs	r3, #2
 8002362:	3901      	subs	r1, #1
 8002364:	0032      	movs	r2, r6
 8002366:	4850      	ldr	r0, [pc, #320]	; (80024a8 <find_result+0x204>)
 8002368:	b2c9      	uxtb	r1, r1
 800236a:	f7fe ffcb 	bl	8001304 <get_sel>
			joy_result = basic;
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <find_result+0x210>)
			led_clear();
 8002370:	0034      	movs	r4, r6
			joy_result = basic;
 8002372:	701e      	strb	r6, [r3, #0]
			led_clear();
 8002374:	f7fe fa16 	bl	80007a4 <led_clear>
			for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002378:	2014      	movs	r0, #20
 800237a:	4360      	muls	r0, r4
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <find_result+0x1f8>)
 800237e:	b2e1      	uxtb	r1, r4
 8002380:	18c0      	adds	r0, r0, r3
 8002382:	3401      	adds	r4, #1
 8002384:	f7ff f812 	bl	80013ac <led_display>
 8002388:	2c24      	cmp	r4, #36	; 0x24
 800238a:	d1f5      	bne.n	8002378 <find_result+0xd4>
			if(ledC < 500) led_display(&find_part[sel], TESTXY(find_part[sel].temp.x, find_part[sel].temp.y));
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <find_result+0x204>)
 800238e:	494a      	ldr	r1, [pc, #296]	; (80024b8 <find_result+0x214>)
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	2314      	movs	r3, #20
 8002394:	435a      	muls	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8809      	ldrh	r1, [r1, #0]
 800239a:	189a      	adds	r2, r3, r2
 800239c:	2305      	movs	r3, #5
 800239e:	7c90      	ldrb	r0, [r2, #18]
 80023a0:	1a18      	subs	r0, r3, r0
 80023a2:	3301      	adds	r3, #1
 80023a4:	4343      	muls	r3, r0
 80023a6:	7c50      	ldrb	r0, [r2, #17]
 80023a8:	1818      	adds	r0, r3, r0
 80023aa:	23fa      	movs	r3, #250	; 0xfa
 80023ac:	b2c0      	uxtb	r0, r0
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4299      	cmp	r1, r3
 80023b2:	d24b      	bcs.n	800244c <find_result+0x1a8>
 80023b4:	0001      	movs	r1, r0
 80023b6:	0010      	movs	r0, r2
 80023b8:	f7fe fff8 	bl	80013ac <led_display>
			led_update();
 80023bc:	f7fe f9c8 	bl	8000750 <led_update>
		POS pos[2 + findC];
 80023c0:	782b      	ldrb	r3, [r5, #0]
 80023c2:	466d      	mov	r5, sp
 80023c4:	005a      	lsls	r2, r3, #1
 80023c6:	320b      	adds	r2, #11
 80023c8:	08d2      	lsrs	r2, r2, #3
 80023ca:	00d2      	lsls	r2, r2, #3
 80023cc:	1aaa      	subs	r2, r5, r2
 80023ce:	4695      	mov	sp, r2
		pos[0].x = 0, pos[0].y = 1;
 80023d0:	2200      	movs	r2, #0
		POS pos[2 + findC];
 80023d2:	ac02      	add	r4, sp, #8
		pos[0].x = 0, pos[0].y = 1;
 80023d4:	7022      	strb	r2, [r4, #0]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023d6:	70a2      	strb	r2, [r4, #2]
 80023d8:	4a33      	ldr	r2, [pc, #204]	; (80024a8 <find_result+0x204>)
		pos[0].x = 0, pos[0].y = 1;
 80023da:	2101      	movs	r1, #1
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023dc:	7812      	ldrb	r2, [r2, #0]
		pos[0].x = 0, pos[0].y = 1;
 80023de:	7061      	strb	r1, [r4, #1]
		pos[1].x = 0, pos[1].y = 2 + sel;
 80023e0:	3202      	adds	r2, #2
 80023e2:	70e2      	strb	r2, [r4, #3]
		char bf[findC][20];
 80023e4:	2214      	movs	r2, #20
 80023e6:	4353      	muls	r3, r2
 80023e8:	466a      	mov	r2, sp
 80023ea:	3307      	adds	r3, #7
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	469d      	mov	sp, r3
 80023f4:	ab02      	add	r3, sp, #8
 80023f6:	603b      	str	r3, [r7, #0]
		for(uint8_t i = 0 ; i < findC ; i++){
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <find_result+0x1fc>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429e      	cmp	r6, r3
 80023fe:	d32b      	bcc.n	8002458 <find_result+0x1b4>
		char* array[2 + findC];
 8002400:	4669      	mov	r1, sp
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	320f      	adds	r2, #15
 8002406:	08d2      	lsrs	r2, r2, #3
 8002408:	00d2      	lsls	r2, r2, #3
 800240a:	1a8a      	subs	r2, r1, r2
 800240c:	4695      	mov	sp, r2
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 800240e:	492b      	ldr	r1, [pc, #172]	; (80024bc <find_result+0x218>)
		char* array[2 + findC];
 8002410:	aa02      	add	r2, sp, #8
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <find_result+0x174>
 8002416:	492a      	ldr	r1, [pc, #168]	; (80024c0 <find_result+0x21c>)
 8002418:	6011      	str	r1, [r2, #0]
		array[1] = ">";
 800241a:	492a      	ldr	r1, [pc, #168]	; (80024c4 <find_result+0x220>)
 800241c:	0010      	movs	r0, r2
 800241e:	6051      	str	r1, [r2, #4]
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 8002420:	2114      	movs	r1, #20
 8002422:	4359      	muls	r1, r3
 8002424:	683e      	ldr	r6, [r7, #0]
 8002426:	3008      	adds	r0, #8
 8002428:	1871      	adds	r1, r6, r1
 800242a:	42b1      	cmp	r1, r6
 800242c:	d132      	bne.n	8002494 <find_result+0x1f0>
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
 800242e:	2101      	movs	r1, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <find_result+0x194>
 8002434:	3302      	adds	r3, #2
 8002436:	b2d9      	uxtb	r1, r3
 8002438:	9100      	str	r1, [sp, #0]
 800243a:	2301      	movs	r3, #1
 800243c:	0020      	movs	r0, r4
 800243e:	4922      	ldr	r1, [pc, #136]	; (80024c8 <find_result+0x224>)
 8002440:	f7fe feea 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 8002444:	f7fe fcf6 	bl	8000e34 <SSD1306_UpdateScreen>
 8002448:	46ad      	mov	sp, r5
 800244a:	e74b      	b.n	80022e4 <find_result+0x40>
			else led_color(TESTXY(find_part[sel].temp.x, find_part[sel].temp.y), 0, 0, 0);
 800244c:	2300      	movs	r3, #0
 800244e:	001a      	movs	r2, r3
 8002450:	0019      	movs	r1, r3
 8002452:	f7fe f971 	bl	8000738 <led_color>
 8002456:	e7b1      	b.n	80023bc <find_result+0x118>
			sprintf(bf[i], "%s(%s/%d,%d)", find_part[i].name, ptCate[find_part[i].cate - 1], find_part[i].temp.x + 1, find_part[i].temp.y + 1);
 8002458:	2014      	movs	r0, #20
 800245a:	2105      	movs	r1, #5
 800245c:	4370      	muls	r0, r6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	181a      	adds	r2, r3, r0
 8002462:	7ad3      	ldrb	r3, [r2, #11]
 8002464:	3b01      	subs	r3, #1
 8002466:	434b      	muls	r3, r1
 8002468:	4918      	ldr	r1, [pc, #96]	; (80024cc <find_result+0x228>)
 800246a:	18cb      	adds	r3, r1, r3
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	1808      	adds	r0, r1, r0
 8002470:	7c91      	ldrb	r1, [r2, #18]
 8002472:	3101      	adds	r1, #1
 8002474:	9101      	str	r1, [sp, #4]
 8002476:	7c51      	ldrb	r1, [r2, #17]
 8002478:	3101      	adds	r1, #1
 800247a:	9100      	str	r1, [sp, #0]
 800247c:	4914      	ldr	r1, [pc, #80]	; (80024d0 <find_result+0x22c>)
 800247e:	f002 feeb 	bl	8005258 <siprintf>
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 8002482:	2201      	movs	r2, #1
 8002484:	0073      	lsls	r3, r6, #1
 8002486:	18e3      	adds	r3, r4, r3
 8002488:	711a      	strb	r2, [r3, #4]
 800248a:	1cb2      	adds	r2, r6, #2
		for(uint8_t i = 0 ; i < findC ; i++){
 800248c:	3601      	adds	r6, #1
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 800248e:	715a      	strb	r2, [r3, #5]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002490:	b2f6      	uxtb	r6, r6
 8002492:	e7b1      	b.n	80023f8 <find_result+0x154>
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 8002494:	c040      	stmia	r0!, {r6}
 8002496:	3614      	adds	r6, #20
 8002498:	e7c7      	b.n	800242a <find_result+0x186>
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	200009d8 	.word	0x200009d8
 80024a0:	200009be 	.word	0x200009be
 80024a4:	20000e80 	.word	0x20000e80
 80024a8:	20000e7f 	.word	0x20000e7f
 80024ac:	20000e82 	.word	0x20000e82
 80024b0:	20000ca8 	.word	0x20000ca8
 80024b4:	200009cc 	.word	0x200009cc
 80024b8:	200009ce 	.word	0x200009ce
 80024bc:	08006507 	.word	0x08006507
 80024c0:	08006518 	.word	0x08006518
 80024c4:	08006377 	.word	0x08006377
 80024c8:	08006531 	.word	0x08006531
 80024cc:	08006614 	.word	0x08006614
 80024d0:	08006524 	.word	0x08006524

080024d4 <find_mode>:

void find_mode(void){
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 80024d6:	4e2f      	ldr	r6, [pc, #188]	; (8002594 <find_mode+0xc0>)
void find_mode(void){
 80024d8:	b08b      	sub	sp, #44	; 0x2c
	if(!firF){
 80024da:	7833      	ldrb	r3, [r6, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12b      	bne.n	8002538 <find_mode+0x64>
		firF = 1;
		POS pos = {3, 4};
 80024e0:	492d      	ldr	r1, [pc, #180]	; (8002598 <find_mode+0xc4>)
		firF = 1;
 80024e2:	3301      	adds	r3, #1
		POS pos = {3, 4};
 80024e4:	3110      	adds	r1, #16
 80024e6:	2202      	movs	r2, #2
 80024e8:	a803      	add	r0, sp, #12
		firF = 1;
 80024ea:	7033      	strb	r3, [r6, #0]
		POS pos = {3, 4};
 80024ec:	f002 fd70 	bl	8004fd0 <memcpy>
		char bf[20];
		sprintf(bf, find_name[0] > 0 ? find_name : "Input find name");
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <find_mode+0xc8>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	780b      	ldrb	r3, [r1, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <find_mode+0x28>
 80024fa:	4929      	ldr	r1, [pc, #164]	; (80025a0 <find_mode+0xcc>)
 80024fc:	ac05      	add	r4, sp, #20
 80024fe:	0020      	movs	r0, r4
 8002500:	f002 feaa 	bl	8005258 <siprintf>
		char* array = { bf };
 8002504:	9404      	str	r4, [sp, #16]
		array_puts(&pos, "#Find", &array, 1, sizeof(pos) / 2);
 8002506:	2401      	movs	r4, #1
 8002508:	4926      	ldr	r1, [pc, #152]	; (80025a4 <find_mode+0xd0>)
 800250a:	0023      	movs	r3, r4
 800250c:	aa04      	add	r2, sp, #16
 800250e:	a803      	add	r0, sp, #12
 8002510:	9400      	str	r4, [sp, #0]
 8002512:	f7fe fe81 	bl	8001218 <array_puts>
		SSD1306_DrawRectangle(pos.x * 6 - 2, pos.y * 8 - 3, strlen("Input find name") * 6 + 3, 12, 1);
 8002516:	466b      	mov	r3, sp
 8002518:	7b59      	ldrb	r1, [r3, #13]
 800251a:	7b18      	ldrb	r0, [r3, #12]
 800251c:	2306      	movs	r3, #6
 800251e:	4358      	muls	r0, r3
 8002520:	00c9      	lsls	r1, r1, #3
 8002522:	3903      	subs	r1, #3
 8002524:	3802      	subs	r0, #2
 8002526:	225d      	movs	r2, #93	; 0x5d
 8002528:	b289      	uxth	r1, r1
 800252a:	b280      	uxth	r0, r0
 800252c:	18db      	adds	r3, r3, r3
 800252e:	9400      	str	r4, [sp, #0]
 8002530:	f7fe fbe9 	bl	8000d06 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 8002534:	f7fe fc7e 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	if(read_sw()){
 8002538:	f7fe ff1a 	bl	8001370 <read_sw>
 800253c:	2800      	cmp	r0, #0
 800253e:	d00f      	beq.n	8002560 <find_mode+0x8c>
		if(!screenState) { find_name = input_string("#input part name"); firF = 0; }
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <find_mode+0xd4>)
 8002542:	4d16      	ldr	r5, [pc, #88]	; (800259c <find_mode+0xc8>)
 8002544:	781c      	ldrb	r4, [r3, #0]
 8002546:	2c00      	cmp	r4, #0
 8002548:	d10c      	bne.n	8002564 <find_mode+0x90>
 800254a:	4818      	ldr	r0, [pc, #96]	; (80025ac <find_mode+0xd8>)
 800254c:	f7ff f81a 	bl	8001584 <input_string>
 8002550:	7034      	strb	r4, [r6, #0]
 8002552:	6028      	str	r0, [r5, #0]
		else{
			{ ledM = 1; find_result(find_name); ledM = 0; }
			{ free(find_name); find_name = NULL; }
			init_value;
		}
		screenState = find_name[0] > 0;
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	4193      	sbcs	r3, r2
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <find_mode+0xd4>)
 800255e:	7013      	strb	r3, [r2, #0]
	}
}
 8002560:	b00b      	add	sp, #44	; 0x2c
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ ledM = 1; find_result(find_name); ledM = 0; }
 8002564:	2301      	movs	r3, #1
 8002566:	2400      	movs	r4, #0
 8002568:	4f11      	ldr	r7, [pc, #68]	; (80025b0 <find_mode+0xdc>)
 800256a:	6828      	ldr	r0, [r5, #0]
 800256c:	703b      	strb	r3, [r7, #0]
 800256e:	f7ff fe99 	bl	80022a4 <find_result>
			{ free(find_name); find_name = NULL; }
 8002572:	6828      	ldr	r0, [r5, #0]
			{ ledM = 1; find_result(find_name); ledM = 0; }
 8002574:	703c      	strb	r4, [r7, #0]
			{ free(find_name); find_name = NULL; }
 8002576:	f002 fd21 	bl	8004fbc <free>
			init_value;
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <find_mode+0xe0>)
			{ free(find_name); find_name = NULL; }
 800257c:	602c      	str	r4, [r5, #0]
			init_value;
 800257e:	701c      	strb	r4, [r3, #0]
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <find_mode+0xe4>)
 8002582:	7034      	strb	r4, [r6, #0]
 8002584:	701c      	strb	r4, [r3, #0]
 8002586:	705c      	strb	r4, [r3, #1]
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <find_mode+0xe8>)
 800258a:	701c      	strb	r4, [r3, #0]
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <find_mode+0xec>)
 800258e:	701c      	strb	r4, [r3, #0]
 8002590:	e7e0      	b.n	8002554 <find_mode+0x80>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	2000000c 	.word	0x2000000c
 8002598:	08005930 	.word	0x08005930
 800259c:	200009c0 	.word	0x200009c0
 80025a0:	0800653e 	.word	0x0800653e
 80025a4:	0800654e 	.word	0x0800654e
 80025a8:	20000e7e 	.word	0x20000e7e
 80025ac:	08006554 	.word	0x08006554
 80025b0:	200009d0 	.word	0x200009d0
 80025b4:	200009cc 	.word	0x200009cc
 80025b8:	20000e82 	.word	0x20000e82
 80025bc:	200009b0 	.word	0x200009b0
 80025c0:	20000e7f 	.word	0x20000e7f

080025c4 <partition_save>:

void partition_save(void){
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	b091      	sub	sp, #68	; 0x44
	struct Part spart;
	memset(&spart, 0, sizeof(struct Part));
 80025c8:	ae06      	add	r6, sp, #24
 80025ca:	2214      	movs	r2, #20
 80025cc:	2100      	movs	r1, #0
 80025ce:	0030      	movs	r0, r6
 80025d0:	f002 fd1a 	bl	8005008 <memset>
	ptionC = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <partition_save+0x18c>)
 80025d8:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025da:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <partition_save+0x190>)
 80025dc:	785f      	ldrb	r7, [r3, #1]
 80025de:	003c      	movs	r4, r7
 80025e0:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <partition_save+0x194>)
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	42a3      	cmp	r3, r4
 80025e8:	d213      	bcs.n	8002612 <partition_save+0x4e>
		for(uint8_t j = min.x ; j <= max.x ; j++){
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
			ptionC++;
		}
	if(spart.cate == 0) spart = ptfirst;
 80025ea:	7af3      	ldrb	r3, [r6, #11]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <partition_save+0x36>
 80025f0:	2214      	movs	r2, #20
 80025f2:	0030      	movs	r0, r6
 80025f4:	4959      	ldr	r1, [pc, #356]	; (800275c <partition_save+0x198>)
 80025f6:	f002 fceb 	bl	8004fd0 <memcpy>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025fa:	9b02      	ldr	r3, [sp, #8]
 80025fc:	42bb      	cmp	r3, r7
 80025fe:	d22a      	bcs.n	8002656 <partition_save+0x92>
				pt[TESTXY(j, i)].temp.y = i;
			}
			pt[TESTXY(j, i)].max *= ptionC;
		}

	while(!read_sw()){
 8002600:	f7fe feb6 	bl	8001370 <read_sw>
 8002604:	2800      	cmp	r0, #0
 8002606:	d062      	beq.n	80026ce <partition_save+0x10a>
					for(uint8_t j = min.x ; j <= max.x ; j++)
						led_color(TESTXY(j, i), 0, 4, 0);
		else led_clear();
		led_update();
	}
	logShift(3);
 8002608:	2003      	movs	r0, #3
 800260a:	f7ff f891 	bl	8001730 <logShift>
}
 800260e:	b011      	add	sp, #68	; 0x44
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002612:	4b50      	ldr	r3, [pc, #320]	; (8002754 <partition_save+0x190>)
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 8002614:	2206      	movs	r2, #6
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002616:	781d      	ldrb	r5, [r3, #0]
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 8002618:	2305      	movs	r3, #5
 800261a:	1b1b      	subs	r3, r3, r4
 800261c:	435a      	muls	r2, r3
 800261e:	9202      	str	r2, [sp, #8]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <partition_save+0x194>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	42ab      	cmp	r3, r5
 8002626:	d202      	bcs.n	800262e <partition_save+0x6a>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 8002628:	3401      	adds	r4, #1
 800262a:	b2e4      	uxtb	r4, r4
 800262c:	e7d8      	b.n	80025e0 <partition_save+0x1c>
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 800262e:	2214      	movs	r2, #20
 8002630:	9b02      	ldr	r3, [sp, #8]
 8002632:	494b      	ldr	r1, [pc, #300]	; (8002760 <partition_save+0x19c>)
 8002634:	18eb      	adds	r3, r5, r3
 8002636:	4353      	muls	r3, r2
 8002638:	18c9      	adds	r1, r1, r3
 800263a:	7acb      	ldrb	r3, [r1, #11]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <partition_save+0x82>
 8002640:	0030      	movs	r0, r6
 8002642:	f002 fcc5 	bl	8004fd0 <memcpy>
			ptionC++;
 8002646:	4b42      	ldr	r3, [pc, #264]	; (8002750 <partition_save+0x18c>)
 8002648:	4a41      	ldr	r2, [pc, #260]	; (8002750 <partition_save+0x18c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800264c:	3501      	adds	r5, #1
			ptionC++;
 800264e:	3301      	adds	r3, #1
 8002650:	7013      	strb	r3, [r2, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002652:	b2ed      	uxtb	r5, r5
 8002654:	e7e4      	b.n	8002620 <partition_save+0x5c>
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <partition_save+0x190>)
			if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 8002658:	2206      	movs	r2, #6
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800265a:	781c      	ldrb	r4, [r3, #0]
			if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 800265c:	2305      	movs	r3, #5
 800265e:	1bdb      	subs	r3, r3, r7
 8002660:	435a      	muls	r2, r3
 8002662:	9203      	str	r2, [sp, #12]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002664:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <partition_save+0x194>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	42a3      	cmp	r3, r4
 800266a:	d202      	bcs.n	8002672 <partition_save+0xae>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800266c:	3701      	adds	r7, #1
 800266e:	b2ff      	uxtb	r7, r7
 8002670:	e7c3      	b.n	80025fa <partition_save+0x36>
			if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 8002672:	2222      	movs	r2, #34	; 0x22
 8002674:	2121      	movs	r1, #33	; 0x21
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	18e6      	adds	r6, r4, r3
 800267a:	ab02      	add	r3, sp, #8
 800267c:	189b      	adds	r3, r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3a1d      	subs	r2, #29
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	3201      	adds	r2, #1
 8002686:	4353      	muls	r3, r2
 8002688:	aa02      	add	r2, sp, #8
 800268a:	1852      	adds	r2, r2, r1
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	189b      	adds	r3, r3, r2
 8002690:	429e      	cmp	r6, r3
 8002692:	d010      	beq.n	80026b6 <partition_save+0xf2>
				pt[TESTXY(j, i)] = spart;
 8002694:	2214      	movs	r2, #20
 8002696:	0013      	movs	r3, r2
 8002698:	4373      	muls	r3, r6
 800269a:	4d31      	ldr	r5, [pc, #196]	; (8002760 <partition_save+0x19c>)
 800269c:	a906      	add	r1, sp, #24
 800269e:	18ed      	adds	r5, r5, r3
 80026a0:	0028      	movs	r0, r5
 80026a2:	f002 fc95 	bl	8004fd0 <memcpy>
				pt[TESTXY(j, i)].pos = ++start_check;
 80026a6:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <partition_save+0x1a0>)
				pt[TESTXY(j, i)].temp.x = j;
 80026a8:	746c      	strb	r4, [r5, #17]
				pt[TESTXY(j, i)].pos = ++start_check;
 80026aa:	7813      	ldrb	r3, [r2, #0]
				pt[TESTXY(j, i)].temp.y = i;
 80026ac:	74af      	strb	r7, [r5, #18]
				pt[TESTXY(j, i)].pos = ++start_check;
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	7013      	strb	r3, [r2, #0]
 80026b4:	742b      	strb	r3, [r5, #16]
			pt[TESTXY(j, i)].max *= ptionC;
 80026b6:	2314      	movs	r3, #20
 80026b8:	4373      	muls	r3, r6
 80026ba:	4e29      	ldr	r6, [pc, #164]	; (8002760 <partition_save+0x19c>)
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80026bc:	3401      	adds	r4, #1
			pt[TESTXY(j, i)].max *= ptionC;
 80026be:	18f6      	adds	r6, r6, r3
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <partition_save+0x18c>)
 80026c2:	89f2      	ldrh	r2, [r6, #14]
 80026c4:	781b      	ldrb	r3, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80026c6:	b2e4      	uxtb	r4, r4
			pt[TESTXY(j, i)].max *= ptionC;
 80026c8:	4353      	muls	r3, r2
 80026ca:	81f3      	strh	r3, [r6, #14]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80026cc:	e7ca      	b.n	8002664 <partition_save+0xa0>
		POS pos = {0, 3};
 80026ce:	2203      	movs	r2, #3
 80026d0:	ab02      	add	r3, sp, #8
 80026d2:	7218      	strb	r0, [r3, #8]
 80026d4:	725a      	strb	r2, [r3, #9]
		sprintf(bf, "Total number:%d", ptionC);
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <partition_save+0x18c>)
 80026d8:	ac0b      	add	r4, sp, #44	; 0x2c
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4922      	ldr	r1, [pc, #136]	; (8002768 <partition_save+0x1a4>)
 80026de:	0020      	movs	r0, r4
 80026e0:	f002 fdba 	bl	8005258 <siprintf>
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 80026e4:	2301      	movs	r3, #1
 80026e6:	aa05      	add	r2, sp, #20
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4920      	ldr	r1, [pc, #128]	; (800276c <partition_save+0x1a8>)
 80026ec:	a804      	add	r0, sp, #16
		char* array = { bf };
 80026ee:	9405      	str	r4, [sp, #20]
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 80026f0:	f7fe fd92 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 80026f4:	f7fe fb9e 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 80026f8:	f7fe f854 	bl	80007a4 <led_clear>
		if(ledC < 500)
 80026fc:	23fa      	movs	r3, #250	; 0xfa
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <partition_save+0x1ac>)
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d21f      	bcs.n	8002748 <partition_save+0x184>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 8002708:	4f12      	ldr	r7, [pc, #72]	; (8002754 <partition_save+0x190>)
 800270a:	787c      	ldrb	r4, [r7, #1]
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <partition_save+0x194>)
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	42a3      	cmp	r3, r4
 8002712:	d202      	bcs.n	800271a <partition_save+0x156>
		led_update();
 8002714:	f7fe f81c 	bl	8000750 <led_update>
 8002718:	e772      	b.n	8002600 <partition_save+0x3c>
						led_color(TESTXY(j, i), 0, 4, 0);
 800271a:	2305      	movs	r3, #5
 800271c:	1b1e      	subs	r6, r3, r4
 800271e:	3301      	adds	r3, #1
 8002720:	435e      	muls	r6, r3
					for(uint8_t j = min.x ; j <= max.x ; j++)
 8002722:	783d      	ldrb	r5, [r7, #0]
						led_color(TESTXY(j, i), 0, 4, 0);
 8002724:	b2f6      	uxtb	r6, r6
					for(uint8_t j = min.x ; j <= max.x ; j++)
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <partition_save+0x194>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	42ab      	cmp	r3, r5
 800272c:	d202      	bcs.n	8002734 <partition_save+0x170>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 800272e:	3401      	adds	r4, #1
 8002730:	b2e4      	uxtb	r4, r4
 8002732:	e7eb      	b.n	800270c <partition_save+0x148>
						led_color(TESTXY(j, i), 0, 4, 0);
 8002734:	2300      	movs	r3, #0
 8002736:	1970      	adds	r0, r6, r5
 8002738:	2204      	movs	r2, #4
 800273a:	0019      	movs	r1, r3
 800273c:	b2c0      	uxtb	r0, r0
					for(uint8_t j = min.x ; j <= max.x ; j++)
 800273e:	3501      	adds	r5, #1
						led_color(TESTXY(j, i), 0, 4, 0);
 8002740:	f7fd fffa 	bl	8000738 <led_color>
					for(uint8_t j = min.x ; j <= max.x ; j++)
 8002744:	b2ed      	uxtb	r5, r5
 8002746:	e7ee      	b.n	8002726 <partition_save+0x162>
		else led_clear();
 8002748:	f7fe f82c 	bl	80007a4 <led_clear>
 800274c:	e7e2      	b.n	8002714 <partition_save+0x150>
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	20000e78 	.word	0x20000e78
 8002754:	200009d4 	.word	0x200009d4
 8002758:	200009d2 	.word	0x200009d2
 800275c:	20000e64 	.word	0x20000e64
 8002760:	200009d8 	.word	0x200009d8
 8002764:	20000e80 	.word	0x20000e80
 8002768:	08006565 	.word	0x08006565
 800276c:	08006575 	.word	0x08006575
 8002770:	200009ce 	.word	0x200009ce

08002774 <partition_mode>:

void partition_mode(void){
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 8002776:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <partition_mode+0x1f0>)
void partition_mode(void){
 8002778:	b093      	sub	sp, #76	; 0x4c
	if(!firF){
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d167      	bne.n	8002850 <partition_mode+0xdc>
		firF = 1;
 8002780:	4a78      	ldr	r2, [pc, #480]	; (8002964 <partition_mode+0x1f0>)
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002782:	4979      	ldr	r1, [pc, #484]	; (8002968 <partition_mode+0x1f4>)
		firF = 1;
 8002784:	3301      	adds	r3, #1
 8002786:	7013      	strb	r3, [r2, #0]
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002788:	3112      	adds	r1, #18
 800278a:	2206      	movs	r2, #6
 800278c:	a803      	add	r0, sp, #12
 800278e:	f002 fc1f 	bl	8004fd0 <memcpy>
		char bf[2][20];
		sprintf(bf[0], !screenState ? "Start (%d,%d)" : "End (%d,%d)", temp.x + 1, temp.y + 1);
 8002792:	4e76      	ldr	r6, [pc, #472]	; (800296c <partition_mode+0x1f8>)
 8002794:	4976      	ldr	r1, [pc, #472]	; (8002970 <partition_mode+0x1fc>)
 8002796:	7833      	ldrb	r3, [r6, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d000      	beq.n	800279e <partition_mode+0x2a>
 800279c:	4975      	ldr	r1, [pc, #468]	; (8002974 <partition_mode+0x200>)
 800279e:	4c76      	ldr	r4, [pc, #472]	; (8002978 <partition_mode+0x204>)
 80027a0:	a808      	add	r0, sp, #32
 80027a2:	7863      	ldrb	r3, [r4, #1]
 80027a4:	7822      	ldrb	r2, [r4, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	3201      	adds	r2, #1
 80027aa:	f002 fd55 	bl	8005258 <siprintf>
		sprintf(bf[1], pt[CURXY].cate != 0 ? "%s(%s/%d/%d)" : "(NONE)", pt[CURXY].name, ptCate[pt[CURXY].cate - 1], pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 80027ae:	2305      	movs	r3, #5
 80027b0:	2206      	movs	r2, #6
 80027b2:	2014      	movs	r0, #20
 80027b4:	7861      	ldrb	r1, [r4, #1]
 80027b6:	1a59      	subs	r1, r3, r1
 80027b8:	434a      	muls	r2, r1
 80027ba:	7821      	ldrb	r1, [r4, #0]
 80027bc:	1852      	adds	r2, r2, r1
 80027be:	4350      	muls	r0, r2
 80027c0:	496e      	ldr	r1, [pc, #440]	; (800297c <partition_mode+0x208>)
 80027c2:	1809      	adds	r1, r1, r0
 80027c4:	7ac8      	ldrb	r0, [r1, #11]
 80027c6:	496e      	ldr	r1, [pc, #440]	; (8002980 <partition_mode+0x20c>)
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d100      	bne.n	80027ce <partition_mode+0x5a>
 80027cc:	496d      	ldr	r1, [pc, #436]	; (8002984 <partition_mode+0x210>)
 80027ce:	3801      	subs	r0, #1
 80027d0:	4343      	muls	r3, r0
 80027d2:	486d      	ldr	r0, [pc, #436]	; (8002988 <partition_mode+0x214>)
 80027d4:	4f69      	ldr	r7, [pc, #420]	; (800297c <partition_mode+0x208>)
 80027d6:	18c3      	adds	r3, r0, r3
 80027d8:	2014      	movs	r0, #20
 80027da:	4342      	muls	r2, r0
 80027dc:	19d2      	adds	r2, r2, r7
 80027de:	7c90      	ldrb	r0, [r2, #18]
 80027e0:	ad0d      	add	r5, sp, #52	; 0x34
 80027e2:	3001      	adds	r0, #1
 80027e4:	9001      	str	r0, [sp, #4]
 80027e6:	7c50      	ldrb	r0, [r2, #17]
 80027e8:	3001      	adds	r0, #1
 80027ea:	9000      	str	r0, [sp, #0]
 80027ec:	0028      	movs	r0, r5
 80027ee:	f002 fd33 	bl	8005258 <siprintf>
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 80027f2:	7832      	ldrb	r2, [r6, #0]
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <partition_mode+0x218>)
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d000      	beq.n	80027fc <partition_mode+0x88>
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <partition_mode+0x21c>)
 80027fc:	9305      	str	r3, [sp, #20]
 80027fe:	ab08      	add	r3, sp, #32
 8002800:	9306      	str	r3, [sp, #24]
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002802:	2303      	movs	r3, #3
 8002804:	4963      	ldr	r1, [pc, #396]	; (8002994 <partition_mode+0x220>)
 8002806:	aa05      	add	r2, sp, #20
 8002808:	a803      	add	r0, sp, #12
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	3b02      	subs	r3, #2
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 800280e:	9507      	str	r5, [sp, #28]
		SSD1306_UpdateScreen();

		led_clear();
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002810:	2614      	movs	r6, #20
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002812:	f7fe fd01 	bl	8001218 <array_puts>
		led_clear();
 8002816:	2500      	movs	r5, #0
		SSD1306_UpdateScreen();
 8002818:	f7fe fb0c 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 800281c:	f7fd ffc2 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8002820:	0030      	movs	r0, r6
 8002822:	4368      	muls	r0, r5
 8002824:	b2e9      	uxtb	r1, r5
 8002826:	1838      	adds	r0, r7, r0
 8002828:	3501      	adds	r5, #1
 800282a:	f7fe fdbf 	bl	80013ac <led_display>
 800282e:	2d24      	cmp	r5, #36	; 0x24
 8002830:	d1f6      	bne.n	8002820 <partition_mode+0xac>
		led_color(CURXY, 4, 4, 4);
 8002832:	2005      	movs	r0, #5
 8002834:	7863      	ldrb	r3, [r4, #1]
 8002836:	1ac3      	subs	r3, r0, r3
 8002838:	3001      	adds	r0, #1
 800283a:	4358      	muls	r0, r3
 800283c:	7823      	ldrb	r3, [r4, #0]
 800283e:	18c0      	adds	r0, r0, r3
 8002840:	2304      	movs	r3, #4
 8002842:	b2c0      	uxtb	r0, r0
 8002844:	001a      	movs	r2, r3
 8002846:	0019      	movs	r1, r3
 8002848:	f7fd ff76 	bl	8000738 <led_color>
		led_update();
 800284c:	f7fd ff80 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <partition_mode+0x224>)
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	2a96      	cmp	r2, #150	; 0x96
 8002856:	d928      	bls.n	80028aa <partition_mode+0x136>
		cnt = 0;
 8002858:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800285a:	4850      	ldr	r0, [pc, #320]	; (800299c <partition_mode+0x228>)
		cnt = 0;
 800285c:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800285e:	8842      	ldrh	r2, [r0, #2]
 8002860:	494f      	ldr	r1, [pc, #316]	; (80029a0 <partition_mode+0x22c>)
 8002862:	428a      	cmp	r2, r1
 8002864:	d938      	bls.n	80028d8 <partition_mode+0x164>
 8002866:	4c44      	ldr	r4, [pc, #272]	; (8002978 <partition_mode+0x204>)
 8002868:	7863      	ldrb	r3, [r4, #1]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d801      	bhi.n	8002872 <partition_mode+0xfe>
 800286e:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002870:	b2db      	uxtb	r3, r3
 8002872:	7063      	strb	r3, [r4, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002874:	8803      	ldrh	r3, [r0, #0]
 8002876:	2096      	movs	r0, #150	; 0x96
 8002878:	0040      	lsls	r0, r0, #1
 800287a:	4283      	cmp	r3, r0
 800287c:	d236      	bcs.n	80028ec <partition_mode+0x178>
 800287e:	483e      	ldr	r0, [pc, #248]	; (8002978 <partition_mode+0x204>)
 8002880:	7801      	ldrb	r1, [r0, #0]
 8002882:	2900      	cmp	r1, #0
 8002884:	d001      	beq.n	800288a <partition_mode+0x116>
 8002886:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002888:	b2c9      	uxtb	r1, r1
 800288a:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 800288c:	21c8      	movs	r1, #200	; 0xc8
 800288e:	3a2d      	subs	r2, #45	; 0x2d
 8002890:	3aff      	subs	r2, #255	; 0xff
 8002892:	b292      	uxth	r2, r2
 8002894:	0109      	lsls	r1, r1, #4
 8002896:	428a      	cmp	r2, r1
 8002898:	d804      	bhi.n	80028a4 <partition_mode+0x130>
 800289a:	3b2d      	subs	r3, #45	; 0x2d
 800289c:	3bff      	subs	r3, #255	; 0xff
 800289e:	b29b      	uxth	r3, r3
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d902      	bls.n	80028aa <partition_mode+0x136>
 80028a4:	2300      	movs	r3, #0
 80028a6:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <partition_mode+0x1f0>)
 80028a8:	7013      	strb	r3, [r2, #0]
	}
	if(read_sw()){
 80028aa:	f7fe fd61 	bl	8001370 <read_sw>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d010      	beq.n	80028d4 <partition_mode+0x160>
		if(!screenState) { ptionS = temp; firF = 0; }
 80028b2:	4d2e      	ldr	r5, [pc, #184]	; (800296c <partition_mode+0x1f8>)
 80028b4:	4c30      	ldr	r4, [pc, #192]	; (8002978 <partition_mode+0x204>)
 80028b6:	782e      	ldrb	r6, [r5, #0]
 80028b8:	4f3a      	ldr	r7, [pc, #232]	; (80029a4 <partition_mode+0x230>)
 80028ba:	2e00      	cmp	r6, #0
 80028bc:	d11e      	bne.n	80028fc <partition_mode+0x188>
 80028be:	2202      	movs	r2, #2
 80028c0:	0021      	movs	r1, r4
 80028c2:	0038      	movs	r0, r7
 80028c4:	f002 fb84 	bl	8004fd0 <memcpy>
 80028c8:	4b26      	ldr	r3, [pc, #152]	; (8002964 <partition_mode+0x1f0>)
 80028ca:	701e      	strb	r6, [r3, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;

			{ ledM = 1; partition_save(); ledM = 0; }
			init_value;
		}
		screenState = !screenState;
 80028cc:	782b      	ldrb	r3, [r5, #0]
 80028ce:	425a      	negs	r2, r3
 80028d0:	4153      	adcs	r3, r2
 80028d2:	702b      	strb	r3, [r5, #0]
	}
}
 80028d4:	b013      	add	sp, #76	; 0x4c
 80028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80028d8:	2396      	movs	r3, #150	; 0x96
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	429a      	cmp	r2, r3
 80028de:	d2c9      	bcs.n	8002874 <partition_mode+0x100>
 80028e0:	4c25      	ldr	r4, [pc, #148]	; (8002978 <partition_mode+0x204>)
 80028e2:	7863      	ldrb	r3, [r4, #1]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0c4      	beq.n	8002872 <partition_mode+0xfe>
 80028e8:	3b01      	subs	r3, #1
 80028ea:	e7c1      	b.n	8002870 <partition_mode+0xfc>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80028ec:	428b      	cmp	r3, r1
 80028ee:	d9cd      	bls.n	800288c <partition_mode+0x118>
 80028f0:	4821      	ldr	r0, [pc, #132]	; (8002978 <partition_mode+0x204>)
 80028f2:	7801      	ldrb	r1, [r0, #0]
 80028f4:	2904      	cmp	r1, #4
 80028f6:	d8c8      	bhi.n	800288a <partition_mode+0x116>
 80028f8:	3101      	adds	r1, #1
 80028fa:	e7c5      	b.n	8002888 <partition_mode+0x114>
			ptionE = temp;
 80028fc:	4e2a      	ldr	r6, [pc, #168]	; (80029a8 <partition_mode+0x234>)
 80028fe:	0021      	movs	r1, r4
 8002900:	2202      	movs	r2, #2
 8002902:	0030      	movs	r0, r6
 8002904:	f002 fb64 	bl	8004fd0 <memcpy>
			min.x = ptionS.x > ptionE.x ? ptionE.x : ptionS.x;
 8002908:	7838      	ldrb	r0, [r7, #0]
 800290a:	7831      	ldrb	r1, [r6, #0]
 800290c:	1c03      	adds	r3, r0, #0
 800290e:	4288      	cmp	r0, r1
 8002910:	d900      	bls.n	8002914 <partition_mode+0x1a0>
 8002912:	1c0b      	adds	r3, r1, #0
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <partition_mode+0x238>)
 8002916:	7013      	strb	r3, [r2, #0]
			min.y = ptionS.y > ptionE.y ? ptionE.y : ptionS.y;
 8002918:	787a      	ldrb	r2, [r7, #1]
 800291a:	7873      	ldrb	r3, [r6, #1]
 800291c:	1c16      	adds	r6, r2, #0
 800291e:	429a      	cmp	r2, r3
 8002920:	d900      	bls.n	8002924 <partition_mode+0x1b0>
 8002922:	1c1e      	adds	r6, r3, #0
 8002924:	4f21      	ldr	r7, [pc, #132]	; (80029ac <partition_mode+0x238>)
 8002926:	707e      	strb	r6, [r7, #1]
			max.x = ptionS.x > ptionE.x ? ptionS.x : ptionE.x;
 8002928:	4e21      	ldr	r6, [pc, #132]	; (80029b0 <partition_mode+0x23c>)
 800292a:	1c07      	adds	r7, r0, #0
 800292c:	4288      	cmp	r0, r1
 800292e:	d200      	bcs.n	8002932 <partition_mode+0x1be>
 8002930:	1c0f      	adds	r7, r1, #0
 8002932:	7037      	strb	r7, [r6, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 8002934:	1c11      	adds	r1, r2, #0
 8002936:	429a      	cmp	r2, r3
 8002938:	d200      	bcs.n	800293c <partition_mode+0x1c8>
 800293a:	1c19      	adds	r1, r3, #0
			{ ledM = 1; partition_save(); ledM = 0; }
 800293c:	2301      	movs	r3, #1
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 800293e:	7071      	strb	r1, [r6, #1]
			{ ledM = 1; partition_save(); ledM = 0; }
 8002940:	4e1c      	ldr	r6, [pc, #112]	; (80029b4 <partition_mode+0x240>)
 8002942:	7033      	strb	r3, [r6, #0]
 8002944:	f7ff fe3e 	bl	80025c4 <partition_save>
 8002948:	2300      	movs	r3, #0
			init_value;
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <partition_mode+0x244>)
			{ ledM = 1; partition_save(); ledM = 0; }
 800294c:	7033      	strb	r3, [r6, #0]
			init_value;
 800294e:	7013      	strb	r3, [r2, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <partition_mode+0x248>)
 8002952:	7063      	strb	r3, [r4, #1]
 8002954:	7013      	strb	r3, [r2, #0]
 8002956:	4a03      	ldr	r2, [pc, #12]	; (8002964 <partition_mode+0x1f0>)
 8002958:	7023      	strb	r3, [r4, #0]
 800295a:	7013      	strb	r3, [r2, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <partition_mode+0x24c>)
 800295e:	7013      	strb	r3, [r2, #0]
 8002960:	e7b4      	b.n	80028cc <partition_mode+0x158>
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	2000000c 	.word	0x2000000c
 8002968:	08005930 	.word	0x08005930
 800296c:	20000e7d 	.word	0x20000e7d
 8002970:	08006580 	.word	0x08006580
 8002974:	0800658e 	.word	0x0800658e
 8002978:	20000e82 	.word	0x20000e82
 800297c:	200009d8 	.word	0x200009d8
 8002980:	0800659a 	.word	0x0800659a
 8002984:	08006459 	.word	0x08006459
 8002988:	08006614 	.word	0x08006614
 800298c:	080065a7 	.word	0x080065a7
 8002990:	080065ba 	.word	0x080065ba
 8002994:	08006575 	.word	0x08006575
 8002998:	200009bc 	.word	0x200009bc
 800299c:	200009b2 	.word	0x200009b2
 80029a0:	00000dac 	.word	0x00000dac
 80029a4:	20000e7b 	.word	0x20000e7b
 80029a8:	20000e79 	.word	0x20000e79
 80029ac:	200009d4 	.word	0x200009d4
 80029b0:	200009d2 	.word	0x200009d2
 80029b4:	200009d0 	.word	0x200009d0
 80029b8:	200009cc 	.word	0x200009cc
 80029bc:	200009b0 	.word	0x200009b0
 80029c0:	20000e7f 	.word	0x20000e7f

080029c4 <log_detail>:

void log_detail(uint8_t i){
 80029c4:	b510      	push	{r4, lr}
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 80029c6:	4912      	ldr	r1, [pc, #72]	; (8002a10 <log_detail+0x4c>)
void log_detail(uint8_t i){
 80029c8:	b088      	sub	sp, #32
 80029ca:	0004      	movs	r4, r0
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 80029cc:	2206      	movs	r2, #6
 80029ce:	3118      	adds	r1, #24
 80029d0:	a803      	add	r0, sp, #12
 80029d2:	f002 fafd 	bl	8004fd0 <memcpy>
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80029d6:	204a      	movs	r0, #74	; 0x4a
 80029d8:	4360      	muls	r0, r4
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <log_detail+0x50>)
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <log_detail+0x54>)
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80029de:	18c2      	adds	r2, r0, r3
 80029e0:	9205      	str	r2, [sp, #20]
 80029e2:	0002      	movs	r2, r0
 80029e4:	3034      	adds	r0, #52	; 0x34
 80029e6:	321e      	adds	r2, #30
 80029e8:	18d2      	adds	r2, r2, r3
 80029ea:	18c0      	adds	r0, r0, r3
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80029ec:	2303      	movs	r3, #3
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80029ee:	9206      	str	r2, [sp, #24]
 80029f0:	9007      	str	r0, [sp, #28]
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	aa05      	add	r2, sp, #20
 80029f6:	3b02      	subs	r3, #2
 80029f8:	a803      	add	r0, sp, #12
 80029fa:	f7fe fc0d 	bl	8001218 <array_puts>
	SSD1306_UpdateScreen();
 80029fe:	f7fe fa19 	bl	8000e34 <SSD1306_UpdateScreen>
	while(!read_sw());
 8002a02:	f7fe fcb5 	bl	8001370 <read_sw>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d0fb      	beq.n	8002a02 <log_detail+0x3e>
}
 8002a0a:	b008      	add	sp, #32
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	08005930 	.word	0x08005930
 8002a14:	20000ca8 	.word	0x20000ca8
 8002a18:	080065cb 	.word	0x080065cb

08002a1c <log_mode>:

void log_mode(void){
 8002a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t log_num;
	if(!firF){
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <log_mode+0x10c>)
 8002a20:	4d42      	ldr	r5, [pc, #264]	; (8002b2c <log_mode+0x110>)
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	4e42      	ldr	r6, [pc, #264]	; (8002b30 <log_mode+0x114>)
void log_mode(void){
 8002a26:	b0bd      	sub	sp, #244	; 0xf4
	if(!firF){
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d13d      	bne.n	8002aa8 <log_mode+0x8c>
		firF = 1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	493e      	ldr	r1, [pc, #248]	; (8002b28 <log_mode+0x10c>)
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002a30:	ac04      	add	r4, sp, #16
		firF = 1;
 8002a32:	700b      	strb	r3, [r1, #0]
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002a34:	7829      	ldrb	r1, [r5, #0]
 8002a36:	70a3      	strb	r3, [r4, #2]
 8002a38:	3102      	adds	r1, #2
 8002a3a:	7061      	strb	r1, [r4, #1]
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	70e1      	strb	r1, [r4, #3]
 8002a40:	18c9      	adds	r1, r1, r3
 8002a42:	7161      	strb	r1, [r4, #5]
 8002a44:	18c9      	adds	r1, r1, r3
 8002a46:	71e1      	strb	r1, [r4, #7]
 8002a48:	18c9      	adds	r1, r1, r3
 8002a4a:	7123      	strb	r3, [r4, #4]
 8002a4c:	71a3      	strb	r3, [r4, #6]
 8002a4e:	7223      	strb	r3, [r4, #8]
 8002a50:	7261      	strb	r1, [r4, #9]
 8002a52:	72a3      	strb	r3, [r4, #10]
 8002a54:	18c9      	adds	r1, r1, r3
 8002a56:	7323      	strb	r3, [r4, #12]
 8002a58:	4f36      	ldr	r7, [pc, #216]	; (8002b34 <log_mode+0x118>)
 8002a5a:	3306      	adds	r3, #6
 8002a5c:	7022      	strb	r2, [r4, #0]
 8002a5e:	72e1      	strb	r1, [r4, #11]
 8002a60:	7363      	strb	r3, [r4, #13]
		char bf[6][30];
		log_num = 0;
 8002a62:	7032      	strb	r2, [r6, #0]
 8002a64:	9203      	str	r2, [sp, #12]
		for(uint8_t i = 0 ; i < 6 ; i++){
			if(!strlen(ptLog[i].title)) break;
 8002a66:	783b      	ldrb	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d14b      	bne.n	8002b04 <log_mode+0xe8>
			sprintf(bf[i], "%s", ptLog[i].title);
			log_num++;
		}
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 8002a6c:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <log_mode+0x11c>)
 8002a6e:	aa02      	add	r2, sp, #8
 8002a70:	9308      	str	r3, [sp, #32]
 8002a72:	ab0f      	add	r3, sp, #60	; 0x3c
 8002a74:	9309      	str	r3, [sp, #36]	; 0x24
 8002a76:	2352      	movs	r3, #82	; 0x52
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8002a7c:	ab1e      	add	r3, sp, #120	; 0x78
 8002a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a80:	238e      	movs	r3, #142	; 0x8e
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	930c      	str	r3, [sp, #48]	; 0x30
 8002a86:	ab2d      	add	r3, sp, #180	; 0xb4
 8002a88:	930d      	str	r3, [sp, #52]	; 0x34
 8002a8a:	23ca      	movs	r3, #202	; 0xca
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	930e      	str	r3, [sp, #56]	; 0x38
		array_puts(pos, "#Log", array, 1, log_num + 1);
 8002a90:	7833      	ldrb	r3, [r6, #0]
 8002a92:	0020      	movs	r0, r4
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4928      	ldr	r1, [pc, #160]	; (8002b3c <log_mode+0x120>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	aa08      	add	r2, sp, #32
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f7fe fbba 	bl	8001218 <array_puts>
		SSD1306_UpdateScreen();
 8002aa4:	f7fe f9c6 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	get_adc();
 8002aa8:	f7fe fc00 	bl	80012ac <get_adc>
	get_sel(&sel, log_num - 1, 0, 2);
 8002aac:	7831      	ldrb	r1, [r6, #0]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	3901      	subs	r1, #1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	b2c9      	uxtb	r1, r1
 8002ab8:	f7fe fc24 	bl	8001304 <get_sel>
	if(joy_result != basic) {  if(joy_result == left) init_value; joy_result = basic; firF = 0; }
 8002abc:	4c20      	ldr	r4, [pc, #128]	; (8002b40 <log_mode+0x124>)
 8002abe:	7823      	ldrb	r3, [r4, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <log_mode+0xc2>
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <log_mode+0xba>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <log_mode+0x128>)
 8002acc:	702b      	strb	r3, [r5, #0]
 8002ace:	7013      	strb	r3, [r2, #0]
 8002ad0:	7053      	strb	r3, [r2, #1]
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <log_mode+0x12c>)
 8002ad4:	7013      	strb	r3, [r2, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <log_mode+0x10c>)
 8002ada:	7023      	strb	r3, [r4, #0]
 8002adc:	7013      	strb	r3, [r2, #0]

	if(read_sw()) { log_detail(sel); init_value; }
 8002ade:	f7fe fc47 	bl	8001370 <read_sw>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d00c      	beq.n	8002b00 <log_mode+0xe4>
 8002ae6:	7828      	ldrb	r0, [r5, #0]
 8002ae8:	f7ff ff6c 	bl	80029c4 <log_detail>
 8002aec:	2300      	movs	r3, #0
 8002aee:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <log_mode+0x128>)
 8002af0:	7023      	strb	r3, [r4, #0]
 8002af2:	7013      	strb	r3, [r2, #0]
 8002af4:	7053      	strb	r3, [r2, #1]
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <log_mode+0x12c>)
 8002af8:	702b      	strb	r3, [r5, #0]
 8002afa:	7013      	strb	r3, [r2, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <log_mode+0x10c>)
 8002afe:	7013      	strb	r3, [r2, #0]
}
 8002b00:	b03d      	add	sp, #244	; 0xf4
 8002b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(bf[i], "%s", ptLog[i].title);
 8002b04:	201e      	movs	r0, #30
 8002b06:	9b03      	ldr	r3, [sp, #12]
 8002b08:	0039      	movs	r1, r7
 8002b0a:	4358      	muls	r0, r3
 8002b0c:	ab0f      	add	r3, sp, #60	; 0x3c
 8002b0e:	1818      	adds	r0, r3, r0
 8002b10:	f002 fbc2 	bl	8005298 <strcpy>
			log_num++;
 8002b14:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002b16:	374a      	adds	r7, #74	; 0x4a
			log_num++;
 8002b18:	3301      	adds	r3, #1
 8002b1a:	7033      	strb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002b1c:	9b03      	ldr	r3, [sp, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	9303      	str	r3, [sp, #12]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d19f      	bne.n	8002a66 <log_mode+0x4a>
 8002b26:	e7a1      	b.n	8002a6c <log_mode+0x50>
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	20000e7f 	.word	0x20000e7f
 8002b30:	200009d1 	.word	0x200009d1
 8002b34:	20000ca8 	.word	0x20000ca8
 8002b38:	08006377 	.word	0x08006377
 8002b3c:	080065d7 	.word	0x080065d7
 8002b40:	200009cc 	.word	0x200009cc
 8002b44:	20000e82 	.word	0x20000e82
 8002b48:	200009b0 	.word	0x200009b0

08002b4c <PSDrawers_Initialized>:
void (*play_task[6])(void) = { main_menu, save_mode, use_mode, find_mode, partition_mode, log_mode };

/* Tasks */

void PSDrawers_Initialized(void)
{
 8002b4c:	b510      	push	{r4, lr}
	SSD1306_Init();
 8002b4e:	f7fe f99b 	bl	8000e88 <SSD1306_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8002b52:	480b      	ldr	r0, [pc, #44]	; (8002b80 <PSDrawers_Initialized+0x34>)
 8002b54:	f002 f86c 	bl	8004c30 <HAL_TIM_Base_Start_IT>

	/* Write user code here */
	if(start()) time_setting();
 8002b58:	f7fe feba 	bl	80018d0 <start>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d001      	beq.n	8002b64 <PSDrawers_Initialized+0x18>
 8002b60:	f7fe ff18 	bl	8001994 <time_setting>
	init_value;
 8002b64:	2300      	movs	r3, #0
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <PSDrawers_Initialized+0x38>)
 8002b68:	7013      	strb	r3, [r2, #0]
 8002b6a:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <PSDrawers_Initialized+0x3c>)
 8002b6c:	7013      	strb	r3, [r2, #0]
 8002b6e:	7053      	strb	r3, [r2, #1]
 8002b70:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <PSDrawers_Initialized+0x40>)
 8002b72:	7013      	strb	r3, [r2, #0]
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <PSDrawers_Initialized+0x44>)
 8002b76:	7013      	strb	r3, [r2, #0]
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <PSDrawers_Initialized+0x48>)
 8002b7a:	7013      	strb	r3, [r2, #0]
}
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000564 	.word	0x20000564
 8002b84:	200009cc 	.word	0x200009cc
 8002b88:	20000e82 	.word	0x20000e82
 8002b8c:	200009b0 	.word	0x200009b0
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	20000e7f 	.word	0x20000e7f

08002b98 <PSDrawers_Main>:

void PSDrawers_Main(void)
{
 8002b98:	b510      	push	{r4, lr}
	while(1)
	{
		/* Write user code here */
		play_task[ModeF]();
 8002b9a:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <PSDrawers_Main+0x10>)
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <PSDrawers_Main+0x14>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	589b      	ldr	r3, [r3, r2]
 8002ba4:	4798      	blx	r3
	while(1)
 8002ba6:	e7f8      	b.n	8002b9a <PSDrawers_Main+0x2>
 8002ba8:	200009b0 	.word	0x200009b0
 8002bac:	20000010 	.word	0x20000010

08002bb0 <HAL_TIM_PeriodElapsedCallback>:

/* Callbacks */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	6802      	ldr	r2, [r0, #0]
{
 8002bb4:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM2)
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d14a      	bne.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_ADC_Start(&hadc);
 8002bbc:	4c2d      	ldr	r4, [pc, #180]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002bbe:	0020      	movs	r0, r4
 8002bc0:	f000 fa7e 	bl	80030c0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	0020      	movs	r0, r4
 8002bc8:	f000 fac4 	bl	8003154 <HAL_ADC_PollForConversion>
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002bcc:	0020      	movs	r0, r4
 8002bce:	f000 fb25 	bl	800321c <HAL_ADC_GetValue>
 8002bd2:	4d29      	ldr	r5, [pc, #164]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xc8>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8002bd4:	210a      	movs	r1, #10
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002bd6:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8002bd8:	0020      	movs	r0, r4
 8002bda:	f000 fabb 	bl	8003154 <HAL_ADC_PollForConversion>
		adcV[1] = HAL_ADC_GetValue(&hadc);
 8002bde:	0020      	movs	r0, r4
 8002be0:	f000 fb1c 	bl	800321c <HAL_ADC_GetValue>
 8002be4:	8068      	strh	r0, [r5, #2]
		HAL_ADC_Stop(&hadc);
 8002be6:	0020      	movs	r0, r4
 8002be8:	f000 fa96 	bl	8003118 <HAL_ADC_Stop>

		cnt++;
 8002bec:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0xcc>)
		if(buzM) buzC++;
 8002bee:	4d24      	ldr	r5, [pc, #144]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		cnt++;
 8002bf0:	8813      	ldrh	r3, [r2, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	8013      	strh	r3, [r2, #0]
		if(buzM) buzC++;
 8002bf6:	782a      	ldrb	r2, [r5, #0]
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d01c      	beq.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x86>
 8002bfc:	4c21      	ldr	r4, [pc, #132]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002bfe:	8823      	ldrh	r3, [r4, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8023      	strh	r3, [r4, #0]
		if(buzM == 1){
 8002c06:	2a01      	cmp	r2, #1
 8002c08:	d109      	bne.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(buzC < 500) { BUZ(1); }
 8002c0a:	21fa      	movs	r1, #250	; 0xfa
 8002c0c:	0049      	lsls	r1, r1, #1
 8002c0e:	428b      	cmp	r3, r1
 8002c10:	d220      	bcs.n	8002c54 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002c12:	39ed      	subs	r1, #237	; 0xed
 8002c14:	39ff      	subs	r1, #255	; 0xff
			else { buzM = buzC = 0; BUZ(0); }
 8002c16:	20a0      	movs	r0, #160	; 0xa0
 8002c18:	05c0      	lsls	r0, r0, #23
 8002c1a:	f000 fe19 	bl	8003850 <HAL_GPIO_WritePin>
		}
		if(buzM == 2){
 8002c1e:	782b      	ldrb	r3, [r5, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d108      	bne.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x86>
			if(buzC < 25) BUZ(1);
 8002c24:	8823      	ldrh	r3, [r4, #0]
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	d819      	bhi.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0xae>
 8002c2a:	2201      	movs	r2, #1
			else if(buzC < 50) BUZ(0);
			else if(buzC < 75) BUZ(1);
			else { buzM = buzC = 0; BUZ(0); }
 8002c2c:	20a0      	movs	r0, #160	; 0xa0
 8002c2e:	2108      	movs	r1, #8
 8002c30:	05c0      	lsls	r0, r0, #23
 8002c32:	f000 fe0d 	bl	8003850 <HAL_GPIO_WritePin>
		}
		if(ledM) ledC = ledC < 1000 ? ledC + 1 : 0;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002c40:	20fa      	movs	r0, #250	; 0xfa
 8002c42:	8813      	ldrh	r3, [r2, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	0080      	lsls	r0, r0, #2
 8002c48:	4283      	cmp	r3, r0
 8002c4a:	d201      	bcs.n	8002c50 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	8011      	strh	r1, [r2, #0]
		else ledC = 0;
	}
}
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
			else { buzM = buzC = 0; BUZ(0); }
 8002c54:	2200      	movs	r2, #0
 8002c56:	2108      	movs	r1, #8
 8002c58:	8022      	strh	r2, [r4, #0]
 8002c5a:	702a      	strb	r2, [r5, #0]
 8002c5c:	e7db      	b.n	8002c16 <HAL_TIM_PeriodElapsedCallback+0x66>
			else if(buzC < 50) BUZ(0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2b31      	cmp	r3, #49	; 0x31
 8002c62:	d9e3      	bls.n	8002c2c <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(buzC < 75) BUZ(1);
 8002c64:	2b4a      	cmp	r3, #74	; 0x4a
 8002c66:	d9e0      	bls.n	8002c2a <HAL_TIM_PeriodElapsedCallback+0x7a>
			else { buzM = buzC = 0; BUZ(0); }
 8002c68:	2200      	movs	r2, #0
 8002c6a:	8022      	strh	r2, [r4, #0]
 8002c6c:	702a      	strb	r2, [r5, #0]
 8002c6e:	e7dd      	b.n	8002c2c <HAL_TIM_PeriodElapsedCallback+0x7c>
		else ledC = 0;
 8002c70:	8013      	strh	r3, [r2, #0]
}
 8002c72:	e7ee      	b.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002c74:	2000041c 	.word	0x2000041c
 8002c78:	200009b2 	.word	0x200009b2
 8002c7c:	200009bc 	.word	0x200009bc
 8002c80:	200009b8 	.word	0x200009b8
 8002c84:	200009b6 	.word	0x200009b6
 8002c88:	200009d0 	.word	0x200009d0
 8002c8c:	200009ce 	.word	0x200009ce

08002c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <LoopForever+0xe>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cac:	4c0b      	ldr	r4, [pc, #44]	; (8002cdc <LoopForever+0x16>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cba:	f7fe fa9b 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cbe:	f002 f959 	bl	8004f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc2:	f7fd fde3 	bl	800088c <main>

08002cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cc6:	e7fe      	b.n	8002cc6 <LoopForever>
   ldr   r0, =_estack
 8002cc8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002cd4:	080066bc 	.word	0x080066bc
  ldr r2, =_sbss
 8002cd8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002cdc:	20000eb4 	.word	0x20000eb4

08002ce0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_COMP_IRQHandler>
	...

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	20fa      	movs	r0, #250	; 0xfa
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_InitTick+0x3c>)
 8002cec:	0080      	lsls	r0, r0, #2
 8002cee:	7819      	ldrb	r1, [r3, #0]
 8002cf0:	f7fd fa28 	bl	8000144 <__udivsi3>
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_InitTick+0x40>)
 8002cf6:	0001      	movs	r1, r0
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f7fd fa23 	bl	8000144 <__udivsi3>
 8002cfe:	f000 fb1b 	bl	8003338 <HAL_SYSTICK_Config>
 8002d02:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d06:	2c00      	cmp	r4, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0a:	2d03      	cmp	r5, #3
 8002d0c:	d807      	bhi.n	8002d1e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d0e:	3802      	subs	r0, #2
 8002d10:	0022      	movs	r2, r4
 8002d12:	0029      	movs	r1, r5
 8002d14:	f000 fada 	bl	80032cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d18:	0020      	movs	r0, r4
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_InitTick+0x44>)
 8002d1c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	20000030 	.word	0x20000030
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000034 	.word	0x20000034

08002d2c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d2c:	2340      	movs	r3, #64	; 0x40
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <HAL_Init+0x24>)
{
 8002d30:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d32:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d34:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d36:	430b      	orrs	r3, r1
 8002d38:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d3a:	f7ff ffd3 	bl	8002ce4 <HAL_InitTick>
 8002d3e:	1e04      	subs	r4, r0, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_Init+0x1e>
    HAL_MspInit();
 8002d42:	f7fe f967 	bl	8001014 <HAL_MspInit>
}
 8002d46:	0020      	movs	r0, r4
 8002d48:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002d4a:	2401      	movs	r4, #1
 8002d4c:	e7fb      	b.n	8002d46 <HAL_Init+0x1a>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40022000 	.word	0x40022000

08002d54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HAL_IncTick+0x10>)
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_IncTick+0x14>)
 8002d58:	6811      	ldr	r1, [r2, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	185b      	adds	r3, r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	4770      	bx	lr
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000e88 	.word	0x20000e88
 8002d68:	20000030 	.word	0x20000030

08002d6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <HAL_GetTick+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
}
 8002d70:	4770      	bx	lr
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	20000e88 	.word	0x20000e88

08002d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff fff6 	bl	8002d6c <HAL_GetTick>
 8002d80:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	1c63      	adds	r3, r4, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_Delay+0x20>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	1b40      	subs	r0, r0, r5
 8002d92:	42a0      	cmp	r0, r4
 8002d94:	d3fa      	bcc.n	8002d8c <HAL_Delay+0x14>
  {
  }
}
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	20000030 	.word	0x20000030

08002d9c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <ADC_DelayMicroSecond+0x24>)
{
 8002d9e:	b513      	push	{r0, r1, r4, lr}
 8002da0:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <ADC_DelayMicroSecond+0x28>)
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	f7fd f9cd 	bl	8000144 <__udivsi3>
 8002daa:	4344      	muls	r4, r0
 8002dac:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d100      	bne.n	8002db6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002db4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	e7f7      	b.n	8002dae <ADC_DelayMicroSecond+0x12>
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	000f4240 	.word	0x000f4240

08002dc8 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dc8:	2103      	movs	r1, #3
 8002dca:	6803      	ldr	r3, [r0, #0]
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dd0:	6898      	ldr	r0, [r3, #8]
 8002dd2:	4008      	ands	r0, r1
 8002dd4:	2801      	cmp	r0, #1
 8002dd6:	d001      	beq.n	8002ddc <ADC_Disable+0x14>
  return HAL_OK;
 8002dd8:	2000      	movs	r0, #0
}
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4202      	tst	r2, r0
 8002de0:	d0fa      	beq.n	8002dd8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002de2:	2205      	movs	r2, #5
 8002de4:	689d      	ldr	r5, [r3, #8]
 8002de6:	4015      	ands	r5, r2
 8002de8:	2d01      	cmp	r5, #1
 8002dea:	d11d      	bne.n	8002e28 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8002dec:	6898      	ldr	r0, [r3, #8]
 8002dee:	3a03      	subs	r2, #3
 8002df0:	4302      	orrs	r2, r0
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002df6:	f7ff ffb9 	bl	8002d6c <HAL_GetTick>
 8002dfa:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	422b      	tst	r3, r5
 8002e02:	d0e9      	beq.n	8002dd8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e04:	f7ff ffb2 	bl	8002d6c <HAL_GetTick>
 8002e08:	1b80      	subs	r0, r0, r6
 8002e0a:	280a      	cmp	r0, #10
 8002e0c:	d9f6      	bls.n	8002dfc <ADC_Disable+0x34>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	422b      	tst	r3, r5
 8002e14:	d0f2      	beq.n	8002dfc <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	2310      	movs	r3, #16
 8002e18:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e22:	431d      	orrs	r5, r3
 8002e24:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002e26:	e7d8      	b.n	8002dda <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e28:	2310      	movs	r3, #16
 8002e2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e32:	4303      	orrs	r3, r0
 8002e34:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002e36:	e7d0      	b.n	8002dda <ADC_Disable+0x12>

08002e38 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e38:	2103      	movs	r1, #3
 8002e3a:	6803      	ldr	r3, [r0, #0]
{
 8002e3c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3e:	689a      	ldr	r2, [r3, #8]
{
 8002e40:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e42:	400a      	ands	r2, r1
 8002e44:	2a01      	cmp	r2, #1
 8002e46:	d104      	bne.n	8002e52 <ADC_Enable+0x1a>
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	4211      	tst	r1, r2
 8002e4c:	d001      	beq.n	8002e52 <ADC_Enable+0x1a>
  return HAL_OK;
 8002e4e:	2000      	movs	r0, #0
}
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e52:	6899      	ldr	r1, [r3, #8]
 8002e54:	4a15      	ldr	r2, [pc, #84]	; (8002eac <ADC_Enable+0x74>)
 8002e56:	4211      	tst	r1, r2
 8002e58:	d008      	beq.n	8002e6c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e66:	4303      	orrs	r3, r0
 8002e68:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002e6a:	e7f1      	b.n	8002e50 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8002e6c:	2501      	movs	r5, #1
 8002e6e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002e70:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8002e72:	432a      	orrs	r2, r5
 8002e74:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002e76:	f7ff ff91 	bl	8002d9c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002e7a:	f7ff ff77 	bl	8002d6c <HAL_GetTick>
 8002e7e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	422b      	tst	r3, r5
 8002e86:	d1e2      	bne.n	8002e4e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e88:	f7ff ff70 	bl	8002d6c <HAL_GetTick>
 8002e8c:	1b80      	subs	r0, r0, r6
 8002e8e:	280a      	cmp	r0, #10
 8002e90:	d9f6      	bls.n	8002e80 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	422b      	tst	r3, r5
 8002e98:	d1f2      	bne.n	8002e80 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea6:	431d      	orrs	r5, r3
 8002ea8:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002eaa:	e7d1      	b.n	8002e50 <ADC_Enable+0x18>
 8002eac:	80000017 	.word	0x80000017

08002eb0 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	6803      	ldr	r3, [r0, #0]
{
 8002eb4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002eb6:	6899      	ldr	r1, [r3, #8]
{
 8002eb8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002eba:	4211      	tst	r1, r2
 8002ebc:	d101      	bne.n	8002ec2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8002ebe:	2000      	movs	r0, #0
}
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ec2:	6899      	ldr	r1, [r3, #8]
 8002ec4:	4211      	tst	r1, r2
 8002ec6:	d006      	beq.n	8002ed6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002ec8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002eca:	0792      	lsls	r2, r2, #30
 8002ecc:	d403      	bmi.n	8002ed6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002ece:	2210      	movs	r2, #16
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002ed6:	f7ff ff49 	bl	8002d6c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002eda:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8002edc:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4233      	tst	r3, r6
 8002ee4:	d0eb      	beq.n	8002ebe <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ee6:	f7ff ff41 	bl	8002d6c <HAL_GetTick>
 8002eea:	1b40      	subs	r0, r0, r5
 8002eec:	280a      	cmp	r0, #10
 8002eee:	d9f6      	bls.n	8002ede <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4233      	tst	r3, r6
 8002ef6:	d0f2      	beq.n	8002ede <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002efe:	4313      	orrs	r3, r2
 8002f00:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f04:	4303      	orrs	r3, r0
 8002f06:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002f08:	e7da      	b.n	8002ec0 <ADC_ConversionStop+0x10>
	...

08002f0c <HAL_ADC_Init>:
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002f12:	2c00      	cmp	r4, #0
 8002f14:	d01b      	beq.n	8002f4e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002f1c:	0022      	movs	r2, r4
 8002f1e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002f20:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002f22:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002f24:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002f26:	f7fe f883 	bl	8001030 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f2c:	06db      	lsls	r3, r3, #27
 8002f2e:	d406      	bmi.n	8002f3e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	2204      	movs	r2, #4
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	0008      	movs	r0, r1
 8002f38:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f3a:	4211      	tst	r1, r2
 8002f3c:	d008      	beq.n	8002f50 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	2310      	movs	r3, #16
 8002f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	4313      	orrs	r3, r2
 8002f46:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	3450      	adds	r4, #80	; 0x50
 8002f4c:	7023      	strb	r3, [r4, #0]
}
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002f50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f52:	4955      	ldr	r1, [pc, #340]	; (80030a8 <HAL_ADC_Init+0x19c>)
 8002f54:	4011      	ands	r1, r2
 8002f56:	2202      	movs	r2, #2
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	6899      	ldr	r1, [r3, #8]
 8002f60:	4011      	ands	r1, r2
 8002f62:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_ADC_Init+0x1a0>)
 8002f64:	2901      	cmp	r1, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_ADC_Init+0x62>
 8002f68:	681d      	ldr	r5, [r3, #0]
 8002f6a:	420d      	tst	r5, r1
 8002f6c:	d119      	bne.n	8002fa2 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002f6e:	2680      	movs	r6, #128	; 0x80
 8002f70:	6861      	ldr	r1, [r4, #4]
 8002f72:	05f6      	lsls	r6, r6, #23
 8002f74:	004d      	lsls	r5, r1, #1
 8002f76:	086d      	lsrs	r5, r5, #1
 8002f78:	42b5      	cmp	r5, r6
 8002f7a:	d003      	beq.n	8002f84 <HAL_ADC_Init+0x78>
 8002f7c:	2580      	movs	r5, #128	; 0x80
 8002f7e:	062d      	lsls	r5, r5, #24
 8002f80:	42a9      	cmp	r1, r5
 8002f82:	d176      	bne.n	8003072 <HAL_ADC_Init+0x166>
 8002f84:	691d      	ldr	r5, [r3, #16]
 8002f86:	00ad      	lsls	r5, r5, #2
 8002f88:	08ad      	lsrs	r5, r5, #2
 8002f8a:	611d      	str	r5, [r3, #16]
 8002f8c:	691d      	ldr	r5, [r3, #16]
 8002f8e:	4329      	orrs	r1, r5
 8002f90:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002f92:	2518      	movs	r5, #24
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	43a9      	bics	r1, r5
 8002f98:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	68a5      	ldr	r5, [r4, #8]
 8002f9e:	4329      	orrs	r1, r5
 8002fa0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	4d42      	ldr	r5, [pc, #264]	; (80030b0 <HAL_ADC_Init+0x1a4>)
 8002fa6:	4029      	ands	r1, r5
 8002fa8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fac:	6815      	ldr	r5, [r2, #0]
 8002fae:	0649      	lsls	r1, r1, #25
 8002fb0:	4329      	orrs	r1, r5
 8002fb2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	0552      	lsls	r2, r2, #21
 8002fba:	4211      	tst	r1, r2
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	493b      	ldr	r1, [pc, #236]	; (80030b4 <HAL_ADC_Init+0x1a8>)
 8002fc8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fca:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002fcc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fce:	68dd      	ldr	r5, [r3, #12]
 8002fd0:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fd2:	2902      	cmp	r1, #2
 8002fd4:	d100      	bne.n	8002fd8 <HAL_ADC_Init+0xcc>
 8002fd6:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fd8:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fda:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fdc:	4332      	orrs	r2, r6
 8002fde:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fe0:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fe2:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fe4:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fe6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002fe8:	69e5      	ldr	r5, [r4, #28]
 8002fea:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fec:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fee:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ff0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002ff2:	0025      	movs	r5, r4
 8002ff4:	352c      	adds	r5, #44	; 0x2c
 8002ff6:	782d      	ldrb	r5, [r5, #0]
 8002ff8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ffa:	432a      	orrs	r2, r5
 8002ffc:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffe:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003000:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003002:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003004:	30ff      	adds	r0, #255	; 0xff
 8003006:	4282      	cmp	r2, r0
 8003008:	d004      	beq.n	8003014 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800300a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800300c:	68d8      	ldr	r0, [r3, #12]
 800300e:	432a      	orrs	r2, r5
 8003010:	4302      	orrs	r2, r0
 8003012:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003014:	1ca2      	adds	r2, r4, #2
 8003016:	7fd2      	ldrb	r2, [r2, #31]
 8003018:	2a01      	cmp	r2, #1
 800301a:	d106      	bne.n	800302a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800301c:	2900      	cmp	r1, #0
 800301e:	d134      	bne.n	800308a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	68d9      	ldr	r1, [r3, #12]
 8003024:	0252      	lsls	r2, r2, #9
 8003026:	430a      	orrs	r2, r1
 8003028:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800302a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800302c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800302e:	2901      	cmp	r1, #1
 8003030:	d133      	bne.n	800309a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003032:	4821      	ldr	r0, [pc, #132]	; (80030b8 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003034:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003036:	4002      	ands	r2, r0
 8003038:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800303a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800303c:	6918      	ldr	r0, [r3, #16]
 800303e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003040:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003042:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003044:	4302      	orrs	r2, r0
 8003046:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	4311      	orrs	r1, r2
 800304c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800304e:	2107      	movs	r1, #7
 8003050:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003052:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003054:	438a      	bics	r2, r1
 8003056:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800305c:	430a      	orrs	r2, r1
 800305e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003060:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003062:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003064:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003066:	4393      	bics	r3, r2
 8003068:	001a      	movs	r2, r3
 800306a:	2301      	movs	r3, #1
 800306c:	4313      	orrs	r3, r2
 800306e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003070:	e76d      	b.n	8002f4e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003072:	691d      	ldr	r5, [r3, #16]
 8003074:	4e11      	ldr	r6, [pc, #68]	; (80030bc <HAL_ADC_Init+0x1b0>)
 8003076:	00ad      	lsls	r5, r5, #2
 8003078:	08ad      	lsrs	r5, r5, #2
 800307a:	611d      	str	r5, [r3, #16]
 800307c:	6815      	ldr	r5, [r2, #0]
 800307e:	4035      	ands	r5, r6
 8003080:	6015      	str	r5, [r2, #0]
 8003082:	6815      	ldr	r5, [r2, #0]
 8003084:	4329      	orrs	r1, r5
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	e783      	b.n	8002f92 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308a:	2120      	movs	r1, #32
 800308c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800308e:	4301      	orrs	r1, r0
 8003090:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003094:	430a      	orrs	r2, r1
 8003096:	65a2      	str	r2, [r4, #88]	; 0x58
 8003098:	e7c7      	b.n	800302a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800309a:	2101      	movs	r1, #1
 800309c:	420a      	tst	r2, r1
 800309e:	d0d6      	beq.n	800304e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	438a      	bics	r2, r1
 80030a4:	611a      	str	r2, [r3, #16]
 80030a6:	e7d2      	b.n	800304e <HAL_ADC_Init+0x142>
 80030a8:	fffffefd 	.word	0xfffffefd
 80030ac:	40012708 	.word	0x40012708
 80030b0:	fdffffff 	.word	0xfdffffff
 80030b4:	fffe0219 	.word	0xfffe0219
 80030b8:	fffffc03 	.word	0xfffffc03
 80030bc:	ffc3ffff 	.word	0xffc3ffff

080030c0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030c0:	6803      	ldr	r3, [r0, #0]
{
 80030c2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030c4:	689b      	ldr	r3, [r3, #8]
{
 80030c6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80030c8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030ca:	075b      	lsls	r3, r3, #29
 80030cc:	d41a      	bmi.n	8003104 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80030ce:	0025      	movs	r5, r4
 80030d0:	3550      	adds	r5, #80	; 0x50
 80030d2:	782b      	ldrb	r3, [r5, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d015      	beq.n	8003104 <HAL_ADC_Start+0x44>
 80030d8:	2301      	movs	r3, #1
 80030da:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030dc:	69e3      	ldr	r3, [r4, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d111      	bne.n	8003106 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80030e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80030e6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80030e8:	401a      	ands	r2, r3
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030f0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80030f2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80030f4:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80030f6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80030fc:	6899      	ldr	r1, [r3, #8]
 80030fe:	3a18      	subs	r2, #24
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
}
 8003104:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003106:	0020      	movs	r0, r4
 8003108:	f7ff fe96 	bl	8002e38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800310c:	2800      	cmp	r0, #0
 800310e:	d0e8      	beq.n	80030e2 <HAL_ADC_Start+0x22>
 8003110:	e7f8      	b.n	8003104 <HAL_ADC_Start+0x44>
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	fffff0fe 	.word	0xfffff0fe

08003118 <HAL_ADC_Stop>:
{
 8003118:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800311a:	0006      	movs	r6, r0
 800311c:	3650      	adds	r6, #80	; 0x50
 800311e:	7833      	ldrb	r3, [r6, #0]
{
 8003120:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003122:	2002      	movs	r0, #2
 8003124:	2b01      	cmp	r3, #1
 8003126:	d012      	beq.n	800314e <HAL_ADC_Stop+0x36>
 8003128:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800312a:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800312c:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800312e:	f7ff febf 	bl	8002eb0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003132:	2800      	cmp	r0, #0
 8003134:	d109      	bne.n	800314a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8003136:	0020      	movs	r0, r4
 8003138:	f7ff fe46 	bl	8002dc8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800313c:	2800      	cmp	r0, #0
 800313e:	d104      	bne.n	800314a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8003140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003142:	4a03      	ldr	r2, [pc, #12]	; (8003150 <HAL_ADC_Stop+0x38>)
 8003144:	4013      	ands	r3, r2
 8003146:	431d      	orrs	r5, r3
 8003148:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800314a:	2300      	movs	r3, #0
 800314c:	7033      	strb	r3, [r6, #0]
}
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	fffffefe 	.word	0xfffffefe

08003154 <HAL_ADC_PollForConversion>:
{
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003156:	6945      	ldr	r5, [r0, #20]
{
 8003158:	0004      	movs	r4, r0
 800315a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800315c:	2d08      	cmp	r5, #8
 800315e:	d00d      	beq.n	800317c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	2001      	movs	r0, #1
 8003164:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003166:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003168:	4203      	tst	r3, r0
 800316a:	d007      	beq.n	800317c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316c:	2320      	movs	r3, #32
 800316e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003170:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003172:	4313      	orrs	r3, r2
 8003174:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003176:	2300      	movs	r3, #0
 8003178:	7023      	strb	r3, [r4, #0]
}
 800317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800317c:	f7ff fdf6 	bl	8002d6c <HAL_GetTick>
 8003180:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4215      	tst	r5, r2
 8003188:	d024      	beq.n	80031d4 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	430a      	orrs	r2, r1
 8003192:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003194:	22c0      	movs	r2, #192	; 0xc0
 8003196:	68d9      	ldr	r1, [r3, #12]
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	4211      	tst	r1, r2
 800319c:	d113      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800319e:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031a0:	7fd2      	ldrb	r2, [r2, #31]
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	0712      	lsls	r2, r2, #28
 80031aa:	d50c      	bpl.n	80031c6 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	0752      	lsls	r2, r2, #29
 80031b0:	d428      	bmi.n	8003204 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031b2:	210c      	movs	r1, #12
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	438a      	bics	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80031ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_ADC_PollForConversion+0xc4>)
 80031be:	4011      	ands	r1, r2
 80031c0:	2201      	movs	r2, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80031c6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80031c8:	69a2      	ldr	r2, [r4, #24]
 80031ca:	4282      	cmp	r2, r0
 80031cc:	d1d5      	bne.n	800317a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e7d2      	b.n	800317a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80031d4:	1c72      	adds	r2, r6, #1
 80031d6:	d0d5      	beq.n	8003184 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80031d8:	2e00      	cmp	r6, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031dc:	002a      	movs	r2, r5
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	401a      	ands	r2, r3
 80031e4:	421d      	tst	r5, r3
 80031e6:	d1cc      	bne.n	8003182 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031e8:	2304      	movs	r3, #4
 80031ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 80031ec:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80031f2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80031f4:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80031f6:	e7c0      	b.n	800317a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80031f8:	f7ff fdb8 	bl	8002d6c <HAL_GetTick>
 80031fc:	1bc0      	subs	r0, r0, r7
 80031fe:	42b0      	cmp	r0, r6
 8003200:	d8ec      	bhi.n	80031dc <HAL_ADC_PollForConversion+0x88>
 8003202:	e7be      	b.n	8003182 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003204:	2220      	movs	r2, #32
 8003206:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003208:	430a      	orrs	r2, r1
 800320a:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	2201      	movs	r2, #1
 800320e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003210:	430a      	orrs	r2, r1
 8003212:	65a2      	str	r2, [r4, #88]	; 0x58
 8003214:	e7d7      	b.n	80031c6 <HAL_ADC_PollForConversion+0x72>
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	fffffefe 	.word	0xfffffefe

0800321c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800321c:	6803      	ldr	r3, [r0, #0]
 800321e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003220:	4770      	bx	lr
	...

08003224 <HAL_ADC_ConfigChannel>:
{
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8003226:	0004      	movs	r4, r0
 8003228:	3450      	adds	r4, #80	; 0x50
 800322a:	7822      	ldrb	r2, [r4, #0]
{
 800322c:	0003      	movs	r3, r0
 800322e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8003230:	2002      	movs	r0, #2
 8003232:	2a01      	cmp	r2, #1
 8003234:	d00b      	beq.n	800324e <HAL_ADC_ConfigChannel+0x2a>
 8003236:	3801      	subs	r0, #1
 8003238:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6891      	ldr	r1, [r2, #8]
 800323e:	0749      	lsls	r1, r1, #29
 8003240:	d506      	bpl.n	8003250 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003242:	2220      	movs	r2, #32
 8003244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003246:	430a      	orrs	r2, r1
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800324a:	2300      	movs	r3, #0
 800324c:	7023      	strb	r3, [r4, #0]
}
 800324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003250:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003252:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003254:	4e19      	ldr	r6, [pc, #100]	; (80032bc <HAL_ADC_ConfigChannel+0x98>)
 8003256:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003258:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800325a:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800325c:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800325e:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003260:	42b7      	cmp	r7, r6
 8003262:	d019      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003264:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003266:	4301      	orrs	r1, r0
 8003268:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_ADC_ConfigChannel+0x9c>)
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003276:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003278:	430b      	orrs	r3, r1
 800327a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800327c:	f7ff fd8e 	bl	8002d9c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	039b      	lsls	r3, r3, #14
 8003284:	d505      	bpl.n	8003292 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <HAL_ADC_ConfigChannel+0x9c>)
 800328a:	03db      	lsls	r3, r3, #15
 800328c:	6811      	ldr	r1, [r2, #0]
 800328e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003290:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003292:	2000      	movs	r0, #0
 8003294:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003296:	e7da      	b.n	800324e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003298:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800329a:	438d      	bics	r5, r1
 800329c:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_ADC_ConfigChannel+0x9c>)
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <HAL_ADC_ConfigChannel+0xa0>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	400b      	ands	r3, r1
 80032aa:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80032ac:	0383      	lsls	r3, r0, #14
 80032ae:	d5f0      	bpl.n	8003292 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80032b0:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <HAL_ADC_ConfigChannel+0x9c>)
 80032b2:	4905      	ldr	r1, [pc, #20]	; (80032c8 <HAL_ADC_ConfigChannel+0xa4>)
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	400b      	ands	r3, r1
 80032b8:	e7ea      	b.n	8003290 <HAL_ADC_ConfigChannel+0x6c>
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	00001001 	.word	0x00001001
 80032c0:	40012708 	.word	0x40012708
 80032c4:	ff7fffff 	.word	0xff7fffff
 80032c8:	ffbfffff 	.word	0xffbfffff

080032cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032cc:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ce:	25ff      	movs	r5, #255	; 0xff
 80032d0:	2403      	movs	r4, #3
 80032d2:	002a      	movs	r2, r5
 80032d4:	4004      	ands	r4, r0
 80032d6:	00e4      	lsls	r4, r4, #3
 80032d8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032da:	0189      	lsls	r1, r1, #6
 80032dc:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032de:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032e0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80032e4:	2800      	cmp	r0, #0
 80032e6:	db0a      	blt.n	80032fe <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e8:	24c0      	movs	r4, #192	; 0xc0
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_NVIC_SetPriority+0x4c>)
 80032ec:	0880      	lsrs	r0, r0, #2
 80032ee:	0080      	lsls	r0, r0, #2
 80032f0:	18c0      	adds	r0, r0, r3
 80032f2:	00a4      	lsls	r4, r4, #2
 80032f4:	5903      	ldr	r3, [r0, r4]
 80032f6:	401a      	ands	r2, r3
 80032f8:	4311      	orrs	r1, r2
 80032fa:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80032fc:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fe:	200f      	movs	r0, #15
 8003300:	4003      	ands	r3, r0
 8003302:	3b08      	subs	r3, #8
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <HAL_NVIC_SetPriority+0x50>)
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	181b      	adds	r3, r3, r0
 800330c:	69d8      	ldr	r0, [r3, #28]
 800330e:	4002      	ands	r2, r0
 8003310:	4311      	orrs	r1, r2
 8003312:	61d9      	str	r1, [r3, #28]
 8003314:	e7f2      	b.n	80032fc <HAL_NVIC_SetPriority+0x30>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003320:	2800      	cmp	r0, #0
 8003322:	db05      	blt.n	8003330 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003324:	231f      	movs	r3, #31
 8003326:	4018      	ands	r0, r3
 8003328:	3b1e      	subs	r3, #30
 800332a:	4083      	lsls	r3, r0
 800332c:	4a01      	ldr	r2, [pc, #4]	; (8003334 <HAL_NVIC_EnableIRQ+0x14>)
 800332e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003330:	4770      	bx	lr
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	e000e100 	.word	0xe000e100

08003338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	1e43      	subs	r3, r0, #1
 800333c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	4293      	cmp	r3, r2
 8003342:	d20d      	bcs.n	8003360 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003344:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	6a03      	ldr	r3, [r0, #32]
 800334e:	0609      	lsls	r1, r1, #24
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	430b      	orrs	r3, r1
 8003356:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800335c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003360:	4770      	bx	lr
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	e000e010 	.word	0xe000e010
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003370:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003372:	2c00      	cmp	r4, #0
 8003374:	d035      	beq.n	80033e2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003376:	6825      	ldr	r5, [r4, #0]
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_DMA_Init+0x78>)
 800337a:	2114      	movs	r1, #20
 800337c:	18e8      	adds	r0, r5, r3
 800337e:	f7fc fee1 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003384:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003386:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	2302      	movs	r3, #2
 800338a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800338c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800338e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003390:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003394:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003396:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003398:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800339c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	433b      	orrs	r3, r7
 80033a0:	6967      	ldr	r7, [r4, #20]
 80033a2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a4:	69a7      	ldr	r7, [r4, #24]
 80033a6:	433b      	orrs	r3, r7
 80033a8:	69e7      	ldr	r7, [r4, #28]
 80033aa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	6a27      	ldr	r7, [r4, #32]
 80033ae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80033b0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	01db      	lsls	r3, r3, #7
 80033b8:	4299      	cmp	r1, r3
 80033ba:	d00c      	beq.n	80033d6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033bc:	251c      	movs	r5, #28
 80033be:	4028      	ands	r0, r5
 80033c0:	3d0d      	subs	r5, #13
 80033c2:	4085      	lsls	r5, r0
 80033c4:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_DMA_Init+0x84>)
 80033c6:	680b      	ldr	r3, [r1, #0]
 80033c8:	43ab      	bics	r3, r5
 80033ca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	680d      	ldr	r5, [r1, #0]
 80033d0:	4083      	lsls	r3, r0
 80033d2:	432b      	orrs	r3, r5
 80033d4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033d8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033da:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033dc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80033de:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80033e0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80033e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e4:	bffdfff8 	.word	0xbffdfff8
 80033e8:	40020000 	.word	0x40020000
 80033ec:	ffff800f 	.word	0xffff800f
 80033f0:	400200a8 	.word	0x400200a8

080033f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033f6:	1d45      	adds	r5, r0, #5
{
 80033f8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80033fa:	7feb      	ldrb	r3, [r5, #31]
{
 80033fc:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80033fe:	2002      	movs	r0, #2
 8003400:	2b01      	cmp	r3, #1
 8003402:	d029      	beq.n	8003458 <HAL_DMA_Start_IT+0x64>
 8003404:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003406:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003408:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800340a:	7ffb      	ldrb	r3, [r7, #31]
 800340c:	2600      	movs	r6, #0
 800340e:	469c      	mov	ip, r3
 8003410:	4660      	mov	r0, ip
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2801      	cmp	r0, #1
 8003416:	d12a      	bne.n	800346e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003418:	3001      	adds	r0, #1
 800341a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800341c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003420:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003422:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003424:	361c      	adds	r6, #28
 8003426:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8003428:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800342a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800342c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800342e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003430:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003432:	9b01      	ldr	r3, [sp, #4]
 8003434:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003436:	68a3      	ldr	r3, [r4, #8]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d10e      	bne.n	800345a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800343c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800343e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003446:	230e      	movs	r3, #14
 8003448:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800344a:	4313      	orrs	r3, r2
 800344c:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800344e:	2301      	movs	r3, #1
 8003450:	6802      	ldr	r2, [r0, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2000      	movs	r0, #0
}
 8003458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800345a:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800345c:	60c2      	str	r2, [r0, #12]
 800345e:	e7ef      	b.n	8003440 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003460:	2204      	movs	r2, #4
 8003462:	6803      	ldr	r3, [r0, #0]
 8003464:	4393      	bics	r3, r2
 8003466:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003468:	6802      	ldr	r2, [r0, #0]
 800346a:	230a      	movs	r3, #10
 800346c:	e7ed      	b.n	800344a <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800346e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003470:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003472:	e7f1      	b.n	8003458 <HAL_DMA_Start_IT+0x64>

08003474 <HAL_DMA_IRQHandler>:
{
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003476:	221c      	movs	r2, #28
 8003478:	2704      	movs	r7, #4
 800347a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800347c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800347e:	4032      	ands	r2, r6
 8003480:	003e      	movs	r6, r7
 8003482:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003484:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003486:	6803      	ldr	r3, [r0, #0]
 8003488:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800348a:	4235      	tst	r5, r6
 800348c:	d00d      	beq.n	80034aa <HAL_DMA_IRQHandler+0x36>
 800348e:	423c      	tst	r4, r7
 8003490:	d00b      	beq.n	80034aa <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	0692      	lsls	r2, r2, #26
 8003496:	d402      	bmi.n	800349e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	43ba      	bics	r2, r7
 800349c:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800349e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80034a0:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d019      	beq.n	80034da <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80034a6:	4798      	blx	r3
  return;
 80034a8:	e017      	b.n	80034da <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80034aa:	2702      	movs	r7, #2
 80034ac:	003e      	movs	r6, r7
 80034ae:	4096      	lsls	r6, r2
 80034b0:	4235      	tst	r5, r6
 80034b2:	d013      	beq.n	80034dc <HAL_DMA_IRQHandler+0x68>
 80034b4:	423c      	tst	r4, r7
 80034b6:	d011      	beq.n	80034dc <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	0692      	lsls	r2, r2, #26
 80034bc:	d406      	bmi.n	80034cc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034be:	240a      	movs	r4, #10
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	43a2      	bics	r2, r4
 80034c4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80034c6:	2201      	movs	r2, #1
 80034c8:	1d83      	adds	r3, r0, #6
 80034ca:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80034cc:	2200      	movs	r2, #0
 80034ce:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80034d0:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80034d2:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80034d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d1e5      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x32>
}
 80034da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80034dc:	2608      	movs	r6, #8
 80034de:	0037      	movs	r7, r6
 80034e0:	4097      	lsls	r7, r2
 80034e2:	423d      	tst	r5, r7
 80034e4:	d0f9      	beq.n	80034da <HAL_DMA_IRQHandler+0x66>
 80034e6:	4234      	tst	r4, r6
 80034e8:	d0f7      	beq.n	80034da <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	250e      	movs	r5, #14
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	43ac      	bics	r4, r5
 80034f0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034f2:	2301      	movs	r3, #1
 80034f4:	001c      	movs	r4, r3
 80034f6:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80034f8:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034fa:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80034fe:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003500:	2200      	movs	r2, #0
 8003502:	1d43      	adds	r3, r0, #5
 8003504:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003508:	e7e5      	b.n	80034d6 <HAL_DMA_IRQHandler+0x62>
	...

0800350c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800350c:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <FLASH_SetErrorCode+0xa4>)
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	6990      	ldr	r0, [r2, #24]
 8003512:	0049      	lsls	r1, r1, #1
 8003514:	0003      	movs	r3, r0
{
 8003516:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003518:	400b      	ands	r3, r1
 800351a:	4208      	tst	r0, r1
 800351c:	d005      	beq.n	800352a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800351e:	2302      	movs	r3, #2
 8003520:	4824      	ldr	r0, [pc, #144]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
 8003522:	6944      	ldr	r4, [r0, #20]
 8003524:	4323      	orrs	r3, r4
 8003526:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003528:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800352a:	2080      	movs	r0, #128	; 0x80
 800352c:	6991      	ldr	r1, [r2, #24]
 800352e:	0080      	lsls	r0, r0, #2
 8003530:	4201      	tst	r1, r0
 8003532:	d005      	beq.n	8003540 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003534:	2101      	movs	r1, #1
 8003536:	4c1f      	ldr	r4, [pc, #124]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8003538:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800353a:	6965      	ldr	r5, [r4, #20]
 800353c:	4329      	orrs	r1, r5
 800353e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003540:	2080      	movs	r0, #128	; 0x80
 8003542:	6991      	ldr	r1, [r2, #24]
 8003544:	00c0      	lsls	r0, r0, #3
 8003546:	4201      	tst	r1, r0
 8003548:	d005      	beq.n	8003556 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800354a:	2108      	movs	r1, #8
 800354c:	4c19      	ldr	r4, [pc, #100]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 800354e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003550:	6965      	ldr	r5, [r4, #20]
 8003552:	4329      	orrs	r1, r5
 8003554:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003556:	2080      	movs	r0, #128	; 0x80
 8003558:	6991      	ldr	r1, [r2, #24]
 800355a:	0100      	lsls	r0, r0, #4
 800355c:	4201      	tst	r1, r0
 800355e:	d005      	beq.n	800356c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003560:	2104      	movs	r1, #4
 8003562:	4c14      	ldr	r4, [pc, #80]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003564:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003566:	6965      	ldr	r5, [r4, #20]
 8003568:	4329      	orrs	r1, r5
 800356a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800356c:	2080      	movs	r0, #128	; 0x80
 800356e:	6991      	ldr	r1, [r2, #24]
 8003570:	0180      	lsls	r0, r0, #6
 8003572:	4201      	tst	r1, r0
 8003574:	d005      	beq.n	8003582 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003576:	2110      	movs	r1, #16
 8003578:	4c0e      	ldr	r4, [pc, #56]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800357a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800357c:	6965      	ldr	r5, [r4, #20]
 800357e:	4329      	orrs	r1, r5
 8003580:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003582:	6991      	ldr	r1, [r2, #24]
 8003584:	0389      	lsls	r1, r1, #14
 8003586:	d505      	bpl.n	8003594 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003588:	2020      	movs	r0, #32
 800358a:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800358c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800358e:	6961      	ldr	r1, [r4, #20]
 8003590:	4301      	orrs	r1, r0
 8003592:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003594:	2080      	movs	r0, #128	; 0x80
 8003596:	6991      	ldr	r1, [r2, #24]
 8003598:	0240      	lsls	r0, r0, #9
 800359a:	4201      	tst	r1, r0
 800359c:	d005      	beq.n	80035aa <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	4c04      	ldr	r4, [pc, #16]	; (80035b4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80035a2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80035a4:	6965      	ldr	r5, [r4, #20]
 80035a6:	4329      	orrs	r1, r5
 80035a8:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035aa:	6193      	str	r3, [r2, #24]
}  
 80035ac:	bd30      	pop	{r4, r5, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	40022000 	.word	0x40022000
 80035b4:	20000e8c 	.word	0x20000e8c

080035b8 <FLASH_WaitForLastOperation>:
{
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035bc:	f7ff fbd6 	bl	8002d6c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035c0:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80035c2:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <FLASH_WaitForLastOperation+0x70>)
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	4232      	tst	r2, r6
 80035ca:	d121      	bne.n	8003610 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035cc:	2202      	movs	r2, #2
 80035ce:	6999      	ldr	r1, [r3, #24]
 80035d0:	4211      	tst	r1, r2
 80035d2:	d000      	beq.n	80035d6 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035d4:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	05d2      	lsls	r2, r2, #23
 80035da:	d415      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80035dc:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80035de:	0592      	lsls	r2, r2, #22
 80035e0:	d412      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80035e2:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	d40f      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80035e8:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80035ea:	0512      	lsls	r2, r2, #20
 80035ec:	d40c      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035ee:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80035f0:	0492      	lsls	r2, r2, #18
 80035f2:	d409      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0008      	movs	r0, r1
 80035fa:	0292      	lsls	r2, r2, #10
 80035fc:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035fe:	4211      	tst	r1, r2
 8003600:	d102      	bne.n	8003608 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003602:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003604:	03db      	lsls	r3, r3, #15
 8003606:	d508      	bpl.n	800361a <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8003608:	f7ff ff80 	bl	800350c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e004      	b.n	800361a <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003610:	1c62      	adds	r2, r4, #1
 8003612:	d0d8      	beq.n	80035c6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003614:	2c00      	cmp	r4, #0
 8003616:	d101      	bne.n	800361c <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8003618:	2003      	movs	r0, #3
}
 800361a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800361c:	f7ff fba6 	bl	8002d6c <HAL_GetTick>
 8003620:	1b40      	subs	r0, r0, r5
 8003622:	42a0      	cmp	r0, r4
 8003624:	d9ce      	bls.n	80035c4 <FLASH_WaitForLastOperation+0xc>
 8003626:	e7f7      	b.n	8003618 <FLASH_WaitForLastOperation+0x60>
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800362c:	2201      	movs	r2, #1
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003630:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	4211      	tst	r1, r2
 8003636:	d00a      	beq.n	800364e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003638:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800363e:	4805      	ldr	r0, [pc, #20]	; (8003654 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003640:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003644:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	4010      	ands	r0, r2
}
 800364e:	4770      	bx	lr
 8003650:	40022000 	.word	0x40022000
 8003654:	89abcdef 	.word	0x89abcdef
 8003658:	02030405 	.word	0x02030405

0800365c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800365c:	2301      	movs	r3, #1
 800365e:	4a03      	ldr	r2, [pc, #12]	; (800366c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003660:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003662:	6851      	ldr	r1, [r2, #4]
 8003664:	430b      	orrs	r3, r1
 8003666:	6053      	str	r3, [r2, #4]
}
 8003668:	4770      	bx	lr
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003672:	4f12      	ldr	r7, [pc, #72]	; (80036bc <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8003674:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8003676:	7c3b      	ldrb	r3, [r7, #16]
{
 8003678:	000d      	movs	r5, r1
 800367a:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800367c:	2002      	movs	r0, #2
 800367e:	2b01      	cmp	r3, #1
 8003680:	d00c      	beq.n	800369c <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003682:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003684:	480e      	ldr	r0, [pc, #56]	; (80036c0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8003686:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003688:	f7ff ff96 	bl	80035b8 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800368c:	2800      	cmp	r0, #0
 800368e:	d103      	bne.n	8003698 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003690:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003692:	2e02      	cmp	r6, #2
 8003694:	d103      	bne.n	800369e <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003696:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003698:	2300      	movs	r3, #0
 800369a:	743b      	strb	r3, [r7, #16]

  return status;
}
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800369e:	2e01      	cmp	r6, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80036a2:	b2a4      	uxth	r4, r4
 80036a4:	802c      	strh	r4, [r5, #0]
 80036a6:	e7f7      	b.n	8003698 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80036a8:	2e00      	cmp	r6, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036ac:	4804      	ldr	r0, [pc, #16]	; (80036c0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80036ae:	f7ff ff83 	bl	80035b8 <FLASH_WaitForLastOperation>
 80036b2:	e7f1      	b.n	8003698 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80036b4:	b2e4      	uxtb	r4, r4
 80036b6:	702c      	strb	r4, [r5, #0]
 80036b8:	e7ee      	b.n	8003698 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000e8c 	.word	0x20000e8c
 80036c0:	0000c350 	.word	0x0000c350

080036c4 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_GPIO_Init+0x164>)
{
 80036c6:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036c8:	1882      	adds	r2, r0, r2
 80036ca:	1e54      	subs	r4, r2, #1
 80036cc:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80036ce:	2300      	movs	r3, #0
{
 80036d0:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036d2:	3205      	adds	r2, #5
{
 80036d4:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036d6:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80036d8:	9a03      	ldr	r2, [sp, #12]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	0014      	movs	r4, r2
 80036de:	40dc      	lsrs	r4, r3
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80036e2:	b007      	add	sp, #28
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036e6:	2101      	movs	r1, #1
 80036e8:	000d      	movs	r5, r1
 80036ea:	0014      	movs	r4, r2
 80036ec:	409d      	lsls	r5, r3
 80036ee:	402c      	ands	r4, r5
 80036f0:	468c      	mov	ip, r1
 80036f2:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80036f4:	422a      	tst	r2, r5
 80036f6:	d100      	bne.n	80036fa <HAL_GPIO_Init+0x36>
 80036f8:	e094      	b.n	8003824 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036fa:	2403      	movs	r4, #3
 80036fc:	9a03      	ldr	r2, [sp, #12]
 80036fe:	005e      	lsls	r6, r3, #1
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	9201      	str	r2, [sp, #4]
 8003704:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003706:	40b4      	lsls	r4, r6
 8003708:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800370a:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800370c:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800370e:	4564      	cmp	r4, ip
 8003710:	d82a      	bhi.n	8003768 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8003712:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003714:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003716:	9903      	ldr	r1, [sp, #12]
 8003718:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371a:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371c:	40b4      	lsls	r4, r6
 800371e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8003720:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003722:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003724:	43ac      	bics	r4, r5
 8003726:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003728:	090c      	lsrs	r4, r1, #4
 800372a:	4661      	mov	r1, ip
 800372c:	400c      	ands	r4, r1
 800372e:	409c      	lsls	r4, r3
 8003730:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003732:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003734:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003736:	9904      	ldr	r1, [sp, #16]
 8003738:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800373a:	9903      	ldr	r1, [sp, #12]
 800373c:	688c      	ldr	r4, [r1, #8]
 800373e:	40b4      	lsls	r4, r6
 8003740:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003742:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003744:	2a02      	cmp	r2, #2
 8003746:	d111      	bne.n	800376c <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003748:	2507      	movs	r5, #7
 800374a:	210f      	movs	r1, #15
 800374c:	401d      	ands	r5, r3
 800374e:	00ad      	lsls	r5, r5, #2
 8003750:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003752:	08dc      	lsrs	r4, r3, #3
 8003754:	00a4      	lsls	r4, r4, #2
 8003756:	1904      	adds	r4, r0, r4
 8003758:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800375a:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800375c:	9903      	ldr	r1, [sp, #12]
 800375e:	6909      	ldr	r1, [r1, #16]
 8003760:	40a9      	lsls	r1, r5
 8003762:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003764:	6227      	str	r7, [r4, #32]
 8003766:	e001      	b.n	800376c <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003768:	2a03      	cmp	r2, #3
 800376a:	d1e3      	bne.n	8003734 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376c:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800376e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003770:	9904      	ldr	r1, [sp, #16]
 8003772:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8003776:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003778:	22c0      	movs	r2, #192	; 0xc0
 800377a:	9901      	ldr	r1, [sp, #4]
 800377c:	0292      	lsls	r2, r2, #10
 800377e:	4211      	tst	r1, r2
 8003780:	d050      	beq.n	8003824 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2701      	movs	r7, #1
 8003784:	4c29      	ldr	r4, [pc, #164]	; (800382c <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003786:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003788:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800378a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378c:	433a      	orrs	r2, r7
 800378e:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_GPIO_Init+0x16c>)
 8003792:	089c      	lsrs	r4, r3, #2
 8003794:	00a4      	lsls	r4, r4, #2
 8003796:	18a4      	adds	r4, r4, r2
 8003798:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800379a:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800379c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800379e:	220f      	movs	r2, #15
 80037a0:	00ad      	lsls	r5, r5, #2
 80037a2:	40aa      	lsls	r2, r5
 80037a4:	4661      	mov	r1, ip
 80037a6:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037a8:	22a0      	movs	r2, #160	; 0xa0
 80037aa:	05d2      	lsls	r2, r2, #23
 80037ac:	4694      	mov	ip, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	4560      	cmp	r0, ip
 80037b2:	d00d      	beq.n	80037d0 <HAL_GPIO_Init+0x10c>
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_GPIO_Init+0x170>)
 80037b6:	4694      	mov	ip, r2
 80037b8:	003a      	movs	r2, r7
 80037ba:	4560      	cmp	r0, ip
 80037bc:	d008      	beq.n	80037d0 <HAL_GPIO_Init+0x10c>
 80037be:	4f1e      	ldr	r7, [pc, #120]	; (8003838 <HAL_GPIO_Init+0x174>)
 80037c0:	1892      	adds	r2, r2, r2
 80037c2:	42b8      	cmp	r0, r7
 80037c4:	d004      	beq.n	80037d0 <HAL_GPIO_Init+0x10c>
 80037c6:	4f1d      	ldr	r7, [pc, #116]	; (800383c <HAL_GPIO_Init+0x178>)
 80037c8:	0032      	movs	r2, r6
 80037ca:	42b8      	cmp	r0, r7
 80037cc:	d000      	beq.n	80037d0 <HAL_GPIO_Init+0x10c>
 80037ce:	9a05      	ldr	r2, [sp, #20]
 80037d0:	40aa      	lsls	r2, r5
 80037d2:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80037d4:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d6:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80037d8:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80037dc:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 80037de:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e0:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80037e2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	03c9      	lsls	r1, r1, #15
 80037e6:	d401      	bmi.n	80037ec <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80037e8:	0035      	movs	r5, r6
 80037ea:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80037ec:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80037ee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80037f0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80037f4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f6:	0389      	lsls	r1, r1, #14
 80037f8:	d401      	bmi.n	80037fe <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80037fa:	0035      	movs	r5, r6
 80037fc:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80037fe:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003800:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003802:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003804:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003806:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003808:	02c9      	lsls	r1, r1, #11
 800380a:	d401      	bmi.n	8003810 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 800380c:	0035      	movs	r5, r6
 800380e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003810:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003812:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003814:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003816:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003818:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800381a:	0289      	lsls	r1, r1, #10
 800381c:	d401      	bmi.n	8003822 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800381e:	4025      	ands	r5, r4
 8003820:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003822:	60d6      	str	r6, [r2, #12]
    position++;
 8003824:	3301      	adds	r3, #1
 8003826:	e757      	b.n	80036d8 <HAL_GPIO_Init+0x14>
 8003828:	afffe400 	.word	0xafffe400
 800382c:	40021000 	.word	0x40021000
 8003830:	40010000 	.word	0x40010000
 8003834:	50000400 	.word	0x50000400
 8003838:	50000800 	.word	0x50000800
 800383c:	50000c00 	.word	0x50000c00
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003844:	6900      	ldr	r0, [r0, #16]
 8003846:	4008      	ands	r0, r1
 8003848:	1e43      	subs	r3, r0, #1
 800384a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800384c:	b2c0      	uxtb	r0, r0
}
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003850:	2a00      	cmp	r2, #0
 8003852:	d001      	beq.n	8003858 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003854:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003856:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003858:	6281      	str	r1, [r0, #40]	; 0x28
}
 800385a:	e7fc      	b.n	8003856 <HAL_GPIO_WritePin+0x6>

0800385c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	0792      	lsls	r2, r2, #30
 8003862:	d501      	bpl.n	8003868 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003864:	2200      	movs	r2, #0
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003868:	2201      	movs	r2, #1
 800386a:	6999      	ldr	r1, [r3, #24]
 800386c:	4211      	tst	r1, r2
 800386e:	d102      	bne.n	8003876 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	430a      	orrs	r2, r1
 8003874:	619a      	str	r2, [r3, #24]
  }
}
 8003876:	4770      	bx	lr

08003878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003878:	b530      	push	{r4, r5, lr}
 800387a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800387c:	0412      	lsls	r2, r2, #16
 800387e:	6800      	ldr	r0, [r0, #0]
 8003880:	4322      	orrs	r2, r4
 8003882:	431a      	orrs	r2, r3
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <I2C_TransferConfig+0x24>)
 8003886:	6845      	ldr	r5, [r0, #4]
 8003888:	0589      	lsls	r1, r1, #22
 800388a:	0d64      	lsrs	r4, r4, #21
 800388c:	0d89      	lsrs	r1, r1, #22
 800388e:	431c      	orrs	r4, r3
 8003890:	43a5      	bics	r5, r4
 8003892:	430a      	orrs	r2, r1
 8003894:	432a      	orrs	r2, r5
 8003896:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003898:	bd30      	pop	{r4, r5, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	03ff63ff 	.word	0x03ff63ff

080038a0 <I2C_IsAcknowledgeFailed>:
{
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a2:	6803      	ldr	r3, [r0, #0]
{
 80038a4:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	699a      	ldr	r2, [r3, #24]
{
 80038a8:	0004      	movs	r4, r0
 80038aa:	000d      	movs	r5, r1
  return HAL_OK;
 80038ac:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ae:	06d2      	lsls	r2, r2, #27
 80038b0:	d536      	bpl.n	8003920 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	0192      	lsls	r2, r2, #6
 80038b6:	d404      	bmi.n	80038c2 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	01d2      	lsls	r2, r2, #7
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c2:	2720      	movs	r7, #32
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	423a      	tst	r2, r7
 80038ca:	d012      	beq.n	80038f2 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80038ce:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d2:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80038d4:	f7ff ffc2 	bl	800385c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	4912      	ldr	r1, [pc, #72]	; (8003924 <I2C_IsAcknowledgeFailed+0x84>)
 80038dc:	6853      	ldr	r3, [r2, #4]
 80038de:	400b      	ands	r3, r1
 80038e0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038e2:	2304      	movs	r3, #4
 80038e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80038e6:	4313      	orrs	r3, r2
 80038e8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	0023      	movs	r3, r4
 80038ec:	3341      	adds	r3, #65	; 0x41
 80038ee:	701f      	strb	r7, [r3, #0]
 80038f0:	e00f      	b.n	8003912 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 80038f2:	1c6a      	adds	r2, r5, #1
 80038f4:	d0e7      	beq.n	80038c6 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7ff fa39 	bl	8002d6c <HAL_GetTick>
 80038fa:	1b80      	subs	r0, r0, r6
 80038fc:	4285      	cmp	r5, r0
 80038fe:	d301      	bcc.n	8003904 <I2C_IsAcknowledgeFailed+0x64>
 8003900:	2d00      	cmp	r5, #0
 8003902:	d1df      	bne.n	80038c4 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	2220      	movs	r2, #32
 8003906:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003908:	4313      	orrs	r3, r2
 800390a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800390c:	0023      	movs	r3, r4
 800390e:	3341      	adds	r3, #65	; 0x41
 8003910:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	0022      	movs	r2, r4
 8003914:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800391a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800391e:	7023      	strb	r3, [r4, #0]
}
 8003920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	0004      	movs	r4, r0
 800392c:	000d      	movs	r5, r1
 800392e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003930:	2702      	movs	r7, #2
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	423b      	tst	r3, r7
 8003938:	d001      	beq.n	800393e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800393a:	2000      	movs	r0, #0
}
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	0032      	movs	r2, r6
 8003940:	0029      	movs	r1, r5
 8003942:	0020      	movs	r0, r4
 8003944:	f7ff ffac 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003948:	2800      	cmp	r0, #0
 800394a:	d115      	bne.n	8003978 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800394c:	1c6b      	adds	r3, r5, #1
 800394e:	d0f0      	beq.n	8003932 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7ff fa0c 	bl	8002d6c <HAL_GetTick>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	42a8      	cmp	r0, r5
 8003958:	d801      	bhi.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800395a:	2d00      	cmp	r5, #0
 800395c:	d1e9      	bne.n	8003932 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800395e:	2220      	movs	r2, #32
 8003960:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003962:	4313      	orrs	r3, r2
 8003964:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	0023      	movs	r3, r4
 8003968:	3341      	adds	r3, #65	; 0x41
 800396a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	0022      	movs	r2, r4
 800396e:	2300      	movs	r3, #0
 8003970:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003972:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003976:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003978:	2001      	movs	r0, #1
 800397a:	e7df      	b.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800397c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	0004      	movs	r4, r0
 8003980:	000d      	movs	r5, r1
 8003982:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003984:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003986:	2204      	movs	r2, #4
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	4213      	tst	r3, r2
 800398e:	d111      	bne.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003990:	0032      	movs	r2, r6
 8003992:	0029      	movs	r1, r5
 8003994:	0020      	movs	r0, r4
 8003996:	f7ff ff83 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 800399a:	2800      	cmp	r0, #0
 800399c:	d119      	bne.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	423a      	tst	r2, r7
 80039a4:	d017      	beq.n	80039d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039a6:	2104      	movs	r1, #4
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	420a      	tst	r2, r1
 80039ac:	d004      	beq.n	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 80039ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 80039b4:	2000      	movs	r0, #0
}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80039be:	400a      	ands	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80039cc:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 80039d0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
 80039d4:	e7ef      	b.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7ff f9c9 	bl	8002d6c <HAL_GetTick>
 80039da:	1b80      	subs	r0, r0, r6
 80039dc:	42a8      	cmp	r0, r5
 80039de:	d801      	bhi.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	d1d0      	bne.n	8003986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	2220      	movs	r2, #32
 80039e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039e8:	4313      	orrs	r3, r2
 80039ea:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	0023      	movs	r3, r4
 80039ee:	3341      	adds	r3, #65	; 0x41
 80039f0:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80039f2:	3440      	adds	r4, #64	; 0x40
 80039f4:	2300      	movs	r3, #0
 80039f6:	e7eb      	b.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80039f8:	fe00e800 	.word	0xfe00e800

080039fc <I2C_WaitOnFlagUntilTimeout>:
{
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	0004      	movs	r4, r0
 8003a00:	000e      	movs	r6, r1
 8003a02:	0017      	movs	r7, r2
 8003a04:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	6993      	ldr	r3, [r2, #24]
 8003a0a:	4033      	ands	r3, r6
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	4259      	negs	r1, r3
 8003a10:	414b      	adcs	r3, r1
 8003a12:	42bb      	cmp	r3, r7
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003a16:	2000      	movs	r0, #0
 8003a18:	e017      	b.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	1c6b      	adds	r3, r5, #1
 8003a1c:	d0f4      	beq.n	8003a08 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7ff f9a5 	bl	8002d6c <HAL_GetTick>
 8003a22:	9b06      	ldr	r3, [sp, #24]
 8003a24:	1ac0      	subs	r0, r0, r3
 8003a26:	42a8      	cmp	r0, r5
 8003a28:	d801      	bhi.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x32>
 8003a2a:	2d00      	cmp	r5, #0
 8003a2c:	d1eb      	bne.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	2220      	movs	r2, #32
 8003a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a32:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	4313      	orrs	r3, r2
 8003a36:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	0023      	movs	r3, r4
 8003a3a:	3341      	adds	r3, #65	; 0x41
 8003a3c:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	0022      	movs	r2, r4
 8003a40:	2300      	movs	r3, #0
 8003a42:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003a44:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003a48:	7023      	strb	r3, [r4, #0]
}
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	0004      	movs	r4, r0
 8003a50:	000d      	movs	r5, r1
 8003a52:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a54:	2720      	movs	r7, #32
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	423b      	tst	r3, r7
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003a5e:	2000      	movs	r0, #0
}
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	0032      	movs	r2, r6
 8003a64:	0029      	movs	r1, r5
 8003a66:	0020      	movs	r0, r4
 8003a68:	f7ff ff1a 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d113      	bne.n	8003a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7ff f97c 	bl	8002d6c <HAL_GetTick>
 8003a74:	1b80      	subs	r0, r0, r6
 8003a76:	42a8      	cmp	r0, r5
 8003a78:	d801      	bhi.n	8003a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	d1eb      	bne.n	8003a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	2220      	movs	r2, #32
 8003a80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a82:	4313      	orrs	r3, r2
 8003a84:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	0023      	movs	r3, r4
 8003a88:	3341      	adds	r3, #65	; 0x41
 8003a8a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	0022      	movs	r2, r4
 8003a8e:	2300      	movs	r3, #0
 8003a90:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003a92:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003a96:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	e7e1      	b.n	8003a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003a9c <HAL_I2C_Init>:
{
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003aa2:	2c00      	cmp	r4, #0
 8003aa4:	d03f      	beq.n	8003b26 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	0025      	movs	r5, r4
 8003aa8:	3541      	adds	r5, #65	; 0x41
 8003aaa:	782b      	ldrb	r3, [r5, #0]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003ab2:	0023      	movs	r3, r4
 8003ab4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003ab6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003ab8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003aba:	f7fd fae1 	bl	8001080 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abe:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ac6:	481d      	ldr	r0, [pc, #116]	; (8003b3c <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003ac8:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aca:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ad0:	6861      	ldr	r1, [r4, #4]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_I2C_Init+0xa4>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	4002      	ands	r2, r0
 8003adc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ade:	68e2      	ldr	r2, [r4, #12]
 8003ae0:	2a01      	cmp	r2, #1
 8003ae2:	d121      	bne.n	8003b28 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	0209      	lsls	r1, r1, #8
 8003ae8:	4331      	orrs	r1, r6
 8003aea:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4915      	ldr	r1, [pc, #84]	; (8003b44 <HAL_I2C_Init+0xa8>)
 8003af0:	4311      	orrs	r1, r2
 8003af2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003af4:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003af8:	4002      	ands	r2, r0
 8003afa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003afc:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afe:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b00:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b02:	69a1      	ldr	r1, [r4, #24]
 8003b04:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b0a:	6a21      	ldr	r1, [r4, #32]
 8003b0c:	69e2      	ldr	r2, [r4, #28]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003b12:	2201      	movs	r2, #1
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b20:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	3442      	adds	r4, #66	; 0x42
 8003b24:	7020      	strb	r0, [r4, #0]
}
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b28:	2184      	movs	r1, #132	; 0x84
 8003b2a:	0209      	lsls	r1, r1, #8
 8003b2c:	4331      	orrs	r1, r6
 8003b2e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b30:	2a02      	cmp	r2, #2
 8003b32:	d1db      	bne.n	8003aec <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	e7d7      	b.n	8003aec <HAL_I2C_Init+0x50>
 8003b3c:	ffff7fff 	.word	0xffff7fff
 8003b40:	f0ffffff 	.word	0xf0ffffff
 8003b44:	02008000 	.word	0x02008000

08003b48 <HAL_I2C_Master_Transmit>:
{
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4e:	0003      	movs	r3, r0
 8003b50:	3341      	adds	r3, #65	; 0x41
{
 8003b52:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	781b      	ldrb	r3, [r3, #0]
{
 8003b58:	0004      	movs	r4, r0
 8003b5a:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003b5c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d114      	bne.n	8003b8c <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003b62:	0023      	movs	r3, r4
 8003b64:	3340      	adds	r3, #64	; 0x40
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	2a01      	cmp	r2, #1
 8003b6a:	d00f      	beq.n	8003b8c <HAL_I2C_Master_Transmit+0x44>
 8003b6c:	2601      	movs	r6, #1
 8003b6e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003b70:	f7ff f8fc 	bl	8002d6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b74:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003b76:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b78:	9000      	str	r0, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	0032      	movs	r2, r6
 8003b7e:	0020      	movs	r0, r4
 8003b80:	0209      	lsls	r1, r1, #8
 8003b82:	f7ff ff3b 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
}
 8003b8c:	b007      	add	sp, #28
 8003b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b90:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b92:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b94:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b96:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b98:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b9a:	3b11      	subs	r3, #17
 8003b9c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003b9e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003ba2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ba4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003ba6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003ba8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003baa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bac:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_I2C_Master_Transmit+0x11c>)
 8003bae:	2aff      	cmp	r2, #255	; 0xff
 8003bb0:	d920      	bls.n	8003bf4 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bb2:	22ff      	movs	r2, #255	; 0xff
 8003bb4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bbc:	0039      	movs	r1, r7
 8003bbe:	0020      	movs	r0, r4
 8003bc0:	f7ff fe5a 	bl	8003878 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	002a      	movs	r2, r5
 8003bc8:	0020      	movs	r0, r4
 8003bca:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d119      	bne.n	8003c04 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd0:	f7ff ff3c 	bl	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1d8      	bne.n	8003b8a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	2120      	movs	r1, #32
 8003bda:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003bdc:	4d22      	ldr	r5, [pc, #136]	; (8003c68 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bde:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	402a      	ands	r2, r5
 8003be4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003be8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	3341      	adds	r3, #65	; 0x41
 8003bec:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bee:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003bf0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003bf2:	e7cb      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003bf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	049b      	lsls	r3, r3, #18
 8003c02:	e7db      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c04:	f7ff fe90 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d1be      	bne.n	8003b8a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003c12:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c14:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003c16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c22:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c26:	b292      	uxth	r2, r2
 8003c28:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0ca      	beq.n	8003bc4 <HAL_I2C_Master_Transmit+0x7c>
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	d1c8      	bne.n	8003bc4 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0020      	movs	r0, r4
 8003c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c38:	9500      	str	r5, [sp, #0]
 8003c3a:	f7ff fedf 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d1a3      	bne.n	8003b8a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c44:	2bff      	cmp	r3, #255	; 0xff
 8003c46:	d906      	bls.n	8003c56 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c48:	23ff      	movs	r3, #255	; 0xff
 8003c4a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	9000      	str	r0, [sp, #0]
 8003c52:	045b      	lsls	r3, r3, #17
 8003c54:	e7b2      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003c56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	9000      	str	r0, [sp, #0]
 8003c60:	e7cd      	b.n	8003bfe <HAL_I2C_Master_Transmit+0xb6>
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	80002000 	.word	0x80002000
 8003c68:	fe00e800 	.word	0xfe00e800

08003c6c <HAL_I2C_Master_Receive>:
{
 8003c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	0003      	movs	r3, r0
 8003c74:	3341      	adds	r3, #65	; 0x41
{
 8003c76:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
{
 8003c7c:	0004      	movs	r4, r0
 8003c7e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003c80:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d114      	bne.n	8003cb0 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8003c86:	0023      	movs	r3, r4
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	2a01      	cmp	r2, #1
 8003c8e:	d00f      	beq.n	8003cb0 <HAL_I2C_Master_Receive+0x44>
 8003c90:	2601      	movs	r6, #1
 8003c92:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003c94:	f7ff f86a 	bl	8002d6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c98:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003c9a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c9c:	9000      	str	r0, [sp, #0]
 8003c9e:	2319      	movs	r3, #25
 8003ca0:	0032      	movs	r2, r6
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	0209      	lsls	r1, r1, #8
 8003ca6:	f7ff fea9 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
}
 8003cb0:	b007      	add	sp, #28
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cb6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cba:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cbc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cbe:	3b12      	subs	r3, #18
 8003cc0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003cc2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003cc6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cc8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003cca:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003ccc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_I2C_Master_Receive+0x11c>)
 8003cd2:	2aff      	cmp	r2, #255	; 0xff
 8003cd4:	d920      	bls.n	8003d18 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce0:	0039      	movs	r1, r7
 8003ce2:	0020      	movs	r0, r4
 8003ce4:	f7ff fdc8 	bl	8003878 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ce8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	002a      	movs	r2, r5
 8003cec:	0020      	movs	r0, r4
 8003cee:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d119      	bne.n	8003d28 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf4:	f7ff feaa 	bl	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1d8      	bne.n	8003cae <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfc:	2120      	movs	r1, #32
 8003cfe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003d00:	4d22      	ldr	r5, [pc, #136]	; (8003d8c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d02:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	402a      	ands	r2, r5
 8003d08:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003d0c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	3341      	adds	r3, #65	; 0x41
 8003d10:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d12:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003d14:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003d16:	e7cb      	b.n	8003cb0 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003d18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	049b      	lsls	r3, r3, #18
 8003d26:	e7db      	b.n	8003ce0 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d28:	f7ff fe28 	bl	800397c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d1be      	bne.n	8003cae <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003d3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d42:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0c9      	beq.n	8003ce8 <HAL_I2C_Master_Receive+0x7c>
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d1c7      	bne.n	8003ce8 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0020      	movs	r0, r4
 8003d5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d5e:	9500      	str	r5, [sp, #0]
 8003d60:	f7ff fe4c 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d1a2      	bne.n	8003cae <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d6a:	2bff      	cmp	r3, #255	; 0xff
 8003d6c:	d906      	bls.n	8003d7c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6e:	23ff      	movs	r3, #255	; 0xff
 8003d70:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	22ff      	movs	r2, #255	; 0xff
 8003d76:	9000      	str	r0, [sp, #0]
 8003d78:	045b      	lsls	r3, r3, #17
 8003d7a:	e7b1      	b.n	8003ce0 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003d7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	9000      	str	r0, [sp, #0]
 8003d86:	e7cc      	b.n	8003d22 <HAL_I2C_Master_Receive+0xb6>
 8003d88:	80002400 	.word	0x80002400
 8003d8c:	fe00e800 	.word	0xfe00e800

08003d90 <HAL_I2C_IsDeviceReady>:
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003d94:	2300      	movs	r3, #0
{
 8003d96:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8003d98:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	0003      	movs	r3, r0
{
 8003d9c:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	3341      	adds	r3, #65	; 0x41
 8003da0:	781a      	ldrb	r2, [r3, #0]
{
 8003da2:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003da4:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da6:	2a20      	cmp	r2, #32
 8003da8:	d15b      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003daa:	6802      	ldr	r2, [r0, #0]
 8003dac:	6997      	ldr	r7, [r2, #24]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0038      	movs	r0, r7
 8003db2:	0212      	lsls	r2, r2, #8
 8003db4:	4010      	ands	r0, r2
 8003db6:	4217      	tst	r7, r2
 8003db8:	d153      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 8003dba:	0022      	movs	r2, r4
 8003dbc:	3240      	adds	r2, #64	; 0x40
 8003dbe:	7817      	ldrb	r7, [r2, #0]
 8003dc0:	2f01      	cmp	r7, #1
 8003dc2:	d04e      	beq.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
 8003dc4:	3d01      	subs	r5, #1
 8003dc6:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc8:	2224      	movs	r2, #36	; 0x24
 8003dca:	0589      	lsls	r1, r1, #22
 8003dcc:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dce:	0d8b      	lsrs	r3, r1, #22
 8003dd0:	6460      	str	r0, [r4, #68]	; 0x44
 8003dd2:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d12b      	bne.n	8003e32 <HAL_I2C_IsDeviceReady+0xa2>
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_I2C_IsDeviceReady+0x144>)
 8003ddc:	9a04      	ldr	r2, [sp, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003de4:	f7fe ffc2 	bl	8002d6c <HAL_GetTick>
 8003de8:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dea:	2201      	movs	r2, #1
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df2:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df4:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df6:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dfa:	431d      	orrs	r5, r3
 8003dfc:	d01c      	beq.n	8003e38 <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	2710      	movs	r7, #16
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	001a      	movs	r2, r3
 8003e06:	403a      	ands	r2, r7
 8003e08:	423b      	tst	r3, r7
 8003e0a:	d12d      	bne.n	8003e68 <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	2120      	movs	r1, #32
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0020      	movs	r0, r4
 8003e14:	0033      	movs	r3, r6
 8003e16:	f7ff fdf1 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d121      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8003e22:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e24:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003e28:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	3241      	adds	r2, #65	; 0x41
 8003e2c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003e2e:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003e30:	e017      	b.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e32:	23a0      	movs	r3, #160	; 0xa0
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	e7d1      	b.n	8003ddc <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 8003e38:	1c73      	adds	r3, r6, #1
 8003e3a:	d0d6      	beq.n	8003dea <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fe ff96 	bl	8002d6c <HAL_GetTick>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	1ac0      	subs	r0, r0, r3
 8003e44:	42b0      	cmp	r0, r6
 8003e46:	d801      	bhi.n	8003e4c <HAL_I2C_IsDeviceReady+0xbc>
 8003e48:	2e00      	cmp	r6, #0
 8003e4a:	d1ce      	bne.n	8003dea <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	0022      	movs	r2, r4
 8003e4e:	2320      	movs	r3, #32
 8003e50:	3241      	adds	r2, #65	; 0x41
 8003e52:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8003e56:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	3440      	adds	r4, #64	; 0x40
 8003e60:	7023      	strb	r3, [r4, #0]
}
 8003e62:	0028      	movs	r0, r5
 8003e64:	b009      	add	sp, #36	; 0x24
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2120      	movs	r1, #32
 8003e70:	0033      	movs	r3, r6
 8003e72:	0020      	movs	r0, r4
 8003e74:	f7ff fdc2 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003e78:	1e02      	subs	r2, r0, #0
 8003e7a:	d1f2      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7c:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8003e7e:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e82:	2720      	movs	r7, #32
 8003e84:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8003e86:	9907      	ldr	r1, [sp, #28]
 8003e88:	4281      	cmp	r1, r0
 8003e8a:	d10f      	bne.n	8003eac <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	6858      	ldr	r0, [r3, #4]
 8003e90:	01c9      	lsls	r1, r1, #7
 8003e92:	4301      	orrs	r1, r0
 8003e94:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	0039      	movs	r1, r7
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	0020      	movs	r0, r4
 8003e9e:	0033      	movs	r3, r6
 8003ea0:	f7ff fdac 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d1dc      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003eac:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003eae:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003eb4:	9b07      	ldr	r3, [sp, #28]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d200      	bcs.n	8003ebc <HAL_I2C_IsDeviceReady+0x12c>
 8003eba:	e78b      	b.n	8003dd4 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	0022      	movs	r2, r4
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	3241      	adds	r2, #65	; 0x41
 8003ec2:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003ec6:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003ed0:	e7c7      	b.n	8003e62 <HAL_I2C_IsDeviceReady+0xd2>
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	02002000 	.word	0x02002000

08003ed8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	0004      	movs	r4, r0
 8003edc:	3441      	adds	r4, #65	; 0x41
 8003ede:	7822      	ldrb	r2, [r4, #0]
{
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	b2d6      	uxtb	r6, r2
 8003ee8:	2a20      	cmp	r2, #32
 8003eea:	d118      	bne.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003eec:	001d      	movs	r5, r3
 8003eee:	3540      	adds	r5, #64	; 0x40
 8003ef0:	782a      	ldrb	r2, [r5, #0]
 8003ef2:	2a01      	cmp	r2, #1
 8003ef4:	d013      	beq.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3a23      	subs	r2, #35	; 0x23
 8003efe:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f00:	4807      	ldr	r0, [pc, #28]	; (8003f20 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	4391      	bics	r1, r2
 8003f04:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003f0a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f0c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	4339      	orrs	r1, r7
 8003f12:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003f1c:	7028      	strb	r0, [r5, #0]
  }
}
 8003f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f20:	ffffefff 	.word	0xffffefff

08003f24 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f24:	0002      	movs	r2, r0
{
 8003f26:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f28:	3241      	adds	r2, #65	; 0x41
 8003f2a:	7814      	ldrb	r4, [r2, #0]
{
 8003f2c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f32:	2c20      	cmp	r4, #32
 8003f34:	d117      	bne.n	8003f66 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003f36:	001c      	movs	r4, r3
 8003f38:	3440      	adds	r4, #64	; 0x40
 8003f3a:	7826      	ldrb	r6, [r4, #0]
 8003f3c:	2e01      	cmp	r6, #1
 8003f3e:	d012      	beq.n	8003f66 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	3022      	adds	r0, #34	; 0x22
 8003f42:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3823      	subs	r0, #35	; 0x23
 8003f48:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003f4a:	4f07      	ldr	r7, [pc, #28]	; (8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003f4c:	4386      	bics	r6, r0
 8003f4e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003f50:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003f52:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003f54:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003f56:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003f58:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	4308      	orrs	r0, r1
 8003f5e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003f60:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003f64:	7020      	strb	r0, [r4, #0]
  }
}
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	fffff0ff 	.word	0xfffff0ff

08003f6c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f6c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003f72:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003f74:	4022      	ands	r2, r4
 8003f76:	2a08      	cmp	r2, #8
 8003f78:	d031      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x72>
 8003f7a:	2a0c      	cmp	r2, #12
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x26>
 8003f7e:	2a04      	cmp	r2, #4
 8003f80:	d125      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f82:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f86:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003f88:	17c0      	asrs	r0, r0, #31
 8003f8a:	4018      	ands	r0, r3
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_RCC_GetSysClockFreq+0x80>)
 8003f8e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f92:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f94:	4816      	ldr	r0, [pc, #88]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f96:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f98:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f9c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fa0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fa4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa6:	4211      	tst	r1, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003fac:	2300      	movs	r3, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f7fc f974 	bl	800029c <__aeabi_lmul>
 8003fb4:	0022      	movs	r2, r4
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f7fc f950 	bl	800025c <__aeabi_uldivmod>
 8003fbc:	e7e8      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	421a      	tst	r2, r3
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003fc8:	e7f0      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_RCC_GetSysClockFreq+0x80>)
 8003fcc:	e7ee      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fce:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003fd0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fd2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4098      	lsls	r0, r3
      break;
 8003fdc:	e7d8      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003fe0:	e7d6      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x24>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	ff48e500 	.word	0xff48e500
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	08006350 	.word	0x08006350
 8003ff4:	007a1200 	.word	0x007a1200
 8003ff8:	003d0900 	.word	0x003d0900

08003ffc <HAL_RCC_OscConfig>:
{
 8003ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffe:	0005      	movs	r5, r0
 8004000:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8004002:	2800      	cmp	r0, #0
 8004004:	d05a      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004006:	230c      	movs	r3, #12
 8004008:	4cbe      	ldr	r4, [pc, #760]	; (8004304 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800400e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004010:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	025b      	lsls	r3, r3, #9
 8004016:	0019      	movs	r1, r3
 8004018:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401a:	07d2      	lsls	r2, r2, #31
 800401c:	d442      	bmi.n	80040a4 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	682b      	ldr	r3, [r5, #0]
 8004020:	079b      	lsls	r3, r3, #30
 8004022:	d500      	bpl.n	8004026 <HAL_RCC_OscConfig+0x2a>
 8004024:	e08b      	b.n	800413e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	06db      	lsls	r3, r3, #27
 800402a:	d529      	bpl.n	8004080 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800402c:	2e00      	cmp	r6, #0
 800402e:	d000      	beq.n	8004032 <HAL_RCC_OscConfig+0x36>
 8004030:	e0dc      	b.n	80041ec <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	059b      	lsls	r3, r3, #22
 8004036:	d502      	bpl.n	800403e <HAL_RCC_OscConfig+0x42>
 8004038:	69eb      	ldr	r3, [r5, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03e      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	49b1      	ldr	r1, [pc, #708]	; (8004308 <HAL_RCC_OscConfig+0x30c>)
 8004042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004044:	400a      	ands	r2, r1
 8004046:	431a      	orrs	r2, r3
 8004048:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404a:	6861      	ldr	r1, [r4, #4]
 800404c:	6a2a      	ldr	r2, [r5, #32]
 800404e:	0209      	lsls	r1, r1, #8
 8004050:	0a09      	lsrs	r1, r1, #8
 8004052:	0612      	lsls	r2, r2, #24
 8004054:	430a      	orrs	r2, r1
 8004056:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	0b5b      	lsrs	r3, r3, #13
 800405c:	3301      	adds	r3, #1
 800405e:	0212      	lsls	r2, r2, #8
 8004060:	409a      	lsls	r2, r3
 8004062:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004064:	68e1      	ldr	r1, [r4, #12]
 8004066:	060a      	lsls	r2, r1, #24
 8004068:	49a8      	ldr	r1, [pc, #672]	; (800430c <HAL_RCC_OscConfig+0x310>)
 800406a:	0f12      	lsrs	r2, r2, #28
 800406c:	5c8a      	ldrb	r2, [r1, r2]
 800406e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004070:	4aa7      	ldr	r2, [pc, #668]	; (8004310 <HAL_RCC_OscConfig+0x314>)
 8004072:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8004074:	4ba7      	ldr	r3, [pc, #668]	; (8004314 <HAL_RCC_OscConfig+0x318>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	f7fe fe34 	bl	8002ce4 <HAL_InitTick>
        if(status != HAL_OK)
 800407c:	2800      	cmp	r0, #0
 800407e:	d134      	bne.n	80040ea <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	d500      	bpl.n	8004088 <HAL_RCC_OscConfig+0x8c>
 8004086:	e0e8      	b.n	800425a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	075b      	lsls	r3, r3, #29
 800408c:	d500      	bpl.n	8004090 <HAL_RCC_OscConfig+0x94>
 800408e:	e10a      	b.n	80042a6 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	069b      	lsls	r3, r3, #26
 8004094:	d500      	bpl.n	8004098 <HAL_RCC_OscConfig+0x9c>
 8004096:	e18e      	b.n	80043b6 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004098:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d000      	beq.n	80040a0 <HAL_RCC_OscConfig+0xa4>
 800409e:	e1bd      	b.n	800441c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80040a0:	2000      	movs	r0, #0
 80040a2:	e022      	b.n	80040ea <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a4:	2e08      	cmp	r6, #8
 80040a6:	d003      	beq.n	80040b0 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040a8:	2e0c      	cmp	r6, #12
 80040aa:	d109      	bne.n	80040c0 <HAL_RCC_OscConfig+0xc4>
 80040ac:	2f00      	cmp	r7, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	039b      	lsls	r3, r3, #14
 80040b4:	d5b3      	bpl.n	800401e <HAL_RCC_OscConfig+0x22>
 80040b6:	686b      	ldr	r3, [r5, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1b0      	bne.n	800401e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80040bc:	2001      	movs	r0, #1
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c0:	686a      	ldr	r2, [r5, #4]
 80040c2:	428a      	cmp	r2, r1
 80040c4:	d113      	bne.n	80040ee <HAL_RCC_OscConfig+0xf2>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040cc:	f7fe fe4e 	bl	8002d6c <HAL_GetTick>
 80040d0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0292      	lsls	r2, r2, #10
 80040d8:	4213      	tst	r3, r2
 80040da:	d1a0      	bne.n	800401e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fe46 	bl	8002d6c <HAL_GetTick>
 80040e0:	9b00      	ldr	r3, [sp, #0]
 80040e2:	1ac0      	subs	r0, r0, r3
 80040e4:	2864      	cmp	r0, #100	; 0x64
 80040e6:	d9f4      	bls.n	80040d2 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 80040e8:	2003      	movs	r0, #3
}
 80040ea:	b005      	add	sp, #20
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ee:	21a0      	movs	r1, #160	; 0xa0
 80040f0:	02c9      	lsls	r1, r1, #11
 80040f2:	428a      	cmp	r2, r1
 80040f4:	d105      	bne.n	8004102 <HAL_RCC_OscConfig+0x106>
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	6821      	ldr	r1, [r4, #0]
 80040fa:	02d2      	lsls	r2, r2, #11
 80040fc:	430a      	orrs	r2, r1
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	e7e1      	b.n	80040c6 <HAL_RCC_OscConfig+0xca>
 8004102:	6821      	ldr	r1, [r4, #0]
 8004104:	4884      	ldr	r0, [pc, #528]	; (8004318 <HAL_RCC_OscConfig+0x31c>)
 8004106:	4001      	ands	r1, r0
 8004108:	6021      	str	r1, [r4, #0]
 800410a:	6821      	ldr	r1, [r4, #0]
 800410c:	400b      	ands	r3, r1
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	4982      	ldr	r1, [pc, #520]	; (800431c <HAL_RCC_OscConfig+0x320>)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	400b      	ands	r3, r1
 8004118:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411a:	2a00      	cmp	r2, #0
 800411c:	d1d6      	bne.n	80040cc <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 800411e:	f7fe fe25 	bl	8002d6c <HAL_GetTick>
 8004122:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0292      	lsls	r2, r2, #10
 800412a:	4213      	tst	r3, r2
 800412c:	d100      	bne.n	8004130 <HAL_RCC_OscConfig+0x134>
 800412e:	e776      	b.n	800401e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fe1c 	bl	8002d6c <HAL_GetTick>
 8004134:	9b00      	ldr	r3, [sp, #0]
 8004136:	1ac0      	subs	r0, r0, r3
 8004138:	2864      	cmp	r0, #100	; 0x64
 800413a:	d9f3      	bls.n	8004124 <HAL_RCC_OscConfig+0x128>
 800413c:	e7d4      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 800413e:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004140:	2e04      	cmp	r6, #4
 8004142:	d003      	beq.n	800414c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004144:	2e0c      	cmp	r6, #12
 8004146:	d124      	bne.n	8004192 <HAL_RCC_OscConfig+0x196>
 8004148:	2f00      	cmp	r7, #0
 800414a:	d122      	bne.n	8004192 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	075b      	lsls	r3, r3, #29
 8004150:	d501      	bpl.n	8004156 <HAL_RCC_OscConfig+0x15a>
 8004152:	2a00      	cmp	r2, #0
 8004154:	d0b2      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	6861      	ldr	r1, [r4, #4]
 8004158:	692b      	ldr	r3, [r5, #16]
 800415a:	4871      	ldr	r0, [pc, #452]	; (8004320 <HAL_RCC_OscConfig+0x324>)
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	4001      	ands	r1, r0
 8004160:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004162:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	438b      	bics	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800416e:	f7ff fefd 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	4a65      	ldr	r2, [pc, #404]	; (800430c <HAL_RCC_OscConfig+0x310>)
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	0f1b      	lsrs	r3, r3, #28
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	40d8      	lsrs	r0, r3
 800417e:	4b64      	ldr	r3, [pc, #400]	; (8004310 <HAL_RCC_OscConfig+0x314>)
 8004180:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8004182:	4b64      	ldr	r3, [pc, #400]	; (8004314 <HAL_RCC_OscConfig+0x318>)
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7fe fdad 	bl	8002ce4 <HAL_InitTick>
      if(status != HAL_OK)
 800418a:	2800      	cmp	r0, #0
 800418c:	d100      	bne.n	8004190 <HAL_RCC_OscConfig+0x194>
 800418e:	e74a      	b.n	8004026 <HAL_RCC_OscConfig+0x2a>
 8004190:	e7ab      	b.n	80040ea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004192:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8004194:	2a00      	cmp	r2, #0
 8004196:	d018      	beq.n	80041ca <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004198:	2109      	movs	r1, #9
 800419a:	438b      	bics	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041a0:	f7fe fde4 	bl	8002d6c <HAL_GetTick>
 80041a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a6:	2204      	movs	r2, #4
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	4213      	tst	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	692b      	ldr	r3, [r5, #16]
 80041b2:	495b      	ldr	r1, [pc, #364]	; (8004320 <HAL_RCC_OscConfig+0x324>)
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	400a      	ands	r2, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	e733      	b.n	8004026 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041be:	f7fe fdd5 	bl	8002d6c <HAL_GetTick>
 80041c2:	1bc0      	subs	r0, r0, r7
 80041c4:	2802      	cmp	r0, #2
 80041c6:	d9ee      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1aa>
 80041c8:	e78e      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80041ca:	2201      	movs	r2, #1
 80041cc:	4393      	bics	r3, r2
 80041ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041d0:	f7fe fdcc 	bl	8002d6c <HAL_GetTick>
 80041d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041d6:	2204      	movs	r2, #4
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	4213      	tst	r3, r2
 80041dc:	d100      	bne.n	80041e0 <HAL_RCC_OscConfig+0x1e4>
 80041de:	e722      	b.n	8004026 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e0:	f7fe fdc4 	bl	8002d6c <HAL_GetTick>
 80041e4:	1bc0      	subs	r0, r0, r7
 80041e6:	2802      	cmp	r0, #2
 80041e8:	d9f5      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1da>
 80041ea:	e77d      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041ec:	69eb      	ldr	r3, [r5, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d020      	beq.n	8004234 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041fc:	f7fe fdb6 	bl	8002d6c <HAL_GetTick>
 8004200:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4213      	tst	r3, r2
 800420a:	d00d      	beq.n	8004228 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	4a3e      	ldr	r2, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x30c>)
 8004210:	4013      	ands	r3, r2
 8004212:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004214:	4313      	orrs	r3, r2
 8004216:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004218:	6862      	ldr	r2, [r4, #4]
 800421a:	6a2b      	ldr	r3, [r5, #32]
 800421c:	0212      	lsls	r2, r2, #8
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	0a12      	lsrs	r2, r2, #8
 8004222:	4313      	orrs	r3, r2
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	e72b      	b.n	8004080 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004228:	f7fe fda0 	bl	8002d6c <HAL_GetTick>
 800422c:	1bc0      	subs	r0, r0, r7
 800422e:	2802      	cmp	r0, #2
 8004230:	d9e7      	bls.n	8004202 <HAL_RCC_OscConfig+0x206>
 8004232:	e759      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_RCC_OscConfig+0x328>)
 8004238:	4013      	ands	r3, r2
 800423a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800423c:	f7fe fd96 	bl	8002d6c <HAL_GetTick>
 8004240:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	0092      	lsls	r2, r2, #2
 8004248:	4213      	tst	r3, r2
 800424a:	d100      	bne.n	800424e <HAL_RCC_OscConfig+0x252>
 800424c:	e718      	b.n	8004080 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424e:	f7fe fd8d 	bl	8002d6c <HAL_GetTick>
 8004252:	1bc0      	subs	r0, r0, r7
 8004254:	2802      	cmp	r0, #2
 8004256:	d9f4      	bls.n	8004242 <HAL_RCC_OscConfig+0x246>
 8004258:	e746      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425a:	696a      	ldr	r2, [r5, #20]
 800425c:	2301      	movs	r3, #1
 800425e:	2a00      	cmp	r2, #0
 8004260:	d010      	beq.n	8004284 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8004262:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004264:	4313      	orrs	r3, r2
 8004266:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004268:	f7fe fd80 	bl	8002d6c <HAL_GetTick>
 800426c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800426e:	2202      	movs	r2, #2
 8004270:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004272:	4213      	tst	r3, r2
 8004274:	d000      	beq.n	8004278 <HAL_RCC_OscConfig+0x27c>
 8004276:	e707      	b.n	8004088 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004278:	f7fe fd78 	bl	8002d6c <HAL_GetTick>
 800427c:	1bc0      	subs	r0, r0, r7
 800427e:	2802      	cmp	r0, #2
 8004280:	d9f5      	bls.n	800426e <HAL_RCC_OscConfig+0x272>
 8004282:	e731      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8004284:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004286:	439a      	bics	r2, r3
 8004288:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800428a:	f7fe fd6f 	bl	8002d6c <HAL_GetTick>
 800428e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004290:	2202      	movs	r2, #2
 8004292:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004294:	4213      	tst	r3, r2
 8004296:	d100      	bne.n	800429a <HAL_RCC_OscConfig+0x29e>
 8004298:	e6f6      	b.n	8004088 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe fd67 	bl	8002d6c <HAL_GetTick>
 800429e:	1bc0      	subs	r0, r0, r7
 80042a0:	2802      	cmp	r0, #2
 80042a2:	d9f5      	bls.n	8004290 <HAL_RCC_OscConfig+0x294>
 80042a4:	e720      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80042a8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042ac:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b0:	421a      	tst	r2, r3
 80042b2:	d104      	bne.n	80042be <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042b6:	4313      	orrs	r3, r2
 80042b8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80042ba:	2301      	movs	r3, #1
 80042bc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	4f19      	ldr	r7, [pc, #100]	; (8004328 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	0052      	lsls	r2, r2, #1
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4213      	tst	r3, r2
 80042c8:	d008      	beq.n	80042dc <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	68ab      	ldr	r3, [r5, #8]
 80042ce:	0052      	lsls	r2, r2, #1
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d12b      	bne.n	800432c <HAL_RCC_OscConfig+0x330>
 80042d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042d6:	4313      	orrs	r3, r2
 80042d8:	6523      	str	r3, [r4, #80]	; 0x50
 80042da:	e04c      	b.n	8004376 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	0052      	lsls	r2, r2, #1
 80042e2:	4313      	orrs	r3, r2
 80042e4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80042e6:	f7fe fd41 	bl	8002d6c <HAL_GetTick>
 80042ea:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	0052      	lsls	r2, r2, #1
 80042f2:	4213      	tst	r3, r2
 80042f4:	d1e9      	bne.n	80042ca <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f6:	f7fe fd39 	bl	8002d6c <HAL_GetTick>
 80042fa:	9b01      	ldr	r3, [sp, #4]
 80042fc:	1ac0      	subs	r0, r0, r3
 80042fe:	2864      	cmp	r0, #100	; 0x64
 8004300:	d9f4      	bls.n	80042ec <HAL_RCC_OscConfig+0x2f0>
 8004302:	e6f1      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
 8004304:	40021000 	.word	0x40021000
 8004308:	ffff1fff 	.word	0xffff1fff
 800430c:	08006340 	.word	0x08006340
 8004310:	20000008 	.word	0x20000008
 8004314:	20000034 	.word	0x20000034
 8004318:	fffeffff 	.word	0xfffeffff
 800431c:	fffbffff 	.word	0xfffbffff
 8004320:	ffffe0ff 	.word	0xffffe0ff
 8004324:	fffffeff 	.word	0xfffffeff
 8004328:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <HAL_RCC_OscConfig+0x362>
 8004330:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004332:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_RCC_OscConfig+0x4e4>)
 8004334:	4013      	ands	r3, r2
 8004336:	6523      	str	r3, [r4, #80]	; 0x50
 8004338:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800433a:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_RCC_OscConfig+0x4e8>)
 800433c:	4013      	ands	r3, r2
 800433e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004340:	f7fe fd14 	bl	8002d6c <HAL_GetTick>
 8004344:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004346:	2280      	movs	r2, #128	; 0x80
 8004348:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800434a:	0092      	lsls	r2, r2, #2
 800434c:	4213      	tst	r3, r2
 800434e:	d01a      	beq.n	8004386 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fe fd0c 	bl	8002d6c <HAL_GetTick>
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <HAL_RCC_OscConfig+0x4ec>)
 8004356:	1bc0      	subs	r0, r0, r7
 8004358:	4298      	cmp	r0, r3
 800435a:	d9f4      	bls.n	8004346 <HAL_RCC_OscConfig+0x34a>
 800435c:	e6c4      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435e:	21a0      	movs	r1, #160	; 0xa0
 8004360:	00c9      	lsls	r1, r1, #3
 8004362:	428b      	cmp	r3, r1
 8004364:	d118      	bne.n	8004398 <HAL_RCC_OscConfig+0x39c>
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	430b      	orrs	r3, r1
 800436e:	6523      	str	r3, [r4, #80]	; 0x50
 8004370:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004372:	431a      	orrs	r2, r3
 8004374:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004376:	f7fe fcf9 	bl	8002d6c <HAL_GetTick>
 800437a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	4213      	tst	r3, r2
 8004384:	d010      	beq.n	80043a8 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8004386:	9b00      	ldr	r3, [sp, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d000      	beq.n	800438e <HAL_RCC_OscConfig+0x392>
 800438c:	e680      	b.n	8004090 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004390:	4a56      	ldr	r2, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x4f0>)
 8004392:	4013      	ands	r3, r2
 8004394:	63a3      	str	r3, [r4, #56]	; 0x38
 8004396:	e67b      	b.n	8004090 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004398:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800439a:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_RCC_OscConfig+0x4e4>)
 800439c:	4013      	ands	r3, r2
 800439e:	6523      	str	r3, [r4, #80]	; 0x50
 80043a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80043a2:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_RCC_OscConfig+0x4e8>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	e797      	b.n	80042d8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fe fce0 	bl	8002d6c <HAL_GetTick>
 80043ac:	4b4e      	ldr	r3, [pc, #312]	; (80044e8 <HAL_RCC_OscConfig+0x4ec>)
 80043ae:	1bc0      	subs	r0, r0, r7
 80043b0:	4298      	cmp	r0, r3
 80043b2:	d9e3      	bls.n	800437c <HAL_RCC_OscConfig+0x380>
 80043b4:	e698      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043b6:	69a9      	ldr	r1, [r5, #24]
 80043b8:	2301      	movs	r3, #1
 80043ba:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_RCC_OscConfig+0x4f4>)
 80043bc:	2900      	cmp	r1, #0
 80043be:	d018      	beq.n	80043f2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 80043c0:	68a1      	ldr	r1, [r4, #8]
 80043c2:	4319      	orrs	r1, r3
 80043c4:	60a1      	str	r1, [r4, #8]
 80043c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6363      	str	r3, [r4, #52]	; 0x34
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	6a11      	ldr	r1, [r2, #32]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80043d6:	f7fe fcc9 	bl	8002d6c <HAL_GetTick>
 80043da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043dc:	2202      	movs	r2, #2
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	4213      	tst	r3, r2
 80043e2:	d000      	beq.n	80043e6 <HAL_RCC_OscConfig+0x3ea>
 80043e4:	e658      	b.n	8004098 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e6:	f7fe fcc1 	bl	8002d6c <HAL_GetTick>
 80043ea:	1bc0      	subs	r0, r0, r7
 80043ec:	2802      	cmp	r0, #2
 80043ee:	d9f5      	bls.n	80043dc <HAL_RCC_OscConfig+0x3e0>
 80043f0:	e67a      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 80043f2:	68a1      	ldr	r1, [r4, #8]
 80043f4:	4399      	bics	r1, r3
 80043f6:	60a1      	str	r1, [r4, #8]
 80043f8:	6a13      	ldr	r3, [r2, #32]
 80043fa:	493e      	ldr	r1, [pc, #248]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004400:	f7fe fcb4 	bl	8002d6c <HAL_GetTick>
 8004404:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004406:	2202      	movs	r2, #2
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	4213      	tst	r3, r2
 800440c:	d100      	bne.n	8004410 <HAL_RCC_OscConfig+0x414>
 800440e:	e643      	b.n	8004098 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004410:	f7fe fcac 	bl	8002d6c <HAL_GetTick>
 8004414:	1bc0      	subs	r0, r0, r7
 8004416:	2802      	cmp	r0, #2
 8004418:	d9f5      	bls.n	8004406 <HAL_RCC_OscConfig+0x40a>
 800441a:	e665      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441c:	2e0c      	cmp	r6, #12
 800441e:	d043      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004420:	4a35      	ldr	r2, [pc, #212]	; (80044f8 <HAL_RCC_OscConfig+0x4fc>)
 8004422:	2b02      	cmp	r3, #2
 8004424:	d12e      	bne.n	8004484 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8004426:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004428:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800442a:	4013      	ands	r3, r2
 800442c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800442e:	f7fe fc9d 	bl	8002d6c <HAL_GetTick>
 8004432:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004434:	04bf      	lsls	r7, r7, #18
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	423b      	tst	r3, r7
 800443a:	d11d      	bne.n	8004478 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800443e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004440:	68e2      	ldr	r2, [r4, #12]
 8004442:	430b      	orrs	r3, r1
 8004444:	492d      	ldr	r1, [pc, #180]	; (80044fc <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004446:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004448:	400a      	ands	r2, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800444e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004450:	4313      	orrs	r3, r2
 8004452:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	045b      	lsls	r3, r3, #17
 800445a:	4313      	orrs	r3, r2
 800445c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800445e:	f7fe fc85 	bl	8002d6c <HAL_GetTick>
 8004462:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	4233      	tst	r3, r6
 8004468:	d000      	beq.n	800446c <HAL_RCC_OscConfig+0x470>
 800446a:	e619      	b.n	80040a0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe fc7e 	bl	8002d6c <HAL_GetTick>
 8004470:	1b40      	subs	r0, r0, r5
 8004472:	2802      	cmp	r0, #2
 8004474:	d9f6      	bls.n	8004464 <HAL_RCC_OscConfig+0x468>
 8004476:	e637      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe fc78 	bl	8002d6c <HAL_GetTick>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	2802      	cmp	r0, #2
 8004480:	d9d9      	bls.n	8004436 <HAL_RCC_OscConfig+0x43a>
 8004482:	e631      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8004484:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004486:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004488:	4013      	ands	r3, r2
 800448a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800448c:	f7fe fc6e 	bl	8002d6c <HAL_GetTick>
 8004490:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004492:	04b6      	lsls	r6, r6, #18
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	4233      	tst	r3, r6
 8004498:	d100      	bne.n	800449c <HAL_RCC_OscConfig+0x4a0>
 800449a:	e601      	b.n	80040a0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe fc66 	bl	8002d6c <HAL_GetTick>
 80044a0:	1b40      	subs	r0, r0, r5
 80044a2:	2802      	cmp	r0, #2
 80044a4:	d9f6      	bls.n	8004494 <HAL_RCC_OscConfig+0x498>
 80044a6:	e61f      	b.n	80040e8 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 80044a8:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d100      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4b4>
 80044ae:	e61c      	b.n	80040ea <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80044b2:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80044b6:	0252      	lsls	r2, r2, #9
 80044b8:	401a      	ands	r2, r3
 80044ba:	428a      	cmp	r2, r1
 80044bc:	d000      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4c4>
 80044be:	e5fd      	b.n	80040bc <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044c0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044c4:	0392      	lsls	r2, r2, #14
 80044c6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	428a      	cmp	r2, r1
 80044ca:	d000      	beq.n	80044ce <HAL_RCC_OscConfig+0x4d2>
 80044cc:	e5f6      	b.n	80040bc <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044ce:	22c0      	movs	r2, #192	; 0xc0
 80044d0:	0412      	lsls	r2, r2, #16
 80044d2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d100      	bne.n	80044dc <HAL_RCC_OscConfig+0x4e0>
 80044da:	e5e1      	b.n	80040a0 <HAL_RCC_OscConfig+0xa4>
 80044dc:	e5ee      	b.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	fffffeff 	.word	0xfffffeff
 80044e4:	fffffbff 	.word	0xfffffbff
 80044e8:	00001388 	.word	0x00001388
 80044ec:	efffffff 	.word	0xefffffff
 80044f0:	40010000 	.word	0x40010000
 80044f4:	ffffdfff 	.word	0xffffdfff
 80044f8:	feffffff 	.word	0xfeffffff
 80044fc:	ff02ffff 	.word	0xff02ffff

08004500 <HAL_RCC_ClockConfig>:
{
 8004500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004502:	1e04      	subs	r4, r0, #0
 8004504:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004508:	2001      	movs	r0, #1
}
 800450a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	2501      	movs	r5, #1
 800450e:	4e5b      	ldr	r6, [pc, #364]	; (800467c <HAL_RCC_ClockConfig+0x17c>)
 8004510:	9a01      	ldr	r2, [sp, #4]
 8004512:	6833      	ldr	r3, [r6, #0]
 8004514:	402b      	ands	r3, r5
 8004516:	4293      	cmp	r3, r2
 8004518:	d331      	bcc.n	800457e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	0793      	lsls	r3, r2, #30
 800451e:	d443      	bmi.n	80045a8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004520:	07d3      	lsls	r3, r2, #31
 8004522:	d449      	bmi.n	80045b8 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004524:	2501      	movs	r5, #1
 8004526:	6833      	ldr	r3, [r6, #0]
 8004528:	9a01      	ldr	r2, [sp, #4]
 800452a:	402b      	ands	r3, r5
 800452c:	4293      	cmp	r3, r2
 800452e:	d909      	bls.n	8004544 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	43ab      	bics	r3, r5
 8004534:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004536:	f7fe fc19 	bl	8002d6c <HAL_GetTick>
 800453a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	422b      	tst	r3, r5
 8004540:	d000      	beq.n	8004544 <HAL_RCC_ClockConfig+0x44>
 8004542:	e08c      	b.n	800465e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	4d4e      	ldr	r5, [pc, #312]	; (8004680 <HAL_RCC_ClockConfig+0x180>)
 8004548:	0753      	lsls	r3, r2, #29
 800454a:	d500      	bpl.n	800454e <HAL_RCC_ClockConfig+0x4e>
 800454c:	e08f      	b.n	800466e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454e:	0713      	lsls	r3, r2, #28
 8004550:	d506      	bpl.n	8004560 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004552:	68e9      	ldr	r1, [r5, #12]
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	4a4b      	ldr	r2, [pc, #300]	; (8004684 <HAL_RCC_ClockConfig+0x184>)
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	400a      	ands	r2, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004560:	f7ff fd04 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8004564:	68eb      	ldr	r3, [r5, #12]
 8004566:	4a48      	ldr	r2, [pc, #288]	; (8004688 <HAL_RCC_ClockConfig+0x188>)
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	5cd3      	ldrb	r3, [r2, r3]
 800456e:	40d8      	lsrs	r0, r3
 8004570:	4b46      	ldr	r3, [pc, #280]	; (800468c <HAL_RCC_ClockConfig+0x18c>)
 8004572:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_RCC_ClockConfig+0x190>)
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	f7fe fbb4 	bl	8002ce4 <HAL_InitTick>
  if(status != HAL_OK)
 800457c:	e7c5      	b.n	800450a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	6833      	ldr	r3, [r6, #0]
 8004580:	9a01      	ldr	r2, [sp, #4]
 8004582:	43ab      	bics	r3, r5
 8004584:	4313      	orrs	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004588:	f7fe fbf0 	bl	8002d6c <HAL_GetTick>
 800458c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	6833      	ldr	r3, [r6, #0]
 8004590:	9a01      	ldr	r2, [sp, #4]
 8004592:	402b      	ands	r3, r5
 8004594:	4293      	cmp	r3, r2
 8004596:	d0c0      	beq.n	800451a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fe fbe8 	bl	8002d6c <HAL_GetTick>
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 800459e:	1bc0      	subs	r0, r0, r7
 80045a0:	4298      	cmp	r0, r3
 80045a2:	d9f4      	bls.n	800458e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80045a4:	2003      	movs	r0, #3
 80045a6:	e7b0      	b.n	800450a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	20f0      	movs	r0, #240	; 0xf0
 80045aa:	4935      	ldr	r1, [pc, #212]	; (8004680 <HAL_RCC_ClockConfig+0x180>)
 80045ac:	68cb      	ldr	r3, [r1, #12]
 80045ae:	4383      	bics	r3, r0
 80045b0:	68a0      	ldr	r0, [r4, #8]
 80045b2:	4303      	orrs	r3, r0
 80045b4:	60cb      	str	r3, [r1, #12]
 80045b6:	e7b3      	b.n	8004520 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b8:	4d31      	ldr	r5, [pc, #196]	; (8004680 <HAL_RCC_ClockConfig+0x180>)
 80045ba:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045bc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	2a02      	cmp	r2, #2
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c2:	039b      	lsls	r3, r3, #14
 80045c4:	d5a0      	bpl.n	8004508 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	2103      	movs	r1, #3
 80045c8:	68eb      	ldr	r3, [r5, #12]
 80045ca:	438b      	bics	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80045d0:	f7fe fbcc 	bl	8002d6c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80045d6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d118      	bne.n	800460e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045dc:	220c      	movs	r2, #12
 80045de:	68eb      	ldr	r3, [r5, #12]
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d09e      	beq.n	8004524 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e6:	f7fe fbc1 	bl	8002d6c <HAL_GetTick>
 80045ea:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 80045ec:	1bc0      	subs	r0, r0, r7
 80045ee:	4298      	cmp	r0, r3
 80045f0:	d9f4      	bls.n	80045dc <HAL_RCC_ClockConfig+0xdc>
 80045f2:	e7d7      	b.n	80045a4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f4:	2a03      	cmp	r2, #3
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	d4e4      	bmi.n	80045c6 <HAL_RCC_ClockConfig+0xc6>
 80045fc:	e784      	b.n	8004508 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045fe:	2a01      	cmp	r2, #1
 8004600:	d102      	bne.n	8004608 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004602:	075b      	lsls	r3, r3, #29
 8004604:	d4df      	bmi.n	80045c6 <HAL_RCC_ClockConfig+0xc6>
 8004606:	e77f      	b.n	8004508 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004608:	059b      	lsls	r3, r3, #22
 800460a:	d4dc      	bmi.n	80045c6 <HAL_RCC_ClockConfig+0xc6>
 800460c:	e77c      	b.n	8004508 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460e:	2b03      	cmp	r3, #3
 8004610:	d10b      	bne.n	800462a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004612:	220c      	movs	r2, #12
 8004614:	68eb      	ldr	r3, [r5, #12]
 8004616:	4013      	ands	r3, r2
 8004618:	4293      	cmp	r3, r2
 800461a:	d083      	beq.n	8004524 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe fba6 	bl	8002d6c <HAL_GetTick>
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 8004622:	1bc0      	subs	r0, r0, r7
 8004624:	4298      	cmp	r0, r3
 8004626:	d9f4      	bls.n	8004612 <HAL_RCC_ClockConfig+0x112>
 8004628:	e7bc      	b.n	80045a4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800462a:	2b01      	cmp	r3, #1
 800462c:	d011      	beq.n	8004652 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800462e:	220c      	movs	r2, #12
 8004630:	68eb      	ldr	r3, [r5, #12]
 8004632:	4213      	tst	r3, r2
 8004634:	d100      	bne.n	8004638 <HAL_RCC_ClockConfig+0x138>
 8004636:	e775      	b.n	8004524 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fe fb98 	bl	8002d6c <HAL_GetTick>
 800463c:	4b15      	ldr	r3, [pc, #84]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 800463e:	1bc0      	subs	r0, r0, r7
 8004640:	4298      	cmp	r0, r3
 8004642:	d9f4      	bls.n	800462e <HAL_RCC_ClockConfig+0x12e>
 8004644:	e7ae      	b.n	80045a4 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004646:	f7fe fb91 	bl	8002d6c <HAL_GetTick>
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 800464c:	1bc0      	subs	r0, r0, r7
 800464e:	4298      	cmp	r0, r3
 8004650:	d8a8      	bhi.n	80045a4 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004652:	220c      	movs	r2, #12
 8004654:	68eb      	ldr	r3, [r5, #12]
 8004656:	4013      	ands	r3, r2
 8004658:	2b04      	cmp	r3, #4
 800465a:	d1f4      	bne.n	8004646 <HAL_RCC_ClockConfig+0x146>
 800465c:	e762      	b.n	8004524 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7fe fb85 	bl	8002d6c <HAL_GetTick>
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_ClockConfig+0x194>)
 8004664:	1bc0      	subs	r0, r0, r7
 8004666:	4298      	cmp	r0, r3
 8004668:	d800      	bhi.n	800466c <HAL_RCC_ClockConfig+0x16c>
 800466a:	e767      	b.n	800453c <HAL_RCC_ClockConfig+0x3c>
 800466c:	e79a      	b.n	80045a4 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466e:	68eb      	ldr	r3, [r5, #12]
 8004670:	4909      	ldr	r1, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x198>)
 8004672:	400b      	ands	r3, r1
 8004674:	68e1      	ldr	r1, [r4, #12]
 8004676:	430b      	orrs	r3, r1
 8004678:	60eb      	str	r3, [r5, #12]
 800467a:	e768      	b.n	800454e <HAL_RCC_ClockConfig+0x4e>
 800467c:	40022000 	.word	0x40022000
 8004680:	40021000 	.word	0x40021000
 8004684:	ffffc7ff 	.word	0xffffc7ff
 8004688:	08006340 	.word	0x08006340
 800468c:	20000008 	.word	0x20000008
 8004690:	20000034 	.word	0x20000034
 8004694:	00001388 	.word	0x00001388
 8004698:	fffff8ff 	.word	0xfffff8ff

0800469c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800469c:	6803      	ldr	r3, [r0, #0]
{
 800469e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a2:	069b      	lsls	r3, r3, #26
 80046a4:	d53c      	bpl.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80046a8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4c5a      	ldr	r4, [pc, #360]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80046b0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b2:	421a      	tst	r2, r3
 80046b4:	d104      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046b8:	4313      	orrs	r3, r2
 80046ba:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	2780      	movs	r7, #128	; 0x80
 80046c2:	4e55      	ldr	r6, [pc, #340]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80046c4:	007f      	lsls	r7, r7, #1
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	423b      	tst	r3, r7
 80046ca:	d062      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80046cc:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046ce:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80046d0:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046d2:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80046d4:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80046d6:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046d8:	029b      	lsls	r3, r3, #10
 80046da:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80046dc:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80046de:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80046e0:	428a      	cmp	r2, r1
 80046e2:	d167      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80046e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046e6:	0011      	movs	r1, r2
 80046e8:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046ea:	421a      	tst	r2, r3
 80046ec:	d16a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ee:	6869      	ldr	r1, [r5, #4]
 80046f0:	23c0      	movs	r3, #192	; 0xc0
 80046f2:	000a      	movs	r2, r1
 80046f4:	029b      	lsls	r3, r3, #10
 80046f6:	401a      	ands	r2, r3
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d107      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x70>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	4847      	ldr	r0, [pc, #284]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004700:	4003      	ands	r3, r0
 8004702:	20c0      	movs	r0, #192	; 0xc0
 8004704:	0380      	lsls	r0, r0, #14
 8004706:	4001      	ands	r1, r0
 8004708:	430b      	orrs	r3, r1
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800470e:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004710:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004714:	2b01      	cmp	r3, #1
 8004716:	d103      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800471a:	4a41      	ldr	r2, [pc, #260]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800471c:	4013      	ands	r3, r2
 800471e:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	07da      	lsls	r2, r3, #31
 8004724:	d506      	bpl.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004726:	2003      	movs	r0, #3
 8004728:	493a      	ldr	r1, [pc, #232]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800472a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800472c:	4382      	bics	r2, r0
 800472e:	68a8      	ldr	r0, [r5, #8]
 8004730:	4302      	orrs	r2, r0
 8004732:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004734:	079a      	lsls	r2, r3, #30
 8004736:	d506      	bpl.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004738:	200c      	movs	r0, #12
 800473a:	4936      	ldr	r1, [pc, #216]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800473c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800473e:	4382      	bics	r2, r0
 8004740:	68e8      	ldr	r0, [r5, #12]
 8004742:	4302      	orrs	r2, r0
 8004744:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004746:	075a      	lsls	r2, r3, #29
 8004748:	d506      	bpl.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800474a:	4932      	ldr	r1, [pc, #200]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800474c:	4835      	ldr	r0, [pc, #212]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800474e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004750:	4002      	ands	r2, r0
 8004752:	6928      	ldr	r0, [r5, #16]
 8004754:	4302      	orrs	r2, r0
 8004756:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	d506      	bpl.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800475c:	492d      	ldr	r1, [pc, #180]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800475e:	4832      	ldr	r0, [pc, #200]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004760:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004762:	4002      	ands	r2, r0
 8004764:	6968      	ldr	r0, [r5, #20]
 8004766:	4302      	orrs	r2, r0
 8004768:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800476a:	065a      	lsls	r2, r3, #25
 800476c:	d506      	bpl.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476e:	4929      	ldr	r1, [pc, #164]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004770:	482e      	ldr	r0, [pc, #184]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004772:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004774:	4002      	ands	r2, r0
 8004776:	69e8      	ldr	r0, [r5, #28]
 8004778:	4302      	orrs	r2, r0
 800477a:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800477c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	d517      	bpl.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004784:	492a      	ldr	r1, [pc, #168]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004786:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004788:	400b      	ands	r3, r1
 800478a:	69a9      	ldr	r1, [r5, #24]
 800478c:	430b      	orrs	r3, r1
 800478e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004790:	e00f      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004792:	6833      	ldr	r3, [r6, #0]
 8004794:	433b      	orrs	r3, r7
 8004796:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004798:	f7fe fae8 	bl	8002d6c <HAL_GetTick>
 800479c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	6833      	ldr	r3, [r6, #0]
 80047a0:	423b      	tst	r3, r7
 80047a2:	d193      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fe fae2 	bl	8002d6c <HAL_GetTick>
 80047a8:	9b01      	ldr	r3, [sp, #4]
 80047aa:	1ac0      	subs	r0, r0, r3
 80047ac:	2864      	cmp	r0, #100	; 0x64
 80047ae:	d9f6      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 80047b0:	2003      	movs	r0, #3
}
 80047b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80047b4:	429e      	cmp	r6, r3
 80047b6:	d195      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047b8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047bc:	0392      	lsls	r2, r2, #14
 80047be:	d400      	bmi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80047c0:	e790      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80047c2:	e7f6      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80047c4:	42b1      	cmp	r1, r6
 80047c6:	d100      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80047c8:	e791      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	d400      	bmi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047d0:	e78d      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047d4:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80047d8:	0312      	lsls	r2, r2, #12
 80047da:	4302      	orrs	r2, r0
 80047dc:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047de:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e2:	4815      	ldr	r0, [pc, #84]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047e4:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4002      	ands	r2, r0
 80047e8:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80047ea:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80047ec:	05cb      	lsls	r3, r1, #23
 80047ee:	d400      	bmi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80047f0:	e77d      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80047f2:	f7fe fabb 	bl	8002d6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80047f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fa:	00bf      	lsls	r7, r7, #2
 80047fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047fe:	423b      	tst	r3, r7
 8004800:	d000      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004802:	e774      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fe fab2 	bl	8002d6c <HAL_GetTick>
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800480a:	1b80      	subs	r0, r0, r6
 800480c:	4298      	cmp	r0, r3
 800480e:	d9f5      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004810:	e7ce      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	ffcfffff 	.word	0xffcfffff
 8004820:	efffffff 	.word	0xefffffff
 8004824:	fffff3ff 	.word	0xfffff3ff
 8004828:	ffffcfff 	.word	0xffffcfff
 800482c:	fbffffff 	.word	0xfbffffff
 8004830:	fff3ffff 	.word	0xfff3ffff
 8004834:	fffcffff 	.word	0xfffcffff
 8004838:	fff7ffff 	.word	0xfff7ffff
 800483c:	00001388 	.word	0x00001388

08004840 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	001d      	movs	r5, r3
 8004844:	0017      	movs	r7, r2
 8004846:	b085      	sub	sp, #20
 8004848:	000e      	movs	r6, r1
 800484a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800484c:	f7fe fa8e 	bl	8002d6c <HAL_GetTick>
 8004850:	19ed      	adds	r5, r5, r7
 8004852:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004854:	f7fe fa8a 	bl	8002d6c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800485a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	015b      	lsls	r3, r3, #5
 8004860:	0d1b      	lsrs	r3, r3, #20
 8004862:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004864:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004866:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004868:	6893      	ldr	r3, [r2, #8]
 800486a:	4033      	ands	r3, r6
 800486c:	429e      	cmp	r6, r3
 800486e:	d001      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004870:	2000      	movs	r0, #0
 8004872:	e032      	b.n	80048da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004874:	1c7b      	adds	r3, r7, #1
 8004876:	d0f7      	beq.n	8004868 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004878:	f7fe fa78 	bl	8002d6c <HAL_GetTick>
 800487c:	9b01      	ldr	r3, [sp, #4]
 800487e:	1ac0      	subs	r0, r0, r3
 8004880:	42a8      	cmp	r0, r5
 8004882:	d32c      	bcc.n	80048de <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004884:	21e0      	movs	r1, #224	; 0xe0
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	438a      	bics	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	2282      	movs	r2, #130	; 0x82
 8004890:	6861      	ldr	r1, [r4, #4]
 8004892:	0052      	lsls	r2, r2, #1
 8004894:	4291      	cmp	r1, r2
 8004896:	d10c      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	68a2      	ldr	r2, [r4, #8]
 800489c:	0209      	lsls	r1, r1, #8
 800489e:	428a      	cmp	r2, r1
 80048a0:	d003      	beq.n	80048aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	00c9      	lsls	r1, r1, #3
 80048a6:	428a      	cmp	r2, r1
 80048a8:	d103      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 80048aa:	2140      	movs	r1, #64	; 0x40
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	438a      	bics	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048b6:	0189      	lsls	r1, r1, #6
 80048b8:	428a      	cmp	r2, r1
 80048ba:	d106      	bne.n	80048ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	480d      	ldr	r0, [pc, #52]	; (80048f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80048c0:	4001      	ands	r1, r0
 80048c2:	6019      	str	r1, [r3, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048ca:	0023      	movs	r3, r4
 80048cc:	2201      	movs	r2, #1
 80048ce:	3351      	adds	r3, #81	; 0x51
 80048d0:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80048d2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80048d4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80048d6:	3450      	adds	r4, #80	; 0x50
 80048d8:	7023      	strb	r3, [r4, #0]
}
 80048da:	b005      	add	sp, #20
 80048dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80048de:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80048e0:	1e5a      	subs	r2, r3, #1
 80048e2:	4193      	sbcs	r3, r2
 80048e4:	425b      	negs	r3, r3
 80048e6:	401d      	ands	r5, r3
      count--;
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	e7ba      	b.n	8004864 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	20000008 	.word	0x20000008
 80048f4:	ffffdfff 	.word	0xffffdfff

080048f8 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f8:	4b16      	ldr	r3, [pc, #88]	; (8004954 <SPI_EndRxTxTransaction+0x5c>)
{
 80048fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048fc:	0004      	movs	r4, r0
 80048fe:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	4915      	ldr	r1, [pc, #84]	; (8004958 <SPI_EndRxTxTransaction+0x60>)
{
 8004904:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004906:	f7fb fc1d 	bl	8000144 <__udivsi3>
 800490a:	23fa      	movs	r3, #250	; 0xfa
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4343      	muls	r3, r0
 8004910:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	2382      	movs	r3, #130	; 0x82
 8004914:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004916:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4299      	cmp	r1, r3
 800491c:	d10d      	bne.n	800493a <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491e:	0033      	movs	r3, r6
 8004920:	002a      	movs	r2, r5
 8004922:	2180      	movs	r1, #128	; 0x80
 8004924:	0020      	movs	r0, r4
 8004926:	f7ff ff8b 	bl	8004840 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800492a:	2800      	cmp	r0, #0
 800492c:	d00f      	beq.n	800494e <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004930:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004934:	4313      	orrs	r3, r2
 8004936:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004938:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <SPI_EndRxTxTransaction+0x56>
      count--;
 8004940:	9b01      	ldr	r3, [sp, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4213      	tst	r3, r2
 800494c:	d1f5      	bne.n	800493a <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800494e:	2000      	movs	r0, #0
 8004950:	e7f2      	b.n	8004938 <SPI_EndRxTxTransaction+0x40>
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	20000008 	.word	0x20000008
 8004958:	016e3600 	.word	0x016e3600

0800495c <HAL_SPI_Init>:
{
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004962:	2c00      	cmp	r4, #0
 8004964:	d054      	beq.n	8004a10 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d152      	bne.n	8004a12 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496c:	2282      	movs	r2, #130	; 0x82
 800496e:	6861      	ldr	r1, [r4, #4]
 8004970:	0052      	lsls	r2, r2, #1
 8004972:	4291      	cmp	r1, r2
 8004974:	d000      	beq.n	8004978 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004976:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004978:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800497a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800497e:	3551      	adds	r5, #81	; 0x51
 8004980:	782b      	ldrb	r3, [r5, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004988:	0023      	movs	r3, r4
 800498a:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 800498c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800498e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004990:	f7fc fba4 	bl	80010dc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004994:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004996:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004998:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800499a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800499c:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800499e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a0:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80049a2:	4393      	bics	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a6:	2382      	movs	r3, #130	; 0x82
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4033      	ands	r3, r6
 80049ac:	2684      	movs	r6, #132	; 0x84
 80049ae:	0236      	lsls	r6, r6, #8
 80049b0:	403e      	ands	r6, r7
 80049b2:	4333      	orrs	r3, r6
 80049b4:	2680      	movs	r6, #128	; 0x80
 80049b6:	68e7      	ldr	r7, [r4, #12]
 80049b8:	0136      	lsls	r6, r6, #4
 80049ba:	403e      	ands	r6, r7
 80049bc:	4333      	orrs	r3, r6
 80049be:	6926      	ldr	r6, [r4, #16]
 80049c0:	69a2      	ldr	r2, [r4, #24]
 80049c2:	4030      	ands	r0, r6
 80049c4:	2601      	movs	r6, #1
 80049c6:	4303      	orrs	r3, r0
 80049c8:	6960      	ldr	r0, [r4, #20]
 80049ca:	69e7      	ldr	r7, [r4, #28]
 80049cc:	4030      	ands	r0, r6
 80049ce:	4303      	orrs	r3, r0
 80049d0:	2080      	movs	r0, #128	; 0x80
 80049d2:	0080      	lsls	r0, r0, #2
 80049d4:	4010      	ands	r0, r2
 80049d6:	4303      	orrs	r3, r0
 80049d8:	2038      	movs	r0, #56	; 0x38
 80049da:	4038      	ands	r0, r7
 80049dc:	4303      	orrs	r3, r0
 80049de:	2080      	movs	r0, #128	; 0x80
 80049e0:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049e2:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e4:	4038      	ands	r0, r7
 80049e6:	4303      	orrs	r3, r0
 80049e8:	2080      	movs	r0, #128	; 0x80
 80049ea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80049ec:	0180      	lsls	r0, r0, #6
 80049ee:	4038      	ands	r0, r7
 80049f0:	4303      	orrs	r3, r0
 80049f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f4:	2304      	movs	r3, #4
 80049f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049f8:	401a      	ands	r2, r3
 80049fa:	330c      	adds	r3, #12
 80049fc:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a00:	431a      	orrs	r2, r3
 8004a02:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a04:	69cb      	ldr	r3, [r1, #28]
 8004a06:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <HAL_SPI_Init+0xc0>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0e:	702e      	strb	r6, [r5, #0]
}
 8004a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a12:	2300      	movs	r3, #0
 8004a14:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a16:	6163      	str	r3, [r4, #20]
 8004a18:	e7ae      	b.n	8004978 <HAL_SPI_Init+0x1c>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	fffff7ff 	.word	0xfffff7ff

08004a20 <HAL_SPI_Transmit_DMA>:
{
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8004a22:	0006      	movs	r6, r0
 8004a24:	3650      	adds	r6, #80	; 0x50
 8004a26:	7833      	ldrb	r3, [r6, #0]
{
 8004a28:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8004a2a:	2502      	movs	r5, #2
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d03e      	beq.n	8004aae <HAL_SPI_Transmit_DMA+0x8e>
 8004a30:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a32:	0007      	movs	r7, r0
  __HAL_LOCK(hspi);
 8004a34:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a36:	3751      	adds	r7, #81	; 0x51
 8004a38:	783b      	ldrb	r3, [r7, #0]
 8004a3a:	b2dd      	uxtb	r5, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d14a      	bne.n	8004ad6 <HAL_SPI_Transmit_DMA+0xb6>
  if ((pData == NULL) || (Size == 0U))
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d032      	beq.n	8004aaa <HAL_SPI_Transmit_DMA+0x8a>
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d030      	beq.n	8004aaa <HAL_SPI_Transmit_DMA+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a48:	3302      	adds	r3, #2
 8004a4a:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a50:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a52:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 8004a54:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a56:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a58:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a5a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8004a5e:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a60:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8004a62:	6802      	ldr	r2, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a64:	6880      	ldr	r0, [r0, #8]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4298      	cmp	r0, r3
 8004a6a:	d108      	bne.n	8004a7e <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 8004a6c:	2040      	movs	r0, #64	; 0x40
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	4383      	bics	r3, r0
 8004a72:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	6810      	ldr	r0, [r2, #0]
 8004a78:	01db      	lsls	r3, r3, #7
 8004a7a:	4303      	orrs	r3, r0
 8004a7c:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a82:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a84:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <HAL_SPI_Transmit_DMA+0xc0>)
 8004a88:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <HAL_SPI_Transmit_DMA+0xc4>)
 8004a8c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8004a92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a96:	f7fe fcad 	bl	80033f4 <HAL_DMA_Start_IT>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_SPI_Transmit_DMA+0x92>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	7033      	strb	r3, [r6, #0]
}
 8004aae:	0028      	movs	r0, r5
 8004ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	4211      	tst	r1, r2
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ac6:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004acc:	2202      	movs	r2, #2
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	e7e9      	b.n	8004aaa <HAL_SPI_Transmit_DMA+0x8a>
    errorcode = HAL_BUSY;
 8004ad6:	2502      	movs	r5, #2
 8004ad8:	e7e7      	b.n	8004aaa <HAL_SPI_Transmit_DMA+0x8a>
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004b1d 	.word	0x08004b1d
 8004ae4:	08004af9 	.word	0x08004af9

08004ae8 <HAL_SPI_TxCpltCallback>:
 8004ae8:	4770      	bx	lr

08004aea <HAL_SPI_TxHalfCpltCallback>:
 8004aea:	4770      	bx	lr

08004aec <SPI_DMAHalfTransmitCplt>:
{
 8004aec:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004aee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004af0:	f7ff fffb 	bl	8004aea <HAL_SPI_TxHalfCpltCallback>
}
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <HAL_SPI_ErrorCallback>:
 8004af6:	4770      	bx	lr

08004af8 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004af8:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004afa:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004afc:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004afe:	6802      	ldr	r2, [r0, #0]
 8004b00:	6853      	ldr	r3, [r2, #4]
 8004b02:	438b      	bics	r3, r1
 8004b04:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b06:	2310      	movs	r3, #16
 8004b08:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	0003      	movs	r3, r0
 8004b10:	2201      	movs	r2, #1
 8004b12:	3351      	adds	r3, #81	; 0x51
 8004b14:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8004b16:	f7ff ffee 	bl	8004af6 <HAL_SPI_ErrorCallback>
}
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <SPI_DMATransmitCplt>:
{
 8004b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b1e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b20:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004b22:	f7fe f923 	bl	8002d6c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	2520      	movs	r5, #32
 8004b2a:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8004b2c:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004b2e:	422b      	tst	r3, r5
 8004b30:	d127      	bne.n	8004b82 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b32:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	43a9      	bics	r1, r5
 8004b3a:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	4381      	bics	r1, r0
 8004b40:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b42:	0020      	movs	r0, r4
 8004b44:	2164      	movs	r1, #100	; 0x64
 8004b46:	f7ff fed7 	bl	80048f8 <SPI_EndRxTxTransaction>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d002      	beq.n	8004b54 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b50:	431d      	orrs	r5, r3
 8004b52:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	0023      	movs	r3, r4
 8004b6e:	2201      	movs	r2, #1
 8004b70:	3351      	adds	r3, #81	; 0x51
 8004b72:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8004b7a:	0020      	movs	r0, r4
 8004b7c:	f7ff ffbb 	bl	8004af6 <HAL_SPI_ErrorCallback>
}
 8004b80:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8004b82:	0020      	movs	r0, r4
 8004b84:	f7ff ffb0 	bl	8004ae8 <HAL_SPI_TxCpltCallback>
 8004b88:	e7fa      	b.n	8004b80 <SPI_DMATransmitCplt+0x64>
	...

08004b8c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b8c:	2280      	movs	r2, #128	; 0x80
{
 8004b8e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004b90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b92:	05d2      	lsls	r2, r2, #23
 8004b94:	4290      	cmp	r0, r2
 8004b96:	d005      	beq.n	8004ba4 <TIM_Base_SetConfig+0x18>
 8004b98:	4c10      	ldr	r4, [pc, #64]	; (8004bdc <TIM_Base_SetConfig+0x50>)
 8004b9a:	42a0      	cmp	r0, r4
 8004b9c:	d002      	beq.n	8004ba4 <TIM_Base_SetConfig+0x18>
 8004b9e:	4c10      	ldr	r4, [pc, #64]	; (8004be0 <TIM_Base_SetConfig+0x54>)
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d10f      	bne.n	8004bc4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	2470      	movs	r4, #112	; 0x70
 8004ba6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	684c      	ldr	r4, [r1, #4]
 8004baa:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bac:	4290      	cmp	r0, r2
 8004bae:	d005      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <TIM_Base_SetConfig+0x50>)
 8004bb2:	4290      	cmp	r0, r2
 8004bb4:	d002      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <TIM_Base_SetConfig+0x54>)
 8004bb8:	4290      	cmp	r0, r2
 8004bba:	d103      	bne.n	8004bc4 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbc:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <TIM_Base_SetConfig+0x58>)
 8004bbe:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc0:	68ca      	ldr	r2, [r1, #12]
 8004bc2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc4:	2280      	movs	r2, #128	; 0x80
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	690a      	ldr	r2, [r1, #16]
 8004bca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004bcc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bce:	688b      	ldr	r3, [r1, #8]
 8004bd0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6143      	str	r3, [r0, #20]
}
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	40010800 	.word	0x40010800
 8004be0:	40011400 	.word	0x40011400
 8004be4:	fffffcff 	.word	0xfffffcff

08004be8 <HAL_TIM_Base_Init>:
{
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004bec:	2001      	movs	r0, #1
  if (htim == NULL)
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	d01d      	beq.n	8004c2e <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	0025      	movs	r5, r4
 8004bf4:	3539      	adds	r5, #57	; 0x39
 8004bf6:	782b      	ldrb	r3, [r5, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	0023      	movs	r3, r4
 8004c00:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004c02:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004c04:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004c06:	f7fc faaf 	bl	8001168 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	1d21      	adds	r1, r4, #4
 8004c12:	f7ff ffbb 	bl	8004b8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c16:	0022      	movs	r2, r4
 8004c18:	2301      	movs	r3, #1
  return HAL_OK;
 8004c1a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	323e      	adds	r2, #62	; 0x3e
 8004c1e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	343d      	adds	r4, #61	; 0x3d
 8004c22:	3a04      	subs	r2, #4
 8004c24:	7013      	strb	r3, [r2, #0]
 8004c26:	7053      	strb	r3, [r2, #1]
 8004c28:	7093      	strb	r3, [r2, #2]
 8004c2a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	702b      	strb	r3, [r5, #0]
}
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}

08004c30 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	0002      	movs	r2, r0
{
 8004c32:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004c36:	3239      	adds	r2, #57	; 0x39
 8004c38:	7811      	ldrb	r1, [r2, #0]
 8004c3a:	4281      	cmp	r1, r0
 8004c3c:	d119      	bne.n	8004c72 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3e:	2102      	movs	r1, #2
 8004c40:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	4302      	orrs	r2, r0
 8004c48:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	05d2      	lsls	r2, r2, #23
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d005      	beq.n	8004c5e <HAL_TIM_Base_Start_IT+0x2e>
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <HAL_TIM_Base_Start_IT+0x50>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d002      	beq.n	8004c5e <HAL_TIM_Base_Start_IT+0x2e>
 8004c58:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <HAL_TIM_Base_Start_IT+0x54>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10a      	bne.n	8004c74 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5e:	2107      	movs	r1, #7
 8004c60:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004c62:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c64:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	2a06      	cmp	r2, #6
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4310      	orrs	r0, r2
 8004c78:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e7f9      	b.n	8004c72 <HAL_TIM_Base_Start_IT+0x42>
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	40010800 	.word	0x40010800
 8004c84:	40011400 	.word	0x40011400

08004c88 <HAL_TIM_ConfigClockSource>:
{
 8004c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004c8a:	0005      	movs	r5, r0
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	3538      	adds	r5, #56	; 0x38
 8004c90:	782c      	ldrb	r4, [r5, #0]
{
 8004c92:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004c94:	0010      	movs	r0, r2
 8004c96:	2c01      	cmp	r4, #1
 8004c98:	d01d      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9a:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8004c9c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8004ca0:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca2:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004ca4:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca6:	484c      	ldr	r0, [pc, #304]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004caa:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8004cac:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004cae:	680a      	ldr	r2, [r1, #0]
 8004cb0:	2a60      	cmp	r2, #96	; 0x60
 8004cb2:	d05f      	beq.n	8004d74 <HAL_TIM_ConfigClockSource+0xec>
 8004cb4:	d832      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x94>
 8004cb6:	2a40      	cmp	r2, #64	; 0x40
 8004cb8:	d100      	bne.n	8004cbc <HAL_TIM_ConfigClockSource+0x34>
 8004cba:	e074      	b.n	8004da6 <HAL_TIM_ConfigClockSource+0x11e>
 8004cbc:	d814      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x60>
 8004cbe:	2a20      	cmp	r2, #32
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x54>
 8004cc2:	d809      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x50>
 8004cc4:	2110      	movs	r1, #16
 8004cc6:	0010      	movs	r0, r2
 8004cc8:	4388      	bics	r0, r1
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x54>
 8004ccc:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	702b      	strb	r3, [r5, #0]
}
 8004cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004cd8:	2a30      	cmp	r2, #48	; 0x30
 8004cda:	d1f7      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cdc:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004cde:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce0:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	2107      	movs	r1, #7
 8004ce6:	e032      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004ce8:	2a50      	cmp	r2, #80	; 0x50
 8004cea:	d1ef      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 8004cec:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf0:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf4:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfa:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfc:	43a2      	bics	r2, r4
 8004cfe:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d02:	210a      	movs	r1, #10
 8004d04:	438f      	bics	r7, r1
 8004d06:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d08:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004d0a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0e:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d10:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004d12:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d14:	438a      	bics	r2, r1
 8004d16:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d18:	2257      	movs	r2, #87	; 0x57
 8004d1a:	e018      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004d1c:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004d20:	017f      	lsls	r7, r7, #5
 8004d22:	42ba      	cmp	r2, r7
 8004d24:	d0d3      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x46>
 8004d26:	2080      	movs	r0, #128	; 0x80
 8004d28:	0180      	lsls	r0, r0, #6
 8004d2a:	4282      	cmp	r2, r0
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xce>
 8004d2e:	0020      	movs	r0, r4
 8004d30:	2a70      	cmp	r2, #112	; 0x70
 8004d32:	d1cc      	bne.n	8004cce <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d34:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d36:	4829      	ldr	r0, [pc, #164]	; (8004ddc <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d38:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	68c9      	ldr	r1, [r1, #12]
 8004d40:	4322      	orrs	r2, r4
 8004d42:	0209      	lsls	r1, r1, #8
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d48:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004d4c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4e:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	e7bb      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004d56:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d58:	4820      	ldr	r0, [pc, #128]	; (8004ddc <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5a:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5e:	688a      	ldr	r2, [r1, #8]
 8004d60:	68c9      	ldr	r1, [r1, #12]
 8004d62:	4322      	orrs	r2, r4
 8004d64:	0209      	lsls	r1, r1, #8
 8004d66:	430a      	orrs	r2, r1
 8004d68:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8004d6a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	01d2      	lsls	r2, r2, #7
 8004d72:	e7ec      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d74:	6848      	ldr	r0, [r1, #4]
 8004d76:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d78:	2110      	movs	r1, #16
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7c:	4c18      	ldr	r4, [pc, #96]	; (8004de0 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7e:	438a      	bics	r2, r1
 8004d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d82:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004d84:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d86:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d88:	24a0      	movs	r4, #160	; 0xa0
 8004d8a:	43a2      	bics	r2, r4
 8004d8c:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8e:	033f      	lsls	r7, r7, #12
 8004d90:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8004d92:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d94:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d96:	0102      	lsls	r2, r0, #4
 8004d98:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8004d9a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004d9c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9e:	438a      	bics	r2, r1
 8004da0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da2:	2267      	movs	r2, #103	; 0x67
 8004da4:	e7d3      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 8004da6:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da8:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dac:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dae:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db6:	43a2      	bics	r2, r4
 8004db8:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dba:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbc:	210a      	movs	r1, #10
 8004dbe:	438f      	bics	r7, r1
 8004dc0:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc2:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004dc4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004dcc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dce:	438a      	bics	r2, r1
 8004dd0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd2:	2247      	movs	r2, #71	; 0x47
 8004dd4:	e7bb      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0xc6>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	ffff0088 	.word	0xffff0088
 8004ddc:	ffff00ff 	.word	0xffff00ff
 8004de0:	ffff0fff 	.word	0xffff0fff

08004de4 <HAL_TIM_OC_DelayElapsedCallback>:
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_IC_CaptureCallback>:
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004de8:	4770      	bx	lr

08004dea <HAL_TIM_TriggerCallback>:
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dec:	2202      	movs	r2, #2
 8004dee:	6803      	ldr	r3, [r0, #0]
{
 8004df0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df2:	6919      	ldr	r1, [r3, #16]
{
 8004df4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df6:	4211      	tst	r1, r2
 8004df8:	d00d      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfa:	68d9      	ldr	r1, [r3, #12]
 8004dfc:	4211      	tst	r1, r2
 8004dfe:	d00a      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e00:	3a05      	subs	r2, #5
 8004e02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e04:	3204      	adds	r2, #4
 8004e06:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	079b      	lsls	r3, r3, #30
 8004e0c:	d05e      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	f7ff ffea 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	2300      	movs	r3, #0
 8004e14:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e16:	2204      	movs	r2, #4
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	6919      	ldr	r1, [r3, #16]
 8004e1c:	4211      	tst	r1, r2
 8004e1e:	d010      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e20:	68d9      	ldr	r1, [r3, #12]
 8004e22:	4211      	tst	r1, r2
 8004e24:	d00d      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e26:	3a09      	subs	r2, #9
 8004e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2a:	3207      	adds	r2, #7
 8004e2c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	23c0      	movs	r3, #192	; 0xc0
 8004e32:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004e34:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e36:	421a      	tst	r2, r3
 8004e38:	d04e      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	f7ff ffd4 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e42:	2208      	movs	r2, #8
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	6919      	ldr	r1, [r3, #16]
 8004e48:	4211      	tst	r1, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	4211      	tst	r1, r2
 8004e50:	d00b      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e52:	3a11      	subs	r2, #17
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e56:	320d      	adds	r2, #13
 8004e58:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e5a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e5e:	079b      	lsls	r3, r3, #30
 8004e60:	d040      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	f7ff ffc0 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	2300      	movs	r3, #0
 8004e68:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	6919      	ldr	r1, [r3, #16]
 8004e70:	4211      	tst	r1, r2
 8004e72:	d010      	beq.n	8004e96 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e74:	68d9      	ldr	r1, [r3, #12]
 8004e76:	4211      	tst	r1, r2
 8004e78:	d00d      	beq.n	8004e96 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e7a:	3a21      	subs	r2, #33	; 0x21
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e7e:	3219      	adds	r2, #25
 8004e80:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	23c0      	movs	r3, #192	; 0xc0
 8004e86:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004e88:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8a:	421a      	tst	r2, r3
 8004e8c:	d030      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	f7ff ffaa 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	2300      	movs	r3, #0
 8004e94:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e96:	2201      	movs	r2, #1
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	6919      	ldr	r1, [r3, #16]
 8004e9c:	4211      	tst	r1, r2
 8004e9e:	d007      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	4211      	tst	r1, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea6:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eaa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eac:	f7fd fe80 	bl	8002bb0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb0:	2240      	movs	r2, #64	; 0x40
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	6919      	ldr	r1, [r3, #16]
 8004eb6:	4211      	tst	r1, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eba:	68d9      	ldr	r1, [r3, #12]
 8004ebc:	4211      	tst	r1, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec0:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8004ec2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ec6:	f7ff ff90 	bl	8004dea <HAL_TIM_TriggerCallback>
}
 8004eca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ecc:	f7ff ff8a 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	f7ff ff89 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ed6:	e79c      	b.n	8004e12 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed8:	f7ff ff84 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	0020      	movs	r0, r4
 8004ede:	f7ff ff83 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ee2:	e7ac      	b.n	8004e3e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee4:	f7ff ff7e 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	0020      	movs	r0, r4
 8004eea:	f7ff ff7d 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eee:	e7ba      	b.n	8004e66 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef0:	f7ff ff78 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	0020      	movs	r0, r4
 8004ef6:	f7ff ff77 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004efa:	e7ca      	b.n	8004e92 <HAL_TIM_IRQHandler+0xa6>

08004efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	0004      	movs	r4, r0
 8004f00:	2202      	movs	r2, #2
 8004f02:	3438      	adds	r4, #56	; 0x38
 8004f04:	7825      	ldrb	r5, [r4, #0]
{
 8004f06:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004f08:	0010      	movs	r0, r2
 8004f0a:	2d01      	cmp	r5, #1
 8004f0c:	d01d      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f10:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	3539      	adds	r5, #57	; 0x39
 8004f14:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004f1a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1e:	680e      	ldr	r6, [r1, #0]
 8004f20:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f22:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	2080      	movs	r0, #128	; 0x80
 8004f26:	05c0      	lsls	r0, r0, #23
 8004f28:	4283      	cmp	r3, r0
 8004f2a:	d005      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004f2c:	4807      	ldr	r0, [pc, #28]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004f2e:	4283      	cmp	r3, r0
 8004f30:	d002      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004f32:	4807      	ldr	r0, [pc, #28]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004f34:	4283      	cmp	r3, r0
 8004f36:	d104      	bne.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f38:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f42:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004f44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f46:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004f48:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	40010800 	.word	0x40010800
 8004f50:	40011400 	.word	0x40011400

08004f54 <calloc>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <calloc+0x10>)
 8004f58:	000a      	movs	r2, r1
 8004f5a:	0001      	movs	r1, r0
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	f000 f85b 	bl	8005018 <_calloc_r>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	20000038 	.word	0x20000038

08004f68 <__errno>:
 8004f68:	4b01      	ldr	r3, [pc, #4]	; (8004f70 <__errno+0x8>)
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	4770      	bx	lr
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	20000038 	.word	0x20000038

08004f74 <__libc_init_array>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	2600      	movs	r6, #0
 8004f78:	4d0c      	ldr	r5, [pc, #48]	; (8004fac <__libc_init_array+0x38>)
 8004f7a:	4c0d      	ldr	r4, [pc, #52]	; (8004fb0 <__libc_init_array+0x3c>)
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	42a6      	cmp	r6, r4
 8004f82:	d109      	bne.n	8004f98 <__libc_init_array+0x24>
 8004f84:	2600      	movs	r6, #0
 8004f86:	f000 fcc7 	bl	8005918 <_init>
 8004f8a:	4d0a      	ldr	r5, [pc, #40]	; (8004fb4 <__libc_init_array+0x40>)
 8004f8c:	4c0a      	ldr	r4, [pc, #40]	; (8004fb8 <__libc_init_array+0x44>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	42a6      	cmp	r6, r4
 8004f94:	d105      	bne.n	8004fa2 <__libc_init_array+0x2e>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	00b3      	lsls	r3, r6, #2
 8004f9a:	58eb      	ldr	r3, [r5, r3]
 8004f9c:	4798      	blx	r3
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7ee      	b.n	8004f80 <__libc_init_array+0xc>
 8004fa2:	00b3      	lsls	r3, r6, #2
 8004fa4:	58eb      	ldr	r3, [r5, r3]
 8004fa6:	4798      	blx	r3
 8004fa8:	3601      	adds	r6, #1
 8004faa:	e7f2      	b.n	8004f92 <__libc_init_array+0x1e>
 8004fac:	080066b4 	.word	0x080066b4
 8004fb0:	080066b4 	.word	0x080066b4
 8004fb4:	080066b4 	.word	0x080066b4
 8004fb8:	080066b8 	.word	0x080066b8

08004fbc <free>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <free+0x10>)
 8004fc0:	0001      	movs	r1, r0
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	f000 f854 	bl	8005070 <_free_r>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	20000038 	.word	0x20000038

08004fd0 <memcpy>:
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d100      	bne.n	8004fda <memcpy+0xa>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	5ccc      	ldrb	r4, [r1, r3]
 8004fdc:	54c4      	strb	r4, [r0, r3]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	e7f8      	b.n	8004fd4 <memcpy+0x4>

08004fe2 <memmove>:
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	d902      	bls.n	8004fee <memmove+0xc>
 8004fe8:	188b      	adds	r3, r1, r2
 8004fea:	4298      	cmp	r0, r3
 8004fec:	d303      	bcc.n	8004ff6 <memmove+0x14>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e007      	b.n	8005002 <memmove+0x20>
 8004ff2:	5c8b      	ldrb	r3, [r1, r2]
 8004ff4:	5483      	strb	r3, [r0, r2]
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	d2fb      	bcs.n	8004ff2 <memmove+0x10>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	5ccc      	ldrb	r4, [r1, r3]
 8004ffe:	54c4      	strb	r4, [r0, r3]
 8005000:	3301      	adds	r3, #1
 8005002:	429a      	cmp	r2, r3
 8005004:	d1fa      	bne.n	8004ffc <memmove+0x1a>
 8005006:	e7f8      	b.n	8004ffa <memmove+0x18>

08005008 <memset>:
 8005008:	0003      	movs	r3, r0
 800500a:	1882      	adds	r2, r0, r2
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	7019      	strb	r1, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <_calloc_r>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	0c13      	lsrs	r3, r2, #16
 800501c:	0c0d      	lsrs	r5, r1, #16
 800501e:	d11e      	bne.n	800505e <_calloc_r+0x46>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10c      	bne.n	800503e <_calloc_r+0x26>
 8005024:	b289      	uxth	r1, r1
 8005026:	b294      	uxth	r4, r2
 8005028:	434c      	muls	r4, r1
 800502a:	0021      	movs	r1, r4
 800502c:	f000 f88c 	bl	8005148 <_malloc_r>
 8005030:	1e05      	subs	r5, r0, #0
 8005032:	d01b      	beq.n	800506c <_calloc_r+0x54>
 8005034:	0022      	movs	r2, r4
 8005036:	2100      	movs	r1, #0
 8005038:	f7ff ffe6 	bl	8005008 <memset>
 800503c:	e016      	b.n	800506c <_calloc_r+0x54>
 800503e:	1c1d      	adds	r5, r3, #0
 8005040:	1c0b      	adds	r3, r1, #0
 8005042:	b292      	uxth	r2, r2
 8005044:	b289      	uxth	r1, r1
 8005046:	b29c      	uxth	r4, r3
 8005048:	4351      	muls	r1, r2
 800504a:	b2ab      	uxth	r3, r5
 800504c:	4363      	muls	r3, r4
 800504e:	0c0c      	lsrs	r4, r1, #16
 8005050:	191c      	adds	r4, r3, r4
 8005052:	0c22      	lsrs	r2, r4, #16
 8005054:	d107      	bne.n	8005066 <_calloc_r+0x4e>
 8005056:	0424      	lsls	r4, r4, #16
 8005058:	b289      	uxth	r1, r1
 800505a:	430c      	orrs	r4, r1
 800505c:	e7e5      	b.n	800502a <_calloc_r+0x12>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <_calloc_r+0x4e>
 8005062:	1c13      	adds	r3, r2, #0
 8005064:	e7ed      	b.n	8005042 <_calloc_r+0x2a>
 8005066:	230c      	movs	r3, #12
 8005068:	2500      	movs	r5, #0
 800506a:	6003      	str	r3, [r0, #0]
 800506c:	0028      	movs	r0, r5
 800506e:	bd70      	pop	{r4, r5, r6, pc}

08005070 <_free_r>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	0005      	movs	r5, r0
 8005074:	2900      	cmp	r1, #0
 8005076:	d010      	beq.n	800509a <_free_r+0x2a>
 8005078:	1f0c      	subs	r4, r1, #4
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da00      	bge.n	8005082 <_free_r+0x12>
 8005080:	18e4      	adds	r4, r4, r3
 8005082:	0028      	movs	r0, r5
 8005084:	f000 f910 	bl	80052a8 <__malloc_lock>
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <_free_r+0x90>)
 800508a:	6813      	ldr	r3, [r2, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <_free_r+0x2c>
 8005090:	6063      	str	r3, [r4, #4]
 8005092:	6014      	str	r4, [r2, #0]
 8005094:	0028      	movs	r0, r5
 8005096:	f000 f90f 	bl	80052b8 <__malloc_unlock>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	42a3      	cmp	r3, r4
 800509e:	d908      	bls.n	80050b2 <_free_r+0x42>
 80050a0:	6821      	ldr	r1, [r4, #0]
 80050a2:	1860      	adds	r0, r4, r1
 80050a4:	4283      	cmp	r3, r0
 80050a6:	d1f3      	bne.n	8005090 <_free_r+0x20>
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	1841      	adds	r1, r0, r1
 80050ae:	6021      	str	r1, [r4, #0]
 80050b0:	e7ee      	b.n	8005090 <_free_r+0x20>
 80050b2:	001a      	movs	r2, r3
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <_free_r+0x4e>
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	d9f9      	bls.n	80050b2 <_free_r+0x42>
 80050be:	6811      	ldr	r1, [r2, #0]
 80050c0:	1850      	adds	r0, r2, r1
 80050c2:	42a0      	cmp	r0, r4
 80050c4:	d10b      	bne.n	80050de <_free_r+0x6e>
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	1809      	adds	r1, r1, r0
 80050ca:	1850      	adds	r0, r2, r1
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	4283      	cmp	r3, r0
 80050d0:	d1e0      	bne.n	8005094 <_free_r+0x24>
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	1841      	adds	r1, r0, r1
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	6053      	str	r3, [r2, #4]
 80050dc:	e7da      	b.n	8005094 <_free_r+0x24>
 80050de:	42a0      	cmp	r0, r4
 80050e0:	d902      	bls.n	80050e8 <_free_r+0x78>
 80050e2:	230c      	movs	r3, #12
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	e7d5      	b.n	8005094 <_free_r+0x24>
 80050e8:	6821      	ldr	r1, [r4, #0]
 80050ea:	1860      	adds	r0, r4, r1
 80050ec:	4283      	cmp	r3, r0
 80050ee:	d103      	bne.n	80050f8 <_free_r+0x88>
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	1841      	adds	r1, r0, r1
 80050f6:	6021      	str	r1, [r4, #0]
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	6054      	str	r4, [r2, #4]
 80050fc:	e7ca      	b.n	8005094 <_free_r+0x24>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	20000ea4 	.word	0x20000ea4

08005104 <sbrk_aligned>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	4e0f      	ldr	r6, [pc, #60]	; (8005144 <sbrk_aligned+0x40>)
 8005108:	000d      	movs	r5, r1
 800510a:	6831      	ldr	r1, [r6, #0]
 800510c:	0004      	movs	r4, r0
 800510e:	2900      	cmp	r1, #0
 8005110:	d102      	bne.n	8005118 <sbrk_aligned+0x14>
 8005112:	f000 f88f 	bl	8005234 <_sbrk_r>
 8005116:	6030      	str	r0, [r6, #0]
 8005118:	0029      	movs	r1, r5
 800511a:	0020      	movs	r0, r4
 800511c:	f000 f88a 	bl	8005234 <_sbrk_r>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d00a      	beq.n	800513a <sbrk_aligned+0x36>
 8005124:	2303      	movs	r3, #3
 8005126:	1cc5      	adds	r5, r0, #3
 8005128:	439d      	bics	r5, r3
 800512a:	42a8      	cmp	r0, r5
 800512c:	d007      	beq.n	800513e <sbrk_aligned+0x3a>
 800512e:	1a29      	subs	r1, r5, r0
 8005130:	0020      	movs	r0, r4
 8005132:	f000 f87f 	bl	8005234 <_sbrk_r>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d101      	bne.n	800513e <sbrk_aligned+0x3a>
 800513a:	2501      	movs	r5, #1
 800513c:	426d      	negs	r5, r5
 800513e:	0028      	movs	r0, r5
 8005140:	bd70      	pop	{r4, r5, r6, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	20000ea8 	.word	0x20000ea8

08005148 <_malloc_r>:
 8005148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514a:	2203      	movs	r2, #3
 800514c:	1ccb      	adds	r3, r1, #3
 800514e:	4393      	bics	r3, r2
 8005150:	3308      	adds	r3, #8
 8005152:	0006      	movs	r6, r0
 8005154:	001f      	movs	r7, r3
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d232      	bcs.n	80051c0 <_malloc_r+0x78>
 800515a:	270c      	movs	r7, #12
 800515c:	42b9      	cmp	r1, r7
 800515e:	d831      	bhi.n	80051c4 <_malloc_r+0x7c>
 8005160:	0030      	movs	r0, r6
 8005162:	f000 f8a1 	bl	80052a8 <__malloc_lock>
 8005166:	4d32      	ldr	r5, [pc, #200]	; (8005230 <_malloc_r+0xe8>)
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	001c      	movs	r4, r3
 800516c:	2c00      	cmp	r4, #0
 800516e:	d12e      	bne.n	80051ce <_malloc_r+0x86>
 8005170:	0039      	movs	r1, r7
 8005172:	0030      	movs	r0, r6
 8005174:	f7ff ffc6 	bl	8005104 <sbrk_aligned>
 8005178:	0004      	movs	r4, r0
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d11e      	bne.n	80051bc <_malloc_r+0x74>
 800517e:	682c      	ldr	r4, [r5, #0]
 8005180:	0025      	movs	r5, r4
 8005182:	2d00      	cmp	r5, #0
 8005184:	d14a      	bne.n	800521c <_malloc_r+0xd4>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	0029      	movs	r1, r5
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	0030      	movs	r0, r6
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	f000 f850 	bl	8005234 <_sbrk_r>
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	4283      	cmp	r3, r0
 8005198:	d143      	bne.n	8005222 <_malloc_r+0xda>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	3703      	adds	r7, #3
 800519e:	1aff      	subs	r7, r7, r3
 80051a0:	2303      	movs	r3, #3
 80051a2:	439f      	bics	r7, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	2f0c      	cmp	r7, #12
 80051a8:	d200      	bcs.n	80051ac <_malloc_r+0x64>
 80051aa:	270c      	movs	r7, #12
 80051ac:	0039      	movs	r1, r7
 80051ae:	0030      	movs	r0, r6
 80051b0:	f7ff ffa8 	bl	8005104 <sbrk_aligned>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d034      	beq.n	8005222 <_malloc_r+0xda>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	19df      	adds	r7, r3, r7
 80051bc:	6027      	str	r7, [r4, #0]
 80051be:	e013      	b.n	80051e8 <_malloc_r+0xa0>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dacb      	bge.n	800515c <_malloc_r+0x14>
 80051c4:	230c      	movs	r3, #12
 80051c6:	2500      	movs	r5, #0
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	0028      	movs	r0, r5
 80051cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	1bd1      	subs	r1, r2, r7
 80051d2:	d420      	bmi.n	8005216 <_malloc_r+0xce>
 80051d4:	290b      	cmp	r1, #11
 80051d6:	d917      	bls.n	8005208 <_malloc_r+0xc0>
 80051d8:	19e2      	adds	r2, r4, r7
 80051da:	6027      	str	r7, [r4, #0]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d111      	bne.n	8005204 <_malloc_r+0xbc>
 80051e0:	602a      	str	r2, [r5, #0]
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	6011      	str	r1, [r2, #0]
 80051e6:	6053      	str	r3, [r2, #4]
 80051e8:	0030      	movs	r0, r6
 80051ea:	0025      	movs	r5, r4
 80051ec:	f000 f864 	bl	80052b8 <__malloc_unlock>
 80051f0:	2207      	movs	r2, #7
 80051f2:	350b      	adds	r5, #11
 80051f4:	1d23      	adds	r3, r4, #4
 80051f6:	4395      	bics	r5, r2
 80051f8:	1aea      	subs	r2, r5, r3
 80051fa:	429d      	cmp	r5, r3
 80051fc:	d0e5      	beq.n	80051ca <_malloc_r+0x82>
 80051fe:	1b5b      	subs	r3, r3, r5
 8005200:	50a3      	str	r3, [r4, r2]
 8005202:	e7e2      	b.n	80051ca <_malloc_r+0x82>
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e7ec      	b.n	80051e2 <_malloc_r+0x9a>
 8005208:	6862      	ldr	r2, [r4, #4]
 800520a:	42a3      	cmp	r3, r4
 800520c:	d101      	bne.n	8005212 <_malloc_r+0xca>
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	e7ea      	b.n	80051e8 <_malloc_r+0xa0>
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e7e8      	b.n	80051e8 <_malloc_r+0xa0>
 8005216:	0023      	movs	r3, r4
 8005218:	6864      	ldr	r4, [r4, #4]
 800521a:	e7a7      	b.n	800516c <_malloc_r+0x24>
 800521c:	002c      	movs	r4, r5
 800521e:	686d      	ldr	r5, [r5, #4]
 8005220:	e7af      	b.n	8005182 <_malloc_r+0x3a>
 8005222:	230c      	movs	r3, #12
 8005224:	0030      	movs	r0, r6
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f000 f846 	bl	80052b8 <__malloc_unlock>
 800522c:	e7cd      	b.n	80051ca <_malloc_r+0x82>
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20000ea4 	.word	0x20000ea4

08005234 <_sbrk_r>:
 8005234:	2300      	movs	r3, #0
 8005236:	b570      	push	{r4, r5, r6, lr}
 8005238:	4d06      	ldr	r5, [pc, #24]	; (8005254 <_sbrk_r+0x20>)
 800523a:	0004      	movs	r4, r0
 800523c:	0008      	movs	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fb ffb8 	bl	80011b4 <_sbrk>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d103      	bne.n	8005250 <_sbrk_r+0x1c>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d000      	beq.n	8005250 <_sbrk_r+0x1c>
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	20000eac 	.word	0x20000eac

08005258 <siprintf>:
 8005258:	b40e      	push	{r1, r2, r3}
 800525a:	b500      	push	{lr}
 800525c:	490b      	ldr	r1, [pc, #44]	; (800528c <siprintf+0x34>)
 800525e:	b09c      	sub	sp, #112	; 0x70
 8005260:	ab1d      	add	r3, sp, #116	; 0x74
 8005262:	9002      	str	r0, [sp, #8]
 8005264:	9006      	str	r0, [sp, #24]
 8005266:	9107      	str	r1, [sp, #28]
 8005268:	9104      	str	r1, [sp, #16]
 800526a:	4809      	ldr	r0, [pc, #36]	; (8005290 <siprintf+0x38>)
 800526c:	4909      	ldr	r1, [pc, #36]	; (8005294 <siprintf+0x3c>)
 800526e:	cb04      	ldmia	r3!, {r2}
 8005270:	9105      	str	r1, [sp, #20]
 8005272:	6800      	ldr	r0, [r0, #0]
 8005274:	a902      	add	r1, sp, #8
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	f000 f888 	bl	800538c <_svfiprintf_r>
 800527c:	2300      	movs	r3, #0
 800527e:	9a02      	ldr	r2, [sp, #8]
 8005280:	7013      	strb	r3, [r2, #0]
 8005282:	b01c      	add	sp, #112	; 0x70
 8005284:	bc08      	pop	{r3}
 8005286:	b003      	add	sp, #12
 8005288:	4718      	bx	r3
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	7fffffff 	.word	0x7fffffff
 8005290:	20000038 	.word	0x20000038
 8005294:	ffff0208 	.word	0xffff0208

08005298 <strcpy>:
 8005298:	0003      	movs	r3, r0
 800529a:	780a      	ldrb	r2, [r1, #0]
 800529c:	3101      	adds	r1, #1
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d1f9      	bne.n	800529a <strcpy+0x2>
 80052a6:	4770      	bx	lr

080052a8 <__malloc_lock>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4802      	ldr	r0, [pc, #8]	; (80052b4 <__malloc_lock+0xc>)
 80052ac:	f000 faf0 	bl	8005890 <__retarget_lock_acquire_recursive>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000eb0 	.word	0x20000eb0

080052b8 <__malloc_unlock>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	4802      	ldr	r0, [pc, #8]	; (80052c4 <__malloc_unlock+0xc>)
 80052bc:	f000 fae9 	bl	8005892 <__retarget_lock_release_recursive>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	20000eb0 	.word	0x20000eb0

080052c8 <__ssputs_r>:
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	688e      	ldr	r6, [r1, #8]
 80052cc:	b085      	sub	sp, #20
 80052ce:	0007      	movs	r7, r0
 80052d0:	000c      	movs	r4, r1
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	429e      	cmp	r6, r3
 80052d8:	d83c      	bhi.n	8005354 <__ssputs_r+0x8c>
 80052da:	2390      	movs	r3, #144	; 0x90
 80052dc:	898a      	ldrh	r2, [r1, #12]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	421a      	tst	r2, r3
 80052e2:	d034      	beq.n	800534e <__ssputs_r+0x86>
 80052e4:	6909      	ldr	r1, [r1, #16]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	6960      	ldr	r0, [r4, #20]
 80052ea:	1a5b      	subs	r3, r3, r1
 80052ec:	9302      	str	r3, [sp, #8]
 80052ee:	2303      	movs	r3, #3
 80052f0:	4343      	muls	r3, r0
 80052f2:	0fdd      	lsrs	r5, r3, #31
 80052f4:	18ed      	adds	r5, r5, r3
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	9802      	ldr	r0, [sp, #8]
 80052fa:	3301      	adds	r3, #1
 80052fc:	181b      	adds	r3, r3, r0
 80052fe:	106d      	asrs	r5, r5, #1
 8005300:	42ab      	cmp	r3, r5
 8005302:	d900      	bls.n	8005306 <__ssputs_r+0x3e>
 8005304:	001d      	movs	r5, r3
 8005306:	0553      	lsls	r3, r2, #21
 8005308:	d532      	bpl.n	8005370 <__ssputs_r+0xa8>
 800530a:	0029      	movs	r1, r5
 800530c:	0038      	movs	r0, r7
 800530e:	f7ff ff1b 	bl	8005148 <_malloc_r>
 8005312:	1e06      	subs	r6, r0, #0
 8005314:	d109      	bne.n	800532a <__ssputs_r+0x62>
 8005316:	230c      	movs	r3, #12
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	2340      	movs	r3, #64	; 0x40
 800531c:	2001      	movs	r0, #1
 800531e:	89a2      	ldrh	r2, [r4, #12]
 8005320:	4240      	negs	r0, r0
 8005322:	4313      	orrs	r3, r2
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	b005      	add	sp, #20
 8005328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532a:	9a02      	ldr	r2, [sp, #8]
 800532c:	6921      	ldr	r1, [r4, #16]
 800532e:	f7ff fe4f 	bl	8004fd0 <memcpy>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <__ssputs_r+0xc0>)
 8005336:	401a      	ands	r2, r3
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	4313      	orrs	r3, r2
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	6126      	str	r6, [r4, #16]
 8005342:	18f6      	adds	r6, r6, r3
 8005344:	6026      	str	r6, [r4, #0]
 8005346:	6165      	str	r5, [r4, #20]
 8005348:	9e01      	ldr	r6, [sp, #4]
 800534a:	1aed      	subs	r5, r5, r3
 800534c:	60a5      	str	r5, [r4, #8]
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	429e      	cmp	r6, r3
 8005352:	d900      	bls.n	8005356 <__ssputs_r+0x8e>
 8005354:	9e01      	ldr	r6, [sp, #4]
 8005356:	0032      	movs	r2, r6
 8005358:	9903      	ldr	r1, [sp, #12]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	f7ff fe41 	bl	8004fe2 <memmove>
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	2000      	movs	r0, #0
 8005364:	1b9b      	subs	r3, r3, r6
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	199e      	adds	r6, r3, r6
 800536c:	6026      	str	r6, [r4, #0]
 800536e:	e7da      	b.n	8005326 <__ssputs_r+0x5e>
 8005370:	002a      	movs	r2, r5
 8005372:	0038      	movs	r0, r7
 8005374:	f000 fa99 	bl	80058aa <_realloc_r>
 8005378:	1e06      	subs	r6, r0, #0
 800537a:	d1e0      	bne.n	800533e <__ssputs_r+0x76>
 800537c:	0038      	movs	r0, r7
 800537e:	6921      	ldr	r1, [r4, #16]
 8005380:	f7ff fe76 	bl	8005070 <_free_r>
 8005384:	e7c7      	b.n	8005316 <__ssputs_r+0x4e>
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	fffffb7f 	.word	0xfffffb7f

0800538c <_svfiprintf_r>:
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	b0a1      	sub	sp, #132	; 0x84
 8005390:	9003      	str	r0, [sp, #12]
 8005392:	001d      	movs	r5, r3
 8005394:	898b      	ldrh	r3, [r1, #12]
 8005396:	000f      	movs	r7, r1
 8005398:	0016      	movs	r6, r2
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	d511      	bpl.n	80053c2 <_svfiprintf_r+0x36>
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10e      	bne.n	80053c2 <_svfiprintf_r+0x36>
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	f7ff fecf 	bl	8005148 <_malloc_r>
 80053aa:	6038      	str	r0, [r7, #0]
 80053ac:	6138      	str	r0, [r7, #16]
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d105      	bne.n	80053be <_svfiprintf_r+0x32>
 80053b2:	230c      	movs	r3, #12
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	3801      	subs	r0, #1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	b021      	add	sp, #132	; 0x84
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	ac08      	add	r4, sp, #32
 80053c6:	6163      	str	r3, [r4, #20]
 80053c8:	3320      	adds	r3, #32
 80053ca:	7663      	strb	r3, [r4, #25]
 80053cc:	3310      	adds	r3, #16
 80053ce:	76a3      	strb	r3, [r4, #26]
 80053d0:	9507      	str	r5, [sp, #28]
 80053d2:	0035      	movs	r5, r6
 80053d4:	782b      	ldrb	r3, [r5, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <_svfiprintf_r+0x52>
 80053da:	2b25      	cmp	r3, #37	; 0x25
 80053dc:	d147      	bne.n	800546e <_svfiprintf_r+0xe2>
 80053de:	1bab      	subs	r3, r5, r6
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d00c      	beq.n	8005400 <_svfiprintf_r+0x74>
 80053e6:	0032      	movs	r2, r6
 80053e8:	0039      	movs	r1, r7
 80053ea:	9803      	ldr	r0, [sp, #12]
 80053ec:	f7ff ff6c 	bl	80052c8 <__ssputs_r>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d100      	bne.n	80053f6 <_svfiprintf_r+0x6a>
 80053f4:	e0ae      	b.n	8005554 <_svfiprintf_r+0x1c8>
 80053f6:	6962      	ldr	r2, [r4, #20]
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	4694      	mov	ip, r2
 80053fc:	4463      	add	r3, ip
 80053fe:	6163      	str	r3, [r4, #20]
 8005400:	782b      	ldrb	r3, [r5, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d100      	bne.n	8005408 <_svfiprintf_r+0x7c>
 8005406:	e0a5      	b.n	8005554 <_svfiprintf_r+0x1c8>
 8005408:	2201      	movs	r2, #1
 800540a:	2300      	movs	r3, #0
 800540c:	4252      	negs	r2, r2
 800540e:	6062      	str	r2, [r4, #4]
 8005410:	a904      	add	r1, sp, #16
 8005412:	3254      	adds	r2, #84	; 0x54
 8005414:	1852      	adds	r2, r2, r1
 8005416:	1c6e      	adds	r6, r5, #1
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	60e3      	str	r3, [r4, #12]
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	7013      	strb	r3, [r2, #0]
 8005420:	65a3      	str	r3, [r4, #88]	; 0x58
 8005422:	2205      	movs	r2, #5
 8005424:	7831      	ldrb	r1, [r6, #0]
 8005426:	4854      	ldr	r0, [pc, #336]	; (8005578 <_svfiprintf_r+0x1ec>)
 8005428:	f000 fa34 	bl	8005894 <memchr>
 800542c:	1c75      	adds	r5, r6, #1
 800542e:	2800      	cmp	r0, #0
 8005430:	d11f      	bne.n	8005472 <_svfiprintf_r+0xe6>
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	06d3      	lsls	r3, r2, #27
 8005436:	d504      	bpl.n	8005442 <_svfiprintf_r+0xb6>
 8005438:	2353      	movs	r3, #83	; 0x53
 800543a:	a904      	add	r1, sp, #16
 800543c:	185b      	adds	r3, r3, r1
 800543e:	2120      	movs	r1, #32
 8005440:	7019      	strb	r1, [r3, #0]
 8005442:	0713      	lsls	r3, r2, #28
 8005444:	d504      	bpl.n	8005450 <_svfiprintf_r+0xc4>
 8005446:	2353      	movs	r3, #83	; 0x53
 8005448:	a904      	add	r1, sp, #16
 800544a:	185b      	adds	r3, r3, r1
 800544c:	212b      	movs	r1, #43	; 0x2b
 800544e:	7019      	strb	r1, [r3, #0]
 8005450:	7833      	ldrb	r3, [r6, #0]
 8005452:	2b2a      	cmp	r3, #42	; 0x2a
 8005454:	d016      	beq.n	8005484 <_svfiprintf_r+0xf8>
 8005456:	0035      	movs	r5, r6
 8005458:	2100      	movs	r1, #0
 800545a:	200a      	movs	r0, #10
 800545c:	68e3      	ldr	r3, [r4, #12]
 800545e:	782a      	ldrb	r2, [r5, #0]
 8005460:	1c6e      	adds	r6, r5, #1
 8005462:	3a30      	subs	r2, #48	; 0x30
 8005464:	2a09      	cmp	r2, #9
 8005466:	d94e      	bls.n	8005506 <_svfiprintf_r+0x17a>
 8005468:	2900      	cmp	r1, #0
 800546a:	d111      	bne.n	8005490 <_svfiprintf_r+0x104>
 800546c:	e017      	b.n	800549e <_svfiprintf_r+0x112>
 800546e:	3501      	adds	r5, #1
 8005470:	e7b0      	b.n	80053d4 <_svfiprintf_r+0x48>
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <_svfiprintf_r+0x1ec>)
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	1ac0      	subs	r0, r0, r3
 8005478:	2301      	movs	r3, #1
 800547a:	4083      	lsls	r3, r0
 800547c:	4313      	orrs	r3, r2
 800547e:	002e      	movs	r6, r5
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e7ce      	b.n	8005422 <_svfiprintf_r+0x96>
 8005484:	9b07      	ldr	r3, [sp, #28]
 8005486:	1d19      	adds	r1, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9107      	str	r1, [sp, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db01      	blt.n	8005494 <_svfiprintf_r+0x108>
 8005490:	930b      	str	r3, [sp, #44]	; 0x2c
 8005492:	e004      	b.n	800549e <_svfiprintf_r+0x112>
 8005494:	425b      	negs	r3, r3
 8005496:	60e3      	str	r3, [r4, #12]
 8005498:	2302      	movs	r3, #2
 800549a:	4313      	orrs	r3, r2
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	782b      	ldrb	r3, [r5, #0]
 80054a0:	2b2e      	cmp	r3, #46	; 0x2e
 80054a2:	d10a      	bne.n	80054ba <_svfiprintf_r+0x12e>
 80054a4:	786b      	ldrb	r3, [r5, #1]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d135      	bne.n	8005516 <_svfiprintf_r+0x18a>
 80054aa:	9b07      	ldr	r3, [sp, #28]
 80054ac:	3502      	adds	r5, #2
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9207      	str	r2, [sp, #28]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db2b      	blt.n	8005510 <_svfiprintf_r+0x184>
 80054b8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ba:	4e30      	ldr	r6, [pc, #192]	; (800557c <_svfiprintf_r+0x1f0>)
 80054bc:	2203      	movs	r2, #3
 80054be:	0030      	movs	r0, r6
 80054c0:	7829      	ldrb	r1, [r5, #0]
 80054c2:	f000 f9e7 	bl	8005894 <memchr>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d006      	beq.n	80054d8 <_svfiprintf_r+0x14c>
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	1b80      	subs	r0, r0, r6
 80054ce:	4083      	lsls	r3, r0
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	3501      	adds	r5, #1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	7829      	ldrb	r1, [r5, #0]
 80054da:	2206      	movs	r2, #6
 80054dc:	4828      	ldr	r0, [pc, #160]	; (8005580 <_svfiprintf_r+0x1f4>)
 80054de:	1c6e      	adds	r6, r5, #1
 80054e0:	7621      	strb	r1, [r4, #24]
 80054e2:	f000 f9d7 	bl	8005894 <memchr>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d03c      	beq.n	8005564 <_svfiprintf_r+0x1d8>
 80054ea:	4b26      	ldr	r3, [pc, #152]	; (8005584 <_svfiprintf_r+0x1f8>)
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d125      	bne.n	800553c <_svfiprintf_r+0x1b0>
 80054f0:	2207      	movs	r2, #7
 80054f2:	9b07      	ldr	r3, [sp, #28]
 80054f4:	3307      	adds	r3, #7
 80054f6:	4393      	bics	r3, r2
 80054f8:	3308      	adds	r3, #8
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	6963      	ldr	r3, [r4, #20]
 80054fe:	9a04      	ldr	r2, [sp, #16]
 8005500:	189b      	adds	r3, r3, r2
 8005502:	6163      	str	r3, [r4, #20]
 8005504:	e765      	b.n	80053d2 <_svfiprintf_r+0x46>
 8005506:	4343      	muls	r3, r0
 8005508:	0035      	movs	r5, r6
 800550a:	2101      	movs	r1, #1
 800550c:	189b      	adds	r3, r3, r2
 800550e:	e7a6      	b.n	800545e <_svfiprintf_r+0xd2>
 8005510:	2301      	movs	r3, #1
 8005512:	425b      	negs	r3, r3
 8005514:	e7d0      	b.n	80054b8 <_svfiprintf_r+0x12c>
 8005516:	2300      	movs	r3, #0
 8005518:	200a      	movs	r0, #10
 800551a:	001a      	movs	r2, r3
 800551c:	3501      	adds	r5, #1
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	7829      	ldrb	r1, [r5, #0]
 8005522:	1c6e      	adds	r6, r5, #1
 8005524:	3930      	subs	r1, #48	; 0x30
 8005526:	2909      	cmp	r1, #9
 8005528:	d903      	bls.n	8005532 <_svfiprintf_r+0x1a6>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0c5      	beq.n	80054ba <_svfiprintf_r+0x12e>
 800552e:	9209      	str	r2, [sp, #36]	; 0x24
 8005530:	e7c3      	b.n	80054ba <_svfiprintf_r+0x12e>
 8005532:	4342      	muls	r2, r0
 8005534:	0035      	movs	r5, r6
 8005536:	2301      	movs	r3, #1
 8005538:	1852      	adds	r2, r2, r1
 800553a:	e7f1      	b.n	8005520 <_svfiprintf_r+0x194>
 800553c:	ab07      	add	r3, sp, #28
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	003a      	movs	r2, r7
 8005542:	0021      	movs	r1, r4
 8005544:	4b10      	ldr	r3, [pc, #64]	; (8005588 <_svfiprintf_r+0x1fc>)
 8005546:	9803      	ldr	r0, [sp, #12]
 8005548:	e000      	b.n	800554c <_svfiprintf_r+0x1c0>
 800554a:	bf00      	nop
 800554c:	9004      	str	r0, [sp, #16]
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	3301      	adds	r3, #1
 8005552:	d1d3      	bne.n	80054fc <_svfiprintf_r+0x170>
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005558:	065b      	lsls	r3, r3, #25
 800555a:	d400      	bmi.n	800555e <_svfiprintf_r+0x1d2>
 800555c:	e72d      	b.n	80053ba <_svfiprintf_r+0x2e>
 800555e:	2001      	movs	r0, #1
 8005560:	4240      	negs	r0, r0
 8005562:	e72a      	b.n	80053ba <_svfiprintf_r+0x2e>
 8005564:	ab07      	add	r3, sp, #28
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	003a      	movs	r2, r7
 800556a:	0021      	movs	r1, r4
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_svfiprintf_r+0x1fc>)
 800556e:	9803      	ldr	r0, [sp, #12]
 8005570:	f000 f87c 	bl	800566c <_printf_i>
 8005574:	e7ea      	b.n	800554c <_svfiprintf_r+0x1c0>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	08006678 	.word	0x08006678
 800557c:	0800667e 	.word	0x0800667e
 8005580:	08006682 	.word	0x08006682
 8005584:	00000000 	.word	0x00000000
 8005588:	080052c9 	.word	0x080052c9

0800558c <_printf_common>:
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	0015      	movs	r5, r2
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	688a      	ldr	r2, [r1, #8]
 8005594:	690b      	ldr	r3, [r1, #16]
 8005596:	000c      	movs	r4, r1
 8005598:	9000      	str	r0, [sp, #0]
 800559a:	4293      	cmp	r3, r2
 800559c:	da00      	bge.n	80055a0 <_printf_common+0x14>
 800559e:	0013      	movs	r3, r2
 80055a0:	0022      	movs	r2, r4
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	3243      	adds	r2, #67	; 0x43
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d001      	beq.n	80055b0 <_printf_common+0x24>
 80055ac:	3301      	adds	r3, #1
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	069b      	lsls	r3, r3, #26
 80055b4:	d502      	bpl.n	80055bc <_printf_common+0x30>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	3302      	adds	r3, #2
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	2306      	movs	r3, #6
 80055c0:	0017      	movs	r7, r2
 80055c2:	401f      	ands	r7, r3
 80055c4:	421a      	tst	r2, r3
 80055c6:	d027      	beq.n	8005618 <_printf_common+0x8c>
 80055c8:	0023      	movs	r3, r4
 80055ca:	3343      	adds	r3, #67	; 0x43
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	4193      	sbcs	r3, r2
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	0692      	lsls	r2, r2, #26
 80055d6:	d430      	bmi.n	800563a <_printf_common+0xae>
 80055d8:	0022      	movs	r2, r4
 80055da:	9901      	ldr	r1, [sp, #4]
 80055dc:	9800      	ldr	r0, [sp, #0]
 80055de:	9e08      	ldr	r6, [sp, #32]
 80055e0:	3243      	adds	r2, #67	; 0x43
 80055e2:	47b0      	blx	r6
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d025      	beq.n	8005634 <_printf_common+0xa8>
 80055e8:	2306      	movs	r3, #6
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	682a      	ldr	r2, [r5, #0]
 80055ee:	68e1      	ldr	r1, [r4, #12]
 80055f0:	2500      	movs	r5, #0
 80055f2:	4003      	ands	r3, r0
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d103      	bne.n	8005600 <_printf_common+0x74>
 80055f8:	1a8d      	subs	r5, r1, r2
 80055fa:	43eb      	mvns	r3, r5
 80055fc:	17db      	asrs	r3, r3, #31
 80055fe:	401d      	ands	r5, r3
 8005600:	68a3      	ldr	r3, [r4, #8]
 8005602:	6922      	ldr	r2, [r4, #16]
 8005604:	4293      	cmp	r3, r2
 8005606:	dd01      	ble.n	800560c <_printf_common+0x80>
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	18ed      	adds	r5, r5, r3
 800560c:	2700      	movs	r7, #0
 800560e:	42bd      	cmp	r5, r7
 8005610:	d120      	bne.n	8005654 <_printf_common+0xc8>
 8005612:	2000      	movs	r0, #0
 8005614:	e010      	b.n	8005638 <_printf_common+0xac>
 8005616:	3701      	adds	r7, #1
 8005618:	68e3      	ldr	r3, [r4, #12]
 800561a:	682a      	ldr	r2, [r5, #0]
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	42bb      	cmp	r3, r7
 8005620:	ddd2      	ble.n	80055c8 <_printf_common+0x3c>
 8005622:	0022      	movs	r2, r4
 8005624:	2301      	movs	r3, #1
 8005626:	9901      	ldr	r1, [sp, #4]
 8005628:	9800      	ldr	r0, [sp, #0]
 800562a:	9e08      	ldr	r6, [sp, #32]
 800562c:	3219      	adds	r2, #25
 800562e:	47b0      	blx	r6
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d1f0      	bne.n	8005616 <_printf_common+0x8a>
 8005634:	2001      	movs	r0, #1
 8005636:	4240      	negs	r0, r0
 8005638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800563a:	2030      	movs	r0, #48	; 0x30
 800563c:	18e1      	adds	r1, r4, r3
 800563e:	3143      	adds	r1, #67	; 0x43
 8005640:	7008      	strb	r0, [r1, #0]
 8005642:	0021      	movs	r1, r4
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	3145      	adds	r1, #69	; 0x45
 8005648:	7809      	ldrb	r1, [r1, #0]
 800564a:	18a2      	adds	r2, r4, r2
 800564c:	3243      	adds	r2, #67	; 0x43
 800564e:	3302      	adds	r3, #2
 8005650:	7011      	strb	r1, [r2, #0]
 8005652:	e7c1      	b.n	80055d8 <_printf_common+0x4c>
 8005654:	0022      	movs	r2, r4
 8005656:	2301      	movs	r3, #1
 8005658:	9901      	ldr	r1, [sp, #4]
 800565a:	9800      	ldr	r0, [sp, #0]
 800565c:	9e08      	ldr	r6, [sp, #32]
 800565e:	321a      	adds	r2, #26
 8005660:	47b0      	blx	r6
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d0e6      	beq.n	8005634 <_printf_common+0xa8>
 8005666:	3701      	adds	r7, #1
 8005668:	e7d1      	b.n	800560e <_printf_common+0x82>
	...

0800566c <_printf_i>:
 800566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566e:	b08b      	sub	sp, #44	; 0x2c
 8005670:	9206      	str	r2, [sp, #24]
 8005672:	000a      	movs	r2, r1
 8005674:	3243      	adds	r2, #67	; 0x43
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	9005      	str	r0, [sp, #20]
 800567a:	9204      	str	r2, [sp, #16]
 800567c:	7e0a      	ldrb	r2, [r1, #24]
 800567e:	000c      	movs	r4, r1
 8005680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005682:	2a78      	cmp	r2, #120	; 0x78
 8005684:	d807      	bhi.n	8005696 <_printf_i+0x2a>
 8005686:	2a62      	cmp	r2, #98	; 0x62
 8005688:	d809      	bhi.n	800569e <_printf_i+0x32>
 800568a:	2a00      	cmp	r2, #0
 800568c:	d100      	bne.n	8005690 <_printf_i+0x24>
 800568e:	e0c1      	b.n	8005814 <_printf_i+0x1a8>
 8005690:	2a58      	cmp	r2, #88	; 0x58
 8005692:	d100      	bne.n	8005696 <_printf_i+0x2a>
 8005694:	e08c      	b.n	80057b0 <_printf_i+0x144>
 8005696:	0026      	movs	r6, r4
 8005698:	3642      	adds	r6, #66	; 0x42
 800569a:	7032      	strb	r2, [r6, #0]
 800569c:	e022      	b.n	80056e4 <_printf_i+0x78>
 800569e:	0010      	movs	r0, r2
 80056a0:	3863      	subs	r0, #99	; 0x63
 80056a2:	2815      	cmp	r0, #21
 80056a4:	d8f7      	bhi.n	8005696 <_printf_i+0x2a>
 80056a6:	f7fa fd43 	bl	8000130 <__gnu_thumb1_case_shi>
 80056aa:	0016      	.short	0x0016
 80056ac:	fff6001f 	.word	0xfff6001f
 80056b0:	fff6fff6 	.word	0xfff6fff6
 80056b4:	001ffff6 	.word	0x001ffff6
 80056b8:	fff6fff6 	.word	0xfff6fff6
 80056bc:	fff6fff6 	.word	0xfff6fff6
 80056c0:	003600a8 	.word	0x003600a8
 80056c4:	fff6009a 	.word	0xfff6009a
 80056c8:	00b9fff6 	.word	0x00b9fff6
 80056cc:	0036fff6 	.word	0x0036fff6
 80056d0:	fff6fff6 	.word	0xfff6fff6
 80056d4:	009e      	.short	0x009e
 80056d6:	0026      	movs	r6, r4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	3642      	adds	r6, #66	; 0x42
 80056dc:	1d11      	adds	r1, r2, #4
 80056de:	6019      	str	r1, [r3, #0]
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	7033      	strb	r3, [r6, #0]
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0a7      	b.n	8005838 <_printf_i+0x1cc>
 80056e8:	6808      	ldr	r0, [r1, #0]
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	1d0a      	adds	r2, r1, #4
 80056ee:	0605      	lsls	r5, r0, #24
 80056f0:	d50b      	bpl.n	800570a <_printf_i+0x9e>
 80056f2:	680d      	ldr	r5, [r1, #0]
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	da03      	bge.n	8005702 <_printf_i+0x96>
 80056fa:	232d      	movs	r3, #45	; 0x2d
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	426d      	negs	r5, r5
 8005700:	7013      	strb	r3, [r2, #0]
 8005702:	4b61      	ldr	r3, [pc, #388]	; (8005888 <_printf_i+0x21c>)
 8005704:	270a      	movs	r7, #10
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	e01b      	b.n	8005742 <_printf_i+0xd6>
 800570a:	680d      	ldr	r5, [r1, #0]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	0641      	lsls	r1, r0, #25
 8005710:	d5f1      	bpl.n	80056f6 <_printf_i+0x8a>
 8005712:	b22d      	sxth	r5, r5
 8005714:	e7ef      	b.n	80056f6 <_printf_i+0x8a>
 8005716:	680d      	ldr	r5, [r1, #0]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	1d08      	adds	r0, r1, #4
 800571c:	6018      	str	r0, [r3, #0]
 800571e:	062e      	lsls	r6, r5, #24
 8005720:	d501      	bpl.n	8005726 <_printf_i+0xba>
 8005722:	680d      	ldr	r5, [r1, #0]
 8005724:	e003      	b.n	800572e <_printf_i+0xc2>
 8005726:	066d      	lsls	r5, r5, #25
 8005728:	d5fb      	bpl.n	8005722 <_printf_i+0xb6>
 800572a:	680d      	ldr	r5, [r1, #0]
 800572c:	b2ad      	uxth	r5, r5
 800572e:	4b56      	ldr	r3, [pc, #344]	; (8005888 <_printf_i+0x21c>)
 8005730:	2708      	movs	r7, #8
 8005732:	9303      	str	r3, [sp, #12]
 8005734:	2a6f      	cmp	r2, #111	; 0x6f
 8005736:	d000      	beq.n	800573a <_printf_i+0xce>
 8005738:	3702      	adds	r7, #2
 800573a:	0023      	movs	r3, r4
 800573c:	2200      	movs	r2, #0
 800573e:	3343      	adds	r3, #67	; 0x43
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	60a3      	str	r3, [r4, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	db03      	blt.n	8005752 <_printf_i+0xe6>
 800574a:	2204      	movs	r2, #4
 800574c:	6821      	ldr	r1, [r4, #0]
 800574e:	4391      	bics	r1, r2
 8005750:	6021      	str	r1, [r4, #0]
 8005752:	2d00      	cmp	r5, #0
 8005754:	d102      	bne.n	800575c <_printf_i+0xf0>
 8005756:	9e04      	ldr	r6, [sp, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <_printf_i+0x10a>
 800575c:	9e04      	ldr	r6, [sp, #16]
 800575e:	0028      	movs	r0, r5
 8005760:	0039      	movs	r1, r7
 8005762:	f7fa fd75 	bl	8000250 <__aeabi_uidivmod>
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	3e01      	subs	r6, #1
 800576a:	5c5b      	ldrb	r3, [r3, r1]
 800576c:	7033      	strb	r3, [r6, #0]
 800576e:	002b      	movs	r3, r5
 8005770:	0005      	movs	r5, r0
 8005772:	429f      	cmp	r7, r3
 8005774:	d9f3      	bls.n	800575e <_printf_i+0xf2>
 8005776:	2f08      	cmp	r7, #8
 8005778:	d109      	bne.n	800578e <_printf_i+0x122>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	07db      	lsls	r3, r3, #31
 800577e:	d506      	bpl.n	800578e <_printf_i+0x122>
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	6922      	ldr	r2, [r4, #16]
 8005784:	4293      	cmp	r3, r2
 8005786:	dc02      	bgt.n	800578e <_printf_i+0x122>
 8005788:	2330      	movs	r3, #48	; 0x30
 800578a:	3e01      	subs	r6, #1
 800578c:	7033      	strb	r3, [r6, #0]
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	1b9b      	subs	r3, r3, r6
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	0021      	movs	r1, r4
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	9805      	ldr	r0, [sp, #20]
 800579c:	9b06      	ldr	r3, [sp, #24]
 800579e:	aa09      	add	r2, sp, #36	; 0x24
 80057a0:	f7ff fef4 	bl	800558c <_printf_common>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d14c      	bne.n	8005842 <_printf_i+0x1d6>
 80057a8:	2001      	movs	r0, #1
 80057aa:	4240      	negs	r0, r0
 80057ac:	b00b      	add	sp, #44	; 0x2c
 80057ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b0:	3145      	adds	r1, #69	; 0x45
 80057b2:	700a      	strb	r2, [r1, #0]
 80057b4:	4a34      	ldr	r2, [pc, #208]	; (8005888 <_printf_i+0x21c>)
 80057b6:	9203      	str	r2, [sp, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	6821      	ldr	r1, [r4, #0]
 80057bc:	ca20      	ldmia	r2!, {r5}
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	0608      	lsls	r0, r1, #24
 80057c2:	d516      	bpl.n	80057f2 <_printf_i+0x186>
 80057c4:	07cb      	lsls	r3, r1, #31
 80057c6:	d502      	bpl.n	80057ce <_printf_i+0x162>
 80057c8:	2320      	movs	r3, #32
 80057ca:	4319      	orrs	r1, r3
 80057cc:	6021      	str	r1, [r4, #0]
 80057ce:	2710      	movs	r7, #16
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	d1b2      	bne.n	800573a <_printf_i+0xce>
 80057d4:	2320      	movs	r3, #32
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	439a      	bics	r2, r3
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	e7ad      	b.n	800573a <_printf_i+0xce>
 80057de:	2220      	movs	r2, #32
 80057e0:	6809      	ldr	r1, [r1, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	0022      	movs	r2, r4
 80057e8:	2178      	movs	r1, #120	; 0x78
 80057ea:	3245      	adds	r2, #69	; 0x45
 80057ec:	7011      	strb	r1, [r2, #0]
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <_printf_i+0x220>)
 80057f0:	e7e1      	b.n	80057b6 <_printf_i+0x14a>
 80057f2:	0648      	lsls	r0, r1, #25
 80057f4:	d5e6      	bpl.n	80057c4 <_printf_i+0x158>
 80057f6:	b2ad      	uxth	r5, r5
 80057f8:	e7e4      	b.n	80057c4 <_printf_i+0x158>
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	680d      	ldr	r5, [r1, #0]
 80057fe:	1d10      	adds	r0, r2, #4
 8005800:	6949      	ldr	r1, [r1, #20]
 8005802:	6018      	str	r0, [r3, #0]
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	062e      	lsls	r6, r5, #24
 8005808:	d501      	bpl.n	800580e <_printf_i+0x1a2>
 800580a:	6019      	str	r1, [r3, #0]
 800580c:	e002      	b.n	8005814 <_printf_i+0x1a8>
 800580e:	066d      	lsls	r5, r5, #25
 8005810:	d5fb      	bpl.n	800580a <_printf_i+0x19e>
 8005812:	8019      	strh	r1, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	9e04      	ldr	r6, [sp, #16]
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	e7bb      	b.n	8005794 <_printf_i+0x128>
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	1d11      	adds	r1, r2, #4
 8005820:	6019      	str	r1, [r3, #0]
 8005822:	6816      	ldr	r6, [r2, #0]
 8005824:	2100      	movs	r1, #0
 8005826:	0030      	movs	r0, r6
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	f000 f833 	bl	8005894 <memchr>
 800582e:	2800      	cmp	r0, #0
 8005830:	d001      	beq.n	8005836 <_printf_i+0x1ca>
 8005832:	1b80      	subs	r0, r0, r6
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	2300      	movs	r3, #0
 800583c:	9a04      	ldr	r2, [sp, #16]
 800583e:	7013      	strb	r3, [r2, #0]
 8005840:	e7a8      	b.n	8005794 <_printf_i+0x128>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	0032      	movs	r2, r6
 8005846:	9906      	ldr	r1, [sp, #24]
 8005848:	9805      	ldr	r0, [sp, #20]
 800584a:	9d07      	ldr	r5, [sp, #28]
 800584c:	47a8      	blx	r5
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d0aa      	beq.n	80057a8 <_printf_i+0x13c>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	079b      	lsls	r3, r3, #30
 8005856:	d415      	bmi.n	8005884 <_printf_i+0x218>
 8005858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585a:	68e0      	ldr	r0, [r4, #12]
 800585c:	4298      	cmp	r0, r3
 800585e:	daa5      	bge.n	80057ac <_printf_i+0x140>
 8005860:	0018      	movs	r0, r3
 8005862:	e7a3      	b.n	80057ac <_printf_i+0x140>
 8005864:	0022      	movs	r2, r4
 8005866:	2301      	movs	r3, #1
 8005868:	9906      	ldr	r1, [sp, #24]
 800586a:	9805      	ldr	r0, [sp, #20]
 800586c:	9e07      	ldr	r6, [sp, #28]
 800586e:	3219      	adds	r2, #25
 8005870:	47b0      	blx	r6
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d098      	beq.n	80057a8 <_printf_i+0x13c>
 8005876:	3501      	adds	r5, #1
 8005878:	68e3      	ldr	r3, [r4, #12]
 800587a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	42ab      	cmp	r3, r5
 8005880:	dcf0      	bgt.n	8005864 <_printf_i+0x1f8>
 8005882:	e7e9      	b.n	8005858 <_printf_i+0x1ec>
 8005884:	2500      	movs	r5, #0
 8005886:	e7f7      	b.n	8005878 <_printf_i+0x20c>
 8005888:	08006689 	.word	0x08006689
 800588c:	0800669a 	.word	0x0800669a

08005890 <__retarget_lock_acquire_recursive>:
 8005890:	4770      	bx	lr

08005892 <__retarget_lock_release_recursive>:
 8005892:	4770      	bx	lr

08005894 <memchr>:
 8005894:	b2c9      	uxtb	r1, r1
 8005896:	1882      	adds	r2, r0, r2
 8005898:	4290      	cmp	r0, r2
 800589a:	d101      	bne.n	80058a0 <memchr+0xc>
 800589c:	2000      	movs	r0, #0
 800589e:	4770      	bx	lr
 80058a0:	7803      	ldrb	r3, [r0, #0]
 80058a2:	428b      	cmp	r3, r1
 80058a4:	d0fb      	beq.n	800589e <memchr+0xa>
 80058a6:	3001      	adds	r0, #1
 80058a8:	e7f6      	b.n	8005898 <memchr+0x4>

080058aa <_realloc_r>:
 80058aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ac:	0007      	movs	r7, r0
 80058ae:	000e      	movs	r6, r1
 80058b0:	0014      	movs	r4, r2
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d105      	bne.n	80058c2 <_realloc_r+0x18>
 80058b6:	0011      	movs	r1, r2
 80058b8:	f7ff fc46 	bl	8005148 <_malloc_r>
 80058bc:	0005      	movs	r5, r0
 80058be:	0028      	movs	r0, r5
 80058c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d103      	bne.n	80058ce <_realloc_r+0x24>
 80058c6:	f7ff fbd3 	bl	8005070 <_free_r>
 80058ca:	0025      	movs	r5, r4
 80058cc:	e7f7      	b.n	80058be <_realloc_r+0x14>
 80058ce:	f000 f81b 	bl	8005908 <_malloc_usable_size_r>
 80058d2:	9001      	str	r0, [sp, #4]
 80058d4:	4284      	cmp	r4, r0
 80058d6:	d803      	bhi.n	80058e0 <_realloc_r+0x36>
 80058d8:	0035      	movs	r5, r6
 80058da:	0843      	lsrs	r3, r0, #1
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d3ee      	bcc.n	80058be <_realloc_r+0x14>
 80058e0:	0021      	movs	r1, r4
 80058e2:	0038      	movs	r0, r7
 80058e4:	f7ff fc30 	bl	8005148 <_malloc_r>
 80058e8:	1e05      	subs	r5, r0, #0
 80058ea:	d0e8      	beq.n	80058be <_realloc_r+0x14>
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	0022      	movs	r2, r4
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d900      	bls.n	80058f6 <_realloc_r+0x4c>
 80058f4:	001a      	movs	r2, r3
 80058f6:	0031      	movs	r1, r6
 80058f8:	0028      	movs	r0, r5
 80058fa:	f7ff fb69 	bl	8004fd0 <memcpy>
 80058fe:	0031      	movs	r1, r6
 8005900:	0038      	movs	r0, r7
 8005902:	f7ff fbb5 	bl	8005070 <_free_r>
 8005906:	e7da      	b.n	80058be <_realloc_r+0x14>

08005908 <_malloc_usable_size_r>:
 8005908:	1f0b      	subs	r3, r1, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	1f18      	subs	r0, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	da01      	bge.n	8005916 <_malloc_usable_size_r+0xe>
 8005912:	580b      	ldr	r3, [r1, r0]
 8005914:	18c0      	adds	r0, r0, r3
 8005916:	4770      	bx	lr

08005918 <_init>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr

08005924 <_fini>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr
