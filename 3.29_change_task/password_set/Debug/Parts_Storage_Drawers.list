
Parts_Storage_Drawers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069dc  080069dc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080069e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd8  20000098  08006a7c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  08006a7c  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdfa  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee7  00000000  00000000  0003beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001149a  00000000  00000000  0003fda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00051240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ad0  00000000  00000000  00052240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166a8  00000000  00000000  00053d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eeee  00000000  00000000  0006a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f37  00000000  00000000  000892a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a1dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036ac  00000000  00000000  0010a230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bfc 	.word	0x08005bfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08005bfc 	.word	0x08005bfc

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:
 80004e4:	2300      	movs	r3, #0
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
 80004ea:	ac05      	add	r4, sp, #20
 80004ec:	000e      	movs	r6, r1
 80004ee:	210a      	movs	r1, #10
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
 80004f4:	7023      	strb	r3, [r4, #0]
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
 8000508:	0030      	movs	r0, r6
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
 800051e:	0028      	movs	r0, r5
 8000520:	187f      	adds	r7, r7, r1
 8000522:	210a      	movs	r1, #10
 8000524:	70a7      	strb	r7, [r4, #2]
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fc70 	bl	8003e2c <HAL_I2C_Master_Transmit>
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004bc 	.word	0x200004bc

08000554 <DS3231_get_time>:
 8000554:	2300      	movs	r3, #0
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
 800055c:	aa02      	add	r2, sp, #8
 800055e:	2564      	movs	r5, #100	; 0x64
 8000560:	73d3      	strb	r3, [r2, #15]
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
 8000566:	9103      	str	r1, [sp, #12]
 8000568:	a902      	add	r1, sp, #8
 800056a:	9002      	str	r0, [sp, #8]
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fc59 	bl	8003e2c <HAL_I2C_Master_Transmit>
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fce4 	bl	8003f50 <HAL_I2C_Master_Receive>
 8000588:	2701      	movs	r7, #1
 800058a:	220f      	movs	r2, #15
 800058c:	ab02      	add	r3, sp, #8
 800058e:	a902      	add	r1, sp, #8
 8000590:	73df      	strb	r7, [r3, #15]
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fc46 	bl	8003e2c <HAL_I2C_Master_Transmit>
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 fcd1 	bl	8003f50 <HAL_I2C_Master_Receive>
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fc33 	bl	8003e2c <HAL_I2C_Master_Transmit>
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fcbe 	bl	8003f50 <HAL_I2C_Master_Receive>
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004bc 	.word	0x200004bc

08000610 <DS3231_set_date>:
 8000610:	2304      	movs	r3, #4
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
 8000616:	ac05      	add	r4, sp, #20
 8000618:	000e      	movs	r6, r1
 800061a:	210a      	movs	r1, #10
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
 8000620:	7023      	strb	r3, [r4, #0]
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
 8000634:	0030      	movs	r0, r6
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
 800064a:	0028      	movs	r0, r5
 800064c:	187f      	adds	r7, r7, r1
 800064e:	210a      	movs	r1, #10
 8000650:	70a7      	strb	r7, [r4, #2]
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fbda 	bl	8003e2c <HAL_I2C_Master_Transmit>
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004bc 	.word	0x200004bc

08000680 <DS3231_get_date>:
 8000680:	2304      	movs	r3, #4
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
 8000688:	aa02      	add	r2, sp, #8
 800068a:	2564      	movs	r5, #100	; 0x64
 800068c:	73d3      	strb	r3, [r2, #15]
 800068e:	220f      	movs	r2, #15
 8000690:	0007      	movs	r7, r0
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
 8000694:	000e      	movs	r6, r1
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fbc3 	bl	8003e2c <HAL_I2C_Master_Transmit>
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fc4e 	bl	8003f50 <HAL_I2C_Master_Receive>
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fbb0 	bl	8003e2c <HAL_I2C_Master_Transmit>
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fc3b 	bl	8003f50 <HAL_I2C_Master_Receive>
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fb9d 	bl	8003e2c <HAL_I2C_Master_Transmit>
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fc28 	bl	8003f50 <HAL_I2C_Master_Receive>
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004bc 	.word	0x200004bc

08000738 <led_color>:
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
 8000746:	60a3      	str	r3, [r4, #8]
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000b4 	.word	0x200000b4

08000750 <led_update>:
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
 800075e:	3001      	adds	r0, #1
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
 800076e:	6895      	ldr	r5, [r2, #8]
 8000770:	320c      	adds	r2, #12
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 faba 	bl	8004d04 <HAL_SPI_Transmit_DMA>
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000264 	.word	0x20000264
 8000798:	200000b4 	.word	0x200000b4
 800079c:	08005c34 	.word	0x08005c34
 80007a0:	20000508 	.word	0x20000508

080007a4 <led_clear>:
 80007a4:	22d8      	movs	r2, #216	; 0xd8
 80007a6:	b510      	push	{r4, lr}
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 fd9d 	bl	80052ec <memset>
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000b4 	.word	0x200000b4

080007b8 <led_cmp>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	260c      	movs	r6, #12
 80007bc:	0035      	movs	r5, r6
 80007be:	4345      	muls	r5, r0
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <led_cmp+0x38>)
 80007c2:	4370      	muls	r0, r6
 80007c4:	592f      	ldr	r7, [r5, r4]
 80007c6:	1965      	adds	r5, r4, r5
 80007c8:	686d      	ldr	r5, [r5, #4]
 80007ca:	1aba      	subs	r2, r7, r2
 80007cc:	1a6d      	subs	r5, r5, r1
 80007ce:	4257      	negs	r7, r2
 80007d0:	417a      	adcs	r2, r7
 80007d2:	4269      	negs	r1, r5
 80007d4:	414d      	adcs	r5, r1
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	68a1      	ldr	r1, [r4, #8]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	1952      	adds	r2, r2, r5
 80007de:	4299      	cmp	r1, r3
 80007e0:	d101      	bne.n	80007e6 <led_cmp+0x2e>
 80007e2:	3201      	adds	r2, #1
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	3a03      	subs	r2, #3
 80007e8:	4253      	negs	r3, r2
 80007ea:	415a      	adcs	r2, r3
 80007ec:	b2d0      	uxtb	r0, r2
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	200000b4 	.word	0x200000b4

080007f4 <SystemClock_Config>:
 80007f4:	b510      	push	{r4, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	2224      	movs	r2, #36	; 0x24
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80f      	add	r0, sp, #60	; 0x3c
 80007fe:	f004 fd75 	bl	80052ec <memset>
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a801      	add	r0, sp, #4
 8000808:	f004 fd70 	bl	80052ec <memset>
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	a806      	add	r0, sp, #24
 8000812:	f004 fd6b 	bl	80052ec <memset>
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <SystemClock_Config+0x90>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0x94>)
 800081a:	680b      	ldr	r3, [r1, #0]
 800081c:	2401      	movs	r4, #1
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4313      	orrs	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	; 0x38
 800082c:	9318      	str	r3, [sp, #96]	; 0x60
 800082e:	2300      	movs	r3, #0
 8000830:	9319      	str	r3, [sp, #100]	; 0x64
 8000832:	931a      	str	r3, [sp, #104]	; 0x68
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	2210      	movs	r2, #16
 8000838:	03db      	lsls	r3, r3, #15
 800083a:	a80e      	add	r0, sp, #56	; 0x38
 800083c:	9411      	str	r4, [sp, #68]	; 0x44
 800083e:	9212      	str	r2, [sp, #72]	; 0x48
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
 8000842:	f003 fd4d 	bl	80042e0 <HAL_RCC_OscConfig>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5a>
 800084a:	b672      	cpsid	i
 800084c:	e7fe      	b.n	800084c <SystemClock_Config+0x58>
 800084e:	230f      	movs	r3, #15
 8000850:	9003      	str	r0, [sp, #12]
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9004      	str	r0, [sp, #16]
 8000856:	3b0c      	subs	r3, #12
 8000858:	9005      	str	r0, [sp, #20]
 800085a:	0021      	movs	r1, r4
 800085c:	a801      	add	r0, sp, #4
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f003 ffc0 	bl	80047e4 <HAL_RCC_ClockConfig>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x78>
 8000868:	b672      	cpsid	i
 800086a:	e7fe      	b.n	800086a <SystemClock_Config+0x76>
 800086c:	2308      	movs	r3, #8
 800086e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000870:	a806      	add	r0, sp, #24
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	f004 f884 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x8c>
 800087c:	b672      	cpsid	i
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x8a>
 8000880:	b01c      	add	sp, #112	; 0x70
 8000882:	bd10      	pop	{r4, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <main>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	2601      	movs	r6, #1
 8000890:	b08b      	sub	sp, #44	; 0x2c
 8000892:	f002 fbbd 	bl	8003010 <HAL_Init>
 8000896:	f7ff ffad 	bl	80007f4 <SystemClock_Config>
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f004 fd24 	bl	80052ec <memset>
 80008a4:	2102      	movs	r1, #2
 80008a6:	20a0      	movs	r0, #160	; 0xa0
 80008a8:	4f7a      	ldr	r7, [pc, #488]	; (8000a94 <main+0x208>)
 80008aa:	05c0      	lsls	r0, r0, #23
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	2500      	movs	r5, #0
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	4033      	ands	r3, r6
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	430a      	orrs	r2, r1
 80008c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	2200      	movs	r2, #0
 80008c6:	400b      	ands	r3, r1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	3106      	adds	r1, #6
 80008cc:	9b02      	ldr	r3, [sp, #8]
 80008ce:	f003 f931 	bl	8003b34 <HAL_GPIO_WritePin>
 80008d2:	2200      	movs	r2, #0
 80008d4:	0031      	movs	r1, r6
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <main+0x20c>)
 80008d8:	f003 f92c 	bl	8003b34 <HAL_GPIO_WritePin>
 80008dc:	20a0      	movs	r0, #160	; 0xa0
 80008de:	2304      	movs	r3, #4
 80008e0:	a905      	add	r1, sp, #20
 80008e2:	05c0      	lsls	r0, r0, #23
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	9506      	str	r5, [sp, #24]
 80008e8:	9607      	str	r6, [sp, #28]
 80008ea:	f003 f85d 	bl	80039a8 <HAL_GPIO_Init>
 80008ee:	20a0      	movs	r0, #160	; 0xa0
 80008f0:	2208      	movs	r2, #8
 80008f2:	a905      	add	r1, sp, #20
 80008f4:	05c0      	lsls	r0, r0, #23
 80008f6:	9205      	str	r2, [sp, #20]
 80008f8:	9606      	str	r6, [sp, #24]
 80008fa:	9507      	str	r5, [sp, #28]
 80008fc:	9508      	str	r5, [sp, #32]
 80008fe:	f003 f853 	bl	80039a8 <HAL_GPIO_Init>
 8000902:	4865      	ldr	r0, [pc, #404]	; (8000a98 <main+0x20c>)
 8000904:	a905      	add	r1, sp, #20
 8000906:	9605      	str	r6, [sp, #20]
 8000908:	9606      	str	r6, [sp, #24]
 800090a:	9507      	str	r5, [sp, #28]
 800090c:	9508      	str	r5, [sp, #32]
 800090e:	f003 f84b 	bl	80039a8 <HAL_GPIO_Init>
 8000912:	2208      	movs	r2, #8
 8000914:	0029      	movs	r1, r5
 8000916:	a805      	add	r0, sp, #20
 8000918:	f004 fce8 	bl	80052ec <memset>
 800091c:	2306      	movs	r3, #6
 800091e:	4c5f      	ldr	r4, [pc, #380]	; (8000a9c <main+0x210>)
 8000920:	63a3      	str	r3, [r4, #56]	; 0x38
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	33ff      	adds	r3, #255	; 0xff
 8000926:	6263      	str	r3, [r4, #36]	; 0x24
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x214>)
 800092a:	0022      	movs	r2, r4
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	2304      	movs	r3, #4
 8000930:	322c      	adds	r2, #44	; 0x2c
 8000932:	0020      	movs	r0, r4
 8000934:	8425      	strh	r5, [r4, #32]
 8000936:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000938:	62a5      	str	r5, [r4, #40]	; 0x28
 800093a:	7015      	strb	r5, [r2, #0]
 800093c:	6325      	str	r5, [r4, #48]	; 0x30
 800093e:	6365      	str	r5, [r4, #52]	; 0x34
 8000940:	6065      	str	r5, [r4, #4]
 8000942:	60a5      	str	r5, [r4, #8]
 8000944:	60e5      	str	r5, [r4, #12]
 8000946:	6126      	str	r6, [r4, #16]
 8000948:	6163      	str	r3, [r4, #20]
 800094a:	61a5      	str	r5, [r4, #24]
 800094c:	61e5      	str	r5, [r4, #28]
 800094e:	f002 fc4f 	bl	80031f0 <HAL_ADC_Init>
 8000952:	42a8      	cmp	r0, r5
 8000954:	d001      	beq.n	800095a <main+0xce>
 8000956:	b672      	cpsid	i
 8000958:	e7fe      	b.n	8000958 <main+0xcc>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	0020      	movs	r0, r4
 800095e:	015b      	lsls	r3, r3, #5
 8000960:	a905      	add	r1, sp, #20
 8000962:	9605      	str	r6, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	f002 fdcf 	bl	8003508 <HAL_ADC_ConfigChannel>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <main+0xe6>
 800096e:	b672      	cpsid	i
 8000970:	e7fe      	b.n	8000970 <main+0xe4>
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x218>)
 8000974:	0020      	movs	r0, r4
 8000976:	a905      	add	r1, sp, #20
 8000978:	9305      	str	r3, [sp, #20]
 800097a:	f002 fdc5 	bl	8003508 <HAL_ADC_ConfigChannel>
 800097e:	1e04      	subs	r4, r0, #0
 8000980:	d001      	beq.n	8000986 <main+0xfa>
 8000982:	b672      	cpsid	i
 8000984:	e7fe      	b.n	8000984 <main+0xf8>
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	0001      	movs	r1, r0
 800098a:	4333      	orrs	r3, r6
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	0002      	movs	r2, r0
 8000992:	4033      	ands	r3, r6
 8000994:	200a      	movs	r0, #10
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	9b00      	ldr	r3, [sp, #0]
 800099a:	f002 fe09 	bl	80035b0 <HAL_NVIC_SetPriority>
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 fe30 	bl	8003604 <HAL_NVIC_EnableIRQ>
 80009a4:	4d40      	ldr	r5, [pc, #256]	; (8000aa8 <main+0x21c>)
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x220>)
 80009a8:	0028      	movs	r0, r5
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <main+0x224>)
 80009ae:	60ac      	str	r4, [r5, #8]
 80009b0:	606b      	str	r3, [r5, #4]
 80009b2:	60ee      	str	r6, [r5, #12]
 80009b4:	612c      	str	r4, [r5, #16]
 80009b6:	616c      	str	r4, [r5, #20]
 80009b8:	61ac      	str	r4, [r5, #24]
 80009ba:	61ec      	str	r4, [r5, #28]
 80009bc:	622c      	str	r4, [r5, #32]
 80009be:	f003 f9df 	bl	8003d80 <HAL_I2C_Init>
 80009c2:	1e01      	subs	r1, r0, #0
 80009c4:	d001      	beq.n	80009ca <main+0x13e>
 80009c6:	b672      	cpsid	i
 80009c8:	e7fe      	b.n	80009c8 <main+0x13c>
 80009ca:	0028      	movs	r0, r5
 80009cc:	f003 fbf6 	bl	80041bc <HAL_I2CEx_ConfigAnalogFilter>
 80009d0:	1e01      	subs	r1, r0, #0
 80009d2:	d001      	beq.n	80009d8 <main+0x14c>
 80009d4:	b672      	cpsid	i
 80009d6:	e7fe      	b.n	80009d6 <main+0x14a>
 80009d8:	0028      	movs	r0, r5
 80009da:	f003 fc15 	bl	8004208 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x15a>
 80009e2:	b672      	cpsid	i
 80009e4:	e7fe      	b.n	80009e4 <main+0x158>
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <main+0x228>)
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <main+0x22c>)
 80009ea:	6083      	str	r3, [r0, #8]
 80009ec:	6002      	str	r2, [r0, #0]
 80009ee:	2282      	movs	r2, #130	; 0x82
 80009f0:	60c3      	str	r3, [r0, #12]
 80009f2:	6103      	str	r3, [r0, #16]
 80009f4:	6143      	str	r3, [r0, #20]
 80009f6:	6203      	str	r3, [r0, #32]
 80009f8:	6243      	str	r3, [r0, #36]	; 0x24
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
 80009fc:	2410      	movs	r4, #16
 80009fe:	2307      	movs	r3, #7
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	6042      	str	r2, [r0, #4]
 8000a04:	32fc      	adds	r2, #252	; 0xfc
 8000a06:	6182      	str	r2, [r0, #24]
 8000a08:	61c4      	str	r4, [r0, #28]
 8000a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000a0c:	f004 f918 	bl	8004c40 <HAL_SPI_Init>
 8000a10:	1e05      	subs	r5, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x18c>
 8000a14:	b672      	cpsid	i
 8000a16:	e7fe      	b.n	8000a16 <main+0x18a>
 8000a18:	0022      	movs	r2, r4
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	a805      	add	r0, sp, #20
 8000a1e:	f004 fc65 	bl	80052ec <memset>
 8000a22:	2208      	movs	r2, #8
 8000a24:	0029      	movs	r1, r5
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f004 fc60 	bl	80052ec <memset>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	4c23      	ldr	r4, [pc, #140]	; (8000abc <main+0x230>)
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	231f      	movs	r3, #31
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <main+0x234>)
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	60a5      	str	r5, [r4, #8]
 8000a3e:	60e3      	str	r3, [r4, #12]
 8000a40:	6125      	str	r5, [r4, #16]
 8000a42:	6165      	str	r5, [r4, #20]
 8000a44:	f004 fa42 	bl	8004ecc <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1c4>
 8000a4c:	b672      	cpsid	i
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1c2>
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	0020      	movs	r0, r4
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	a905      	add	r1, sp, #20
 8000a58:	9305      	str	r3, [sp, #20]
 8000a5a:	f004 fa87 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x1da>
 8000a62:	b672      	cpsid	i
 8000a64:	e7fe      	b.n	8000a64 <main+0x1d8>
 8000a66:	9003      	str	r0, [sp, #12]
 8000a68:	9004      	str	r0, [sp, #16]
 8000a6a:	a903      	add	r1, sp, #12
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f004 fbb7 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x1ee>
 8000a76:	b672      	cpsid	i
 8000a78:	e7fe      	b.n	8000a78 <main+0x1ec>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	0011      	movs	r1, r2
 8000a80:	f002 fd96 	bl	80035b0 <HAL_NVIC_SetPriority>
 8000a84:	200f      	movs	r0, #15
 8000a86:	f002 fdbd 	bl	8003604 <HAL_NVIC_EnableIRQ>
 8000a8a:	f002 f9d5 	bl	8002e38 <PSDrawers_Initialized>
 8000a8e:	f002 f9f9 	bl	8002e84 <PSDrawers_Main>
 8000a92:	e7fe      	b.n	8000a92 <main+0x206>
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	20000418 	.word	0x20000418
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	04000002 	.word	0x04000002
 8000aa8:	200004bc 	.word	0x200004bc
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00200c28 	.word	0x00200c28
 8000ab4:	20000508 	.word	0x20000508
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	20000560 	.word	0x20000560
 8000ac0:	000003e7 	.word	0x000003e7

08000ac4 <Error_Handler>:
 8000ac4:	b672      	cpsid	i
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x2>

08000ac8 <SSD1306_Fill>:
 8000ac8:	2100      	movs	r1, #0
 8000aca:	b510      	push	{r4, lr}
 8000acc:	4288      	cmp	r0, r1
 8000ace:	d000      	beq.n	8000ad2 <SSD1306_Fill+0xa>
 8000ad0:	31ff      	adds	r1, #255	; 0xff
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SSD1306_Fill+0x18>)
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	f004 fc08 	bl	80052ec <memset>
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200005a6 	.word	0x200005a6

08000ae4 <SSD1306_DrawPixel>:
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	0004      	movs	r4, r0
 8000ae8:	287f      	cmp	r0, #127	; 0x7f
 8000aea:	d812      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000aec:	293f      	cmp	r1, #63	; 0x3f
 8000aee:	d810      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0x48>)
 8000af2:	4d0f      	ldr	r5, [pc, #60]	; (8000b30 <SSD1306_DrawPixel+0x4c>)
 8000af4:	7918      	ldrb	r0, [r3, #4]
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d00b      	beq.n	8000b14 <SSD1306_DrawPixel+0x30>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d10b      	bne.n	8000b18 <SSD1306_DrawPixel+0x34>
 8000b00:	01d8      	lsls	r0, r3, #7
 8000b02:	2307      	movs	r3, #7
 8000b04:	4019      	ands	r1, r3
 8000b06:	3b06      	subs	r3, #6
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1900      	adds	r0, r0, r4
 8000b0c:	5c2a      	ldrb	r2, [r5, r0]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	542b      	strb	r3, [r5, r0]
 8000b12:	bd30      	pop	{r4, r5, pc}
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d0f3      	beq.n	8000b00 <SSD1306_DrawPixel+0x1c>
 8000b18:	01d8      	lsls	r0, r3, #7
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4019      	ands	r1, r3
 8000b20:	408a      	lsls	r2, r1
 8000b22:	1900      	adds	r0, r0, r4
 8000b24:	5c2b      	ldrb	r3, [r5, r0]
 8000b26:	4393      	bics	r3, r2
 8000b28:	e7f2      	b.n	8000b10 <SSD1306_DrawPixel+0x2c>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200005a0 	.word	0x200005a0
 8000b30:	200005a6 	.word	0x200005a6

08000b34 <SSD1306_GotoXY>:
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <SSD1306_GotoXY+0x8>)
 8000b36:	8018      	strh	r0, [r3, #0]
 8000b38:	8059      	strh	r1, [r3, #2]
 8000b3a:	4770      	bx	lr
 8000b3c:	200005a0 	.word	0x200005a0

08000b40 <SSD1306_Putc>:
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b42:	0007      	movs	r7, r0
 8000b44:	000c      	movs	r4, r1
 8000b46:	2500      	movs	r5, #0
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	7863      	ldrb	r3, [r4, #1]
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d806      	bhi.n	8000b5e <SSD1306_Putc+0x1e>
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b52:	7823      	ldrb	r3, [r4, #0]
 8000b54:	8811      	ldrh	r1, [r2, #0]
 8000b56:	0038      	movs	r0, r7
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	8013      	strh	r3, [r2, #0]
 8000b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000b5e:	003a      	movs	r2, r7
 8000b60:	2600      	movs	r6, #0
 8000b62:	3a20      	subs	r2, #32
 8000b64:	4353      	muls	r3, r2
 8000b66:	6862      	ldr	r2, [r4, #4]
 8000b68:	195b      	adds	r3, r3, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	5a9b      	ldrh	r3, [r3, r2]
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b72:	7822      	ldrb	r2, [r4, #0]
 8000b74:	8818      	ldrh	r0, [r3, #0]
 8000b76:	42b2      	cmp	r2, r6
 8000b78:	d801      	bhi.n	8000b7e <SSD1306_Putc+0x3e>
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7e5      	b.n	8000b4a <SSD1306_Putc+0xa>
 8000b7e:	8859      	ldrh	r1, [r3, #2]
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	40b3      	lsls	r3, r6
 8000b86:	1980      	adds	r0, r0, r6
 8000b88:	1949      	adds	r1, r1, r5
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	4213      	tst	r3, r2
 8000b92:	d004      	beq.n	8000b9e <SSD1306_Putc+0x5e>
 8000b94:	9a00      	ldr	r2, [sp, #0]
 8000b96:	f7ff ffa5 	bl	8000ae4 <SSD1306_DrawPixel>
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7e8      	b.n	8000b70 <SSD1306_Putc+0x30>
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	425a      	negs	r2, r3
 8000ba2:	415a      	adcs	r2, r3
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	e7f6      	b.n	8000b96 <SSD1306_Putc+0x56>
 8000ba8:	200005a0 	.word	0x200005a0

08000bac <SSD1306_Puts>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <SSD1306_Puts+0x10>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	f7ff ffbe 	bl	8000b40 <SSD1306_Putc>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	7820      	ldrb	r0, [r4, #0]
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	d1f6      	bne.n	8000bba <SSD1306_Puts+0xe>
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7f1      	b.n	8000bb4 <SSD1306_Puts+0x8>

08000bd0 <SSD1306_DrawLine>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	ac0c      	add	r4, sp, #48	; 0x30
 8000bd6:	7824      	ldrb	r4, [r4, #0]
 8000bd8:	9405      	str	r4, [sp, #20]
 8000bda:	1c04      	adds	r4, r0, #0
 8000bdc:	287f      	cmp	r0, #127	; 0x7f
 8000bde:	d900      	bls.n	8000be2 <SSD1306_DrawLine+0x12>
 8000be0:	247f      	movs	r4, #127	; 0x7f
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	1c16      	adds	r6, r2, #0
 8000be6:	2a7f      	cmp	r2, #127	; 0x7f
 8000be8:	d900      	bls.n	8000bec <SSD1306_DrawLine+0x1c>
 8000bea:	267f      	movs	r6, #127	; 0x7f
 8000bec:	b2b6      	uxth	r6, r6
 8000bee:	1c0d      	adds	r5, r1, #0
 8000bf0:	293f      	cmp	r1, #63	; 0x3f
 8000bf2:	d900      	bls.n	8000bf6 <SSD1306_DrawLine+0x26>
 8000bf4:	253f      	movs	r5, #63	; 0x3f
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	1c1f      	adds	r7, r3, #0
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d900      	bls.n	8000c00 <SSD1306_DrawLine+0x30>
 8000bfe:	273f      	movs	r7, #63	; 0x3f
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	1b33      	subs	r3, r6, r4
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d800      	bhi.n	8000c0a <SSD1306_DrawLine+0x3a>
 8000c08:	1ba3      	subs	r3, r4, r6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d224      	bcs.n	8000c5c <SSD1306_DrawLine+0x8c>
 8000c12:	1b7b      	subs	r3, r7, r5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d801      	bhi.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd23      	ble.n	8000c76 <SSD1306_DrawLine+0xa6>
 8000c2e:	9a00      	ldr	r2, [sp, #0]
 8000c30:	0fdb      	lsrs	r3, r3, #31
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12b      	bne.n	8000c96 <SSD1306_DrawLine+0xc6>
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	d902      	bls.n	8000c48 <SSD1306_DrawLine+0x78>
 8000c42:	002b      	movs	r3, r5
 8000c44:	003d      	movs	r5, r7
 8000c46:	001f      	movs	r7, r3
 8000c48:	1c33      	adds	r3, r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d900      	bls.n	8000c50 <SSD1306_DrawLine+0x80>
 8000c4e:	1c23      	adds	r3, r4, #0
 8000c50:	b29c      	uxth	r4, r3
 8000c52:	b22d      	sxth	r5, r5
 8000c54:	42bd      	cmp	r5, r7
 8000c56:	dd16      	ble.n	8000c86 <SSD1306_DrawLine+0xb6>
 8000c58:	b007      	add	sp, #28
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	1beb      	subs	r3, r5, r7
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2301      	movs	r3, #1
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d903      	bls.n	8000c70 <SSD1306_DrawLine+0xa0>
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7da      	b.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c70:	425b      	negs	r3, r3
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	e7fa      	b.n	8000c6c <SSD1306_DrawLine+0x9c>
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0fdb      	lsrs	r3, r3, #31
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	e7d7      	b.n	8000c36 <SSD1306_DrawLine+0x66>
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	0029      	movs	r1, r5
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	9a05      	ldr	r2, [sp, #20]
 8000c8e:	f7ff ff29 	bl	8000ae4 <SSD1306_DrawPixel>
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7dd      	b.n	8000c52 <SSD1306_DrawLine+0x82>
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d115      	bne.n	8000cc8 <SSD1306_DrawLine+0xf8>
 8000c9c:	1c2b      	adds	r3, r5, #0
 8000c9e:	42bd      	cmp	r5, r7
 8000ca0:	d900      	bls.n	8000ca4 <SSD1306_DrawLine+0xd4>
 8000ca2:	1c3b      	adds	r3, r7, #0
 8000ca4:	b29d      	uxth	r5, r3
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d202      	bcs.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000caa:	0023      	movs	r3, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	001e      	movs	r6, r3
 8000cb0:	b224      	sxth	r4, r4
 8000cb2:	42b4      	cmp	r4, r6
 8000cb4:	dcd0      	bgt.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	0020      	movs	r0, r4
 8000cba:	0029      	movs	r1, r5
 8000cbc:	9a05      	ldr	r2, [sp, #20]
 8000cbe:	f7ff ff11 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	e7f4      	b.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	0029      	movs	r1, r5
 8000cca:	0020      	movs	r0, r4
 8000ccc:	9a05      	ldr	r2, [sp, #20]
 8000cce:	f7ff ff09 	bl	8000ae4 <SSD1306_DrawPixel>
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d101      	bne.n	8000cda <SSD1306_DrawLine+0x10a>
 8000cd6:	42bd      	cmp	r5, r7
 8000cd8:	d0be      	beq.n	8000c58 <SSD1306_DrawLine+0x88>
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	425a      	negs	r2, r3
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd05      	ble.n	8000cf0 <SSD1306_DrawLine+0x120>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	9a03      	ldr	r2, [sp, #12]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	18a4      	adds	r4, r4, r2
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	9a02      	ldr	r2, [sp, #8]
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	dae6      	bge.n	8000cc6 <SSD1306_DrawLine+0xf6>
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	9a04      	ldr	r2, [sp, #16]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	e7df      	b.n	8000cc6 <SSD1306_DrawLine+0xf6>

08000d06 <SSD1306_DrawRectangle>:
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0007      	movs	r7, r0
 8000d12:	000e      	movs	r6, r1
 8000d14:	9303      	str	r3, [sp, #12]
 8000d16:	287f      	cmp	r0, #127	; 0x7f
 8000d18:	d831      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1a:	293f      	cmp	r1, #63	; 0x3f
 8000d1c:	d82f      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
 8000d1e:	1883      	adds	r3, r0, r2
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dd02      	ble.n	8000d2a <SSD1306_DrawRectangle+0x24>
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	1973      	adds	r3, r6, r5
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd02      	ble.n	8000d36 <SSD1306_DrawRectangle+0x30>
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1bad      	subs	r5, r5, r6
 8000d34:	b2ad      	uxth	r5, r5
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	19d2      	adds	r2, r2, r7
 8000d3a:	b294      	uxth	r4, r2
 8000d3c:	0022      	movs	r2, r4
 8000d3e:	0031      	movs	r1, r6
 8000d40:	0038      	movs	r0, r7
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0033      	movs	r3, r6
 8000d46:	f7ff ff43 	bl	8000bd0 <SSD1306_DrawLine>
 8000d4a:	19ad      	adds	r5, r5, r6
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	0022      	movs	r2, r4
 8000d52:	0029      	movs	r1, r5
 8000d54:	0038      	movs	r0, r7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	f7ff ff39 	bl	8000bd0 <SSD1306_DrawLine>
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	003a      	movs	r2, r7
 8000d62:	0031      	movs	r1, r6
 8000d64:	0038      	movs	r0, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	002b      	movs	r3, r5
 8000d6a:	f7ff ff31 	bl	8000bd0 <SSD1306_DrawLine>
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	0022      	movs	r2, r4
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0031      	movs	r1, r6
 8000d76:	002b      	movs	r3, r5
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff ff29 	bl	8000bd0 <SSD1306_DrawLine>
 8000d7e:	b005      	add	sp, #20
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <SSD1306_DrawFilledRectangle>:
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	ab0a      	add	r3, sp, #40	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000f      	movs	r7, r1
 8000d90:	0014      	movs	r4, r2
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	287f      	cmp	r0, #127	; 0x7f
 8000d96:	d814      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d98:	293f      	cmp	r1, #63	; 0x3f
 8000d9a:	d812      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
 8000d9c:	1883      	adds	r3, r0, r2
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	dd02      	ble.n	8000da8 <SSD1306_DrawFilledRectangle+0x26>
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	1a24      	subs	r4, r4, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	9b02      	ldr	r3, [sp, #8]
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	dd03      	ble.n	8000db8 <SSD1306_DrawFilledRectangle+0x36>
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2600      	movs	r6, #0
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	b2b1      	uxth	r1, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawFilledRectangle+0x44>
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	19c9      	adds	r1, r1, r7
 8000dca:	b289      	uxth	r1, r1
 8000dcc:	1962      	adds	r2, r4, r5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	3601      	adds	r6, #1
 8000dd8:	f7ff fefa 	bl	8000bd0 <SSD1306_DrawLine>
 8000ddc:	b2f6      	uxtb	r6, r6
 8000dde:	e7ec      	b.n	8000dba <SSD1306_DrawFilledRectangle+0x38>

08000de0 <SSD1306_Clear>:
 8000de0:	b510      	push	{r4, lr}
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe70 	bl	8000ac8 <SSD1306_Fill>
 8000de8:	bd10      	pop	{r4, pc}
	...

08000dec <ssd1306_I2C_WriteMulti>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	2400      	movs	r4, #0
 8000df0:	b0c2      	sub	sp, #264	; 0x108
 8000df2:	0015      	movs	r5, r2
 8000df4:	aa02      	add	r2, sp, #8
 8000df6:	7011      	strb	r1, [r2, #0]
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d309      	bcc.n	8000e10 <ssd1306_I2C_WriteMulti+0x24>
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	200a      	movs	r0, #10
 8000e00:	3301      	adds	r3, #1
 8000e02:	9000      	str	r0, [sp, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <ssd1306_I2C_WriteMulti+0x30>)
 8000e08:	f003 f810 	bl	8003e2c <HAL_I2C_Master_Transmit>
 8000e0c:	b042      	add	sp, #264	; 0x108
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	5d2e      	ldrb	r6, [r5, r4]
 8000e12:	1911      	adds	r1, r2, r4
 8000e14:	3401      	adds	r4, #1
 8000e16:	704e      	strb	r6, [r1, #1]
 8000e18:	b2e4      	uxtb	r4, r4
 8000e1a:	e7ed      	b.n	8000df8 <ssd1306_I2C_WriteMulti+0xc>
 8000e1c:	200004bc 	.word	0x200004bc

08000e20 <ssd1306_I2C_Write>:
 8000e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e22:	466b      	mov	r3, sp
 8000e24:	7319      	strb	r1, [r3, #12]
 8000e26:	735a      	strb	r2, [r3, #13]
 8000e28:	230a      	movs	r3, #10
 8000e2a:	0001      	movs	r1, r0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	aa03      	add	r2, sp, #12
 8000e30:	3b08      	subs	r3, #8
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ssd1306_I2C_Write+0x1c>)
 8000e34:	f002 fffa 	bl	8003e2c <HAL_I2C_Master_Transmit>
 8000e38:	b005      	add	sp, #20
 8000e3a:	bd00      	pop	{pc}
 8000e3c:	200004bc 	.word	0x200004bc

08000e40 <SSD1306_UpdateScreen>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	24b0      	movs	r4, #176	; 0xb0
 8000e44:	2578      	movs	r5, #120	; 0x78
 8000e46:	4e0e      	ldr	r6, [pc, #56]	; (8000e80 <SSD1306_UpdateScreen+0x40>)
 8000e48:	0022      	movs	r2, r4
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	f7ff ffe7 	bl	8000e20 <ssd1306_I2C_Write>
 8000e52:	2200      	movs	r2, #0
 8000e54:	0028      	movs	r0, r5
 8000e56:	0011      	movs	r1, r2
 8000e58:	f7ff ffe2 	bl	8000e20 <ssd1306_I2C_Write>
 8000e5c:	3401      	adds	r4, #1
 8000e5e:	2210      	movs	r2, #16
 8000e60:	2100      	movs	r1, #0
 8000e62:	0028      	movs	r0, r5
 8000e64:	f7ff ffdc 	bl	8000e20 <ssd1306_I2C_Write>
 8000e68:	b2e4      	uxtb	r4, r4
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	0028      	movs	r0, r5
 8000e72:	f7ff ffbb 	bl	8000dec <ssd1306_I2C_WriteMulti>
 8000e76:	3680      	adds	r6, #128	; 0x80
 8000e78:	2cb8      	cmp	r4, #184	; 0xb8
 8000e7a:	d1e5      	bne.n	8000e48 <SSD1306_UpdateScreen+0x8>
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	200005a6 	.word	0x200005a6

08000e84 <SSD1306_Init>:
 8000e84:	b510      	push	{r4, lr}
 8000e86:	2201      	movs	r2, #1
 8000e88:	2178      	movs	r1, #120	; 0x78
 8000e8a:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <SSD1306_Init+0x150>)
 8000e8c:	4852      	ldr	r0, [pc, #328]	; (8000fd8 <SSD1306_Init+0x154>)
 8000e8e:	f003 f8f1 	bl	8004074 <HAL_I2C_IsDeviceReady>
 8000e92:	2400      	movs	r4, #0
 8000e94:	42a0      	cmp	r0, r4
 8000e96:	d000      	beq.n	8000e9a <SSD1306_Init+0x16>
 8000e98:	e09a      	b.n	8000fd0 <SSD1306_Init+0x14c>
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	22ae      	movs	r2, #174	; 0xae
 8000e9e:	2078      	movs	r0, #120	; 0x78
 8000ea0:	f7ff ffbe 	bl	8000e20 <ssd1306_I2C_Write>
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2078      	movs	r0, #120	; 0x78
 8000eaa:	f7ff ffb9 	bl	8000e20 <ssd1306_I2C_Write>
 8000eae:	0021      	movs	r1, r4
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f7ff ffb4 	bl	8000e20 <ssd1306_I2C_Write>
 8000eb8:	0021      	movs	r1, r4
 8000eba:	22b0      	movs	r2, #176	; 0xb0
 8000ebc:	2078      	movs	r0, #120	; 0x78
 8000ebe:	f7ff ffaf 	bl	8000e20 <ssd1306_I2C_Write>
 8000ec2:	0021      	movs	r1, r4
 8000ec4:	22c8      	movs	r2, #200	; 0xc8
 8000ec6:	2078      	movs	r0, #120	; 0x78
 8000ec8:	f7ff ffaa 	bl	8000e20 <ssd1306_I2C_Write>
 8000ecc:	0022      	movs	r2, r4
 8000ece:	0021      	movs	r1, r4
 8000ed0:	2078      	movs	r0, #120	; 0x78
 8000ed2:	f7ff ffa5 	bl	8000e20 <ssd1306_I2C_Write>
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	2210      	movs	r2, #16
 8000eda:	2078      	movs	r0, #120	; 0x78
 8000edc:	f7ff ffa0 	bl	8000e20 <ssd1306_I2C_Write>
 8000ee0:	0021      	movs	r1, r4
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	2078      	movs	r0, #120	; 0x78
 8000ee6:	f7ff ff9b 	bl	8000e20 <ssd1306_I2C_Write>
 8000eea:	0021      	movs	r1, r4
 8000eec:	2281      	movs	r2, #129	; 0x81
 8000eee:	2078      	movs	r0, #120	; 0x78
 8000ef0:	f7ff ff96 	bl	8000e20 <ssd1306_I2C_Write>
 8000ef4:	0021      	movs	r1, r4
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f7ff ff91 	bl	8000e20 <ssd1306_I2C_Write>
 8000efe:	0021      	movs	r1, r4
 8000f00:	22a1      	movs	r2, #161	; 0xa1
 8000f02:	2078      	movs	r0, #120	; 0x78
 8000f04:	f7ff ff8c 	bl	8000e20 <ssd1306_I2C_Write>
 8000f08:	0021      	movs	r1, r4
 8000f0a:	22a6      	movs	r2, #166	; 0xa6
 8000f0c:	2078      	movs	r0, #120	; 0x78
 8000f0e:	f7ff ff87 	bl	8000e20 <ssd1306_I2C_Write>
 8000f12:	0021      	movs	r1, r4
 8000f14:	22a8      	movs	r2, #168	; 0xa8
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f7ff ff82 	bl	8000e20 <ssd1306_I2C_Write>
 8000f1c:	0021      	movs	r1, r4
 8000f1e:	223f      	movs	r2, #63	; 0x3f
 8000f20:	2078      	movs	r0, #120	; 0x78
 8000f22:	f7ff ff7d 	bl	8000e20 <ssd1306_I2C_Write>
 8000f26:	0021      	movs	r1, r4
 8000f28:	22a4      	movs	r2, #164	; 0xa4
 8000f2a:	2078      	movs	r0, #120	; 0x78
 8000f2c:	f7ff ff78 	bl	8000e20 <ssd1306_I2C_Write>
 8000f30:	0021      	movs	r1, r4
 8000f32:	22d3      	movs	r2, #211	; 0xd3
 8000f34:	2078      	movs	r0, #120	; 0x78
 8000f36:	f7ff ff73 	bl	8000e20 <ssd1306_I2C_Write>
 8000f3a:	0022      	movs	r2, r4
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	2078      	movs	r0, #120	; 0x78
 8000f40:	f7ff ff6e 	bl	8000e20 <ssd1306_I2C_Write>
 8000f44:	0021      	movs	r1, r4
 8000f46:	22d5      	movs	r2, #213	; 0xd5
 8000f48:	2078      	movs	r0, #120	; 0x78
 8000f4a:	f7ff ff69 	bl	8000e20 <ssd1306_I2C_Write>
 8000f4e:	0021      	movs	r1, r4
 8000f50:	22f0      	movs	r2, #240	; 0xf0
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f7ff ff64 	bl	8000e20 <ssd1306_I2C_Write>
 8000f58:	0021      	movs	r1, r4
 8000f5a:	22d9      	movs	r2, #217	; 0xd9
 8000f5c:	2078      	movs	r0, #120	; 0x78
 8000f5e:	f7ff ff5f 	bl	8000e20 <ssd1306_I2C_Write>
 8000f62:	0021      	movs	r1, r4
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	2078      	movs	r0, #120	; 0x78
 8000f68:	f7ff ff5a 	bl	8000e20 <ssd1306_I2C_Write>
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	22da      	movs	r2, #218	; 0xda
 8000f70:	2078      	movs	r0, #120	; 0x78
 8000f72:	f7ff ff55 	bl	8000e20 <ssd1306_I2C_Write>
 8000f76:	0021      	movs	r1, r4
 8000f78:	2212      	movs	r2, #18
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f7ff ff50 	bl	8000e20 <ssd1306_I2C_Write>
 8000f80:	0021      	movs	r1, r4
 8000f82:	22db      	movs	r2, #219	; 0xdb
 8000f84:	2078      	movs	r0, #120	; 0x78
 8000f86:	f7ff ff4b 	bl	8000e20 <ssd1306_I2C_Write>
 8000f8a:	0021      	movs	r1, r4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2078      	movs	r0, #120	; 0x78
 8000f90:	f7ff ff46 	bl	8000e20 <ssd1306_I2C_Write>
 8000f94:	0021      	movs	r1, r4
 8000f96:	228d      	movs	r2, #141	; 0x8d
 8000f98:	2078      	movs	r0, #120	; 0x78
 8000f9a:	f7ff ff41 	bl	8000e20 <ssd1306_I2C_Write>
 8000f9e:	0021      	movs	r1, r4
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f7ff ff3c 	bl	8000e20 <ssd1306_I2C_Write>
 8000fa8:	0021      	movs	r1, r4
 8000faa:	22af      	movs	r2, #175	; 0xaf
 8000fac:	2078      	movs	r0, #120	; 0x78
 8000fae:	f7ff ff37 	bl	8000e20 <ssd1306_I2C_Write>
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	222e      	movs	r2, #46	; 0x2e
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f7ff ff32 	bl	8000e20 <ssd1306_I2C_Write>
 8000fbc:	0020      	movs	r0, r4
 8000fbe:	f7ff fd83 	bl	8000ac8 <SSD1306_Fill>
 8000fc2:	f7ff ff3d 	bl	8000e40 <SSD1306_UpdateScreen>
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SSD1306_Init+0x158>)
 8000fc8:	801c      	strh	r4, [r3, #0]
 8000fca:	805c      	strh	r4, [r3, #2]
 8000fcc:	3401      	adds	r4, #1
 8000fce:	715c      	strb	r4, [r3, #5]
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	bd10      	pop	{r4, pc}
 8000fd4:	00004e20 	.word	0x00004e20
 8000fd8:	200004bc 	.word	0x200004bc
 8000fdc:	200005a0 	.word	0x200005a0

08000fe0 <eepWriteData>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	000d      	movs	r5, r1
 8000fe4:	0004      	movs	r4, r0
 8000fe6:	f002 fc93 	bl	8003910 <HAL_FLASHEx_DATAEEPROM_Unlock>
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <eepWriteData+0x1c>)
 8000fec:	002a      	movs	r2, r5
 8000fee:	18e1      	adds	r1, r4, r3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f002 fcaf 	bl	8003954 <HAL_FLASHEx_DATAEEPROM_Program>
 8000ff6:	f002 fca3 	bl	8003940 <HAL_FLASHEx_DATAEEPROM_Lock>
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	08080000 	.word	0x08080000

08001000 <eepReadData>:
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <eepReadData+0xc>)
 8001002:	18c0      	adds	r0, r0, r3
 8001004:	7800      	ldrb	r0, [r0, #0]
 8001006:	b2c0      	uxtb	r0, r0
 8001008:	4770      	bx	lr
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	08080000 	.word	0x08080000

08001010 <HAL_MspInit>:
 8001010:	2201      	movs	r2, #1
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_MspInit+0x18>)
 8001014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800101e:	0552      	lsls	r2, r2, #21
 8001020:	430a      	orrs	r2, r1
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
 8001024:	4770      	bx	lr
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_ADC_MspInit>:
 800102c:	b510      	push	{r4, lr}
 800102e:	0004      	movs	r4, r0
 8001030:	b086      	sub	sp, #24
 8001032:	2214      	movs	r2, #20
 8001034:	2100      	movs	r1, #0
 8001036:	a801      	add	r0, sp, #4
 8001038:	f004 f958 	bl	80052ec <memset>
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_ADC_MspInit+0x48>)
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d115      	bne.n	8001070 <HAL_ADC_MspInit+0x44>
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_ADC_MspInit+0x4c>)
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800104c:	20a0      	movs	r0, #160	; 0xa0
 800104e:	430a      	orrs	r2, r1
 8001050:	2101      	movs	r1, #1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
 8001054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001056:	05c0      	lsls	r0, r0, #23
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	400b      	ands	r3, r1
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	2303      	movs	r3, #3
 8001066:	a901      	add	r1, sp, #4
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	f002 fc9c 	bl	80039a8 <HAL_GPIO_Init>
 8001070:	b006      	add	sp, #24
 8001072:	bd10      	pop	{r4, pc}
 8001074:	40012400 	.word	0x40012400
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_I2C_MspInit>:
 800107c:	b510      	push	{r4, lr}
 800107e:	0004      	movs	r4, r0
 8001080:	b086      	sub	sp, #24
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	a801      	add	r0, sp, #4
 8001088:	f004 f930 	bl	80052ec <memset>
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_I2C_MspInit+0x50>)
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d119      	bne.n	80010c8 <HAL_I2C_MspInit+0x4c>
 8001094:	2102      	movs	r1, #2
 8001096:	4c0e      	ldr	r4, [pc, #56]	; (80010d0 <HAL_I2C_MspInit+0x54>)
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0x58>)
 800109a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800109c:	430a      	orrs	r2, r1
 800109e:	62e2      	str	r2, [r4, #44]	; 0x2c
 80010a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a2:	400b      	ands	r3, r1
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	23c0      	movs	r3, #192	; 0xc0
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	3bae      	subs	r3, #174	; 0xae
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	3b0f      	subs	r3, #15
 80010b2:	9304      	str	r3, [sp, #16]
 80010b4:	a901      	add	r1, sp, #4
 80010b6:	3b02      	subs	r3, #2
 80010b8:	9305      	str	r3, [sp, #20]
 80010ba:	f002 fc75 	bl	80039a8 <HAL_GPIO_Init>
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c2:	039b      	lsls	r3, r3, #14
 80010c4:	4313      	orrs	r3, r2
 80010c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80010c8:	b006      	add	sp, #24
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	50000400 	.word	0x50000400

080010d8 <HAL_SPI_MspInit>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	0005      	movs	r5, r0
 80010dc:	b086      	sub	sp, #24
 80010de:	2214      	movs	r2, #20
 80010e0:	2100      	movs	r1, #0
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f004 f902 	bl	80052ec <memset>
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_SPI_MspInit+0x7c>)
 80010ea:	682a      	ldr	r2, [r5, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d12f      	bne.n	8001150 <HAL_SPI_MspInit+0x78>
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	2601      	movs	r6, #1
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_SPI_MspInit+0x80>)
 80010f6:	0152      	lsls	r2, r2, #5
 80010f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010fa:	20a0      	movs	r0, #160	; 0xa0
 80010fc:	430a      	orrs	r2, r1
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001102:	05c0      	lsls	r0, r0, #23
 8001104:	4332      	orrs	r2, r6
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	a901      	add	r1, sp, #4
 800110c:	4033      	ands	r3, r6
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	9b00      	ldr	r3, [sp, #0]
 8001112:	23a0      	movs	r3, #160	; 0xa0
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	3b9e      	subs	r3, #158	; 0x9e
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	199b      	adds	r3, r3, r6
 800111c:	9304      	str	r3, [sp, #16]
 800111e:	f002 fc43 	bl	80039a8 <HAL_GPIO_Init>
 8001122:	4c0e      	ldr	r4, [pc, #56]	; (800115c <HAL_SPI_MspInit+0x84>)
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	2310      	movs	r3, #16
 800112c:	60a3      	str	r3, [r4, #8]
 800112e:	2300      	movs	r3, #0
 8001130:	0020      	movs	r0, r4
 8001132:	6066      	str	r6, [r4, #4]
 8001134:	60e3      	str	r3, [r4, #12]
 8001136:	6122      	str	r2, [r4, #16]
 8001138:	6163      	str	r3, [r4, #20]
 800113a:	61a3      	str	r3, [r4, #24]
 800113c:	61e3      	str	r3, [r4, #28]
 800113e:	6223      	str	r3, [r4, #32]
 8001140:	f002 fa86 	bl	8003650 <HAL_DMA_Init>
 8001144:	2800      	cmp	r0, #0
 8001146:	d001      	beq.n	800114c <HAL_SPI_MspInit+0x74>
 8001148:	f7ff fcbc 	bl	8000ac4 <Error_Handler>
 800114c:	64ac      	str	r4, [r5, #72]	; 0x48
 800114e:	62a5      	str	r5, [r4, #40]	; 0x28
 8001150:	b006      	add	sp, #24
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	40013000 	.word	0x40013000
 8001158:	40021000 	.word	0x40021000
 800115c:	20000474 	.word	0x20000474
 8001160:	40020030 	.word	0x40020030

08001164 <HAL_TIM_Base_MspInit>:
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	429a      	cmp	r2, r3
 800116c:	d104      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x14>
 800116e:	2301      	movs	r3, #1
 8001170:	4a02      	ldr	r2, [pc, #8]	; (800117c <HAL_TIM_Base_MspInit+0x18>)
 8001172:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001174:	430b      	orrs	r3, r1
 8001176:	6393      	str	r3, [r2, #56]	; 0x38
 8001178:	4770      	bx	lr
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
 8001180:	e7fe      	b.n	8001180 <NMI_Handler>

08001182 <HardFault_Handler>:
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler>

08001184 <SVC_Handler>:
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:
 8001188:	b510      	push	{r4, lr}
 800118a:	f001 ff55 	bl	8003038 <HAL_IncTick>
 800118e:	bd10      	pop	{r4, pc}

08001190 <DMA1_Channel2_3_IRQHandler>:
 8001190:	b510      	push	{r4, lr}
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA1_Channel2_3_IRQHandler+0xc>)
 8001194:	f002 fae0 	bl	8003758 <HAL_DMA_IRQHandler>
 8001198:	bd10      	pop	{r4, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	20000474 	.word	0x20000474

080011a0 <TIM2_IRQHandler>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0xc>)
 80011a4:	f003 ff94 	bl	80050d0 <HAL_TIM_IRQHandler>
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000560 	.word	0x20000560

080011b0 <_sbrk>:
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <_sbrk+0x30>)
 80011b2:	490c      	ldr	r1, [pc, #48]	; (80011e4 <_sbrk+0x34>)
 80011b4:	0003      	movs	r3, r0
 80011b6:	1a89      	subs	r1, r1, r2
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <_sbrk+0x38>)
 80011ba:	b510      	push	{r4, lr}
 80011bc:	6810      	ldr	r0, [r2, #0]
 80011be:	2800      	cmp	r0, #0
 80011c0:	d101      	bne.n	80011c6 <_sbrk+0x16>
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <_sbrk+0x3c>)
 80011c4:	6010      	str	r0, [r2, #0]
 80011c6:	6810      	ldr	r0, [r2, #0]
 80011c8:	18c3      	adds	r3, r0, r3
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d906      	bls.n	80011dc <_sbrk+0x2c>
 80011ce:	f004 f83d 	bl	800524c <__errno>
 80011d2:	230c      	movs	r3, #12
 80011d4:	6003      	str	r3, [r0, #0]
 80011d6:	2001      	movs	r0, #1
 80011d8:	4240      	negs	r0, r0
 80011da:	bd10      	pop	{r4, pc}
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e7fc      	b.n	80011da <_sbrk+0x2a>
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20002000 	.word	0x20002000
 80011e8:	200009a8 	.word	0x200009a8
 80011ec:	20001070 	.word	0x20001070

080011f0 <SystemInit>:
 80011f0:	4770      	bx	lr
	...

080011f4 <ssd1306_putsXY>:
CATE cate_sel = res;
JOY joy_result = basic;

/* Functions */

void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80011f8:	2306      	movs	r3, #6
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 80011fa:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80011fc:	4358      	muls	r0, r3
 80011fe:	00c9      	lsls	r1, r1, #3
 8001200:	f7ff fc98 	bl	8000b34 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 8001204:	002a      	movs	r2, r5
 8001206:	0020      	movs	r0, r4
 8001208:	4901      	ldr	r1, [pc, #4]	; (8001210 <ssd1306_putsXY+0x1c>)
 800120a:	f7ff fccf 	bl	8000bac <SSD1306_Puts>
}
 800120e:	bd70      	pop	{r4, r5, r6, pc}
 8001210:	20000000 	.word	0x20000000

08001214 <array_puts>:

void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	001e      	movs	r6, r3
 800121a:	ab0a      	add	r3, sp, #40	; 0x28
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	000f      	movs	r7, r1
 8001220:	0004      	movs	r4, r0
 8001222:	0015      	movs	r5, r2
 8001224:	9303      	str	r3, [sp, #12]
	SSD1306_Clear();
 8001226:	f7ff fddb 	bl	8000de0 <SSD1306_Clear>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 800122a:	2100      	movs	r1, #0
 800122c:	2301      	movs	r3, #1
 800122e:	0008      	movs	r0, r1
 8001230:	227f      	movs	r2, #127	; 0x7f
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	3306      	adds	r3, #6
 8001236:	f7ff fda4 	bl	8000d82 <SSD1306_DrawFilledRectangle>
	ssd1306_putsXY(0, 0, title, 0);
 800123a:	2300      	movs	r3, #0
 800123c:	003a      	movs	r2, r7
 800123e:	0019      	movs	r1, r3
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ffd7 	bl	80011f4 <ssd1306_putsXY>
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001246:	9b03      	ldr	r3, [sp, #12]
 8001248:	005f      	lsls	r7, r3, #1
 800124a:	19e7      	adds	r7, r4, r7
 800124c:	42bc      	cmp	r4, r7
 800124e:	d101      	bne.n	8001254 <array_puts+0x40>
}
 8001250:	b005      	add	sp, #20
 8001252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 8001254:	7861      	ldrb	r1, [r4, #1]
 8001256:	7820      	ldrb	r0, [r4, #0]
 8001258:	0033      	movs	r3, r6
 800125a:	cd04      	ldmia	r5!, {r2}
 800125c:	f7ff ffca 	bl	80011f4 <ssd1306_putsXY>
 8001260:	3402      	adds	r4, #2
 8001262:	e7f3      	b.n	800124c <array_puts+0x38>

08001264 <get_time>:

void get_time(void){
 8001264:	b510      	push	{r4, lr}
	DS3231_get_date(&time.day, &time.month, &time.year);
 8001266:	4c06      	ldr	r4, [pc, #24]	; (8001280 <get_time+0x1c>)
 8001268:	0022      	movs	r2, r4
 800126a:	1c61      	adds	r1, r4, #1
 800126c:	1ca0      	adds	r0, r4, #2
 800126e:	f7ff fa07 	bl	8000680 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001272:	1ce2      	adds	r2, r4, #3
 8001274:	1d21      	adds	r1, r4, #4
 8001276:	1d60      	adds	r0, r4, #5
 8001278:	f7ff f96c 	bl	8000554 <DS3231_get_time>
}
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000029 	.word	0x20000029

08001284 <set_time>:

void set_time(void){
 8001284:	b510      	push	{r4, lr}
	DS3231_set_date(time.day, time.month, time.year);
 8001286:	4c06      	ldr	r4, [pc, #24]	; (80012a0 <set_time+0x1c>)
 8001288:	7822      	ldrb	r2, [r4, #0]
 800128a:	7861      	ldrb	r1, [r4, #1]
 800128c:	78a0      	ldrb	r0, [r4, #2]
 800128e:	f7ff f9bf 	bl	8000610 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 8001292:	78e2      	ldrb	r2, [r4, #3]
 8001294:	7921      	ldrb	r1, [r4, #4]
 8001296:	7960      	ldrb	r0, [r4, #5]
 8001298:	f7ff f924 	bl	80004e4 <DS3231_set_time>
}
 800129c:	bd10      	pop	{r4, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000029 	.word	0x20000029

080012a4 <get_adc>:

void get_adc(void){
 80012a4:	b510      	push	{r4, lr}
	static uint32_t frev_tick;
	uint32_t now_tick = HAL_GetTick();
 80012a6:	f001 fed3 	bl	8003050 <HAL_GetTick>
	if(now_tick - frev_tick > 150){
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <get_adc+0x48>)
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	1ac3      	subs	r3, r0, r3
 80012b0:	2b96      	cmp	r3, #150	; 0x96
 80012b2:	d910      	bls.n	80012d6 <get_adc+0x32>
		frev_tick = now_tick;
 80012b4:	2196      	movs	r1, #150	; 0x96
 80012b6:	6010      	str	r0, [r2, #0]
		if(JOY_U) joy_result = up;
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <get_adc+0x4c>)
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <get_adc+0x50>)
 80012bc:	8850      	ldrh	r0, [r2, #2]
 80012be:	0049      	lsls	r1, r1, #1
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d909      	bls.n	80012d8 <get_adc+0x34>
 80012c4:	2403      	movs	r4, #3
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <get_adc+0x54>)
		if(JOY_D) joy_result = down;
 80012c8:	7004      	strb	r4, [r0, #0]
		if(JOY_L) joy_result = left;
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	428a      	cmp	r2, r1
 80012ce:	d208      	bcs.n	80012e2 <get_adc+0x3e>
 80012d0:	2201      	movs	r2, #1
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <get_adc+0x54>)
		if(JOY_R) joy_result = right;
 80012d4:	701a      	strb	r2, [r3, #0]
	}
}
 80012d6:	bd10      	pop	{r4, pc}
		if(JOY_D) joy_result = down;
 80012d8:	4288      	cmp	r0, r1
 80012da:	d2f6      	bcs.n	80012ca <get_adc+0x26>
 80012dc:	2404      	movs	r4, #4
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <get_adc+0x54>)
 80012e0:	e7f2      	b.n	80012c8 <get_adc+0x24>
		if(JOY_R) joy_result = right;
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d9f7      	bls.n	80012d6 <get_adc+0x32>
 80012e6:	2202      	movs	r2, #2
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <get_adc+0x54>)
 80012ea:	e7f3      	b.n	80012d4 <get_adc+0x30>
 80012ec:	200009c0 	.word	0x200009c0
 80012f0:	200009ae 	.word	0x200009ae
 80012f4:	00000dac 	.word	0x00000dac
 80012f8:	200009cc 	.word	0x200009cc

080012fc <get_sel>:

void get_sel(uint8_t* sel, uint8_t max, uint8_t min, uint8_t state){
 80012fc:	b510      	push	{r4, lr}
	switch(state){
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d015      	beq.n	800132e <get_sel+0x32>
 8001302:	2b02      	cmp	r3, #2
 8001304:	d020      	beq.n	8001348 <get_sel+0x4c>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11d      	bne.n	8001346 <get_sel+0x4a>
	case 0:
		if(joy_result == up) { if(*sel < max) *sel += 1; }
 800130a:	4c16      	ldr	r4, [pc, #88]	; (8001364 <get_sel+0x68>)
 800130c:	7823      	ldrb	r3, [r4, #0]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d104      	bne.n	800131c <get_sel+0x20>
 8001312:	7803      	ldrb	r3, [r0, #0]
 8001314:	428b      	cmp	r3, r1
 8001316:	d216      	bcs.n	8001346 <get_sel+0x4a>
 8001318:	3301      	adds	r3, #1
 800131a:	7003      	strb	r3, [r0, #0]
		if(joy_result == down) { if(*sel > min) *sel -= 1; }
 800131c:	7823      	ldrb	r3, [r4, #0]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d111      	bne.n	8001346 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
		break;
	case 2:
		if(joy_result == down) { if(*sel < max) *sel += 1; }
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 8001322:	7803      	ldrb	r3, [r0, #0]
 8001324:	4293      	cmp	r3, r2
 8001326:	d90e      	bls.n	8001346 <get_sel+0x4a>
 8001328:	3b01      	subs	r3, #1
 800132a:	7003      	strb	r3, [r0, #0]
		break;
	}
}
 800132c:	e00b      	b.n	8001346 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
 800132e:	4c0d      	ldr	r4, [pc, #52]	; (8001364 <get_sel+0x68>)
 8001330:	7823      	ldrb	r3, [r4, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d104      	bne.n	8001340 <get_sel+0x44>
 8001336:	7803      	ldrb	r3, [r0, #0]
 8001338:	428b      	cmp	r3, r1
 800133a:	d204      	bcs.n	8001346 <get_sel+0x4a>
 800133c:	3301      	adds	r3, #1
 800133e:	7003      	strb	r3, [r0, #0]
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
 8001340:	7823      	ldrb	r3, [r4, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d0ed      	beq.n	8001322 <get_sel+0x26>
}
 8001346:	bd10      	pop	{r4, pc}
		if(joy_result == down) { if(*sel < max) *sel += 1; }
 8001348:	4c06      	ldr	r4, [pc, #24]	; (8001364 <get_sel+0x68>)
 800134a:	7823      	ldrb	r3, [r4, #0]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d104      	bne.n	800135a <get_sel+0x5e>
 8001350:	7803      	ldrb	r3, [r0, #0]
 8001352:	428b      	cmp	r3, r1
 8001354:	d2f7      	bcs.n	8001346 <get_sel+0x4a>
 8001356:	3301      	adds	r3, #1
 8001358:	7003      	strb	r3, [r0, #0]
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 800135a:	7823      	ldrb	r3, [r4, #0]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d1f2      	bne.n	8001346 <get_sel+0x4a>
 8001360:	e7df      	b.n	8001322 <get_sel+0x26>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	200009cc 	.word	0x200009cc

08001368 <read_sw>:

uint8_t read_sw(void){
	static uint8_t oldSW;
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001368:	20a0      	movs	r0, #160	; 0xa0
uint8_t read_sw(void){
 800136a:	b510      	push	{r4, lr}
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 800136c:	2104      	movs	r1, #4
 800136e:	05c0      	lsls	r0, r0, #23
 8001370:	f002 fbda 	bl	8003b28 <HAL_GPIO_ReadPin>
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <read_sw+0x38>)
 8001376:	7823      	ldrb	r3, [r4, #0]
 8001378:	4318      	orrs	r0, r3
 800137a:	b2c0      	uxtb	r0, r0
 800137c:	2800      	cmp	r0, #0
 800137e:	d102      	bne.n	8001386 <read_sw+0x1e>
 8001380:	3001      	adds	r0, #1
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001382:	7020      	strb	r0, [r4, #0]
	return 0;
}
 8001384:	bd10      	pop	{r4, pc}
	if(!JOY_P && oldSW) { oldSW = 0; }
 8001386:	20a0      	movs	r0, #160	; 0xa0
 8001388:	2104      	movs	r1, #4
 800138a:	05c0      	lsls	r0, r0, #23
 800138c:	f002 fbcc 	bl	8003b28 <HAL_GPIO_ReadPin>
 8001390:	2800      	cmp	r0, #0
 8001392:	d0f7      	beq.n	8001384 <read_sw+0x1c>
 8001394:	7820      	ldrb	r0, [r4, #0]
 8001396:	2800      	cmp	r0, #0
 8001398:	d0f4      	beq.n	8001384 <read_sw+0x1c>
 800139a:	2000      	movs	r0, #0
 800139c:	e7f1      	b.n	8001382 <read_sw+0x1a>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	200009d6 	.word	0x200009d6

080013a4 <led_display>:

void led_display(struct Part a, uint8_t i){
 80013a4:	b084      	sub	sp, #16
 80013a6:	b510      	push	{r4, lr}
 80013a8:	9305      	str	r3, [sp, #20]
 80013aa:	2309      	movs	r3, #9
 80013ac:	446b      	add	r3, sp
 80013ae:	7fdc      	ldrb	r4, [r3, #31]
 80013b0:	9002      	str	r0, [sp, #8]
 80013b2:	9103      	str	r1, [sp, #12]
 80013b4:	9204      	str	r2, [sp, #16]
	switch(a.cate){
 80013b6:	ab02      	add	r3, sp, #8
 80013b8:	7d98      	ldrb	r0, [r3, #22]
 80013ba:	3801      	subs	r0, #1
 80013bc:	2803      	cmp	r0, #3
 80013be:	d809      	bhi.n	80013d4 <led_display+0x30>
 80013c0:	f7fe feac 	bl	800011c <__gnu_thumb1_case_uqi>
 80013c4:	14100c02 	.word	0x14100c02
	case 1: led_color(i, 4, 1, 0); break;
 80013c8:	2300      	movs	r3, #0
 80013ca:	2201      	movs	r2, #1
 80013cc:	2104      	movs	r1, #4
	case 2: led_color(i, 1, 0, 4); break;
	case 3: led_color(i, 4, 4, 0); break;
	case 4: led_color(i, 0, 4, 4); break;
 80013ce:	0020      	movs	r0, r4
 80013d0:	f7ff f9b2 	bl	8000738 <led_color>
	}
}
 80013d4:	bc10      	pop	{r4}
 80013d6:	bc08      	pop	{r3}
 80013d8:	b004      	add	sp, #16
 80013da:	4718      	bx	r3
	case 2: led_color(i, 1, 0, 4); break;
 80013dc:	2304      	movs	r3, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	e7f4      	b.n	80013ce <led_display+0x2a>
	case 3: led_color(i, 4, 4, 0); break;
 80013e4:	2204      	movs	r2, #4
 80013e6:	2300      	movs	r3, #0
 80013e8:	0011      	movs	r1, r2
 80013ea:	e7f0      	b.n	80013ce <led_display+0x2a>
	case 4: led_color(i, 0, 4, 4); break;
 80013ec:	2304      	movs	r3, #4
 80013ee:	2100      	movs	r1, #0
 80013f0:	001a      	movs	r2, r3
 80013f2:	e7ec      	b.n	80013ce <led_display+0x2a>

080013f4 <main_menu>:
	}
	set_time();
	eepWriteData(0, 1);
}

void main_menu(void){
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t check;
	if(!firF){
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <main_menu+0x17c>)
void main_menu(void){
 80013f8:	b09f      	sub	sp, #124	; 0x7c
	if(!firF){
 80013fa:	781c      	ldrb	r4, [r3, #0]
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d134      	bne.n	800146a <main_menu+0x76>
		firF = 1;
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]

		led_clear();
 8001404:	f7ff f9ce 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(pt[i], i);
 8001408:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <main_menu+0x180>)
 800140a:	b2e2      	uxtb	r2, r4
 800140c:	9204      	str	r2, [sp, #16]
 800140e:	0161      	lsls	r1, r4, #5
 8001410:	5aca      	ldrh	r2, [r1, r3]
 8001412:	1859      	adds	r1, r3, r1
 8001414:	88ce      	ldrh	r6, [r1, #6]
 8001416:	888b      	ldrh	r3, [r1, #4]
 8001418:	894d      	ldrh	r5, [r1, #10]
 800141a:	0436      	lsls	r6, r6, #16
 800141c:	884f      	ldrh	r7, [r1, #2]
 800141e:	431e      	orrs	r6, r3
 8001420:	890b      	ldrh	r3, [r1, #8]
 8001422:	042d      	lsls	r5, r5, #16
 8001424:	431d      	orrs	r5, r3
 8001426:	043f      	lsls	r7, r7, #16
 8001428:	89cb      	ldrh	r3, [r1, #14]
 800142a:	4317      	orrs	r7, r2
 800142c:	898a      	ldrh	r2, [r1, #12]
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	4313      	orrs	r3, r2
 8001432:	3110      	adds	r1, #16
 8001434:	2210      	movs	r2, #16
 8001436:	4668      	mov	r0, sp
 8001438:	9307      	str	r3, [sp, #28]
 800143a:	3401      	adds	r4, #1
 800143c:	f003 ff3a 	bl	80052b4 <memcpy>
 8001440:	0038      	movs	r0, r7
 8001442:	0031      	movs	r1, r6
 8001444:	002a      	movs	r2, r5
 8001446:	9b07      	ldr	r3, [sp, #28]
 8001448:	f7ff ffac 	bl	80013a4 <led_display>
 800144c:	2c24      	cmp	r4, #36	; 0x24
 800144e:	d1db      	bne.n	8001408 <main_menu+0x14>
		led_update();
 8001450:	f7ff f97e 	bl	8000750 <led_update>

		for(uint8_t i = 0 ; i < 36 ; i++)
 8001454:	2190      	movs	r1, #144	; 0x90
		led_update();
 8001456:	2300      	movs	r3, #0
			if(pt[i].cate != 0) { check = 1; break; }
 8001458:	4847      	ldr	r0, [pc, #284]	; (8001578 <main_menu+0x184>)
		for(uint8_t i = 0 ; i < 36 ; i++)
 800145a:	00c9      	lsls	r1, r1, #3
			if(pt[i].cate != 0) { check = 1; break; }
 800145c:	5cc2      	ldrb	r2, [r0, r3]
 800145e:	2a00      	cmp	r2, #0
 8001460:	d100      	bne.n	8001464 <main_menu+0x70>
 8001462:	e07c      	b.n	800155e <main_menu+0x16a>
 8001464:	2201      	movs	r2, #1
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <main_menu+0x188>)
 8001468:	701a      	strb	r2, [r3, #0]
			else check = 0;
	}
	get_time();
 800146a:	f7ff fefb 	bl	8001264 <get_time>
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 800146e:	2300      	movs	r3, #0
 8001470:	2102      	movs	r1, #2
 8001472:	4f43      	ldr	r7, [pc, #268]	; (8001580 <main_menu+0x18c>)
 8001474:	ac08      	add	r4, sp, #32
 8001476:	7023      	strb	r3, [r4, #0]
 8001478:	783b      	ldrb	r3, [r7, #0]
 800147a:	2501      	movs	r5, #1
 800147c:	2205      	movs	r2, #5
 800147e:	3302      	adds	r3, #2
 8001480:	7063      	strb	r3, [r4, #1]
 8001482:	70e1      	strb	r1, [r4, #3]
 8001484:	2303      	movs	r3, #3
 8001486:	1849      	adds	r1, r1, r1
 8001488:	71e1      	strb	r1, [r4, #7]
 800148a:	73e1      	strb	r1, [r4, #15]
	char bf[2][20];
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800148c:	21fa      	movs	r1, #250	; 0xfa
 800148e:	4e3d      	ldr	r6, [pc, #244]	; (8001584 <main_menu+0x190>)
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 8001490:	7262      	strb	r2, [r4, #9]
 8001492:	1952      	adds	r2, r2, r5
 8001494:	72e2      	strb	r2, [r4, #11]
 8001496:	3205      	adds	r2, #5
 8001498:	7163      	strb	r3, [r4, #5]
 800149a:	7322      	strb	r2, [r4, #12]
 800149c:	7363      	strb	r3, [r4, #13]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 800149e:	7832      	ldrb	r2, [r6, #0]
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 80014a0:	330a      	adds	r3, #10
 80014a2:	70a5      	strb	r5, [r4, #2]
 80014a4:	7125      	strb	r5, [r4, #4]
 80014a6:	71a5      	strb	r5, [r4, #6]
 80014a8:	7225      	strb	r5, [r4, #8]
 80014aa:	72a5      	strb	r5, [r4, #10]
 80014ac:	73a3      	strb	r3, [r4, #14]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 80014ae:	00c9      	lsls	r1, r1, #3
 80014b0:	1852      	adds	r2, r2, r1
 80014b2:	78b1      	ldrb	r1, [r6, #2]
 80014b4:	7873      	ldrb	r3, [r6, #1]
 80014b6:	a814      	add	r0, sp, #80	; 0x50
 80014b8:	9100      	str	r1, [sp, #0]
 80014ba:	4933      	ldr	r1, [pc, #204]	; (8001588 <main_menu+0x194>)
 80014bc:	f004 f83e 	bl	800553c <siprintf>
	sprintf(bf[1], "%02d:%02d:%02d", time.hour, time.min, time.sec);
 80014c0:	7971      	ldrb	r1, [r6, #5]
 80014c2:	7933      	ldrb	r3, [r6, #4]
 80014c4:	78f2      	ldrb	r2, [r6, #3]
 80014c6:	a819      	add	r0, sp, #100	; 0x64
 80014c8:	9100      	str	r1, [sp, #0]
 80014ca:	4930      	ldr	r1, [pc, #192]	; (800158c <main_menu+0x198>)
 80014cc:	f004 f836 	bl	800553c <siprintf>
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <main_menu+0x19c>)
 80014d2:	a914      	add	r1, sp, #80	; 0x50
 80014d4:	930c      	str	r3, [sp, #48]	; 0x30
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <main_menu+0x1a0>)
 80014d8:	9112      	str	r1, [sp, #72]	; 0x48
 80014da:	930d      	str	r3, [sp, #52]	; 0x34
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <main_menu+0x1a4>)
 80014de:	a919      	add	r1, sp, #100	; 0x64
 80014e0:	930e      	str	r3, [sp, #56]	; 0x38
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <main_menu+0x1a8>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014e4:	0020      	movs	r0, r4
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <main_menu+0x1ac>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014ea:	aa0c      	add	r2, sp, #48	; 0x30
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014ec:	9310      	str	r3, [sp, #64]	; 0x40
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <main_menu+0x1b0>)
 80014f0:	9113      	str	r1, [sp, #76]	; 0x4c
 80014f2:	9311      	str	r3, [sp, #68]	; 0x44
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014f4:	2308      	movs	r3, #8
 80014f6:	492c      	ldr	r1, [pc, #176]	; (80015a8 <main_menu+0x1b4>)
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	002b      	movs	r3, r5
 80014fc:	f7ff fe8a 	bl	8001214 <array_puts>
	SSD1306_UpdateScreen();
 8001500:	f7ff fc9e 	bl	8000e40 <SSD1306_UpdateScreen>

	get_adc();
 8001504:	f7ff fece 	bl	80012a4 <get_adc>
	get_sel(&sel, 4, 0, 2);
 8001508:	2302      	movs	r3, #2
 800150a:	2200      	movs	r2, #0
 800150c:	2104      	movs	r1, #4
 800150e:	0038      	movs	r0, r7
 8001510:	f7ff fef4 	bl	80012fc <get_sel>
	joy_result = basic;
 8001514:	2200      	movs	r2, #0
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <main_menu+0x1b8>)
 8001518:	701a      	strb	r2, [r3, #0]

	if(read_sw()){
 800151a:	f7ff ff25 	bl	8001368 <read_sw>
 800151e:	2800      	cmp	r0, #0
 8001520:	d01b      	beq.n	800155a <main_menu+0x166>
		if(sel == 0) { led_clear(); led_update(); start_check++; }
 8001522:	783b      	ldrb	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <main_menu+0x144>
 8001528:	f7ff f93c 	bl	80007a4 <led_clear>
 800152c:	f7ff f910 	bl	8000750 <led_update>
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <main_menu+0x1bc>)
 8001532:	7813      	ldrb	r3, [r2, #0]
 8001534:	195b      	adds	r3, r3, r5
 8001536:	7013      	strb	r3, [r2, #0]
		ModeF = sel + 1;
		firF = 0;
 8001538:	2000      	movs	r0, #0
		ModeF = sel + 1;
 800153a:	783a      	ldrb	r2, [r7, #0]
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <main_menu+0x1c0>)
 800153e:	1c51      	adds	r1, r2, #1
 8001540:	7019      	strb	r1, [r3, #0]
		firF = 0;
 8001542:	490b      	ldr	r1, [pc, #44]	; (8001570 <main_menu+0x17c>)
 8001544:	7008      	strb	r0, [r1, #0]
		if(sel != 0 && !check) { buzM = 1; ModeF = 0; }
 8001546:	4282      	cmp	r2, r0
 8001548:	d00f      	beq.n	800156a <main_menu+0x176>
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <main_menu+0x188>)
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	4282      	cmp	r2, r0
 8001550:	d10b      	bne.n	800156a <main_menu+0x176>
 8001552:	4919      	ldr	r1, [pc, #100]	; (80015b8 <main_menu+0x1c4>)
 8001554:	3001      	adds	r0, #1
 8001556:	7008      	strb	r0, [r1, #0]
 8001558:	701a      	strb	r2, [r3, #0]
		else { sel = 0; }
	}
}
 800155a:	b01f      	add	sp, #124	; 0x7c
 800155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0 ; i < 36 ; i++)
 800155e:	3320      	adds	r3, #32
 8001560:	428b      	cmp	r3, r1
 8001562:	d000      	beq.n	8001566 <main_menu+0x172>
 8001564:	e77a      	b.n	800145c <main_menu+0x68>
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <main_menu+0x188>)
 8001568:	e77e      	b.n	8001468 <main_menu+0x74>
		else { sel = 0; }
 800156a:	2300      	movs	r3, #0
 800156c:	703b      	strb	r3, [r7, #0]
}
 800156e:	e7f4      	b.n	800155a <main_menu+0x166>
 8001570:	2000000c 	.word	0x2000000c
 8001574:	200009d8 	.word	0x200009d8
 8001578:	200009ee 	.word	0x200009ee
 800157c:	200009b6 	.word	0x200009b6
 8001580:	2000103b 	.word	0x2000103b
 8001584:	20000029 	.word	0x20000029
 8001588:	0800663d 	.word	0x0800663d
 800158c:	0800664c 	.word	0x0800664c
 8001590:	0800665b 	.word	0x0800665b
 8001594:	0800665d 	.word	0x0800665d
 8001598:	08006667 	.word	0x08006667
 800159c:	08006670 	.word	0x08006670
 80015a0:	08006889 	.word	0x08006889
 80015a4:	0800667a 	.word	0x0800667a
 80015a8:	08006683 	.word	0x08006683
 80015ac:	200009cc 	.word	0x200009cc
 80015b0:	2000103c 	.word	0x2000103c
 80015b4:	200009ac 	.word	0x200009ac
 80015b8:	200009b4 	.word	0x200009b4

080015bc <input_string>:
char* input_string(char* str, uint8_t IO){
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t input_sel = 0, state = 0;
 80015be:	2700      	movs	r7, #0
char* input_string(char* str, uint8_t IO){
 80015c0:	b095      	sub	sp, #84	; 0x54
 80015c2:	900a      	str	r0, [sp, #40]	; 0x28
 80015c4:	910b      	str	r1, [sp, #44]	; 0x2c
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 80015c6:	2001      	movs	r0, #1
 80015c8:	210b      	movs	r1, #11
 80015ca:	f003 fe35 	bl	8005238 <calloc>
	uint8_t keyX = 0, keyY = 0;
 80015ce:	003c      	movs	r4, r7
 80015d0:	003d      	movs	r5, r7
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 80015d2:	9005      	str	r0, [sp, #20]
	uint8_t input_sel = 0, state = 0;
 80015d4:	9703      	str	r7, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015d6:	2201      	movs	r2, #1
 80015d8:	9b03      	ldr	r3, [sp, #12]
 80015da:	a80c      	add	r0, sp, #48	; 0x30
 80015dc:	189b      	adds	r3, r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	7083      	strb	r3, [r0, #2]
 80015e2:	9306      	str	r3, [sp, #24]
 80015e4:	2302      	movs	r3, #2
 80015e6:	70c3      	strb	r3, [r0, #3]
		char* array[3] = { ">", "~", input_keyboard };
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <input_string+0x208>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015ea:	2600      	movs	r6, #0
		char* array[3] = { ">", "~", input_keyboard };
 80015ec:	9311      	str	r3, [sp, #68]	; 0x44
 80015ee:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <input_string+0x20c>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015f0:	7042      	strb	r2, [r0, #1]
		char* array[3] = { ">", "~", input_keyboard };
 80015f2:	9312      	str	r3, [sp, #72]	; 0x48
 80015f4:	9b05      	ldr	r3, [sp, #20]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015f6:	7102      	strb	r2, [r0, #4]
		char* array[3] = { ">", "~", input_keyboard };
 80015f8:	9313      	str	r3, [sp, #76]	; 0x4c
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 80015fa:	2303      	movs	r3, #3
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015fc:	7142      	strb	r2, [r0, #5]
 80015fe:	7006      	strb	r6, [r0, #0]
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 8001600:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	0013      	movs	r3, r2
 8001606:	aa11      	add	r2, sp, #68	; 0x44
 8001608:	f7ff fe04 	bl	8001214 <array_puts>
		if(IO) { char bf[10]; sprintf(bf, "(%d)", password_num + 1); ssd1306_putsXY(17, 0, bf, 0); }
 800160c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800160e:	42b3      	cmp	r3, r6
 8001610:	d00c      	beq.n	800162c <input_string+0x70>
 8001612:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <input_string+0x210>)
 8001614:	496e      	ldr	r1, [pc, #440]	; (80017d0 <input_string+0x214>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	a80e      	add	r0, sp, #56	; 0x38
 800161a:	3201      	adds	r2, #1
 800161c:	f003 ff8e 	bl	800553c <siprintf>
 8001620:	0033      	movs	r3, r6
 8001622:	0031      	movs	r1, r6
 8001624:	2011      	movs	r0, #17
 8001626:	aa0e      	add	r2, sp, #56	; 0x38
 8001628:	f7ff fde4 	bl	80011f4 <ssd1306_putsXY>
				SSD1306_Putc(!state ? keyboard_small[i][j] : keyboard_big[i][j], &Font_6x8, !(keyX == j && keyY == i));
 800162c:	2300      	movs	r3, #0
 800162e:	9304      	str	r3, [sp, #16]
				SSD1306_GotoXY(14 + j * 10, (4 * 8) + (i * 8));
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	2600      	movs	r6, #0
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	3320      	adds	r3, #32
 8001638:	b29b      	uxth	r3, r3
 800163a:	9307      	str	r3, [sp, #28]
 800163c:	230b      	movs	r3, #11
 800163e:	9a04      	ldr	r2, [sp, #16]
 8001640:	4353      	muls	r3, r2
 8001642:	4a64      	ldr	r2, [pc, #400]	; (80017d4 <input_string+0x218>)
 8001644:	18d2      	adds	r2, r2, r3
 8001646:	9208      	str	r2, [sp, #32]
 8001648:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <input_string+0x21c>)
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	9309      	str	r3, [sp, #36]	; 0x24
 800164e:	200a      	movs	r0, #10
 8001650:	4370      	muls	r0, r6
 8001652:	300e      	adds	r0, #14
 8001654:	9907      	ldr	r1, [sp, #28]
 8001656:	b280      	uxth	r0, r0
 8001658:	f7ff fa6c 	bl	8000b34 <SSD1306_GotoXY>
				SSD1306_Putc(!state ? keyboard_small[i][j] : keyboard_big[i][j], &Font_6x8, !(keyX == j && keyY == i));
 800165c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800165e:	2f00      	cmp	r7, #0
 8001660:	d000      	beq.n	8001664 <input_string+0xa8>
 8001662:	9b08      	ldr	r3, [sp, #32]
 8001664:	5d98      	ldrb	r0, [r3, r6]
 8001666:	b2f3      	uxtb	r3, r6
 8001668:	2201      	movs	r2, #1
 800166a:	42ab      	cmp	r3, r5
 800166c:	d104      	bne.n	8001678 <input_string+0xbc>
 800166e:	466b      	mov	r3, sp
 8001670:	7c1a      	ldrb	r2, [r3, #16]
 8001672:	1b12      	subs	r2, r2, r4
 8001674:	1e53      	subs	r3, r2, #1
 8001676:	419a      	sbcs	r2, r3
 8001678:	4958      	ldr	r1, [pc, #352]	; (80017dc <input_string+0x220>)
 800167a:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0 ; j < 10 ; j++){
 800167c:	3601      	adds	r6, #1
				SSD1306_Putc(!state ? keyboard_small[i][j] : keyboard_big[i][j], &Font_6x8, !(keyX == j && keyY == i));
 800167e:	f7ff fa5f 	bl	8000b40 <SSD1306_Putc>
			for(uint8_t j = 0 ; j < 10 ; j++){
 8001682:	2e0a      	cmp	r6, #10
 8001684:	d1e3      	bne.n	800164e <input_string+0x92>
		for(uint8_t i = 0 ; i < 4 ; i++)
 8001686:	9b04      	ldr	r3, [sp, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	9304      	str	r3, [sp, #16]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d1cf      	bne.n	8001630 <input_string+0x74>
		ssd1306_putsXY(19, 4, "|", !(keyX == 10 && keyY == 0));
 8001690:	2301      	movs	r3, #1
 8001692:	2d0a      	cmp	r5, #10
 8001694:	d102      	bne.n	800169c <input_string+0xe0>
 8001696:	0023      	movs	r3, r4
 8001698:	1e5a      	subs	r2, r3, #1
 800169a:	4193      	sbcs	r3, r2
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2104      	movs	r1, #4
 80016a0:	2013      	movs	r0, #19
 80016a2:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <input_string+0x224>)
 80016a4:	f7ff fda6 	bl	80011f4 <ssd1306_putsXY>
		ssd1306_putsXY(19, 6, "}", !(keyX == 10 && keyY == 2));
 80016a8:	2301      	movs	r3, #1
 80016aa:	2d0a      	cmp	r5, #10
 80016ac:	d102      	bne.n	80016b4 <input_string+0xf8>
 80016ae:	1ea3      	subs	r3, r4, #2
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	4193      	sbcs	r3, r2
 80016b4:	2106      	movs	r1, #6
 80016b6:	2013      	movs	r0, #19
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <input_string+0x228>)
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f7ff fd9a 	bl	80011f4 <ssd1306_putsXY>
		ssd1306_putsXY(19, 7, "~", !(keyX == 10 && keyY == 3) && !state);
 80016c0:	2d0a      	cmp	r5, #10
 80016c2:	d102      	bne.n	80016ca <input_string+0x10e>
 80016c4:	2300      	movs	r3, #0
 80016c6:	2c03      	cmp	r4, #3
 80016c8:	d001      	beq.n	80016ce <input_string+0x112>
 80016ca:	2301      	movs	r3, #1
 80016cc:	1bdb      	subs	r3, r3, r7
 80016ce:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <input_string+0x20c>)
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2107      	movs	r1, #7
 80016d4:	2013      	movs	r0, #19
 80016d6:	f7ff fd8d 	bl	80011f4 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 80016da:	f7ff fbb1 	bl	8000e40 <SSD1306_UpdateScreen>
		if(keyY == 0 || keyY == 2 || keyY == 3) limitX = 10;
 80016de:	0023      	movs	r3, r4
 80016e0:	2202      	movs	r2, #2
 80016e2:	260a      	movs	r6, #10
 80016e4:	4393      	bics	r3, r2
 80016e6:	d003      	beq.n	80016f0 <input_string+0x134>
		else limitX = 9;
 80016e8:	1ee6      	subs	r6, r4, #3
 80016ea:	4273      	negs	r3, r6
 80016ec:	415e      	adcs	r6, r3
 80016ee:	3609      	adds	r6, #9
		get_adc();
 80016f0:	f7ff fdd8 	bl	80012a4 <get_adc>
		if(joy_result == left) { keyX = keyX > 0 ? keyX - 1 : limitX; }
 80016f4:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <input_string+0x22c>)
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <input_string+0x14c>
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d001      	beq.n	8001704 <input_string+0x148>
 8001700:	3d01      	subs	r5, #1
 8001702:	b2ee      	uxtb	r6, r5
			if(keyX == 10) { keyY = keyY == 0 ? 3 : keyY == 3 ? 2 : 0; }
 8001704:	0035      	movs	r5, r6
 8001706:	e011      	b.n	800172c <input_string+0x170>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001708:	2b02      	cmp	r3, #2
 800170a:	d00b      	beq.n	8001724 <input_string+0x168>
		if(joy_result == up){
 800170c:	2b03      	cmp	r3, #3
 800170e:	d026      	beq.n	800175e <input_string+0x1a2>
		if(joy_result == down){
 8001710:	2b04      	cmp	r3, #4
 8001712:	d10b      	bne.n	800172c <input_string+0x170>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : keyY == 2 ? 3: 0; }
 8001714:	2d0a      	cmp	r5, #10
 8001716:	d130      	bne.n	800177a <input_string+0x1be>
 8001718:	2c00      	cmp	r4, #0
 800171a:	d032      	beq.n	8001782 <input_string+0x1c6>
 800171c:	2c02      	cmp	r4, #2
 800171e:	d032      	beq.n	8001786 <input_string+0x1ca>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 8001720:	2400      	movs	r4, #0
 8001722:	e003      	b.n	800172c <input_string+0x170>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001724:	42b5      	cmp	r5, r6
 8001726:	d245      	bcs.n	80017b4 <input_string+0x1f8>
 8001728:	3501      	adds	r5, #1
 800172a:	b2ed      	uxtb	r5, r5
		joy_result = basic;
 800172c:	2300      	movs	r3, #0
 800172e:	7013      	strb	r3, [r2, #0]
		if(read_sw()){
 8001730:	f7ff fe1a 	bl	8001368 <read_sw>
 8001734:	2800      	cmp	r0, #0
 8001736:	d100      	bne.n	800173a <input_string+0x17e>
 8001738:	e74d      	b.n	80015d6 <input_string+0x1a>
			if(keyX < 10) input_keyboard[input_sel++] = !state ? keyboard_small[keyY][keyX] : keyboard_big[keyY][keyX];
 800173a:	2d0a      	cmp	r5, #10
 800173c:	d025      	beq.n	800178a <input_string+0x1ce>
 800173e:	230b      	movs	r3, #11
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <input_string+0x21c>)
 8001742:	4363      	muls	r3, r4
 8001744:	2f00      	cmp	r7, #0
 8001746:	d000      	beq.n	800174a <input_string+0x18e>
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <input_string+0x218>)
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	5d5b      	ldrb	r3, [r3, r5]
 800174e:	9a05      	ldr	r2, [sp, #20]
 8001750:	9903      	ldr	r1, [sp, #12]
 8001752:	5453      	strb	r3, [r2, r1]
		if(input_sel >= 10) break;
 8001754:	9b06      	ldr	r3, [sp, #24]
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d02e      	beq.n	80017b8 <input_string+0x1fc>
 800175a:	9303      	str	r3, [sp, #12]
 800175c:	e73b      	b.n	80015d6 <input_string+0x1a>
			if(keyX == 10) { keyY = keyY == 0 ? 3 : keyY == 3 ? 2 : 0; }
 800175e:	2d0a      	cmp	r5, #10
 8001760:	d106      	bne.n	8001770 <input_string+0x1b4>
 8001762:	2c00      	cmp	r4, #0
 8001764:	d00f      	beq.n	8001786 <input_string+0x1ca>
 8001766:	3c03      	subs	r4, #3
 8001768:	4263      	negs	r3, r4
 800176a:	415c      	adcs	r4, r3
 800176c:	0064      	lsls	r4, r4, #1
 800176e:	e7dd      	b.n	800172c <input_string+0x170>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 8001770:	2c00      	cmp	r4, #0
 8001772:	d008      	beq.n	8001786 <input_string+0x1ca>
 8001774:	3c01      	subs	r4, #1
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 8001776:	b2e4      	uxtb	r4, r4
 8001778:	e7d8      	b.n	800172c <input_string+0x170>
 800177a:	2c03      	cmp	r4, #3
 800177c:	d0d0      	beq.n	8001720 <input_string+0x164>
 800177e:	3401      	adds	r4, #1
 8001780:	e7f9      	b.n	8001776 <input_string+0x1ba>
			if(keyX == 10) { keyY = keyY == 0 ? 3 : keyY == 3 ? 2 : 0; }
 8001782:	2402      	movs	r4, #2
 8001784:	e7d2      	b.n	800172c <input_string+0x170>
 8001786:	2403      	movs	r4, #3
 8001788:	e7d0      	b.n	800172c <input_string+0x170>
				if(keyY == 0) input_keyboard[input_sel > 0 ? --input_sel : 0] = '\0';
 800178a:	2c00      	cmp	r4, #0
 800178c:	d10a      	bne.n	80017a4 <input_string+0x1e8>
 800178e:	9b03      	ldr	r3, [sp, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <input_string+0x1de>
 8001794:	3b01      	subs	r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	9303      	str	r3, [sp, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	9a05      	ldr	r2, [sp, #20]
 800179e:	9903      	ldr	r1, [sp, #12]
 80017a0:	5453      	strb	r3, [r2, r1]
				if(keyY == 3) state = !state;
 80017a2:	e718      	b.n	80015d6 <input_string+0x1a>
				if(keyY == 2) break;
 80017a4:	2c02      	cmp	r4, #2
 80017a6:	d007      	beq.n	80017b8 <input_string+0x1fc>
				if(keyY == 3) state = !state;
 80017a8:	2c03      	cmp	r4, #3
 80017aa:	d000      	beq.n	80017ae <input_string+0x1f2>
 80017ac:	e713      	b.n	80015d6 <input_string+0x1a>
 80017ae:	2301      	movs	r3, #1
 80017b0:	405f      	eors	r7, r3
	while(1){
 80017b2:	e710      	b.n	80015d6 <input_string+0x1a>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 80017b4:	2500      	movs	r5, #0
		if(joy_result == down){
 80017b6:	e7b9      	b.n	800172c <input_string+0x170>
	firF = 0;
 80017b8:	2200      	movs	r2, #0
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <input_string+0x230>)
}
 80017bc:	9805      	ldr	r0, [sp, #20]
	firF = 0;
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	b015      	add	sp, #84	; 0x54
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c4:	0800665b 	.word	0x0800665b
 80017c8:	08006689 	.word	0x08006689
 80017cc:	200009d7 	.word	0x200009d7
 80017d0:	0800668b 	.word	0x0800668b
 80017d4:	080068ef 	.word	0x080068ef
 80017d8:	0800691b 	.word	0x0800691b
 80017dc:	20000000 	.word	0x20000000
 80017e0:	08006690 	.word	0x08006690
 80017e4:	08006692 	.word	0x08006692
 80017e8:	200009cc 	.word	0x200009cc
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <logShift>:
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017f0:	234a      	movs	r3, #74	; 0x4a
 80017f2:	214a      	movs	r1, #74	; 0x4a
 80017f4:	001a      	movs	r2, r3
void logShift(uint8_t workCate){
 80017f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 80017f8:	4f4d      	ldr	r7, [pc, #308]	; (8001930 <logShift+0x140>)
 80017fa:	4249      	negs	r1, r1
 80017fc:	783c      	ldrb	r4, [r7, #0]
void logShift(uint8_t workCate){
 80017fe:	0005      	movs	r5, r0
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 8001800:	4361      	muls	r1, r4
 8001802:	1e60      	subs	r0, r4, #1
 8001804:	18c9      	adds	r1, r1, r3
 8001806:	4343      	muls	r3, r0
 8001808:	4e4a      	ldr	r6, [pc, #296]	; (8001934 <logShift+0x144>)
 800180a:	18c9      	adds	r1, r1, r3
void logShift(uint8_t workCate){
 800180c:	b085      	sub	sp, #20
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800180e:	4362      	muls	r2, r4
 8001810:	4849      	ldr	r0, [pc, #292]	; (8001938 <logShift+0x148>)
 8001812:	1989      	adds	r1, r1, r6
 8001814:	f003 fd57 	bl	80052c6 <memmove>
	if(work_cnt < 5) work_cnt++;
 8001818:	2c04      	cmp	r4, #4
 800181a:	d801      	bhi.n	8001820 <logShift+0x30>
 800181c:	3401      	adds	r4, #1
 800181e:	703c      	strb	r4, [r7, #0]
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001820:	2405      	movs	r4, #5
 8001822:	436c      	muls	r4, r5
	get_time();
 8001824:	f7ff fd1e 	bl	8001264 <get_time>
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001828:	4844      	ldr	r0, [pc, #272]	; (800193c <logShift+0x14c>)
 800182a:	4945      	ldr	r1, [pc, #276]	; (8001940 <logShift+0x150>)
 800182c:	1900      	adds	r0, r0, r4
 800182e:	784b      	ldrb	r3, [r1, #1]
 8001830:	780a      	ldrb	r2, [r1, #0]
 8001832:	9003      	str	r0, [sp, #12]
 8001834:	7908      	ldrb	r0, [r1, #4]
 8001836:	9002      	str	r0, [sp, #8]
 8001838:	78c8      	ldrb	r0, [r1, #3]
 800183a:	9001      	str	r0, [sp, #4]
 800183c:	7889      	ldrb	r1, [r1, #2]
 800183e:	0030      	movs	r0, r6
 8001840:	9100      	str	r1, [sp, #0]
 8001842:	4940      	ldr	r1, [pc, #256]	; (8001944 <logShift+0x154>)
 8001844:	f003 fe7a 	bl	800553c <siprintf>
	switch(workCate){
 8001848:	2d03      	cmp	r5, #3
 800184a:	d82c      	bhi.n	80018a6 <logShift+0xb6>
 800184c:	0028      	movs	r0, r5
 800184e:	4e3e      	ldr	r6, [pc, #248]	; (8001948 <logShift+0x158>)
 8001850:	4c3e      	ldr	r4, [pc, #248]	; (800194c <logShift+0x15c>)
 8001852:	f7fe fc63 	bl	800011c <__gnu_thumb1_case_uqi>
 8001856:	2a02      	.short	0x2a02
 8001858:	584b      	.short	0x584b
		sprintf(ptLog[0].content1, "%s/%s", pt[CURXY].name, ptCate[pt[CURXY].cate - 1]);
 800185a:	2505      	movs	r5, #5
 800185c:	2406      	movs	r4, #6
 800185e:	4f3c      	ldr	r7, [pc, #240]	; (8001950 <logShift+0x160>)
 8001860:	493c      	ldr	r1, [pc, #240]	; (8001954 <logShift+0x164>)
 8001862:	787a      	ldrb	r2, [r7, #1]
 8001864:	783b      	ldrb	r3, [r7, #0]
 8001866:	1aaa      	subs	r2, r5, r2
 8001868:	4362      	muls	r2, r4
 800186a:	18d2      	adds	r2, r2, r3
 800186c:	40aa      	lsls	r2, r5
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <logShift+0x168>)
 8001870:	0030      	movs	r0, r6
 8001872:	189a      	adds	r2, r3, r2
 8001874:	7d93      	ldrb	r3, [r2, #22]
 8001876:	3b01      	subs	r3, #1
 8001878:	436b      	muls	r3, r5
 800187a:	18cb      	adds	r3, r1, r3
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <logShift+0x16c>)
 800187e:	f003 fe5d 	bl	800553c <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", pt[CURXY].store, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 8001882:	787b      	ldrb	r3, [r7, #1]
 8001884:	1aed      	subs	r5, r5, r3
 8001886:	436c      	muls	r4, r5
 8001888:	783d      	ldrb	r5, [r7, #0]
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <logShift+0x168>)
 800188c:	1964      	adds	r4, r4, r5
 800188e:	0164      	lsls	r4, r4, #5
 8001890:	191c      	adds	r4, r3, r4
 8001892:	7f63      	ldrb	r3, [r4, #29]
 8001894:	8b22      	ldrh	r2, [r4, #24]
 8001896:	3301      	adds	r3, #1
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 8001898:	7fa1      	ldrb	r1, [r4, #30]
 800189a:	482c      	ldr	r0, [pc, #176]	; (800194c <logShift+0x15c>)
 800189c:	3101      	adds	r1, #1
 800189e:	9100      	str	r1, [sp, #0]
 80018a0:	492f      	ldr	r1, [pc, #188]	; (8001960 <logShift+0x170>)
 80018a2:	f003 fe4b 	bl	800553c <siprintf>
}
 80018a6:	b005      	add	sp, #20
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(ptLog[0].content1, "%s/%s", pt[CURXY].name, ptCate[pt[CURXY].cate - 1]);
 80018aa:	2505      	movs	r5, #5
 80018ac:	2406      	movs	r4, #6
 80018ae:	4f28      	ldr	r7, [pc, #160]	; (8001950 <logShift+0x160>)
 80018b0:	4928      	ldr	r1, [pc, #160]	; (8001954 <logShift+0x164>)
 80018b2:	787a      	ldrb	r2, [r7, #1]
 80018b4:	783b      	ldrb	r3, [r7, #0]
 80018b6:	1aaa      	subs	r2, r5, r2
 80018b8:	4362      	muls	r2, r4
 80018ba:	18d2      	adds	r2, r2, r3
 80018bc:	40aa      	lsls	r2, r5
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <logShift+0x168>)
 80018c0:	0030      	movs	r0, r6
 80018c2:	189a      	adds	r2, r3, r2
 80018c4:	7d93      	ldrb	r3, [r2, #22]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	436b      	muls	r3, r5
 80018ca:	18cb      	adds	r3, r1, r3
 80018cc:	4923      	ldr	r1, [pc, #140]	; (800195c <logShift+0x16c>)
 80018ce:	f003 fe35 	bl	800553c <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[CURXY].temp.x + 1, pt[CURXY].temp.y + 1);
 80018d2:	787b      	ldrb	r3, [r7, #1]
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <logShift+0x174>)
 80018d6:	1aed      	subs	r5, r5, r3
 80018d8:	436c      	muls	r4, r5
 80018da:	783d      	ldrb	r5, [r7, #0]
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <logShift+0x168>)
 80018de:	1964      	adds	r4, r4, r5
 80018e0:	0164      	lsls	r4, r4, #5
 80018e2:	191c      	adds	r4, r3, r4
 80018e4:	7f63      	ldrb	r3, [r4, #29]
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	e7d5      	b.n	8001898 <logShift+0xa8>
		sprintf(ptLog[0].content1, "Sear:%s", find_name);
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <logShift+0x178>)
 80018ee:	491f      	ldr	r1, [pc, #124]	; (800196c <logShift+0x17c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	0030      	movs	r0, r6
 80018f4:	f003 fe22 	bl	800553c <siprintf>
		sprintf(ptLog[0].content2, "Num of Find:%d", findC);
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <logShift+0x180>)
 80018fa:	491e      	ldr	r1, [pc, #120]	; (8001974 <logShift+0x184>)
 80018fc:	781a      	ldrb	r2, [r3, #0]
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 80018fe:	0020      	movs	r0, r4
 8001900:	f003 fe1c 	bl	800553c <siprintf>
}
 8001904:	e7cf      	b.n	80018a6 <logShift+0xb6>
		sprintf(ptLog[0].content1, "S(%d,%d) E(%d,%d)", ptionS.x + 1, ptionS.y + 1, ptionE.x + 1, ptionE.y + 1);
 8001906:	481c      	ldr	r0, [pc, #112]	; (8001978 <logShift+0x188>)
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <logShift+0x18c>)
 800190a:	7841      	ldrb	r1, [r0, #1]
 800190c:	7853      	ldrb	r3, [r2, #1]
 800190e:	3101      	adds	r1, #1
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	9101      	str	r1, [sp, #4]
 8001914:	7801      	ldrb	r1, [r0, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	3101      	adds	r1, #1
 800191a:	3201      	adds	r2, #1
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	0030      	movs	r0, r6
 8001920:	4917      	ldr	r1, [pc, #92]	; (8001980 <logShift+0x190>)
 8001922:	f003 fe0b 	bl	800553c <siprintf>
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <logShift+0x194>)
 8001928:	4917      	ldr	r1, [pc, #92]	; (8001988 <logShift+0x198>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	e7e7      	b.n	80018fe <logShift+0x10e>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	20001041 	.word	0x20001041
 8001934:	20000e58 	.word	0x20000e58
 8001938:	20000ea2 	.word	0x20000ea2
 800193c:	0800698b 	.word	0x0800698b
 8001940:	20000029 	.word	0x20000029
 8001944:	08006694 	.word	0x08006694
 8001948:	20000e76 	.word	0x20000e76
 800194c:	20000e8c 	.word	0x20000e8c
 8001950:	2000103e 	.word	0x2000103e
 8001954:	08006953 	.word	0x08006953
 8001958:	200009d8 	.word	0x200009d8
 800195c:	080066b0 	.word	0x080066b0
 8001960:	080066b6 	.word	0x080066b6
 8001964:	20001040 	.word	0x20001040
 8001968:	200009bc 	.word	0x200009bc
 800196c:	080066c4 	.word	0x080066c4
 8001970:	200009ba 	.word	0x200009ba
 8001974:	080066cc 	.word	0x080066cc
 8001978:	20001035 	.word	0x20001035
 800197c:	20001037 	.word	0x20001037
 8001980:	080066db 	.word	0x080066db
 8001984:	20001034 	.word	0x20001034
 8001988:	080066ed 	.word	0x080066ed

0800198c <start>:
uint8_t start(void){
 800198c:	b570      	push	{r4, r5, r6, lr}
	led_clear();
 800198e:	f7fe ff09 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++)
 8001992:	2400      	movs	r4, #0
		if(i / 6 == 0 || i / 6 == 3) led_color(i, 4, 0, 0);
 8001994:	2c05      	cmp	r4, #5
 8001996:	d903      	bls.n	80019a0 <start+0x14>
 8001998:	0023      	movs	r3, r4
 800199a:	3b12      	subs	r3, #18
 800199c:	2b05      	cmp	r3, #5
 800199e:	d83b      	bhi.n	8001a18 <start+0x8c>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	001a      	movs	r2, r3
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 80019a6:	0020      	movs	r0, r4
 80019a8:	f7fe fec6 	bl	8000738 <led_color>
	for(uint8_t i = 0 ; i < 36 ; i++)
 80019ac:	3401      	adds	r4, #1
 80019ae:	b2e4      	uxtb	r4, r4
 80019b0:	2c24      	cmp	r4, #36	; 0x24
 80019b2:	d1ef      	bne.n	8001994 <start+0x8>
	led_update();
 80019b4:	f7fe fecc 	bl	8000750 <led_update>
 80019b8:	3c0c      	subs	r4, #12
		SSD1306_GotoXY(43, 24 + i);
 80019ba:	0021      	movs	r1, r4
 80019bc:	202b      	movs	r0, #43	; 0x2b
 80019be:	f7ff f8b9 	bl	8000b34 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 80019c2:	4d20      	ldr	r5, [pc, #128]	; (8001a44 <start+0xb8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	0029      	movs	r1, r5
 80019c8:	481f      	ldr	r0, [pc, #124]	; (8001a48 <start+0xbc>)
 80019ca:	f7ff f8ef 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY(39, 24);
 80019ce:	2118      	movs	r1, #24
 80019d0:	2027      	movs	r0, #39	; 0x27
 80019d2:	f7ff f8af 	bl	8000b34 <SSD1306_GotoXY>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019d6:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	0029      	movs	r1, r5
 80019dc:	481b      	ldr	r0, [pc, #108]	; (8001a4c <start+0xc0>)
 80019de:	f7ff f8e5 	bl	8000bac <SSD1306_Puts>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019e2:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 80019e4:	f7ff fa2c 	bl	8000e40 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 80019e8:	20c8      	movs	r0, #200	; 0xc8
 80019ea:	f001 fb37 	bl	800305c <HAL_Delay>
	for(uint8_t i = 0 ; i < 9 ; i++){
 80019ee:	2c21      	cmp	r4, #33	; 0x21
 80019f0:	d1e3      	bne.n	80019ba <start+0x2e>
	HAL_Delay(1000);
 80019f2:	20fa      	movs	r0, #250	; 0xfa
 80019f4:	0080      	lsls	r0, r0, #2
 80019f6:	f001 fb31 	bl	800305c <HAL_Delay>
	led_clear();
 80019fa:	f7fe fed3 	bl	80007a4 <led_clear>
	led_update();
 80019fe:	f7fe fea7 	bl	8000750 <led_update>
	SSD1306_Clear();
 8001a02:	f7ff f9ed 	bl	8000de0 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8001a06:	f7ff fa1b 	bl	8000e40 <SSD1306_UpdateScreen>
	if(!eepReadData(0)) return 1;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff faf8 	bl	8001000 <eepReadData>
 8001a10:	4243      	negs	r3, r0
 8001a12:	4158      	adcs	r0, r3
}
 8001a14:	b2c0      	uxtb	r0, r0
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
		else if(i / 6 == 1 || i / 6 == 4) led_color(i, 0, 4, 0);
 8001a18:	1fa3      	subs	r3, r4, #6
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d902      	bls.n	8001a24 <start+0x98>
 8001a1e:	3b12      	subs	r3, #18
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d803      	bhi.n	8001a2c <start+0xa0>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2204      	movs	r2, #4
 8001a28:	0019      	movs	r1, r3
 8001a2a:	e7bc      	b.n	80019a6 <start+0x1a>
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 8001a2c:	0023      	movs	r3, r4
 8001a2e:	3b0c      	subs	r3, #12
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d902      	bls.n	8001a3a <start+0xae>
 8001a34:	3b12      	subs	r3, #18
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d8b8      	bhi.n	80019ac <start+0x20>
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	0011      	movs	r1, r2
 8001a40:	e7b1      	b.n	80019a6 <start+0x1a>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000000 	.word	0x20000000
 8001a48:	080066fe 	.word	0x080066fe
 8001a4c:	08006705 	.word	0x08006705

08001a50 <time_setting>:
void time_setting(void){
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
	while(!read_sw()){
 8001a54:	f7ff fc88 	bl	8001368 <read_sw>
 8001a58:	1e04      	subs	r4, r0, #0
 8001a5a:	d007      	beq.n	8001a6c <time_setting+0x1c>
	set_time();
 8001a5c:	f7ff fc12 	bl	8001284 <set_time>
	eepWriteData(0, 1);
 8001a60:	2101      	movs	r1, #1
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fabc 	bl	8000fe0 <eepWriteData>
}
 8001a68:	b00b      	add	sp, #44	; 0x2c
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		get_adc();
 8001a6c:	f7ff fc1a 	bl	80012a4 <get_adc>
		get_sel(&sel, 5, 0, 1);
 8001a70:	4e3f      	ldr	r6, [pc, #252]	; (8001b70 <time_setting+0x120>)
 8001a72:	0022      	movs	r2, r4
 8001a74:	2301      	movs	r3, #1
 8001a76:	2105      	movs	r1, #5
 8001a78:	0030      	movs	r0, r6
 8001a7a:	f7ff fc3f 	bl	80012fc <get_sel>
		if(sel == 0) get_sel(&time.year, 99, 0, 0);
 8001a7e:	7832      	ldrb	r2, [r6, #0]
 8001a80:	4c3c      	ldr	r4, [pc, #240]	; (8001b74 <time_setting+0x124>)
 8001a82:	2a00      	cmp	r2, #0
 8001a84:	d104      	bne.n	8001a90 <time_setting+0x40>
 8001a86:	0013      	movs	r3, r2
 8001a88:	2163      	movs	r1, #99	; 0x63
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7ff fc36 	bl	80012fc <get_sel>
		if(sel == 1) get_sel(&time.month, 12, 1, 0);
 8001a90:	7832      	ldrb	r2, [r6, #0]
 8001a92:	2a01      	cmp	r2, #1
 8001a94:	d104      	bne.n	8001aa0 <time_setting+0x50>
 8001a96:	2300      	movs	r3, #0
 8001a98:	210c      	movs	r1, #12
 8001a9a:	1c60      	adds	r0, r4, #1
 8001a9c:	f7ff fc2e 	bl	80012fc <get_sel>
		if(sel == 2) get_sel(&time.day, lastDay[time.month - 1], 1, 0);
 8001aa0:	7833      	ldrb	r3, [r6, #0]
 8001aa2:	4f35      	ldr	r7, [pc, #212]	; (8001b78 <time_setting+0x128>)
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d108      	bne.n	8001aba <time_setting+0x6a>
 8001aa8:	7863      	ldrb	r3, [r4, #1]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	7819      	ldrb	r1, [r3, #0]
 8001ab2:	1ca0      	adds	r0, r4, #2
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f7ff fc21 	bl	80012fc <get_sel>
		if(sel == 3) get_sel(&time.hour, 23, 0, 0);
 8001aba:	7833      	ldrb	r3, [r6, #0]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d105      	bne.n	8001acc <time_setting+0x7c>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2117      	movs	r1, #23
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	1ce0      	adds	r0, r4, #3
 8001ac8:	f7ff fc18 	bl	80012fc <get_sel>
		if(sel == 4) get_sel(&time.min, 59, 0, 0);
 8001acc:	7833      	ldrb	r3, [r6, #0]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d105      	bne.n	8001ade <time_setting+0x8e>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	213b      	movs	r1, #59	; 0x3b
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	1d20      	adds	r0, r4, #4
 8001ada:	f7ff fc0f 	bl	80012fc <get_sel>
		if(sel == 5) get_sel(&time.sec, 59, 0, 0);
 8001ade:	7833      	ldrb	r3, [r6, #0]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d105      	bne.n	8001af0 <time_setting+0xa0>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	213b      	movs	r1, #59	; 0x3b
 8001ae8:	001a      	movs	r2, r3
 8001aea:	1d60      	adds	r0, r4, #5
 8001aec:	f7ff fc06 	bl	80012fc <get_sel>
		if(time.day > lastDay[time.month - 1]) time.day = lastDay[time.month - 1];
 8001af0:	7865      	ldrb	r5, [r4, #1]
 8001af2:	78a2      	ldrb	r2, [r4, #2]
 8001af4:	197f      	adds	r7, r7, r5
 8001af6:	3f01      	subs	r7, #1
 8001af8:	783b      	ldrb	r3, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d900      	bls.n	8001b00 <time_setting+0xb0>
 8001afe:	70a3      	strb	r3, [r4, #2]
		joy_result = basic;
 8001b00:	2200      	movs	r2, #0
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <time_setting+0x12c>)
		POS pos[2] = {{0, 2}, {0, 4}};
 8001b04:	491e      	ldr	r1, [pc, #120]	; (8001b80 <time_setting+0x130>)
		joy_result = basic;
 8001b06:	701a      	strb	r2, [r3, #0]
		POS pos[2] = {{0, 2}, {0, 4}};
 8001b08:	a802      	add	r0, sp, #8
 8001b0a:	3204      	adds	r2, #4
 8001b0c:	f003 fbd2 	bl	80052b4 <memcpy>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001b10:	2106      	movs	r1, #6
 8001b12:	7833      	ldrb	r3, [r6, #0]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <time_setting+0x134>)
 8001b16:	4359      	muls	r1, r3
 8001b18:	1852      	adds	r2, r2, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d117      	bne.n	8001b4e <time_setting+0xfe>
 8001b1e:	23fa      	movs	r3, #250	; 0xfa
 8001b20:	7825      	ldrb	r5, [r4, #0]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	18ed      	adds	r5, r5, r3
 8001b26:	ac05      	add	r4, sp, #20
 8001b28:	002b      	movs	r3, r5
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	4916      	ldr	r1, [pc, #88]	; (8001b88 <time_setting+0x138>)
 8001b2e:	f003 fd05 	bl	800553c <siprintf>
		char* array[2] = { "RTC Time setting", bf };
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <time_setting+0x13c>)
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <time_setting+0x140>)
		char* array[2] = { "RTC Time setting", bf };
 8001b36:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b38:	2302      	movs	r3, #2
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	a802      	add	r0, sp, #8
 8001b40:	3b01      	subs	r3, #1
		char* array[2] = { "RTC Time setting", bf };
 8001b42:	9404      	str	r4, [sp, #16]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001b44:	f7ff fb66 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8001b48:	f7ff f97a 	bl	8000e40 <SSD1306_UpdateScreen>
 8001b4c:	e782      	b.n	8001a54 <time_setting+0x4>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d0e9      	beq.n	8001b26 <time_setting+0xd6>
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d101      	bne.n	8001b5a <time_setting+0x10a>
 8001b56:	78a5      	ldrb	r5, [r4, #2]
 8001b58:	e7e5      	b.n	8001b26 <time_setting+0xd6>
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d101      	bne.n	8001b62 <time_setting+0x112>
 8001b5e:	78e5      	ldrb	r5, [r4, #3]
 8001b60:	e7e1      	b.n	8001b26 <time_setting+0xd6>
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d101      	bne.n	8001b6a <time_setting+0x11a>
 8001b66:	7925      	ldrb	r5, [r4, #4]
 8001b68:	e7dd      	b.n	8001b26 <time_setting+0xd6>
 8001b6a:	7965      	ldrb	r5, [r4, #5]
 8001b6c:	e7db      	b.n	8001b26 <time_setting+0xd6>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	2000103b 	.word	0x2000103b
 8001b74:	20000029 	.word	0x20000029
 8001b78:	08006947 	.word	0x08006947
 8001b7c:	200009cc 	.word	0x200009cc
 8001b80:	08005c14 	.word	0x08005c14
 8001b84:	08006967 	.word	0x08006967
 8001b88:	0800670d 	.word	0x0800670d
 8001b8c:	08006715 	.word	0x08006715
 8001b90:	08006726 	.word	0x08006726

08001b94 <position_set>:

void position_set(void){
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS new = temp;
 8001b96:	4f57      	ldr	r7, [pc, #348]	; (8001cf4 <position_set+0x160>)
void position_set(void){
 8001b98:	b089      	sub	sp, #36	; 0x24
	POS new = temp;
 8001b9a:	783c      	ldrb	r4, [r7, #0]
 8001b9c:	787e      	ldrb	r6, [r7, #1]
	while(!read_sw()){
 8001b9e:	f7ff fbe3 	bl	8001368 <read_sw>
 8001ba2:	1e05      	subs	r5, r0, #0
 8001ba4:	d004      	beq.n	8001bb0 <position_set+0x1c>
		}
		if(new.x > 5) new.x = temp.x;
		if(new.y > 5) new.y = temp.y;
		temp = new;
	}
	firF = 0;
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <position_set+0x164>)
 8001baa:	701a      	strb	r2, [r3, #0]
}
 8001bac:	b009      	add	sp, #36	; 0x24
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	783a      	ldrb	r2, [r7, #0]
 8001bb4:	4951      	ldr	r1, [pc, #324]	; (8001cfc <position_set+0x168>)
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	3201      	adds	r2, #1
 8001bba:	a803      	add	r0, sp, #12
 8001bbc:	f003 fcbe 	bl	800553c <siprintf>
		ssd1306_putsXY(pos.x, pos.y, bf, 0);
 8001bc0:	002b      	movs	r3, r5
 8001bc2:	2106      	movs	r1, #6
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	f7ff fb14 	bl	80011f4 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8001bcc:	f7ff f938 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 8001bd0:	f7fe fde8 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <position_set+0x16c>)
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	7d99      	ldrb	r1, [r3, #22]
 8001bdc:	2900      	cmp	r1, #0
 8001bde:	d100      	bne.n	8001be2 <position_set+0x4e>
 8001be0:	e084      	b.n	8001cec <position_set+0x158>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2104      	movs	r1, #4
 8001be6:	001a      	movs	r2, r3
 8001be8:	0028      	movs	r0, r5
 8001bea:	f7fe fda5 	bl	8000738 <led_color>
 8001bee:	9b01      	ldr	r3, [sp, #4]
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	3320      	adds	r3, #32
 8001bf4:	b2ed      	uxtb	r5, r5
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2d24      	cmp	r5, #36	; 0x24
 8001bfa:	d1ed      	bne.n	8001bd8 <position_set+0x44>
		led_color(CURXY, 4, 4, 4);
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	7878      	ldrb	r0, [r7, #1]
 8001c00:	1a18      	subs	r0, r3, r0
 8001c02:	3301      	adds	r3, #1
 8001c04:	4358      	muls	r0, r3
 8001c06:	783b      	ldrb	r3, [r7, #0]
 8001c08:	18c0      	adds	r0, r0, r3
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	b2c0      	uxtb	r0, r0
 8001c0e:	001a      	movs	r2, r3
 8001c10:	0019      	movs	r1, r3
 8001c12:	f7fe fd91 	bl	8000738 <led_color>
		led_update();
 8001c16:	f7fe fd9b 	bl	8000750 <led_update>
		if(cnt > 150){
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <position_set+0x170>)
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	2a96      	cmp	r2, #150	; 0x96
 8001c20:	d95b      	bls.n	8001cda <position_set+0x146>
			cnt = 0;
 8001c22:	2200      	movs	r2, #0
 8001c24:	801a      	strh	r2, [r3, #0]
			if(JOY_U) do{ new.y++; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <position_set+0x174>)
 8001c28:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <position_set+0x178>)
 8001c2a:	885b      	ldrh	r3, [r3, #2]
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d911      	bls.n	8001c54 <position_set+0xc0>
 8001c30:	3601      	adds	r6, #1
 8001c32:	b2f5      	uxtb	r5, r6
 8001c34:	2305      	movs	r3, #5
 8001c36:	1b58      	subs	r0, r3, r5
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4358      	muls	r0, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	1820      	adds	r0, r4, r0
 8001c40:	001a      	movs	r2, r3
 8001c42:	2104      	movs	r1, #4
 8001c44:	b2c0      	uxtb	r0, r0
 8001c46:	f7fe fdb7 	bl	80007b8 <led_cmp>
 8001c4a:	002e      	movs	r6, r5
 8001c4c:	3501      	adds	r5, #1
 8001c4e:	b2ed      	uxtb	r5, r5
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d1ef      	bne.n	8001c34 <position_set+0xa0>
			if(JOY_D) do{ new.y--; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001c54:	2296      	movs	r2, #150	; 0x96
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <position_set+0x174>)
 8001c58:	0052      	lsls	r2, r2, #1
 8001c5a:	885b      	ldrh	r3, [r3, #2]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d211      	bcs.n	8001c84 <position_set+0xf0>
 8001c60:	3e01      	subs	r6, #1
 8001c62:	b2f5      	uxtb	r5, r6
 8001c64:	2305      	movs	r3, #5
 8001c66:	1b58      	subs	r0, r3, r5
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4358      	muls	r0, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	1820      	adds	r0, r4, r0
 8001c70:	001a      	movs	r2, r3
 8001c72:	2104      	movs	r1, #4
 8001c74:	b2c0      	uxtb	r0, r0
 8001c76:	f7fe fd9f 	bl	80007b8 <led_cmp>
 8001c7a:	002e      	movs	r6, r5
 8001c7c:	3d01      	subs	r5, #1
 8001c7e:	b2ed      	uxtb	r5, r5
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d1ef      	bne.n	8001c64 <position_set+0xd0>
			if(JOY_L) do{ new.x--; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001c84:	2296      	movs	r2, #150	; 0x96
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <position_set+0x174>)
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d20f      	bcs.n	8001cb0 <position_set+0x11c>
 8001c90:	2305      	movs	r3, #5
 8001c92:	2506      	movs	r5, #6
 8001c94:	1b9b      	subs	r3, r3, r6
 8001c96:	435d      	muls	r5, r3
 8001c98:	b2ed      	uxtb	r5, r5
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	3c01      	subs	r4, #1
 8001c9e:	b2e4      	uxtb	r4, r4
 8001ca0:	1960      	adds	r0, r4, r5
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	b2c0      	uxtb	r0, r0
 8001ca8:	f7fe fd86 	bl	80007b8 <led_cmp>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f4      	bne.n	8001c9a <position_set+0x106>
			if(JOY_R) do{ new.x++; }while(led_cmp(TESTXY(new.x, new.y), 4, 0, 0));
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <position_set+0x174>)
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <position_set+0x178>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d90f      	bls.n	8001cda <position_set+0x146>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	2506      	movs	r5, #6
 8001cbe:	1b9b      	subs	r3, r3, r6
 8001cc0:	435d      	muls	r5, r3
 8001cc2:	b2ed      	uxtb	r5, r5
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	3401      	adds	r4, #1
 8001cc8:	b2e4      	uxtb	r4, r4
 8001cca:	1960      	adds	r0, r4, r5
 8001ccc:	001a      	movs	r2, r3
 8001cce:	2104      	movs	r1, #4
 8001cd0:	b2c0      	uxtb	r0, r0
 8001cd2:	f7fe fd71 	bl	80007b8 <led_cmp>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d1f4      	bne.n	8001cc4 <position_set+0x130>
		if(new.x > 5) new.x = temp.x;
 8001cda:	2c05      	cmp	r4, #5
 8001cdc:	d900      	bls.n	8001ce0 <position_set+0x14c>
 8001cde:	783c      	ldrb	r4, [r7, #0]
		if(new.y > 5) new.y = temp.y;
 8001ce0:	2e05      	cmp	r6, #5
 8001ce2:	d900      	bls.n	8001ce6 <position_set+0x152>
 8001ce4:	787e      	ldrb	r6, [r7, #1]
		temp = new;
 8001ce6:	703c      	strb	r4, [r7, #0]
 8001ce8:	707e      	strb	r6, [r7, #1]
 8001cea:	e758      	b.n	8001b9e <position_set+0xa>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001cec:	000b      	movs	r3, r1
 8001cee:	2204      	movs	r2, #4
 8001cf0:	e77a      	b.n	8001be8 <position_set+0x54>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	2000103e 	.word	0x2000103e
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	08006730 	.word	0x08006730
 8001d00:	200009d8 	.word	0x200009d8
 8001d04:	200009b8 	.word	0x200009b8
 8001d08:	200009ae 	.word	0x200009ae
 8001d0c:	00000dac 	.word	0x00000dac

08001d10 <save_mode>:

void save_mode(void){
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t store_num = 1, store_max;
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001d12:	4d94      	ldr	r5, [pc, #592]	; (8001f64 <save_mode+0x254>)
 8001d14:	23c8      	movs	r3, #200	; 0xc8
 8001d16:	7828      	ldrb	r0, [r5, #0]
void save_mode(void){
 8001d18:	b0a9      	sub	sp, #164	; 0xa4
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d006      	beq.n	8001d2c <save_mode+0x1c>
 8001d1e:	3b64      	subs	r3, #100	; 0x64
 8001d20:	2801      	cmp	r0, #1
 8001d22:	d003      	beq.n	8001d2c <save_mode+0x1c>
 8001d24:	3b32      	subs	r3, #50	; 0x32
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d000      	beq.n	8001d2c <save_mode+0x1c>
 8001d2a:	3b28      	subs	r3, #40	; 0x28
 8001d2c:	4c8e      	ldr	r4, [pc, #568]	; (8001f68 <save_mode+0x258>)
 8001d2e:	7023      	strb	r3, [r4, #0]
	if(!firF){
 8001d30:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <save_mode+0x25c>)
 8001d32:	7819      	ldrb	r1, [r3, #0]
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d160      	bne.n	8001dfa <save_mode+0xea>
		firF = 1;
 8001d38:	2201      	movs	r2, #1

		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d3a:	4e8d      	ldr	r6, [pc, #564]	; (8001f70 <save_mode+0x260>)
		firF = 1;
 8001d3c:	701a      	strb	r2, [r3, #0]
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d3e:	7836      	ldrb	r6, [r6, #0]
 8001d40:	ab03      	add	r3, sp, #12
 8001d42:	3602      	adds	r6, #2
 8001d44:	705e      	strb	r6, [r3, #1]
 8001d46:	2606      	movs	r6, #6
 8001d48:	7019      	strb	r1, [r3, #0]
 8001d4a:	7099      	strb	r1, [r3, #2]
 8001d4c:	3102      	adds	r1, #2
 8001d4e:	7159      	strb	r1, [r3, #5]
 8001d50:	1889      	adds	r1, r1, r2
 8001d52:	71d9      	strb	r1, [r3, #7]
 8001d54:	1889      	adds	r1, r1, r2
 8001d56:	7259      	strb	r1, [r3, #9]
 8001d58:	1889      	adds	r1, r1, r2
 8001d5a:	72d9      	strb	r1, [r3, #11]
		char bf[5][20];
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d5c:	4341      	muls	r1, r0
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d5e:	70da      	strb	r2, [r3, #3]
 8001d60:	711a      	strb	r2, [r3, #4]
 8001d62:	719a      	strb	r2, [r3, #6]
 8001d64:	721a      	strb	r2, [r3, #8]
 8001d66:	729a      	strb	r2, [r3, #10]
 8001d68:	731a      	strb	r2, [r3, #12]
 8001d6a:	739a      	strb	r2, [r3, #14]
 8001d6c:	1992      	adds	r2, r2, r6
 8001d6e:	73da      	strb	r2, [r3, #15]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d70:	4a80      	ldr	r2, [pc, #512]	; (8001f74 <save_mode+0x264>)
 8001d72:	af0f      	add	r7, sp, #60	; 0x3c
 8001d74:	1852      	adds	r2, r2, r1
		POS pos[8] = {{0, 2 + sel}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001d76:	735e      	strb	r6, [r3, #13]
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001d78:	0038      	movs	r0, r7
 8001d7a:	497f      	ldr	r1, [pc, #508]	; (8001f78 <save_mode+0x268>)
 8001d7c:	f003 fbde 	bl	800553c <siprintf>
		sprintf(bf[1], "Name:%s", input_name[0] > 0 ? input_name : "(NONE)");
 8001d80:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <save_mode+0x26c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	7813      	ldrb	r3, [r2, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <save_mode+0x7c>
 8001d8a:	4a7d      	ldr	r2, [pc, #500]	; (8001f80 <save_mode+0x270>)
 8001d8c:	497d      	ldr	r1, [pc, #500]	; (8001f84 <save_mode+0x274>)
 8001d8e:	a814      	add	r0, sp, #80	; 0x50
 8001d90:	f003 fbd4 	bl	800553c <siprintf>
		sprintf(bf[2], "Store: %d/%d", store_num, store_max);
 8001d94:	4a7c      	ldr	r2, [pc, #496]	; (8001f88 <save_mode+0x278>)
 8001d96:	7823      	ldrb	r3, [r4, #0]
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	497c      	ldr	r1, [pc, #496]	; (8001f8c <save_mode+0x27c>)
 8001d9c:	a819      	add	r0, sp, #100	; 0x64
 8001d9e:	f003 fbcd 	bl	800553c <siprintf>
		sprintf(bf[3], "PassWord:%s", input_password[0] > 0 ? input_password : "(NONE)");
 8001da2:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <save_mode+0x280>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	7813      	ldrb	r3, [r2, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <save_mode+0x9e>
 8001dac:	4a74      	ldr	r2, [pc, #464]	; (8001f80 <save_mode+0x270>)
 8001dae:	ae1e      	add	r6, sp, #120	; 0x78
 8001db0:	4978      	ldr	r1, [pc, #480]	; (8001f94 <save_mode+0x284>)
 8001db2:	0030      	movs	r0, r6
 8001db4:	f003 fbc2 	bl	800553c <siprintf>
		sprintf(bf[4], "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001db8:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <save_mode+0x288>)
 8001dba:	4978      	ldr	r1, [pc, #480]	; (8001f9c <save_mode+0x28c>)
 8001dbc:	7853      	ldrb	r3, [r2, #1]
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	a823      	add	r0, sp, #140	; 0x8c
 8001dc6:	f003 fbb9 	bl	800553c <siprintf>
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <save_mode+0x290>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001dcc:	4975      	ldr	r1, [pc, #468]	; (8001fa4 <save_mode+0x294>)
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8001dce:	9307      	str	r3, [sp, #28]
 8001dd0:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <save_mode+0x298>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001dd2:	aa07      	add	r2, sp, #28
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8001dd4:	9308      	str	r3, [sp, #32]
 8001dd6:	ab14      	add	r3, sp, #80	; 0x50
 8001dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8001dda:	ab19      	add	r3, sp, #100	; 0x64
 8001ddc:	930b      	str	r3, [sp, #44]	; 0x2c
 8001dde:	ab23      	add	r3, sp, #140	; 0x8c
 8001de0:	930d      	str	r3, [sp, #52]	; 0x34
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <save_mode+0x29c>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001de4:	a803      	add	r0, sp, #12
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8001de6:	930e      	str	r3, [sp, #56]	; 0x38
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001de8:	2308      	movs	r3, #8
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	3b07      	subs	r3, #7
		char* array[8] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], bf[4], "Enter" };
 8001dee:	9709      	str	r7, [sp, #36]	; 0x24
 8001df0:	960c      	str	r6, [sp, #48]	; 0x30
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001df2:	f7ff fa0f 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8001df6:	f7ff f823 	bl	8000e40 <SSD1306_UpdateScreen>
	}
	get_adc();
 8001dfa:	f7ff fa53 	bl	80012a4 <get_adc>
	get_sel(&sel, 5, 0, 2);
 8001dfe:	4e5c      	ldr	r6, [pc, #368]	; (8001f70 <save_mode+0x260>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	2302      	movs	r3, #2
 8001e04:	2105      	movs	r1, #5
 8001e06:	0030      	movs	r0, r6
 8001e08:	f7ff fa78 	bl	80012fc <get_sel>
	if(sel == 0) get_sel(&cate_sel, etc, res, 1);
 8001e0c:	7832      	ldrb	r2, [r6, #0]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d104      	bne.n	8001e1c <save_mode+0x10c>
 8001e12:	2301      	movs	r3, #1
 8001e14:	2103      	movs	r1, #3
 8001e16:	0028      	movs	r0, r5
 8001e18:	f7ff fa70 	bl	80012fc <get_sel>
	if(sel == 2) get_sel(&store_num, store_max, 1, 1);
 8001e1c:	7833      	ldrb	r3, [r6, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d105      	bne.n	8001e2e <save_mode+0x11e>
 8001e22:	3b01      	subs	r3, #1
 8001e24:	001a      	movs	r2, r3
 8001e26:	7821      	ldrb	r1, [r4, #0]
 8001e28:	4857      	ldr	r0, [pc, #348]	; (8001f88 <save_mode+0x278>)
 8001e2a:	f7ff fa67 	bl	80012fc <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8001e2e:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <save_mode+0x2a0>)
 8001e30:	7813      	ldrb	r3, [r2, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <save_mode+0x12e>
 8001e36:	2300      	movs	r3, #0
 8001e38:	7013      	strb	r3, [r2, #0]
 8001e3a:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <save_mode+0x25c>)
 8001e3c:	7013      	strb	r3, [r2, #0]

	if(read_sw()){
 8001e3e:	f7ff fa93 	bl	8001368 <read_sw>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d100      	bne.n	8001e48 <save_mode+0x138>
 8001e46:	e082      	b.n	8001f4e <save_mode+0x23e>
		if(sel == 1) input_name = input_string("#input Name", 0);
 8001e48:	7833      	ldrb	r3, [r6, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <save_mode+0x14a>
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <save_mode+0x2a4>)
 8001e52:	f7ff fbb3 	bl	80015bc <input_string>
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <save_mode+0x26c>)
 8001e58:	6018      	str	r0, [r3, #0]
		if(sel == 3) input_password = input_string("#input password", 0);
 8001e5a:	7833      	ldrb	r3, [r6, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d105      	bne.n	8001e6c <save_mode+0x15c>
 8001e60:	2100      	movs	r1, #0
 8001e62:	4855      	ldr	r0, [pc, #340]	; (8001fb8 <save_mode+0x2a8>)
 8001e64:	f7ff fbaa 	bl	80015bc <input_string>
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <save_mode+0x280>)
 8001e6a:	6018      	str	r0, [r3, #0]
		if(sel == 4) position_set();
 8001e6c:	7833      	ldrb	r3, [r6, #0]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d101      	bne.n	8001e76 <save_mode+0x166>
 8001e72:	f7ff fe8f 	bl	8001b94 <position_set>
		if(sel == 5){
 8001e76:	7830      	ldrb	r0, [r6, #0]
 8001e78:	2805      	cmp	r0, #5
 8001e7a:	d168      	bne.n	8001f4e <save_mode+0x23e>
			if(input_name[0] > 0){
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <save_mode+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d069      	beq.n	8001f5a <save_mode+0x24a>
				if(input_password[0] > 0) { strcpy(pt[CURXY].password, input_password); free(input_password); }
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <save_mode+0x280>)
 8001e88:	4d43      	ldr	r5, [pc, #268]	; (8001f98 <save_mode+0x288>)
 8001e8a:	681c      	ldr	r4, [r3, #0]
 8001e8c:	786b      	ldrb	r3, [r5, #1]
 8001e8e:	1ac3      	subs	r3, r0, r3
 8001e90:	3001      	adds	r0, #1
 8001e92:	4358      	muls	r0, r3
 8001e94:	782b      	ldrb	r3, [r5, #0]
 8001e96:	18c0      	adds	r0, r0, r3
 8001e98:	0140      	lsls	r0, r0, #5
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <save_mode+0x2ac>)
 8001e9c:	300b      	adds	r0, #11
 8001e9e:	18c0      	adds	r0, r0, r3
 8001ea0:	7823      	ldrb	r3, [r4, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d055      	beq.n	8001f52 <save_mode+0x242>
 8001ea6:	0021      	movs	r1, r4
 8001ea8:	f003 fb68 	bl	800557c <strcpy>
 8001eac:	0020      	movs	r0, r4
 8001eae:	f003 f9f7 	bl	80052a0 <free>
				else strcpy(pt[CURXY].password, "0000");
				strcpy(pt[CURXY].name, input_name);
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	786c      	ldrb	r4, [r5, #1]
 8001eb6:	7828      	ldrb	r0, [r5, #0]
 8001eb8:	1b1c      	subs	r4, r3, r4
 8001eba:	3301      	adds	r3, #1
 8001ebc:	435c      	muls	r4, r3
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <save_mode+0x2ac>)
 8001ec0:	1824      	adds	r4, r4, r0
 8001ec2:	4e2e      	ldr	r6, [pc, #184]	; (8001f7c <save_mode+0x26c>)
 8001ec4:	0164      	lsls	r4, r4, #5
 8001ec6:	18e4      	adds	r4, r4, r3
 8001ec8:	6831      	ldr	r1, [r6, #0]
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f003 fb56 	bl	800557c <strcpy>
				pt[CURXY].cate = cate_sel + 1;
				pt[CURXY].max = store_max;
				pt[CURXY].store = store_num;
				pt[CURXY].pos = start_check;
				pt[CURXY].temp = temp;
 8001ed0:	0020      	movs	r0, r4
				pt[CURXY].cate = cate_sel + 1;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <save_mode+0x254>)
				pt[CURXY].pos = start_check;
 8001ed4:	4f3a      	ldr	r7, [pc, #232]	; (8001fc0 <save_mode+0x2b0>)
				pt[CURXY].cate = cate_sel + 1;
 8001ed6:	781b      	ldrb	r3, [r3, #0]
				pt[CURXY].temp = temp;
 8001ed8:	2202      	movs	r2, #2
				pt[CURXY].cate = cate_sel + 1;
 8001eda:	3301      	adds	r3, #1
 8001edc:	75a3      	strb	r3, [r4, #22]
				pt[CURXY].max = store_max;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <save_mode+0x258>)
				pt[CURXY].temp = temp;
 8001ee0:	0029      	movs	r1, r5
				pt[CURXY].max = store_max;
 8001ee2:	781b      	ldrb	r3, [r3, #0]
				pt[CURXY].temp = temp;
 8001ee4:	301d      	adds	r0, #29
				pt[CURXY].max = store_max;
 8001ee6:	8363      	strh	r3, [r4, #26]
				pt[CURXY].store = store_num;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <save_mode+0x278>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	8323      	strh	r3, [r4, #24]
				pt[CURXY].pos = start_check;
 8001eee:	783b      	ldrb	r3, [r7, #0]
 8001ef0:	7723      	strb	r3, [r4, #28]
				pt[CURXY].temp = temp;
 8001ef2:	f003 f9df 	bl	80052b4 <memcpy>

				logShift(0);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fc7a 	bl	80017f0 <logShift>

				{ free(input_name); input_name = NULL; input_password = NULL; }
 8001efc:	6830      	ldr	r0, [r6, #0]
 8001efe:	f003 f9cf 	bl	80052a0 <free>
 8001f02:	2300      	movs	r3, #0
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <save_mode+0x280>)
 8001f06:	6033      	str	r3, [r6, #0]
 8001f08:	6013      	str	r3, [r2, #0]

				if(start_check == 1) ptfirst = pt[CURXY];
 8001f0a:	783b      	ldrb	r3, [r7, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10d      	bne.n	8001f2c <save_mode+0x21c>
 8001f10:	2206      	movs	r2, #6
 8001f12:	7869      	ldrb	r1, [r5, #1]
 8001f14:	3304      	adds	r3, #4
 8001f16:	1a59      	subs	r1, r3, r1
 8001f18:	4351      	muls	r1, r2
 8001f1a:	782b      	ldrb	r3, [r5, #0]
 8001f1c:	4829      	ldr	r0, [pc, #164]	; (8001fc4 <save_mode+0x2b4>)
 8001f1e:	18c9      	adds	r1, r1, r3
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <save_mode+0x2ac>)
 8001f22:	0149      	lsls	r1, r1, #5
 8001f24:	1859      	adds	r1, r3, r1
 8001f26:	321a      	adds	r2, #26
 8001f28:	f003 f9c4 	bl	80052b4 <memcpy>
				store_num = 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <save_mode+0x278>)
 8001f30:	7013      	strb	r3, [r2, #0]
				cate_sel = res;
 8001f32:	2300      	movs	r3, #0
 8001f34:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <save_mode+0x254>)
 8001f36:	7013      	strb	r3, [r2, #0]
				init_value;
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <save_mode+0x2a0>)
 8001f3a:	7013      	strb	r3, [r2, #0]
 8001f3c:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <save_mode+0x288>)
 8001f3e:	7013      	strb	r3, [r2, #0]
 8001f40:	7053      	strb	r3, [r2, #1]
 8001f42:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <save_mode+0x2b8>)
 8001f44:	7013      	strb	r3, [r2, #0]
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <save_mode+0x260>)
 8001f48:	7013      	strb	r3, [r2, #0]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <save_mode+0x25c>)
 8001f4c:	7013      	strb	r3, [r2, #0]
			}
			else buzM = 2;
		}
	}
}
 8001f4e:	b029      	add	sp, #164	; 0xa4
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
				else strcpy(pt[CURXY].password, "0000");
 8001f52:	491e      	ldr	r1, [pc, #120]	; (8001fcc <save_mode+0x2bc>)
 8001f54:	f003 fb12 	bl	800557c <strcpy>
 8001f58:	e7ab      	b.n	8001eb2 <save_mode+0x1a2>
			else buzM = 2;
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <save_mode+0x2c0>)
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	e7f5      	b.n	8001f4e <save_mode+0x23e>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	200009b5 	.word	0x200009b5
 8001f68:	2000103d 	.word	0x2000103d
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	2000103b 	.word	0x2000103b
 8001f74:	08006953 	.word	0x08006953
 8001f78:	08006748 	.word	0x08006748
 8001f7c:	200009c4 	.word	0x200009c4
 8001f80:	08006741 	.word	0x08006741
 8001f84:	08006750 	.word	0x08006750
 8001f88:	20000028 	.word	0x20000028
 8001f8c:	08006758 	.word	0x08006758
 8001f90:	200009c8 	.word	0x200009c8
 8001f94:	08006765 	.word	0x08006765
 8001f98:	2000103e 	.word	0x2000103e
 8001f9c:	08006730 	.word	0x08006730
 8001fa0:	0800665b 	.word	0x0800665b
 8001fa4:	0800678d 	.word	0x0800678d
 8001fa8:	08006771 	.word	0x08006771
 8001fac:	08006787 	.word	0x08006787
 8001fb0:	200009cc 	.word	0x200009cc
 8001fb4:	08006793 	.word	0x08006793
 8001fb8:	0800679f 	.word	0x0800679f
 8001fbc:	200009d8 	.word	0x200009d8
 8001fc0:	2000103c 	.word	0x2000103c
 8001fc4:	20001014 	.word	0x20001014
 8001fc8:	200009ac 	.word	0x200009ac
 8001fcc:	080067af 	.word	0x080067af
 8001fd0:	200009b4 	.word	0x200009b4

08001fd4 <part_refill>:

void part_refill(void){
	uint8_t refill_num = 0;
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	2200      	movs	r2, #0
void part_refill(void){
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	b08d      	sub	sp, #52	; 0x34
	uint8_t refill_num = 0;
 8001fdc:	446b      	add	r3, sp
 8001fde:	701a      	strb	r2, [r3, #0]
	while(!read_sw()){
 8001fe0:	f7ff f9c2 	bl	8001368 <read_sw>
 8001fe4:	1e04      	subs	r4, r0, #0
 8001fe6:	d017      	beq.n	8002018 <part_refill+0x44>

		get_adc();
		get_sel(&refill_num, pt[CURXY].max, 0, 0);
		joy_result = basic;
	}
	if(refill_num > 0) { pt[CURXY].store += refill_num; logShift(0); }
 8001fe8:	230f      	movs	r3, #15
 8001fea:	446b      	add	r3, sp
 8001fec:	7819      	ldrb	r1, [r3, #0]
		sprintf(bf, "IN:%d/%d", refill_num, pt[CURXY].max);
 8001fee:	2305      	movs	r3, #5
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <part_refill+0xc8>)
 8001ff2:	7850      	ldrb	r0, [r2, #1]
 8001ff4:	1a1b      	subs	r3, r3, r0
 8001ff6:	2006      	movs	r0, #6
 8001ff8:	4358      	muls	r0, r3
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <part_refill+0xcc>)
 8001ffe:	18c0      	adds	r0, r0, r3
 8002000:	0140      	lsls	r0, r0, #5
	if(refill_num > 0) { pt[CURXY].store += refill_num; logShift(0); }
 8002002:	1810      	adds	r0, r2, r0
 8002004:	2900      	cmp	r1, #0
 8002006:	d044      	beq.n	8002092 <part_refill+0xbe>
 8002008:	8b03      	ldrh	r3, [r0, #24]
 800200a:	1859      	adds	r1, r3, r1
 800200c:	8301      	strh	r1, [r0, #24]
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fbee 	bl	80017f0 <logShift>
	else memset(&pt[CURXY], 0, sizeof(struct Part));
}
 8002014:	b00d      	add	sp, #52	; 0x34
 8002016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8002018:	2204      	movs	r2, #4
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <part_refill+0xd0>)
 800201c:	a804      	add	r0, sp, #16
 800201e:	1889      	adds	r1, r1, r2
 8002020:	f003 f948 	bl	80052b4 <memcpy>
		sprintf(bf, "IN:%d/%d", refill_num, pt[CURXY].max);
 8002024:	2205      	movs	r2, #5
 8002026:	2106      	movs	r1, #6
 8002028:	260f      	movs	r6, #15
 800202a:	4d1c      	ldr	r5, [pc, #112]	; (800209c <part_refill+0xc8>)
 800202c:	481c      	ldr	r0, [pc, #112]	; (80020a0 <part_refill+0xcc>)
 800202e:	786b      	ldrb	r3, [r5, #1]
 8002030:	446e      	add	r6, sp
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	434b      	muls	r3, r1
 8002036:	782a      	ldrb	r2, [r5, #0]
 8002038:	af07      	add	r7, sp, #28
 800203a:	189b      	adds	r3, r3, r2
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	18c3      	adds	r3, r0, r3
 8002040:	8b5b      	ldrh	r3, [r3, #26]
 8002042:	7832      	ldrb	r2, [r6, #0]
 8002044:	4918      	ldr	r1, [pc, #96]	; (80020a8 <part_refill+0xd4>)
 8002046:	0038      	movs	r0, r7
 8002048:	f003 fa78 	bl	800553c <siprintf>
		char* array[2] = { "Part has all used.", bf };
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <part_refill+0xd8>)
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 800204e:	a805      	add	r0, sp, #20
		char* array[2] = { "Part has all used.", bf };
 8002050:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8002052:	2302      	movs	r3, #2
 8002054:	0002      	movs	r2, r0
 8002056:	4916      	ldr	r1, [pc, #88]	; (80020b0 <part_refill+0xdc>)
 8002058:	a804      	add	r0, sp, #16
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	3b01      	subs	r3, #1
		char* array[2] = { "Part has all used.", bf };
 800205e:	9706      	str	r7, [sp, #24]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8002060:	f7ff f8d8 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8002064:	f7fe feec 	bl	8000e40 <SSD1306_UpdateScreen>
		get_adc();
 8002068:	f7ff f91c 	bl	80012a4 <get_adc>
		get_sel(&refill_num, pt[CURXY].max, 0, 0);
 800206c:	2205      	movs	r2, #5
 800206e:	2106      	movs	r1, #6
 8002070:	786b      	ldrb	r3, [r5, #1]
 8002072:	0030      	movs	r0, r6
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	434b      	muls	r3, r1
 8002078:	782a      	ldrb	r2, [r5, #0]
 800207a:	189b      	adds	r3, r3, r2
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <part_refill+0xcc>)
 800207e:	015b      	lsls	r3, r3, #5
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	7e99      	ldrb	r1, [r3, #26]
 8002084:	0022      	movs	r2, r4
 8002086:	0023      	movs	r3, r4
 8002088:	f7ff f938 	bl	80012fc <get_sel>
		joy_result = basic;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <part_refill+0xe0>)
 800208e:	701c      	strb	r4, [r3, #0]
 8002090:	e7a6      	b.n	8001fe0 <part_refill+0xc>
	else memset(&pt[CURXY], 0, sizeof(struct Part));
 8002092:	2220      	movs	r2, #32
 8002094:	f003 f92a 	bl	80052ec <memset>
}
 8002098:	e7bc      	b.n	8002014 <part_refill+0x40>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	2000103e 	.word	0x2000103e
 80020a0:	200009d8 	.word	0x200009d8
 80020a4:	08005c14 	.word	0x08005c14
 80020a8:	080067b4 	.word	0x080067b4
 80020ac:	080067bd 	.word	0x080067bd
 80020b0:	080067d0 	.word	0x080067d0
 80020b4:	200009cc 	.word	0x200009cc

080020b8 <part_use>:

void part_use(void){
	use_num = 1;
 80020b8:	2201      	movs	r2, #1
void part_use(void){
 80020ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	password_num = 0;
 80020bc:	2400      	movs	r4, #0
	use_num = 1;
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <part_use+0x19c>)
void part_use(void){
 80020c0:	b091      	sub	sp, #68	; 0x44
	use_num = 1;
 80020c2:	701a      	strb	r2, [r3, #0]
	password_num = 0;
 80020c4:	4b64      	ldr	r3, [pc, #400]	; (8002258 <part_use+0x1a0>)
 80020c6:	701c      	strb	r4, [r3, #0]

	led_clear();
 80020c8:	f7fe fb6c 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++) led_display(pt[i], i);
 80020cc:	b2e3      	uxtb	r3, r4
 80020ce:	9304      	str	r3, [sp, #16]
 80020d0:	4a62      	ldr	r2, [pc, #392]	; (800225c <part_use+0x1a4>)
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <part_use+0x1a4>)
 80020d4:	0161      	lsls	r1, r4, #5
 80020d6:	5acb      	ldrh	r3, [r1, r3]
 80020d8:	1851      	adds	r1, r2, r1
 80020da:	884f      	ldrh	r7, [r1, #2]
 80020dc:	88ce      	ldrh	r6, [r1, #6]
 80020de:	043f      	lsls	r7, r7, #16
 80020e0:	431f      	orrs	r7, r3
 80020e2:	888b      	ldrh	r3, [r1, #4]
 80020e4:	894d      	ldrh	r5, [r1, #10]
 80020e6:	0436      	lsls	r6, r6, #16
 80020e8:	431e      	orrs	r6, r3
 80020ea:	890b      	ldrh	r3, [r1, #8]
 80020ec:	042d      	lsls	r5, r5, #16
 80020ee:	431d      	orrs	r5, r3
 80020f0:	89cb      	ldrh	r3, [r1, #14]
 80020f2:	898a      	ldrh	r2, [r1, #12]
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	4313      	orrs	r3, r2
 80020f8:	3110      	adds	r1, #16
 80020fa:	2210      	movs	r2, #16
 80020fc:	4668      	mov	r0, sp
 80020fe:	9307      	str	r3, [sp, #28]
 8002100:	3401      	adds	r4, #1
 8002102:	f003 f8d7 	bl	80052b4 <memcpy>
 8002106:	0038      	movs	r0, r7
 8002108:	0031      	movs	r1, r6
 800210a:	002a      	movs	r2, r5
 800210c:	9b07      	ldr	r3, [sp, #28]
 800210e:	f7ff f949 	bl	80013a4 <led_display>
 8002112:	2c24      	cmp	r4, #36	; 0x24
 8002114:	d1da      	bne.n	80020cc <part_use+0x14>
	led_color(CURXY, 4, 4, 4);
 8002116:	2305      	movs	r3, #5
 8002118:	4d51      	ldr	r5, [pc, #324]	; (8002260 <part_use+0x1a8>)
 800211a:	7868      	ldrb	r0, [r5, #1]
 800211c:	1a18      	subs	r0, r3, r0
 800211e:	3301      	adds	r3, #1
 8002120:	4358      	muls	r0, r3
 8002122:	782b      	ldrb	r3, [r5, #0]
 8002124:	18c0      	adds	r0, r0, r3
 8002126:	2304      	movs	r3, #4
 8002128:	b2c0      	uxtb	r0, r0
 800212a:	001a      	movs	r2, r3
 800212c:	0019      	movs	r1, r3
 800212e:	f7fe fb03 	bl	8000738 <led_color>
	led_update();
 8002132:	f7fe fb0d 	bl	8000750 <led_update>

	while(1){
		input_password = input_string("#PASSWORD", 1);
 8002136:	2101      	movs	r1, #1
 8002138:	484a      	ldr	r0, [pc, #296]	; (8002264 <part_use+0x1ac>)
 800213a:	f7ff fa3f 	bl	80015bc <input_string>
		if(!strcmp(pt[CURXY].password, input_password)) { break; }
 800213e:	2305      	movs	r3, #5
		input_password = input_string("#PASSWORD", 1);
 8002140:	0004      	movs	r4, r0
 8002142:	4f49      	ldr	r7, [pc, #292]	; (8002268 <part_use+0x1b0>)
		if(!strcmp(pt[CURXY].password, input_password)) { break; }
 8002144:	0021      	movs	r1, r4
		input_password = input_string("#PASSWORD", 1);
 8002146:	6038      	str	r0, [r7, #0]
		if(!strcmp(pt[CURXY].password, input_password)) { break; }
 8002148:	7868      	ldrb	r0, [r5, #1]
 800214a:	1a18      	subs	r0, r3, r0
 800214c:	3301      	adds	r3, #1
 800214e:	4358      	muls	r0, r3
 8002150:	782b      	ldrb	r3, [r5, #0]
 8002152:	18c0      	adds	r0, r0, r3
 8002154:	0140      	lsls	r0, r0, #5
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <part_use+0x1a4>)
 8002158:	300b      	adds	r0, #11
 800215a:	1818      	adds	r0, r3, r0
 800215c:	f7fd ffd4 	bl	8000108 <strcmp>
 8002160:	1e06      	subs	r6, r0, #0
 8002162:	d019      	beq.n	8002198 <part_use+0xe0>
		else { password_num++; }
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <part_use+0x1a0>)
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <part_use+0x1a0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
		{ free(input_password); input_password = NULL; }
 800216a:	0020      	movs	r0, r4
		else { password_num++; }
 800216c:	3301      	adds	r3, #1
 800216e:	7013      	strb	r3, [r2, #0]
		{ free(input_password); input_password = NULL; }
 8002170:	f003 f896 	bl	80052a0 <free>
 8002174:	2300      	movs	r3, #0
		if(password_num >= 3) { init_value; return; }
 8002176:	4a38      	ldr	r2, [pc, #224]	; (8002258 <part_use+0x1a0>)
		{ free(input_password); input_password = NULL; }
 8002178:	603b      	str	r3, [r7, #0]
		if(password_num >= 3) { init_value; return; }
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	2a02      	cmp	r2, #2
 800217e:	d9da      	bls.n	8002136 <part_use+0x7e>
 8002180:	4a3a      	ldr	r2, [pc, #232]	; (800226c <part_use+0x1b4>)
 8002182:	706b      	strb	r3, [r5, #1]
 8002184:	7013      	strb	r3, [r2, #0]
 8002186:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <part_use+0x1b8>)
 8002188:	702b      	strb	r3, [r5, #0]
 800218a:	7013      	strb	r3, [r2, #0]
 800218c:	4a39      	ldr	r2, [pc, #228]	; (8002274 <part_use+0x1bc>)
 800218e:	7013      	strb	r3, [r2, #0]
 8002190:	4a39      	ldr	r2, [pc, #228]	; (8002278 <part_use+0x1c0>)
 8002192:	7013      	strb	r3, [r2, #0]
		joy_result = basic;
	}
	logShift(1);
	pt[CURXY].store -= use_num;
	if(pt[CURXY].store == 0) part_refill();
}
 8002194:	b011      	add	sp, #68	; 0x44
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	{ free(input_password); input_password = NULL; }
 8002198:	0020      	movs	r0, r4
 800219a:	f003 f881 	bl	80052a0 <free>
 800219e:	603e      	str	r6, [r7, #0]
	while(!read_sw()){
 80021a0:	f7ff f8e2 	bl	8001368 <read_sw>
 80021a4:	1e04      	subs	r4, r0, #0
 80021a6:	d018      	beq.n	80021da <part_use+0x122>
	logShift(1);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff fb21 	bl	80017f0 <logShift>
	pt[CURXY].store -= use_num;
 80021ae:	2305      	movs	r3, #5
 80021b0:	492b      	ldr	r1, [pc, #172]	; (8002260 <part_use+0x1a8>)
 80021b2:	784a      	ldrb	r2, [r1, #1]
 80021b4:	1a9a      	subs	r2, r3, r2
 80021b6:	3301      	adds	r3, #1
 80021b8:	4353      	muls	r3, r2
 80021ba:	780a      	ldrb	r2, [r1, #0]
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	4a27      	ldr	r2, [pc, #156]	; (800225c <part_use+0x1a4>)
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <part_use+0x19c>)
 80021c6:	7811      	ldrb	r1, [r2, #0]
 80021c8:	8b1a      	ldrh	r2, [r3, #24]
 80021ca:	1a52      	subs	r2, r2, r1
 80021cc:	b292      	uxth	r2, r2
 80021ce:	831a      	strh	r2, [r3, #24]
	if(pt[CURXY].store == 0) part_refill();
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1df      	bne.n	8002194 <part_use+0xdc>
 80021d4:	f7ff fefe 	bl	8001fd4 <part_refill>
 80021d8:	e7dc      	b.n	8002194 <part_use+0xdc>
		POS pos[2] = {{0, 1}, {0, 3}};
 80021da:	2204      	movs	r2, #4
 80021dc:	4927      	ldr	r1, [pc, #156]	; (800227c <part_use+0x1c4>)
 80021de:	a808      	add	r0, sp, #32
 80021e0:	1889      	adds	r1, r1, r2
 80021e2:	f003 f867 	bl	80052b4 <memcpy>
		sprintf(bf, "(%d/%d)", use_num, pt[CURXY].store);
 80021e6:	2205      	movs	r2, #5
 80021e8:	2106      	movs	r1, #6
 80021ea:	4d1d      	ldr	r5, [pc, #116]	; (8002260 <part_use+0x1a8>)
 80021ec:	481b      	ldr	r0, [pc, #108]	; (800225c <part_use+0x1a4>)
 80021ee:	786b      	ldrb	r3, [r5, #1]
 80021f0:	4e18      	ldr	r6, [pc, #96]	; (8002254 <part_use+0x19c>)
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	434b      	muls	r3, r1
 80021f6:	782a      	ldrb	r2, [r5, #0]
 80021f8:	af0b      	add	r7, sp, #44	; 0x2c
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	18c3      	adds	r3, r0, r3
 8002200:	8b1b      	ldrh	r3, [r3, #24]
 8002202:	7832      	ldrb	r2, [r6, #0]
 8002204:	491e      	ldr	r1, [pc, #120]	; (8002280 <part_use+0x1c8>)
 8002206:	0038      	movs	r0, r7
 8002208:	f003 f998 	bl	800553c <siprintf>
		char* array[2] = { "How many use?", bf };
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <part_use+0x1cc>)
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 800220e:	a809      	add	r0, sp, #36	; 0x24
		char* array[2] = { "How many use?", bf };
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8002212:	2302      	movs	r3, #2
 8002214:	0002      	movs	r2, r0
 8002216:	491c      	ldr	r1, [pc, #112]	; (8002288 <part_use+0x1d0>)
 8002218:	a808      	add	r0, sp, #32
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	3b01      	subs	r3, #1
		char* array[2] = { "How many use?", bf };
 800221e:	970a      	str	r7, [sp, #40]	; 0x28
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8002220:	f7fe fff8 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8002224:	f7fe fe0c 	bl	8000e40 <SSD1306_UpdateScreen>
		get_adc();
 8002228:	f7ff f83c 	bl	80012a4 <get_adc>
		get_sel(&use_num, pt[CURXY].store, 1, 0);
 800222c:	2205      	movs	r2, #5
 800222e:	2106      	movs	r1, #6
 8002230:	786b      	ldrb	r3, [r5, #1]
 8002232:	0030      	movs	r0, r6
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	434b      	muls	r3, r1
 8002238:	782a      	ldrb	r2, [r5, #0]
 800223a:	189b      	adds	r3, r3, r2
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <part_use+0x1a4>)
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	7e19      	ldrb	r1, [r3, #24]
 8002244:	2201      	movs	r2, #1
 8002246:	0023      	movs	r3, r4
 8002248:	f7ff f858 	bl	80012fc <get_sel>
		joy_result = basic;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <part_use+0x1b4>)
 800224e:	701c      	strb	r4, [r3, #0]
 8002250:	e7a6      	b.n	80021a0 <part_use+0xe8>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20001040 	.word	0x20001040
 8002258:	200009d7 	.word	0x200009d7
 800225c:	200009d8 	.word	0x200009d8
 8002260:	2000103e 	.word	0x2000103e
 8002264:	080067d8 	.word	0x080067d8
 8002268:	200009c8 	.word	0x200009c8
 800226c:	200009cc 	.word	0x200009cc
 8002270:	200009ac 	.word	0x200009ac
 8002274:	2000103b 	.word	0x2000103b
 8002278:	2000000c 	.word	0x2000000c
 800227c:	08005c14 	.word	0x08005c14
 8002280:	080067e2 	.word	0x080067e2
 8002284:	080067ea 	.word	0x080067ea
 8002288:	080067f8 	.word	0x080067f8

0800228c <use_mode>:

void use_mode(void){
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800228e:	4b7d      	ldr	r3, [pc, #500]	; (8002484 <use_mode+0x1f8>)
void use_mode(void){
 8002290:	b09f      	sub	sp, #124	; 0x7c
	if(!firF){
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	2a00      	cmp	r2, #0
 8002296:	d000      	beq.n	800229a <use_mode+0xe>
 8002298:	e08f      	b.n	80023ba <use_mode+0x12e>
		firF = 1;

		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 800229a:	497b      	ldr	r1, [pc, #492]	; (8002488 <use_mode+0x1fc>)
		firF = 1;
 800229c:	3201      	adds	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80022a0:	3207      	adds	r2, #7
 80022a2:	1889      	adds	r1, r1, r2
		char bf[3][20];
		sprintf(bf[0], pt[CURXY].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[CURXY].cate - 1]);
 80022a4:	2405      	movs	r4, #5
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 80022a6:	a809      	add	r0, sp, #36	; 0x24
 80022a8:	f003 f804 	bl	80052b4 <memcpy>
		sprintf(bf[0], pt[CURXY].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[CURXY].cate - 1]);
 80022ac:	2306      	movs	r3, #6
 80022ae:	4977      	ldr	r1, [pc, #476]	; (800248c <use_mode+0x200>)
 80022b0:	784a      	ldrb	r2, [r1, #1]
 80022b2:	7809      	ldrb	r1, [r1, #0]
 80022b4:	1aa2      	subs	r2, r4, r2
 80022b6:	4353      	muls	r3, r2
 80022b8:	185b      	adds	r3, r3, r1
 80022ba:	40a3      	lsls	r3, r4
 80022bc:	4a74      	ldr	r2, [pc, #464]	; (8002490 <use_mode+0x204>)
 80022be:	4975      	ldr	r1, [pc, #468]	; (8002494 <use_mode+0x208>)
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	7d9a      	ldrb	r2, [r3, #22]
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d100      	bne.n	80022ca <use_mode+0x3e>
 80022c8:	4973      	ldr	r1, [pc, #460]	; (8002498 <use_mode+0x20c>)
		sprintf(bf[1], "Name:%s", pt[CURXY].name);
 80022ca:	2706      	movs	r7, #6
		sprintf(bf[0], pt[CURXY].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[CURXY].cate - 1]);
 80022cc:	3a01      	subs	r2, #1
 80022ce:	4362      	muls	r2, r4
 80022d0:	4b72      	ldr	r3, [pc, #456]	; (800249c <use_mode+0x210>)
 80022d2:	a80f      	add	r0, sp, #60	; 0x3c
 80022d4:	189a      	adds	r2, r3, r2
 80022d6:	f003 f931 	bl	800553c <siprintf>
		sprintf(bf[1], "Name:%s", pt[CURXY].name);
 80022da:	4d6c      	ldr	r5, [pc, #432]	; (800248c <use_mode+0x200>)
 80022dc:	4970      	ldr	r1, [pc, #448]	; (80024a0 <use_mode+0x214>)
 80022de:	786a      	ldrb	r2, [r5, #1]
 80022e0:	782b      	ldrb	r3, [r5, #0]
 80022e2:	1aa2      	subs	r2, r4, r2
 80022e4:	437a      	muls	r2, r7
 80022e6:	18d2      	adds	r2, r2, r3
 80022e8:	4b69      	ldr	r3, [pc, #420]	; (8002490 <use_mode+0x204>)
 80022ea:	0152      	lsls	r2, r2, #5
 80022ec:	18d2      	adds	r2, r2, r3
 80022ee:	a814      	add	r0, sp, #80	; 0x50
 80022f0:	f003 f924 	bl	800553c <siprintf>
		sprintf(bf[2], "Store:%d", pt[CURXY].store);
 80022f4:	786b      	ldrb	r3, [r5, #1]
 80022f6:	782a      	ldrb	r2, [r5, #0]
 80022f8:	1ae3      	subs	r3, r4, r3
 80022fa:	437b      	muls	r3, r7
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	4a64      	ldr	r2, [pc, #400]	; (8002490 <use_mode+0x204>)
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	18d3      	adds	r3, r2, r3
 8002304:	ae19      	add	r6, sp, #100	; 0x64
 8002306:	8b1a      	ldrh	r2, [r3, #24]
 8002308:	0030      	movs	r0, r6
 800230a:	4966      	ldr	r1, [pc, #408]	; (80024a4 <use_mode+0x218>)
 800230c:	f003 f916 	bl	800553c <siprintf>
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
 8002310:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <use_mode+0x21c>)
 8002312:	960e      	str	r6, [sp, #56]	; 0x38
 8002314:	930b      	str	r3, [sp, #44]	; 0x2c
 8002316:	ab0f      	add	r3, sp, #60	; 0x3c
 8002318:	930c      	str	r3, [sp, #48]	; 0x30
 800231a:	ab14      	add	r3, sp, #80	; 0x50
 800231c:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Use", array, 1, pt[CURXY].cate != 0 ? sizeof(pos) / 2 : 2);
 800231e:	786b      	ldrb	r3, [r5, #1]
 8002320:	1ae4      	subs	r4, r4, r3
 8002322:	4367      	muls	r7, r4
 8002324:	782b      	ldrb	r3, [r5, #0]
 8002326:	18ff      	adds	r7, r7, r3
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <use_mode+0x204>)
 800232a:	017f      	lsls	r7, r7, #5
 800232c:	19df      	adds	r7, r3, r7
 800232e:	7dba      	ldrb	r2, [r7, #22]
 8002330:	2304      	movs	r3, #4
 8002332:	2a00      	cmp	r2, #0
 8002334:	d100      	bne.n	8002338 <use_mode+0xac>
 8002336:	3b02      	subs	r3, #2
 8002338:	495c      	ldr	r1, [pc, #368]	; (80024ac <use_mode+0x220>)
 800233a:	aa0b      	add	r2, sp, #44	; 0x2c
 800233c:	a809      	add	r0, sp, #36	; 0x24
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	f7fe ff67 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();

		led_clear();
 8002346:	2400      	movs	r4, #0
		SSD1306_UpdateScreen();
 8002348:	f7fe fd7a 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 800234c:	f7fe fa2a 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(pt[i], i);
 8002350:	b2e3      	uxtb	r3, r4
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <use_mode+0x204>)
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <use_mode+0x204>)
 8002358:	0161      	lsls	r1, r4, #5
 800235a:	5a5b      	ldrh	r3, [r3, r1]
 800235c:	1851      	adds	r1, r2, r1
 800235e:	884f      	ldrh	r7, [r1, #2]
 8002360:	88ce      	ldrh	r6, [r1, #6]
 8002362:	043f      	lsls	r7, r7, #16
 8002364:	431f      	orrs	r7, r3
 8002366:	888b      	ldrh	r3, [r1, #4]
 8002368:	894d      	ldrh	r5, [r1, #10]
 800236a:	0436      	lsls	r6, r6, #16
 800236c:	431e      	orrs	r6, r3
 800236e:	890b      	ldrh	r3, [r1, #8]
 8002370:	042d      	lsls	r5, r5, #16
 8002372:	431d      	orrs	r5, r3
 8002374:	89cb      	ldrh	r3, [r1, #14]
 8002376:	898a      	ldrh	r2, [r1, #12]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	4313      	orrs	r3, r2
 800237c:	3110      	adds	r1, #16
 800237e:	2210      	movs	r2, #16
 8002380:	4668      	mov	r0, sp
 8002382:	9307      	str	r3, [sp, #28]
 8002384:	3401      	adds	r4, #1
 8002386:	f002 ff95 	bl	80052b4 <memcpy>
 800238a:	0038      	movs	r0, r7
 800238c:	0031      	movs	r1, r6
 800238e:	002a      	movs	r2, r5
 8002390:	9b07      	ldr	r3, [sp, #28]
 8002392:	f7ff f807 	bl	80013a4 <led_display>
 8002396:	2c24      	cmp	r4, #36	; 0x24
 8002398:	d1da      	bne.n	8002350 <use_mode+0xc4>
		led_color(CURXY, 4, 4, 4);
 800239a:	2005      	movs	r0, #5
 800239c:	4a3b      	ldr	r2, [pc, #236]	; (800248c <use_mode+0x200>)
 800239e:	7853      	ldrb	r3, [r2, #1]
 80023a0:	1ac3      	subs	r3, r0, r3
 80023a2:	3001      	adds	r0, #1
 80023a4:	4358      	muls	r0, r3
 80023a6:	7813      	ldrb	r3, [r2, #0]
 80023a8:	18c0      	adds	r0, r0, r3
 80023aa:	2304      	movs	r3, #4
 80023ac:	b2c0      	uxtb	r0, r0
 80023ae:	001a      	movs	r2, r3
 80023b0:	0019      	movs	r1, r3
 80023b2:	f7fe f9c1 	bl	8000738 <led_color>
		led_update();
 80023b6:	f7fe f9cb 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <use_mode+0x224>)
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	2a96      	cmp	r2, #150	; 0x96
 80023c0:	d928      	bls.n	8002414 <use_mode+0x188>
		cnt = 0;
 80023c2:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 80023c4:	483b      	ldr	r0, [pc, #236]	; (80024b4 <use_mode+0x228>)
		cnt = 0;
 80023c6:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 80023c8:	8842      	ldrh	r2, [r0, #2]
 80023ca:	493b      	ldr	r1, [pc, #236]	; (80024b8 <use_mode+0x22c>)
 80023cc:	428a      	cmp	r2, r1
 80023ce:	d942      	bls.n	8002456 <use_mode+0x1ca>
 80023d0:	4c2e      	ldr	r4, [pc, #184]	; (800248c <use_mode+0x200>)
 80023d2:	7863      	ldrb	r3, [r4, #1]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d801      	bhi.n	80023dc <use_mode+0x150>
 80023d8:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	7063      	strb	r3, [r4, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 80023de:	8803      	ldrh	r3, [r0, #0]
 80023e0:	2096      	movs	r0, #150	; 0x96
 80023e2:	0040      	lsls	r0, r0, #1
 80023e4:	4283      	cmp	r3, r0
 80023e6:	d240      	bcs.n	800246a <use_mode+0x1de>
 80023e8:	4828      	ldr	r0, [pc, #160]	; (800248c <use_mode+0x200>)
 80023ea:	7801      	ldrb	r1, [r0, #0]
 80023ec:	2900      	cmp	r1, #0
 80023ee:	d001      	beq.n	80023f4 <use_mode+0x168>
 80023f0:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80023f2:	b2c9      	uxtb	r1, r1
 80023f4:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 80023f6:	21c8      	movs	r1, #200	; 0xc8
 80023f8:	3a2d      	subs	r2, #45	; 0x2d
 80023fa:	3aff      	subs	r2, #255	; 0xff
 80023fc:	b292      	uxth	r2, r2
 80023fe:	0109      	lsls	r1, r1, #4
 8002400:	428a      	cmp	r2, r1
 8002402:	d804      	bhi.n	800240e <use_mode+0x182>
 8002404:	3b2d      	subs	r3, #45	; 0x2d
 8002406:	3bff      	subs	r3, #255	; 0xff
 8002408:	b29b      	uxth	r3, r3
 800240a:	428b      	cmp	r3, r1
 800240c:	d902      	bls.n	8002414 <use_mode+0x188>
 800240e:	2200      	movs	r2, #0
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <use_mode+0x1f8>)
 8002412:	701a      	strb	r2, [r3, #0]
	}
	if(read_sw()){
 8002414:	f7fe ffa8 	bl	8001368 <read_sw>
 8002418:	2800      	cmp	r0, #0
 800241a:	d01a      	beq.n	8002452 <use_mode+0x1c6>
		if(pt[CURXY].cate != 0) { part_use(); init_value; }
 800241c:	2305      	movs	r3, #5
 800241e:	4c1b      	ldr	r4, [pc, #108]	; (800248c <use_mode+0x200>)
 8002420:	7862      	ldrb	r2, [r4, #1]
 8002422:	7821      	ldrb	r1, [r4, #0]
 8002424:	1a9a      	subs	r2, r3, r2
 8002426:	3301      	adds	r3, #1
 8002428:	4353      	muls	r3, r2
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <use_mode+0x204>)
 800242c:	185b      	adds	r3, r3, r1
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	7d9b      	ldrb	r3, [r3, #22]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <use_mode+0x1ee>
 8002438:	f7ff fe3e 	bl	80020b8 <part_use>
 800243c:	2300      	movs	r3, #0
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <use_mode+0x230>)
 8002440:	7063      	strb	r3, [r4, #1]
 8002442:	7013      	strb	r3, [r2, #0]
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <use_mode+0x234>)
 8002446:	7023      	strb	r3, [r4, #0]
 8002448:	7013      	strb	r3, [r2, #0]
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <use_mode+0x238>)
 800244c:	7013      	strb	r3, [r2, #0]
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <use_mode+0x1f8>)
 8002450:	7013      	strb	r3, [r2, #0]
		else buzM = 2;
	}
}
 8002452:	b01f      	add	sp, #124	; 0x7c
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002456:	2396      	movs	r3, #150	; 0x96
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	429a      	cmp	r2, r3
 800245c:	d2bf      	bcs.n	80023de <use_mode+0x152>
 800245e:	4c0b      	ldr	r4, [pc, #44]	; (800248c <use_mode+0x200>)
 8002460:	7863      	ldrb	r3, [r4, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ba      	beq.n	80023dc <use_mode+0x150>
 8002466:	3b01      	subs	r3, #1
 8002468:	e7b7      	b.n	80023da <use_mode+0x14e>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800246a:	428b      	cmp	r3, r1
 800246c:	d9c3      	bls.n	80023f6 <use_mode+0x16a>
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <use_mode+0x200>)
 8002470:	7801      	ldrb	r1, [r0, #0]
 8002472:	2904      	cmp	r1, #4
 8002474:	d8be      	bhi.n	80023f4 <use_mode+0x168>
 8002476:	3101      	adds	r1, #1
 8002478:	e7bb      	b.n	80023f2 <use_mode+0x166>
		else buzM = 2;
 800247a:	2202      	movs	r2, #2
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <use_mode+0x23c>)
 800247e:	701a      	strb	r2, [r3, #0]
}
 8002480:	e7e7      	b.n	8002452 <use_mode+0x1c6>
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	2000000c 	.word	0x2000000c
 8002488:	08005c14 	.word	0x08005c14
 800248c:	2000103e 	.word	0x2000103e
 8002490:	200009d8 	.word	0x200009d8
 8002494:	08006748 	.word	0x08006748
 8002498:	080067fd 	.word	0x080067fd
 800249c:	08006953 	.word	0x08006953
 80024a0:	08006750 	.word	0x08006750
 80024a4:	08006805 	.word	0x08006805
 80024a8:	0800680e 	.word	0x0800680e
 80024ac:	080067f8 	.word	0x080067f8
 80024b0:	200009b8 	.word	0x200009b8
 80024b4:	200009ae 	.word	0x200009ae
 80024b8:	00000dac 	.word	0x00000dac
 80024bc:	200009cc 	.word	0x200009cc
 80024c0:	200009ac 	.word	0x200009ac
 80024c4:	2000103b 	.word	0x2000103b
 80024c8:	200009b4 	.word	0x200009b4

080024cc <find_reslut>:

void find_reslut(char* str){
	uint8_t find_num = 0;
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024cc:	2105      	movs	r1, #5
void find_reslut(char* str){
 80024ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024d0:	4a9c      	ldr	r2, [pc, #624]	; (8002744 <find_reslut+0x278>)
void find_reslut(char* str){
 80024d2:	b08b      	sub	sp, #44	; 0x2c
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024d4:	7853      	ldrb	r3, [r2, #1]
void find_reslut(char* str){
 80024d6:	af06      	add	r7, sp, #24
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024d8:	1acb      	subs	r3, r1, r3
 80024da:	3101      	adds	r1, #1
 80024dc:	4359      	muls	r1, r3
 80024de:	7813      	ldrb	r3, [r2, #0]
void find_reslut(char* str){
 80024e0:	0006      	movs	r6, r0
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024e2:	18c9      	adds	r1, r1, r3
 80024e4:	4b98      	ldr	r3, [pc, #608]	; (8002748 <find_reslut+0x27c>)
 80024e6:	0149      	lsls	r1, r1, #5
 80024e8:	18c9      	adds	r1, r1, r3
 80024ea:	f7fd fe0d 	bl	8000108 <strcmp>
 80024ee:	2424      	movs	r4, #36	; 0x24
	uint8_t find_num = 0;
 80024f0:	2100      	movs	r1, #0
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(str, pt[CURXY].name)) find_num++;
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d101      	bne.n	80024fa <find_reslut+0x2e>
 80024f6:	3101      	adds	r1, #1
 80024f8:	b2c9      	uxtb	r1, r1
 80024fa:	3c01      	subs	r4, #1
 80024fc:	b2e4      	uxtb	r4, r4
 80024fe:	2c00      	cmp	r4, #0
 8002500:	d1f7      	bne.n	80024f2 <find_reslut+0x26>
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 8002502:	2020      	movs	r0, #32
 8002504:	f002 fe98 	bl	8005238 <calloc>
	findC = 0;
 8002508:	4b90      	ldr	r3, [pc, #576]	; (800274c <find_reslut+0x280>)
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 800250a:	60b8      	str	r0, [r7, #8]
	findC = 0;
 800250c:	701c      	strb	r4, [r3, #0]
	for(uint8_t i = 0 ; i < start_check ; i++)
 800250e:	4b90      	ldr	r3, [pc, #576]	; (8002750 <find_reslut+0x284>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	42a3      	cmp	r3, r4
 8002514:	d81a      	bhi.n	800254c <find_reslut+0x80>
		for(uint8_t j = 0 ; j < 36 ; j++)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
	while(!read_sw()){
 8002516:	f7fe ff27 	bl	8001368 <read_sw>
 800251a:	4c8c      	ldr	r4, [pc, #560]	; (800274c <find_reslut+0x280>)
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	2800      	cmp	r0, #0
 8002520:	d031      	beq.n	8002586 <find_reslut+0xba>
		array[1] = ">";
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
		SSD1306_UpdateScreen();
	}
	logShift(2);
 8002522:	2002      	movs	r0, #2
 8002524:	f7ff f964 	bl	80017f0 <logShift>
	if(findC > 0) { temp = find_part[sel].temp; part_use(); }
 8002528:	7823      	ldrb	r3, [r4, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <find_reslut+0x7a>
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <find_reslut+0x288>)
 8002530:	2202      	movs	r2, #2
 8002532:	7819      	ldrb	r1, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0149      	lsls	r1, r1, #5
 8002538:	1859      	adds	r1, r3, r1
 800253a:	311d      	adds	r1, #29
 800253c:	4881      	ldr	r0, [pc, #516]	; (8002744 <find_reslut+0x278>)
 800253e:	f002 feb9 	bl	80052b4 <memcpy>
 8002542:	f7ff fdb9 	bl	80020b8 <part_use>
}
 8002546:	46bd      	mov	sp, r7
 8002548:	b005      	add	sp, #20
 800254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254c:	4d7e      	ldr	r5, [pc, #504]	; (8002748 <find_reslut+0x27c>)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
 800254e:	0031      	movs	r1, r6
 8002550:	0028      	movs	r0, r5
 8002552:	f7fd fdd9 	bl	8000108 <strcmp>
 8002556:	2800      	cmp	r0, #0
 8002558:	d10e      	bne.n	8002578 <find_reslut+0xac>
 800255a:	7f2b      	ldrb	r3, [r5, #28]
 800255c:	3b01      	subs	r3, #1
 800255e:	42a3      	cmp	r3, r4
 8002560:	d10a      	bne.n	8002578 <find_reslut+0xac>
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <find_reslut+0x280>)
 8002564:	0029      	movs	r1, r5
 8002566:	7818      	ldrb	r0, [r3, #0]
 8002568:	1c42      	adds	r2, r0, #1
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0140      	lsls	r0, r0, #5
 8002570:	2220      	movs	r2, #32
 8002572:	1818      	adds	r0, r3, r0
 8002574:	f002 fe9e 	bl	80052b4 <memcpy>
		for(uint8_t j = 0 ; j < 36 ; j++)
 8002578:	4b77      	ldr	r3, [pc, #476]	; (8002758 <find_reslut+0x28c>)
 800257a:	3520      	adds	r5, #32
 800257c:	429d      	cmp	r5, r3
 800257e:	d1e6      	bne.n	800254e <find_reslut+0x82>
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002580:	3401      	adds	r4, #1
 8002582:	b2e4      	uxtb	r4, r4
 8002584:	e7c3      	b.n	800250e <find_reslut+0x42>
		if(findC > 0){
 8002586:	7823      	ldrb	r3, [r4, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d066      	beq.n	800265a <find_reslut+0x18e>
			get_adc();
 800258c:	f7fe fe8a 	bl	80012a4 <get_adc>
			get_sel(&sel, findC - 1, 0, 2);
 8002590:	7821      	ldrb	r1, [r4, #0]
 8002592:	2302      	movs	r3, #2
 8002594:	3901      	subs	r1, #1
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	486e      	ldr	r0, [pc, #440]	; (8002754 <find_reslut+0x288>)
 800259a:	b2c9      	uxtb	r1, r1
 800259c:	f7fe feae 	bl	80012fc <get_sel>
			joy_result = basic;
 80025a0:	4b6e      	ldr	r3, [pc, #440]	; (800275c <find_reslut+0x290>)
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]
			led_clear();
 80025a6:	f7fe f8fd 	bl	80007a4 <led_clear>
 80025aa:	68fc      	ldr	r4, [r7, #12]
			for(uint8_t i = 0 ; i < 36 ; i++) led_display(pt[i], i);
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <find_reslut+0x27c>)
 80025ae:	b2e2      	uxtb	r2, r4
 80025b0:	9204      	str	r2, [sp, #16]
 80025b2:	0161      	lsls	r1, r4, #5
 80025b4:	5aca      	ldrh	r2, [r1, r3]
 80025b6:	1859      	adds	r1, r3, r1
 80025b8:	884b      	ldrh	r3, [r1, #2]
 80025ba:	894e      	ldrh	r6, [r1, #10]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	4313      	orrs	r3, r2
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	88cb      	ldrh	r3, [r1, #6]
 80025c4:	888a      	ldrh	r2, [r1, #4]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	4313      	orrs	r3, r2
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	890b      	ldrh	r3, [r1, #8]
 80025ce:	89cd      	ldrh	r5, [r1, #14]
 80025d0:	0436      	lsls	r6, r6, #16
 80025d2:	431e      	orrs	r6, r3
 80025d4:	898b      	ldrh	r3, [r1, #12]
 80025d6:	042d      	lsls	r5, r5, #16
 80025d8:	2210      	movs	r2, #16
 80025da:	431d      	orrs	r5, r3
 80025dc:	3110      	adds	r1, #16
 80025de:	4668      	mov	r0, sp
 80025e0:	f002 fe68 	bl	80052b4 <memcpy>
 80025e4:	3401      	adds	r4, #1
 80025e6:	0032      	movs	r2, r6
 80025e8:	002b      	movs	r3, r5
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	f7fe fed9 	bl	80013a4 <led_display>
 80025f2:	2c24      	cmp	r4, #36	; 0x24
 80025f4:	d1da      	bne.n	80025ac <find_reslut+0xe0>
			if(ledC < 500) led_display(find_part[sel], TESTXY(find_part[sel].temp.x, find_part[sel].temp.y));
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <find_reslut+0x288>)
 80025f8:	4a59      	ldr	r2, [pc, #356]	; (8002760 <find_reslut+0x294>)
 80025fa:	7819      	ldrb	r1, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	0149      	lsls	r1, r1, #5
 8002600:	1859      	adds	r1, r3, r1
 8002602:	2305      	movs	r3, #5
 8002604:	7f88      	ldrb	r0, [r1, #30]
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	1a18      	subs	r0, r3, r0
 800260a:	3301      	adds	r3, #1
 800260c:	4358      	muls	r0, r3
 800260e:	7f4b      	ldrb	r3, [r1, #29]
 8002610:	18c0      	adds	r0, r0, r3
 8002612:	23fa      	movs	r3, #250	; 0xfa
 8002614:	b2c0      	uxtb	r0, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	429a      	cmp	r2, r3
 800261a:	d266      	bcs.n	80026ea <find_reslut+0x21e>
 800261c:	9004      	str	r0, [sp, #16]
 800261e:	884e      	ldrh	r6, [r1, #2]
 8002620:	880b      	ldrh	r3, [r1, #0]
 8002622:	88cd      	ldrh	r5, [r1, #6]
 8002624:	0436      	lsls	r6, r6, #16
 8002626:	431e      	orrs	r6, r3
 8002628:	888b      	ldrh	r3, [r1, #4]
 800262a:	042d      	lsls	r5, r5, #16
 800262c:	431d      	orrs	r5, r3
 800262e:	894b      	ldrh	r3, [r1, #10]
 8002630:	890a      	ldrh	r2, [r1, #8]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	89cc      	ldrh	r4, [r1, #14]
 8002636:	4313      	orrs	r3, r2
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	898b      	ldrh	r3, [r1, #12]
 800263c:	0424      	lsls	r4, r4, #16
 800263e:	2210      	movs	r2, #16
 8002640:	431c      	orrs	r4, r3
 8002642:	3110      	adds	r1, #16
 8002644:	4668      	mov	r0, sp
 8002646:	f002 fe35 	bl	80052b4 <memcpy>
 800264a:	0030      	movs	r0, r6
 800264c:	0029      	movs	r1, r5
 800264e:	0023      	movs	r3, r4
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	f7fe fea7 	bl	80013a4 <led_display>
			led_update();
 8002656:	f7fe f87b 	bl	8000750 <led_update>
		POS pos[2 + findC];
 800265a:	466d      	mov	r5, sp
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <find_reslut+0x280>)
		char bf[findC][20];
 800265e:	2614      	movs	r6, #20
		POS pos[2 + findC];
 8002660:	781b      	ldrb	r3, [r3, #0]
		pos[0].x = 0, pos[0].y = 1;
 8002662:	2101      	movs	r1, #1
		POS pos[2 + findC];
 8002664:	005a      	lsls	r2, r3, #1
 8002666:	320b      	adds	r2, #11
 8002668:	08d2      	lsrs	r2, r2, #3
 800266a:	00d2      	lsls	r2, r2, #3
 800266c:	1aaa      	subs	r2, r5, r2
 800266e:	4695      	mov	sp, r2
		pos[0].x = 0, pos[0].y = 1;
 8002670:	2200      	movs	r2, #0
		POS pos[2 + findC];
 8002672:	ac06      	add	r4, sp, #24
		pos[0].x = 0, pos[0].y = 1;
 8002674:	7022      	strb	r2, [r4, #0]
		pos[1].x = 0, pos[1].y = 2 + sel;
 8002676:	70a2      	strb	r2, [r4, #2]
 8002678:	4a36      	ldr	r2, [pc, #216]	; (8002754 <find_reslut+0x288>)
		char bf[findC][20];
 800267a:	4373      	muls	r3, r6
		pos[1].x = 0, pos[1].y = 2 + sel;
 800267c:	7812      	ldrb	r2, [r2, #0]
		char bf[findC][20];
 800267e:	3307      	adds	r3, #7
		pos[1].x = 0, pos[1].y = 2 + sel;
 8002680:	3202      	adds	r2, #2
 8002682:	70e2      	strb	r2, [r4, #3]
		char bf[findC][20];
 8002684:	466a      	mov	r2, sp
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	469d      	mov	sp, r3
 800268e:	ab06      	add	r3, sp, #24
		pos[0].x = 0, pos[0].y = 1;
 8002690:	7061      	strb	r1, [r4, #1]
		char bf[findC][20];
 8002692:	607b      	str	r3, [r7, #4]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <find_reslut+0x280>)
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d32b      	bcc.n	80026f6 <find_reslut+0x22a>
		char* array[2 + findC];
 800269e:	4669      	mov	r1, sp
 80026a0:	009a      	lsls	r2, r3, #2
 80026a2:	320f      	adds	r2, #15
 80026a4:	08d2      	lsrs	r2, r2, #3
 80026a6:	00d2      	lsls	r2, r2, #3
 80026a8:	1a8a      	subs	r2, r1, r2
 80026aa:	4695      	mov	sp, r2
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80026ac:	492d      	ldr	r1, [pc, #180]	; (8002764 <find_reslut+0x298>)
		char* array[2 + findC];
 80026ae:	aa06      	add	r2, sp, #24
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <find_reslut+0x1ea>
 80026b4:	492c      	ldr	r1, [pc, #176]	; (8002768 <find_reslut+0x29c>)
 80026b6:	2014      	movs	r0, #20
 80026b8:	0016      	movs	r6, r2
 80026ba:	4358      	muls	r0, r3
 80026bc:	6011      	str	r1, [r2, #0]
		array[1] = ">";
 80026be:	492b      	ldr	r1, [pc, #172]	; (800276c <find_reslut+0x2a0>)
 80026c0:	3608      	adds	r6, #8
 80026c2:	6051      	str	r1, [r2, #4]
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	1808      	adds	r0, r1, r0
 80026c8:	4288      	cmp	r0, r1
 80026ca:	d138      	bne.n	800273e <find_reslut+0x272>
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
 80026cc:	2101      	movs	r1, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <find_reslut+0x20a>
 80026d2:	3302      	adds	r3, #2
 80026d4:	b2d9      	uxtb	r1, r3
 80026d6:	9100      	str	r1, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	0020      	movs	r0, r4
 80026dc:	4924      	ldr	r1, [pc, #144]	; (8002770 <find_reslut+0x2a4>)
 80026de:	f7fe fd99 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 80026e2:	f7fe fbad 	bl	8000e40 <SSD1306_UpdateScreen>
 80026e6:	46ad      	mov	sp, r5
 80026e8:	e715      	b.n	8002516 <find_reslut+0x4a>
			else led_color(TESTXY(find_part[sel].temp.x, find_part[sel].temp.y), 0, 0, 0);
 80026ea:	2300      	movs	r3, #0
 80026ec:	001a      	movs	r2, r3
 80026ee:	0019      	movs	r1, r3
 80026f0:	f7fe f822 	bl	8000738 <led_color>
 80026f4:	e7af      	b.n	8002656 <find_reslut+0x18a>
			sprintf(bf[i], "%s(%s/%d,%d)", find_part[i].name, ptCate[find_part[i].cate - 1], find_part[i].temp.x + 1, find_part[i].temp.y + 1);
 80026f6:	2105      	movs	r1, #5
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4370      	muls	r0, r6
 8002702:	189a      	adds	r2, r3, r2
 8002704:	7d93      	ldrb	r3, [r2, #22]
 8002706:	3b01      	subs	r3, #1
 8002708:	434b      	muls	r3, r1
 800270a:	491a      	ldr	r1, [pc, #104]	; (8002774 <find_reslut+0x2a8>)
 800270c:	18cb      	adds	r3, r1, r3
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	1808      	adds	r0, r1, r0
 8002712:	7f91      	ldrb	r1, [r2, #30]
 8002714:	3101      	adds	r1, #1
 8002716:	9101      	str	r1, [sp, #4]
 8002718:	7f51      	ldrb	r1, [r2, #29]
 800271a:	3101      	adds	r1, #1
 800271c:	9100      	str	r1, [sp, #0]
 800271e:	4916      	ldr	r1, [pc, #88]	; (8002778 <find_reslut+0x2ac>)
 8002720:	f002 ff0c 	bl	800553c <siprintf>
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 8002724:	2201      	movs	r2, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	18e3      	adds	r3, r4, r3
 800272c:	711a      	strb	r2, [r3, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	3202      	adds	r2, #2
 8002732:	715a      	strb	r2, [r3, #5]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1c58      	adds	r0, r3, #1
 8002738:	b2c3      	uxtb	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e7aa      	b.n	8002694 <find_reslut+0x1c8>
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 800273e:	c602      	stmia	r6!, {r1}
 8002740:	3114      	adds	r1, #20
 8002742:	e7c1      	b.n	80026c8 <find_reslut+0x1fc>
 8002744:	2000103e 	.word	0x2000103e
 8002748:	200009d8 	.word	0x200009d8
 800274c:	200009ba 	.word	0x200009ba
 8002750:	2000103c 	.word	0x2000103c
 8002754:	2000103b 	.word	0x2000103b
 8002758:	20000e58 	.word	0x20000e58
 800275c:	200009cc 	.word	0x200009cc
 8002760:	200009ce 	.word	0x200009ce
 8002764:	0800681a 	.word	0x0800681a
 8002768:	0800682b 	.word	0x0800682b
 800276c:	0800665b 	.word	0x0800665b
 8002770:	08006844 	.word	0x08006844
 8002774:	08006953 	.word	0x08006953
 8002778:	08006837 	.word	0x08006837

0800277c <find_mode>:

void find_mode(void){
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 800277e:	4e2f      	ldr	r6, [pc, #188]	; (800283c <find_mode+0xc0>)
void find_mode(void){
 8002780:	b08b      	sub	sp, #44	; 0x2c
	if(!firF){
 8002782:	7833      	ldrb	r3, [r6, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d12b      	bne.n	80027e0 <find_mode+0x64>
		firF = 1;
		POS pos = {3, 4};
 8002788:	492d      	ldr	r1, [pc, #180]	; (8002840 <find_mode+0xc4>)
		firF = 1;
 800278a:	3301      	adds	r3, #1
		POS pos = {3, 4};
 800278c:	3110      	adds	r1, #16
 800278e:	2202      	movs	r2, #2
 8002790:	a803      	add	r0, sp, #12
		firF = 1;
 8002792:	7033      	strb	r3, [r6, #0]
		POS pos = {3, 4};
 8002794:	f002 fd8e 	bl	80052b4 <memcpy>
		char bf[20];
		sprintf(bf, find_name[0] > 0 ? find_name : "Input find name");
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <find_mode+0xc8>)
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	780b      	ldrb	r3, [r1, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d100      	bne.n	80027a4 <find_mode+0x28>
 80027a2:	4929      	ldr	r1, [pc, #164]	; (8002848 <find_mode+0xcc>)
 80027a4:	ac05      	add	r4, sp, #20
 80027a6:	0020      	movs	r0, r4
 80027a8:	f002 fec8 	bl	800553c <siprintf>
		char* array = { bf };
 80027ac:	9404      	str	r4, [sp, #16]
		array_puts(&pos, "#Find", &array, 1, sizeof(pos) / 2);
 80027ae:	2401      	movs	r4, #1
 80027b0:	4926      	ldr	r1, [pc, #152]	; (800284c <find_mode+0xd0>)
 80027b2:	0023      	movs	r3, r4
 80027b4:	aa04      	add	r2, sp, #16
 80027b6:	a803      	add	r0, sp, #12
 80027b8:	9400      	str	r4, [sp, #0]
 80027ba:	f7fe fd2b 	bl	8001214 <array_puts>
		SSD1306_DrawRectangle(pos.x * 6 - 2, pos.y * 8 - 3, strlen("Input find name") * 6 + 3, 12, 1);
 80027be:	466b      	mov	r3, sp
 80027c0:	7b59      	ldrb	r1, [r3, #13]
 80027c2:	7b18      	ldrb	r0, [r3, #12]
 80027c4:	2306      	movs	r3, #6
 80027c6:	4358      	muls	r0, r3
 80027c8:	00c9      	lsls	r1, r1, #3
 80027ca:	3903      	subs	r1, #3
 80027cc:	3802      	subs	r0, #2
 80027ce:	225d      	movs	r2, #93	; 0x5d
 80027d0:	b289      	uxth	r1, r1
 80027d2:	b280      	uxth	r0, r0
 80027d4:	18db      	adds	r3, r3, r3
 80027d6:	9400      	str	r4, [sp, #0]
 80027d8:	f7fe fa95 	bl	8000d06 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 80027dc:	f7fe fb30 	bl	8000e40 <SSD1306_UpdateScreen>
	}
	if(read_sw()){
 80027e0:	f7fe fdc2 	bl	8001368 <read_sw>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d010      	beq.n	800280a <find_mode+0x8e>
		if(!screenState) { find_name = input_string("#input part name", 0); firF = 0; }
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <find_mode+0xd4>)
 80027ea:	4d16      	ldr	r5, [pc, #88]	; (8002844 <find_mode+0xc8>)
 80027ec:	781c      	ldrb	r4, [r3, #0]
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d10d      	bne.n	800280e <find_mode+0x92>
 80027f2:	0021      	movs	r1, r4
 80027f4:	4817      	ldr	r0, [pc, #92]	; (8002854 <find_mode+0xd8>)
 80027f6:	f7fe fee1 	bl	80015bc <input_string>
 80027fa:	6028      	str	r0, [r5, #0]
		else{
			{ ledM = 1; find_reslut(find_name); ledM = 0; }
			{ free(find_name); find_name = NULL; }
			init_value;
		}
		screenState = find_name[0] > 0;
 80027fc:	682b      	ldr	r3, [r5, #0]
			init_value;
 80027fe:	7034      	strb	r4, [r6, #0]
		screenState = find_name[0] > 0;
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4193      	sbcs	r3, r2
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <find_mode+0xd4>)
 8002808:	7013      	strb	r3, [r2, #0]
	}
}
 800280a:	b00b      	add	sp, #44	; 0x2c
 800280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ ledM = 1; find_reslut(find_name); ledM = 0; }
 800280e:	2301      	movs	r3, #1
 8002810:	2400      	movs	r4, #0
 8002812:	4f11      	ldr	r7, [pc, #68]	; (8002858 <find_mode+0xdc>)
 8002814:	6828      	ldr	r0, [r5, #0]
 8002816:	703b      	strb	r3, [r7, #0]
 8002818:	f7ff fe58 	bl	80024cc <find_reslut>
			{ free(find_name); find_name = NULL; }
 800281c:	6828      	ldr	r0, [r5, #0]
			{ ledM = 1; find_reslut(find_name); ledM = 0; }
 800281e:	703c      	strb	r4, [r7, #0]
			{ free(find_name); find_name = NULL; }
 8002820:	f002 fd3e 	bl	80052a0 <free>
			init_value;
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <find_mode+0xe0>)
			{ free(find_name); find_name = NULL; }
 8002826:	602c      	str	r4, [r5, #0]
			init_value;
 8002828:	701c      	strb	r4, [r3, #0]
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <find_mode+0xe4>)
 800282c:	701c      	strb	r4, [r3, #0]
 800282e:	705c      	strb	r4, [r3, #1]
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <find_mode+0xe8>)
 8002832:	701c      	strb	r4, [r3, #0]
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <find_mode+0xec>)
 8002836:	701c      	strb	r4, [r3, #0]
 8002838:	e7e0      	b.n	80027fc <find_mode+0x80>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	2000000c 	.word	0x2000000c
 8002840:	08005c14 	.word	0x08005c14
 8002844:	200009bc 	.word	0x200009bc
 8002848:	08006851 	.word	0x08006851
 800284c:	08006861 	.word	0x08006861
 8002850:	2000103a 	.word	0x2000103a
 8002854:	08006867 	.word	0x08006867
 8002858:	200009d0 	.word	0x200009d0
 800285c:	200009cc 	.word	0x200009cc
 8002860:	2000103e 	.word	0x2000103e
 8002864:	200009ac 	.word	0x200009ac
 8002868:	2000103b 	.word	0x2000103b

0800286c <partition_save>:

void partition_save(void){
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286e:	b097      	sub	sp, #92	; 0x5c
	struct Part spart;
	memset(&spart, 0, sizeof(struct Part));
 8002870:	ad0e      	add	r5, sp, #56	; 0x38
 8002872:	2220      	movs	r2, #32
 8002874:	2100      	movs	r1, #0
 8002876:	0028      	movs	r0, r5
 8002878:	f002 fd38 	bl	80052ec <memset>

	ptionC = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	4a5f      	ldr	r2, [pc, #380]	; (80029fc <partition_save+0x190>)
	for(uint8_t i = min.y ; i <= max.y ; i++)
 8002880:	4f5f      	ldr	r7, [pc, #380]	; (8002a00 <partition_save+0x194>)
	ptionC = 0;
 8002882:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	001c      	movs	r4, r3
 8002888:	9303      	str	r3, [sp, #12]
 800288a:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <partition_save+0x198>)
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	9304      	str	r3, [sp, #16]
 8002890:	42a3      	cmp	r3, r4
 8002892:	d214      	bcs.n	80028be <partition_save+0x52>
		for(uint8_t j = min.x ; j <= max.x ; j++){
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
			ptionC++;
		}
	if(spart.cate == 0) spart = ptfirst;
 8002894:	7dab      	ldrb	r3, [r5, #22]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <partition_save+0x38>
 800289a:	2220      	movs	r2, #32
 800289c:	0028      	movs	r0, r5
 800289e:	495a      	ldr	r1, [pc, #360]	; (8002a08 <partition_save+0x19c>)
 80028a0:	f002 fd08 	bl	80052b4 <memcpy>

	for(uint8_t i = min.y ; i <= max.y ; i++)
 80028a4:	9b04      	ldr	r3, [sp, #16]
 80028a6:	9a03      	ldr	r2, [sp, #12]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d229      	bcs.n	8002900 <partition_save+0x94>
					pt[TESTXY(j, i)].temp.y = i;
				}
				pt[TESTXY(j, i)].max *= ptionC;
			}

	while(!read_sw()){
 80028ac:	f7fe fd5c 	bl	8001368 <read_sw>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d063      	beq.n	800297c <partition_save+0x110>
					for(uint8_t j = min.x ; j <= max.x ; j++)
						led_color(TESTXY(j, i), 0, 4, 0);
		else led_clear();
		led_update();
	}
	logShift(3);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f7fe ff9b 	bl	80017f0 <logShift>
}
 80028ba:	b017      	add	sp, #92	; 0x5c
 80028bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 80028be:	2305      	movs	r3, #5
 80028c0:	2206      	movs	r2, #6
 80028c2:	1b1b      	subs	r3, r3, r4
 80028c4:	435a      	muls	r2, r3
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80028c6:	783e      	ldrb	r6, [r7, #0]
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 80028c8:	9204      	str	r2, [sp, #16]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <partition_save+0x198>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	42b3      	cmp	r3, r6
 80028d0:	d202      	bcs.n	80028d8 <partition_save+0x6c>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80028d2:	3401      	adds	r4, #1
 80028d4:	b2e4      	uxtb	r4, r4
 80028d6:	e7d8      	b.n	800288a <partition_save+0x1e>
			if(pt[TESTXY(j, i)].cate != 0) spart = pt[TESTXY(j, i)];
 80028d8:	9b04      	ldr	r3, [sp, #16]
 80028da:	494c      	ldr	r1, [pc, #304]	; (8002a0c <partition_save+0x1a0>)
 80028dc:	18f3      	adds	r3, r6, r3
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	18c9      	adds	r1, r1, r3
 80028e2:	7d8b      	ldrb	r3, [r1, #22]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <partition_save+0x84>
 80028e8:	2220      	movs	r2, #32
 80028ea:	0028      	movs	r0, r5
 80028ec:	f002 fce2 	bl	80052b4 <memcpy>
			ptionC++;
 80028f0:	4b42      	ldr	r3, [pc, #264]	; (80029fc <partition_save+0x190>)
 80028f2:	4a42      	ldr	r2, [pc, #264]	; (80029fc <partition_save+0x190>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80028f6:	3601      	adds	r6, #1
			ptionC++;
 80028f8:	3301      	adds	r3, #1
 80028fa:	7013      	strb	r3, [r2, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80028fc:	b2f6      	uxtb	r6, r6
 80028fe:	e7e4      	b.n	80028ca <partition_save+0x5e>
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <partition_save+0x194>)
				if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 8002902:	9a03      	ldr	r2, [sp, #12]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002904:	781c      	ldrb	r4, [r3, #0]
				if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 8002906:	2305      	movs	r3, #5
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	2206      	movs	r2, #6
 800290c:	435a      	muls	r2, r3
 800290e:	9205      	str	r2, [sp, #20]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <partition_save+0x198>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	42a3      	cmp	r3, r4
 8002916:	d204      	bcs.n	8002922 <partition_save+0xb6>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 8002918:	9b03      	ldr	r3, [sp, #12]
 800291a:	3301      	adds	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	e7c0      	b.n	80028a4 <partition_save+0x38>
				if(TESTXY(j, i) != TESTXY(spart.temp.x, spart.temp.y)){
 8002922:	2246      	movs	r2, #70	; 0x46
 8002924:	2145      	movs	r1, #69	; 0x45
 8002926:	9b05      	ldr	r3, [sp, #20]
 8002928:	18e7      	adds	r7, r4, r3
 800292a:	ab04      	add	r3, sp, #16
 800292c:	189b      	adds	r3, r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	3a41      	subs	r2, #65	; 0x41
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	3201      	adds	r2, #1
 8002936:	4353      	muls	r3, r2
 8002938:	aa04      	add	r2, sp, #16
 800293a:	1852      	adds	r2, r2, r1
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	189b      	adds	r3, r3, r2
 8002940:	429f      	cmp	r7, r3
 8002942:	d010      	beq.n	8002966 <partition_save+0xfa>
					start_check++;
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <partition_save+0x1a4>)
					pt[TESTXY(j, i)] = spart;
 8002946:	4d31      	ldr	r5, [pc, #196]	; (8002a0c <partition_save+0x1a0>)
					start_check++;
 8002948:	781e      	ldrb	r6, [r3, #0]
					pt[TESTXY(j, i)] = spart;
 800294a:	2220      	movs	r2, #32
					start_check++;
 800294c:	3601      	adds	r6, #1
 800294e:	b2f6      	uxtb	r6, r6
 8002950:	701e      	strb	r6, [r3, #0]
					pt[TESTXY(j, i)] = spart;
 8002952:	017b      	lsls	r3, r7, #5
 8002954:	18ed      	adds	r5, r5, r3
 8002956:	0028      	movs	r0, r5
 8002958:	a90e      	add	r1, sp, #56	; 0x38
 800295a:	f002 fcab 	bl	80052b4 <memcpy>
					pt[TESTXY(j, i)].temp.y = i;
 800295e:	9b03      	ldr	r3, [sp, #12]
					pt[TESTXY(j, i)].pos = start_check;
 8002960:	772e      	strb	r6, [r5, #28]
					pt[TESTXY(j, i)].temp.x = j;
 8002962:	776c      	strb	r4, [r5, #29]
					pt[TESTXY(j, i)].temp.y = i;
 8002964:	77ab      	strb	r3, [r5, #30]
				pt[TESTXY(j, i)].max *= ptionC;
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <partition_save+0x1a0>)
 8002968:	017f      	lsls	r7, r7, #5
 800296a:	19df      	adds	r7, r3, r7
 800296c:	4b23      	ldr	r3, [pc, #140]	; (80029fc <partition_save+0x190>)
 800296e:	8b7a      	ldrh	r2, [r7, #26]
 8002970:	781b      	ldrb	r3, [r3, #0]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002972:	3401      	adds	r4, #1
				pt[TESTXY(j, i)].max *= ptionC;
 8002974:	4353      	muls	r3, r2
			for(uint8_t j = min.x ; j <= max.x ; j++){
 8002976:	b2e4      	uxtb	r4, r4
				pt[TESTXY(j, i)].max *= ptionC;
 8002978:	837b      	strh	r3, [r7, #26]
			for(uint8_t j = min.x ; j <= max.x ; j++){
 800297a:	e7c9      	b.n	8002910 <partition_save+0xa4>
		POS pos = {0, 3};
 800297c:	2203      	movs	r2, #3
 800297e:	ab04      	add	r3, sp, #16
 8002980:	7318      	strb	r0, [r3, #12]
 8002982:	735a      	strb	r2, [r3, #13]
		sprintf(bf, "Total number:%d", ptionC);
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <partition_save+0x190>)
 8002986:	ac09      	add	r4, sp, #36	; 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	4922      	ldr	r1, [pc, #136]	; (8002a14 <partition_save+0x1a8>)
 800298c:	0020      	movs	r0, r4
 800298e:	f002 fdd5 	bl	800553c <siprintf>
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 8002992:	2301      	movs	r3, #1
 8002994:	aa08      	add	r2, sp, #32
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	491f      	ldr	r1, [pc, #124]	; (8002a18 <partition_save+0x1ac>)
 800299a:	a807      	add	r0, sp, #28
		char* array = { bf };
 800299c:	9408      	str	r4, [sp, #32]
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 800299e:	f7fe fc39 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 80029a2:	f7fe fa4d 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 80029a6:	f7fd fefd 	bl	80007a4 <led_clear>
		if(ledC < 500)
 80029aa:	23fa      	movs	r3, #250	; 0xfa
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <partition_save+0x1b0>)
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d21f      	bcs.n	80029f6 <partition_save+0x18a>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 80029b6:	4f12      	ldr	r7, [pc, #72]	; (8002a00 <partition_save+0x194>)
 80029b8:	787c      	ldrb	r4, [r7, #1]
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <partition_save+0x198>)
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	42a3      	cmp	r3, r4
 80029c0:	d202      	bcs.n	80029c8 <partition_save+0x15c>
		led_update();
 80029c2:	f7fd fec5 	bl	8000750 <led_update>
 80029c6:	e771      	b.n	80028ac <partition_save+0x40>
						led_color(TESTXY(j, i), 0, 4, 0);
 80029c8:	2305      	movs	r3, #5
 80029ca:	1b1e      	subs	r6, r3, r4
 80029cc:	3301      	adds	r3, #1
 80029ce:	435e      	muls	r6, r3
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80029d0:	783d      	ldrb	r5, [r7, #0]
						led_color(TESTXY(j, i), 0, 4, 0);
 80029d2:	b2f6      	uxtb	r6, r6
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <partition_save+0x198>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	42ab      	cmp	r3, r5
 80029da:	d202      	bcs.n	80029e2 <partition_save+0x176>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 80029dc:	3401      	adds	r4, #1
 80029de:	b2e4      	uxtb	r4, r4
 80029e0:	e7eb      	b.n	80029ba <partition_save+0x14e>
						led_color(TESTXY(j, i), 0, 4, 0);
 80029e2:	2300      	movs	r3, #0
 80029e4:	1970      	adds	r0, r6, r5
 80029e6:	2204      	movs	r2, #4
 80029e8:	0019      	movs	r1, r3
 80029ea:	b2c0      	uxtb	r0, r0
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80029ec:	3501      	adds	r5, #1
						led_color(TESTXY(j, i), 0, 4, 0);
 80029ee:	f7fd fea3 	bl	8000738 <led_color>
					for(uint8_t j = min.x ; j <= max.x ; j++)
 80029f2:	b2ed      	uxtb	r5, r5
 80029f4:	e7ee      	b.n	80029d4 <partition_save+0x168>
		else led_clear();
 80029f6:	f7fd fed5 	bl	80007a4 <led_clear>
 80029fa:	e7e2      	b.n	80029c2 <partition_save+0x156>
 80029fc:	20001034 	.word	0x20001034
 8002a00:	200009d4 	.word	0x200009d4
 8002a04:	200009d2 	.word	0x200009d2
 8002a08:	20001014 	.word	0x20001014
 8002a0c:	200009d8 	.word	0x200009d8
 8002a10:	2000103c 	.word	0x2000103c
 8002a14:	08006878 	.word	0x08006878
 8002a18:	08006888 	.word	0x08006888
 8002a1c:	200009ce 	.word	0x200009ce

08002a20 <partition_mode>:

void partition_mode(void){
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 8002a22:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <partition_mode+0x21c>)
void partition_mode(void){
 8002a24:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d000      	beq.n	8002a2e <partition_mode+0xe>
 8002a2c:	e07d      	b.n	8002b2a <partition_mode+0x10a>
		firF = 1;
 8002a2e:	4a83      	ldr	r2, [pc, #524]	; (8002c3c <partition_mode+0x21c>)
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002a30:	4983      	ldr	r1, [pc, #524]	; (8002c40 <partition_mode+0x220>)
		firF = 1;
 8002a32:	3301      	adds	r3, #1
 8002a34:	7013      	strb	r3, [r2, #0]
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 8002a36:	3112      	adds	r1, #18
 8002a38:	2206      	movs	r2, #6
 8002a3a:	a809      	add	r0, sp, #36	; 0x24
 8002a3c:	f002 fc3a 	bl	80052b4 <memcpy>
		char bf[2][20];
		sprintf(bf[0], !screenState ? "Start (%d,%d)" : "End (%d,%d)", temp.x + 1, temp.y + 1);
 8002a40:	4d80      	ldr	r5, [pc, #512]	; (8002c44 <partition_mode+0x224>)
 8002a42:	4981      	ldr	r1, [pc, #516]	; (8002c48 <partition_mode+0x228>)
 8002a44:	782b      	ldrb	r3, [r5, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d000      	beq.n	8002a4c <partition_mode+0x2c>
 8002a4a:	4980      	ldr	r1, [pc, #512]	; (8002c4c <partition_mode+0x22c>)
 8002a4c:	4e80      	ldr	r6, [pc, #512]	; (8002c50 <partition_mode+0x230>)
 8002a4e:	ac0e      	add	r4, sp, #56	; 0x38
 8002a50:	7873      	ldrb	r3, [r6, #1]
 8002a52:	7832      	ldrb	r2, [r6, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	3201      	adds	r2, #1
 8002a58:	0020      	movs	r0, r4
 8002a5a:	f002 fd6f 	bl	800553c <siprintf>
		sprintf(bf[1], pt[CURXY].cate != 0 ? "%s(%s/%d/%d)" : "(NONE)", pt[CURXY].name, ptCate[pt[CURXY].cate - 1], pt[CURXY].store, pt[CURXY].max);
 8002a5e:	2305      	movs	r3, #5
 8002a60:	2206      	movs	r2, #6
 8002a62:	7871      	ldrb	r1, [r6, #1]
 8002a64:	1a59      	subs	r1, r3, r1
 8002a66:	434a      	muls	r2, r1
 8002a68:	7831      	ldrb	r1, [r6, #0]
 8002a6a:	1852      	adds	r2, r2, r1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	4979      	ldr	r1, [pc, #484]	; (8002c54 <partition_mode+0x234>)
 8002a70:	1889      	adds	r1, r1, r2
 8002a72:	7d88      	ldrb	r0, [r1, #22]
 8002a74:	4978      	ldr	r1, [pc, #480]	; (8002c58 <partition_mode+0x238>)
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d100      	bne.n	8002a7c <partition_mode+0x5c>
 8002a7a:	4978      	ldr	r1, [pc, #480]	; (8002c5c <partition_mode+0x23c>)
 8002a7c:	3801      	subs	r0, #1
 8002a7e:	4343      	muls	r3, r0
 8002a80:	4877      	ldr	r0, [pc, #476]	; (8002c60 <partition_mode+0x240>)
 8002a82:	ae13      	add	r6, sp, #76	; 0x4c
 8002a84:	18c3      	adds	r3, r0, r3
 8002a86:	4873      	ldr	r0, [pc, #460]	; (8002c54 <partition_mode+0x234>)
 8002a88:	1882      	adds	r2, r0, r2
 8002a8a:	8b50      	ldrh	r0, [r2, #26]
 8002a8c:	9001      	str	r0, [sp, #4]
 8002a8e:	8b10      	ldrh	r0, [r2, #24]
 8002a90:	9000      	str	r0, [sp, #0]
 8002a92:	0030      	movs	r0, r6
 8002a94:	f002 fd52 	bl	800553c <siprintf>
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 8002a98:	782a      	ldrb	r2, [r5, #0]
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <partition_mode+0x244>)
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d000      	beq.n	8002aa2 <partition_mode+0x82>
 8002aa0:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <partition_mode+0x248>)
 8002aa2:	930b      	str	r3, [sp, #44]	; 0x2c
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	4971      	ldr	r1, [pc, #452]	; (8002c6c <partition_mode+0x24c>)
 8002aa8:	aa0b      	add	r2, sp, #44	; 0x2c
 8002aaa:	a809      	add	r0, sp, #36	; 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	3b02      	subs	r3, #2
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 8002ab0:	940c      	str	r4, [sp, #48]	; 0x30
 8002ab2:	960d      	str	r6, [sp, #52]	; 0x34
		SSD1306_UpdateScreen();

		led_clear();
 8002ab4:	2400      	movs	r4, #0
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002ab6:	f7fe fbad 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8002aba:	f7fe f9c1 	bl	8000e40 <SSD1306_UpdateScreen>
		led_clear();
 8002abe:	f7fd fe71 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(pt[i], i);
 8002ac2:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <partition_mode+0x234>)
 8002ac4:	b2e2      	uxtb	r2, r4
 8002ac6:	9204      	str	r2, [sp, #16]
 8002ac8:	0161      	lsls	r1, r4, #5
 8002aca:	5aca      	ldrh	r2, [r1, r3]
 8002acc:	1859      	adds	r1, r3, r1
 8002ace:	88cd      	ldrh	r5, [r1, #6]
 8002ad0:	888b      	ldrh	r3, [r1, #4]
 8002ad2:	894f      	ldrh	r7, [r1, #10]
 8002ad4:	042d      	lsls	r5, r5, #16
 8002ad6:	884e      	ldrh	r6, [r1, #2]
 8002ad8:	431d      	orrs	r5, r3
 8002ada:	890b      	ldrh	r3, [r1, #8]
 8002adc:	043f      	lsls	r7, r7, #16
 8002ade:	431f      	orrs	r7, r3
 8002ae0:	0436      	lsls	r6, r6, #16
 8002ae2:	89cb      	ldrh	r3, [r1, #14]
 8002ae4:	4316      	orrs	r6, r2
 8002ae6:	898a      	ldrh	r2, [r1, #12]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	4313      	orrs	r3, r2
 8002aec:	3110      	adds	r1, #16
 8002aee:	2210      	movs	r2, #16
 8002af0:	4668      	mov	r0, sp
 8002af2:	9307      	str	r3, [sp, #28]
 8002af4:	3401      	adds	r4, #1
 8002af6:	f002 fbdd 	bl	80052b4 <memcpy>
 8002afa:	0030      	movs	r0, r6
 8002afc:	0029      	movs	r1, r5
 8002afe:	003a      	movs	r2, r7
 8002b00:	9b07      	ldr	r3, [sp, #28]
 8002b02:	f7fe fc4f 	bl	80013a4 <led_display>
 8002b06:	2c24      	cmp	r4, #36	; 0x24
 8002b08:	d1db      	bne.n	8002ac2 <partition_mode+0xa2>
		led_color(CURXY, 4, 4, 4);
 8002b0a:	2005      	movs	r0, #5
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <partition_mode+0x230>)
 8002b0e:	7853      	ldrb	r3, [r2, #1]
 8002b10:	1ac3      	subs	r3, r0, r3
 8002b12:	3001      	adds	r0, #1
 8002b14:	4358      	muls	r0, r3
 8002b16:	7813      	ldrb	r3, [r2, #0]
 8002b18:	18c0      	adds	r0, r0, r3
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	b2c0      	uxtb	r0, r0
 8002b1e:	001a      	movs	r2, r3
 8002b20:	0019      	movs	r1, r3
 8002b22:	f7fd fe09 	bl	8000738 <led_color>
		led_update();
 8002b26:	f7fd fe13 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 8002b2a:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <partition_mode+0x250>)
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	2a96      	cmp	r2, #150	; 0x96
 8002b30:	d928      	bls.n	8002b84 <partition_mode+0x164>
		cnt = 0;
 8002b32:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002b34:	484f      	ldr	r0, [pc, #316]	; (8002c74 <partition_mode+0x254>)
		cnt = 0;
 8002b36:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002b38:	8842      	ldrh	r2, [r0, #2]
 8002b3a:	494f      	ldr	r1, [pc, #316]	; (8002c78 <partition_mode+0x258>)
 8002b3c:	428a      	cmp	r2, r1
 8002b3e:	d938      	bls.n	8002bb2 <partition_mode+0x192>
 8002b40:	4c43      	ldr	r4, [pc, #268]	; (8002c50 <partition_mode+0x230>)
 8002b42:	7863      	ldrb	r3, [r4, #1]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d801      	bhi.n	8002b4c <partition_mode+0x12c>
 8002b48:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	7063      	strb	r3, [r4, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002b4e:	8803      	ldrh	r3, [r0, #0]
 8002b50:	2096      	movs	r0, #150	; 0x96
 8002b52:	0040      	lsls	r0, r0, #1
 8002b54:	4283      	cmp	r3, r0
 8002b56:	d236      	bcs.n	8002bc6 <partition_mode+0x1a6>
 8002b58:	483d      	ldr	r0, [pc, #244]	; (8002c50 <partition_mode+0x230>)
 8002b5a:	7801      	ldrb	r1, [r0, #0]
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d001      	beq.n	8002b64 <partition_mode+0x144>
 8002b60:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002b62:	b2c9      	uxtb	r1, r1
 8002b64:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 8002b66:	21c8      	movs	r1, #200	; 0xc8
 8002b68:	3a2d      	subs	r2, #45	; 0x2d
 8002b6a:	3aff      	subs	r2, #255	; 0xff
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	0109      	lsls	r1, r1, #4
 8002b70:	428a      	cmp	r2, r1
 8002b72:	d804      	bhi.n	8002b7e <partition_mode+0x15e>
 8002b74:	3b2d      	subs	r3, #45	; 0x2d
 8002b76:	3bff      	subs	r3, #255	; 0xff
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	428b      	cmp	r3, r1
 8002b7c:	d902      	bls.n	8002b84 <partition_mode+0x164>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	4a2e      	ldr	r2, [pc, #184]	; (8002c3c <partition_mode+0x21c>)
 8002b82:	7013      	strb	r3, [r2, #0]
	}
	if(read_sw()){
 8002b84:	f7fe fbf0 	bl	8001368 <read_sw>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d010      	beq.n	8002bae <partition_mode+0x18e>
		if(!screenState) { ptionS = temp; firF = 0; }
 8002b8c:	4d2d      	ldr	r5, [pc, #180]	; (8002c44 <partition_mode+0x224>)
 8002b8e:	4c30      	ldr	r4, [pc, #192]	; (8002c50 <partition_mode+0x230>)
 8002b90:	782e      	ldrb	r6, [r5, #0]
 8002b92:	4f3a      	ldr	r7, [pc, #232]	; (8002c7c <partition_mode+0x25c>)
 8002b94:	2e00      	cmp	r6, #0
 8002b96:	d11e      	bne.n	8002bd6 <partition_mode+0x1b6>
 8002b98:	2202      	movs	r2, #2
 8002b9a:	0021      	movs	r1, r4
 8002b9c:	0038      	movs	r0, r7
 8002b9e:	f002 fb89 	bl	80052b4 <memcpy>
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <partition_mode+0x21c>)
 8002ba4:	701e      	strb	r6, [r3, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;

			{ ledM = 1; partition_save(); ledM = 0; }
			init_value;
		}
		screenState = !screenState;
 8002ba6:	782b      	ldrb	r3, [r5, #0]
 8002ba8:	425a      	negs	r2, r3
 8002baa:	4153      	adcs	r3, r2
 8002bac:	702b      	strb	r3, [r5, #0]
	}
}
 8002bae:	b019      	add	sp, #100	; 0x64
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002bb2:	2396      	movs	r3, #150	; 0x96
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d2c9      	bcs.n	8002b4e <partition_mode+0x12e>
 8002bba:	4c25      	ldr	r4, [pc, #148]	; (8002c50 <partition_mode+0x230>)
 8002bbc:	7863      	ldrb	r3, [r4, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0c4      	beq.n	8002b4c <partition_mode+0x12c>
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	e7c1      	b.n	8002b4a <partition_mode+0x12a>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002bc6:	428b      	cmp	r3, r1
 8002bc8:	d9cd      	bls.n	8002b66 <partition_mode+0x146>
 8002bca:	4821      	ldr	r0, [pc, #132]	; (8002c50 <partition_mode+0x230>)
 8002bcc:	7801      	ldrb	r1, [r0, #0]
 8002bce:	2904      	cmp	r1, #4
 8002bd0:	d8c8      	bhi.n	8002b64 <partition_mode+0x144>
 8002bd2:	3101      	adds	r1, #1
 8002bd4:	e7c5      	b.n	8002b62 <partition_mode+0x142>
			ptionE = temp;
 8002bd6:	4e2a      	ldr	r6, [pc, #168]	; (8002c80 <partition_mode+0x260>)
 8002bd8:	0021      	movs	r1, r4
 8002bda:	2202      	movs	r2, #2
 8002bdc:	0030      	movs	r0, r6
 8002bde:	f002 fb69 	bl	80052b4 <memcpy>
			min.x = ptionS.x > ptionE.x ? ptionE.x : ptionS.x;
 8002be2:	7838      	ldrb	r0, [r7, #0]
 8002be4:	7831      	ldrb	r1, [r6, #0]
 8002be6:	1c03      	adds	r3, r0, #0
 8002be8:	4288      	cmp	r0, r1
 8002bea:	d900      	bls.n	8002bee <partition_mode+0x1ce>
 8002bec:	1c0b      	adds	r3, r1, #0
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <partition_mode+0x264>)
 8002bf0:	7013      	strb	r3, [r2, #0]
			min.y = ptionS.y > ptionE.y ? ptionE.y : ptionS.y;
 8002bf2:	787a      	ldrb	r2, [r7, #1]
 8002bf4:	7873      	ldrb	r3, [r6, #1]
 8002bf6:	1c16      	adds	r6, r2, #0
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d900      	bls.n	8002bfe <partition_mode+0x1de>
 8002bfc:	1c1e      	adds	r6, r3, #0
 8002bfe:	4f21      	ldr	r7, [pc, #132]	; (8002c84 <partition_mode+0x264>)
 8002c00:	707e      	strb	r6, [r7, #1]
			max.x = ptionS.x > ptionE.x ? ptionS.x : ptionE.x;
 8002c02:	4e21      	ldr	r6, [pc, #132]	; (8002c88 <partition_mode+0x268>)
 8002c04:	1c07      	adds	r7, r0, #0
 8002c06:	4288      	cmp	r0, r1
 8002c08:	d200      	bcs.n	8002c0c <partition_mode+0x1ec>
 8002c0a:	1c0f      	adds	r7, r1, #0
 8002c0c:	7037      	strb	r7, [r6, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 8002c0e:	1c11      	adds	r1, r2, #0
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d200      	bcs.n	8002c16 <partition_mode+0x1f6>
 8002c14:	1c19      	adds	r1, r3, #0
			{ ledM = 1; partition_save(); ledM = 0; }
 8002c16:	2301      	movs	r3, #1
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 8002c18:	7071      	strb	r1, [r6, #1]
			{ ledM = 1; partition_save(); ledM = 0; }
 8002c1a:	4e1c      	ldr	r6, [pc, #112]	; (8002c8c <partition_mode+0x26c>)
 8002c1c:	7033      	strb	r3, [r6, #0]
 8002c1e:	f7ff fe25 	bl	800286c <partition_save>
 8002c22:	2300      	movs	r3, #0
			init_value;
 8002c24:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <partition_mode+0x270>)
			{ ledM = 1; partition_save(); ledM = 0; }
 8002c26:	7033      	strb	r3, [r6, #0]
			init_value;
 8002c28:	7013      	strb	r3, [r2, #0]
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <partition_mode+0x274>)
 8002c2c:	7063      	strb	r3, [r4, #1]
 8002c2e:	7013      	strb	r3, [r2, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <partition_mode+0x278>)
 8002c32:	7023      	strb	r3, [r4, #0]
 8002c34:	7013      	strb	r3, [r2, #0]
 8002c36:	4a01      	ldr	r2, [pc, #4]	; (8002c3c <partition_mode+0x21c>)
 8002c38:	7013      	strb	r3, [r2, #0]
 8002c3a:	e7b4      	b.n	8002ba6 <partition_mode+0x186>
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	08005c14 	.word	0x08005c14
 8002c44:	20001039 	.word	0x20001039
 8002c48:	08006893 	.word	0x08006893
 8002c4c:	080068a1 	.word	0x080068a1
 8002c50:	2000103e 	.word	0x2000103e
 8002c54:	200009d8 	.word	0x200009d8
 8002c58:	080068ad 	.word	0x080068ad
 8002c5c:	08006741 	.word	0x08006741
 8002c60:	08006953 	.word	0x08006953
 8002c64:	080068ba 	.word	0x080068ba
 8002c68:	080068cd 	.word	0x080068cd
 8002c6c:	08006888 	.word	0x08006888
 8002c70:	200009b8 	.word	0x200009b8
 8002c74:	200009ae 	.word	0x200009ae
 8002c78:	00000dac 	.word	0x00000dac
 8002c7c:	20001037 	.word	0x20001037
 8002c80:	20001035 	.word	0x20001035
 8002c84:	200009d4 	.word	0x200009d4
 8002c88:	200009d2 	.word	0x200009d2
 8002c8c:	200009d0 	.word	0x200009d0
 8002c90:	200009cc 	.word	0x200009cc
 8002c94:	200009ac 	.word	0x200009ac
 8002c98:	2000103b 	.word	0x2000103b

08002c9c <log_detail>:

void log_detail(uint8_t i){
 8002c9c:	b510      	push	{r4, lr}
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 8002c9e:	4912      	ldr	r1, [pc, #72]	; (8002ce8 <log_detail+0x4c>)
void log_detail(uint8_t i){
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	0004      	movs	r4, r0
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	3118      	adds	r1, #24
 8002ca8:	a803      	add	r0, sp, #12
 8002caa:	f002 fb03 	bl	80052b4 <memcpy>
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 8002cae:	204a      	movs	r0, #74	; 0x4a
 8002cb0:	4360      	muls	r0, r4
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <log_detail+0x50>)
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <log_detail+0x54>)
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 8002cb6:	18c2      	adds	r2, r0, r3
 8002cb8:	9205      	str	r2, [sp, #20]
 8002cba:	0002      	movs	r2, r0
 8002cbc:	3034      	adds	r0, #52	; 0x34
 8002cbe:	321e      	adds	r2, #30
 8002cc0:	18d2      	adds	r2, r2, r3
 8002cc2:	18c0      	adds	r0, r0, r3
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 8002cc4:	2303      	movs	r3, #3
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 8002cc6:	9206      	str	r2, [sp, #24]
 8002cc8:	9007      	str	r0, [sp, #28]
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	aa05      	add	r2, sp, #20
 8002cce:	3b02      	subs	r3, #2
 8002cd0:	a803      	add	r0, sp, #12
 8002cd2:	f7fe fa9f 	bl	8001214 <array_puts>
	SSD1306_UpdateScreen();
 8002cd6:	f7fe f8b3 	bl	8000e40 <SSD1306_UpdateScreen>
	while(!read_sw());
 8002cda:	f7fe fb45 	bl	8001368 <read_sw>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d0fb      	beq.n	8002cda <log_detail+0x3e>
}
 8002ce2:	b008      	add	sp, #32
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	08005c14 	.word	0x08005c14
 8002cec:	20000e58 	.word	0x20000e58
 8002cf0:	080068de 	.word	0x080068de

08002cf4 <log_mode>:

void log_mode(void){
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t log_num;
	if(!firF){
 8002cf6:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <log_mode+0x10c>)
 8002cf8:	4d42      	ldr	r5, [pc, #264]	; (8002e04 <log_mode+0x110>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	4e42      	ldr	r6, [pc, #264]	; (8002e08 <log_mode+0x114>)
void log_mode(void){
 8002cfe:	b0bd      	sub	sp, #244	; 0xf4
	if(!firF){
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d13d      	bne.n	8002d80 <log_mode+0x8c>
		firF = 1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	493e      	ldr	r1, [pc, #248]	; (8002e00 <log_mode+0x10c>)
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002d08:	ac04      	add	r4, sp, #16
		firF = 1;
 8002d0a:	700b      	strb	r3, [r1, #0]
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002d0c:	7829      	ldrb	r1, [r5, #0]
 8002d0e:	70a3      	strb	r3, [r4, #2]
 8002d10:	3102      	adds	r1, #2
 8002d12:	7061      	strb	r1, [r4, #1]
 8002d14:	2102      	movs	r1, #2
 8002d16:	70e1      	strb	r1, [r4, #3]
 8002d18:	18c9      	adds	r1, r1, r3
 8002d1a:	7161      	strb	r1, [r4, #5]
 8002d1c:	18c9      	adds	r1, r1, r3
 8002d1e:	71e1      	strb	r1, [r4, #7]
 8002d20:	18c9      	adds	r1, r1, r3
 8002d22:	7123      	strb	r3, [r4, #4]
 8002d24:	71a3      	strb	r3, [r4, #6]
 8002d26:	7223      	strb	r3, [r4, #8]
 8002d28:	7261      	strb	r1, [r4, #9]
 8002d2a:	72a3      	strb	r3, [r4, #10]
 8002d2c:	18c9      	adds	r1, r1, r3
 8002d2e:	7323      	strb	r3, [r4, #12]
 8002d30:	4f36      	ldr	r7, [pc, #216]	; (8002e0c <log_mode+0x118>)
 8002d32:	3306      	adds	r3, #6
 8002d34:	7022      	strb	r2, [r4, #0]
 8002d36:	72e1      	strb	r1, [r4, #11]
 8002d38:	7363      	strb	r3, [r4, #13]
		char bf[6][30];
		log_num = 0;
 8002d3a:	7032      	strb	r2, [r6, #0]
 8002d3c:	9203      	str	r2, [sp, #12]
		for(uint8_t i = 0 ; i < 6 ; i++){
			if(!strlen(ptLog[i].title)) break;
 8002d3e:	783b      	ldrb	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d14b      	bne.n	8002ddc <log_mode+0xe8>
			sprintf(bf[i], "%s", ptLog[i].title);
			log_num++;
		}
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <log_mode+0x11c>)
 8002d46:	aa02      	add	r2, sp, #8
 8002d48:	9308      	str	r3, [sp, #32]
 8002d4a:	ab0f      	add	r3, sp, #60	; 0x3c
 8002d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d4e:	2352      	movs	r3, #82	; 0x52
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	930a      	str	r3, [sp, #40]	; 0x28
 8002d54:	ab1e      	add	r3, sp, #120	; 0x78
 8002d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d58:	238e      	movs	r3, #142	; 0x8e
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8002d5e:	ab2d      	add	r3, sp, #180	; 0xb4
 8002d60:	930d      	str	r3, [sp, #52]	; 0x34
 8002d62:	23ca      	movs	r3, #202	; 0xca
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	930e      	str	r3, [sp, #56]	; 0x38
		array_puts(pos, "#Log", array, 1, log_num + 1);
 8002d68:	7833      	ldrb	r3, [r6, #0]
 8002d6a:	0020      	movs	r0, r4
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4928      	ldr	r1, [pc, #160]	; (8002e14 <log_mode+0x120>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	aa08      	add	r2, sp, #32
 8002d76:	2301      	movs	r3, #1
 8002d78:	f7fe fa4c 	bl	8001214 <array_puts>
		SSD1306_UpdateScreen();
 8002d7c:	f7fe f860 	bl	8000e40 <SSD1306_UpdateScreen>
	}
	get_adc();
 8002d80:	f7fe fa90 	bl	80012a4 <get_adc>
	get_sel(&sel, log_num - 1, 0, 2);
 8002d84:	7831      	ldrb	r1, [r6, #0]
 8002d86:	2302      	movs	r3, #2
 8002d88:	3901      	subs	r1, #1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	b2c9      	uxtb	r1, r1
 8002d90:	f7fe fab4 	bl	80012fc <get_sel>
	if(joy_result != basic) { if(joy_result == left) init_value; joy_result = basic; firF = 0; };
 8002d94:	4c20      	ldr	r4, [pc, #128]	; (8002e18 <log_mode+0x124>)
 8002d96:	7823      	ldrb	r3, [r4, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <log_mode+0xc2>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d106      	bne.n	8002dae <log_mode+0xba>
 8002da0:	2300      	movs	r3, #0
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <log_mode+0x128>)
 8002da4:	702b      	strb	r3, [r5, #0]
 8002da6:	7013      	strb	r3, [r2, #0]
 8002da8:	7053      	strb	r3, [r2, #1]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <log_mode+0x12c>)
 8002dac:	7013      	strb	r3, [r2, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <log_mode+0x10c>)
 8002db2:	7023      	strb	r3, [r4, #0]
 8002db4:	7013      	strb	r3, [r2, #0]

	if(read_sw()) { log_detail(sel); init_value; }
 8002db6:	f7fe fad7 	bl	8001368 <read_sw>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d00c      	beq.n	8002dd8 <log_mode+0xe4>
 8002dbe:	7828      	ldrb	r0, [r5, #0]
 8002dc0:	f7ff ff6c 	bl	8002c9c <log_detail>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <log_mode+0x128>)
 8002dc8:	7023      	strb	r3, [r4, #0]
 8002dca:	7013      	strb	r3, [r2, #0]
 8002dcc:	7053      	strb	r3, [r2, #1]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <log_mode+0x12c>)
 8002dd0:	702b      	strb	r3, [r5, #0]
 8002dd2:	7013      	strb	r3, [r2, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <log_mode+0x10c>)
 8002dd6:	7013      	strb	r3, [r2, #0]
}
 8002dd8:	b03d      	add	sp, #244	; 0xf4
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(bf[i], "%s", ptLog[i].title);
 8002ddc:	201e      	movs	r0, #30
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	0039      	movs	r1, r7
 8002de2:	4358      	muls	r0, r3
 8002de4:	ab0f      	add	r3, sp, #60	; 0x3c
 8002de6:	1818      	adds	r0, r3, r0
 8002de8:	f002 fbc8 	bl	800557c <strcpy>
			log_num++;
 8002dec:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002dee:	374a      	adds	r7, #74	; 0x4a
			log_num++;
 8002df0:	3301      	adds	r3, #1
 8002df2:	7033      	strb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 8002df4:	9b03      	ldr	r3, [sp, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	9303      	str	r3, [sp, #12]
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d19f      	bne.n	8002d3e <log_mode+0x4a>
 8002dfe:	e7a1      	b.n	8002d44 <log_mode+0x50>
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	2000103b 	.word	0x2000103b
 8002e08:	200009d1 	.word	0x200009d1
 8002e0c:	20000e58 	.word	0x20000e58
 8002e10:	0800665b 	.word	0x0800665b
 8002e14:	080068ea 	.word	0x080068ea
 8002e18:	200009cc 	.word	0x200009cc
 8002e1c:	2000103e 	.word	0x2000103e
 8002e20:	200009ac 	.word	0x200009ac

08002e24 <play>:

void (*play_task[6])(void) = { main_menu, save_mode, use_mode, find_mode, partition_mode, log_mode };
void play(void(**vptr)(void)) { vptr[ModeF](); }
 8002e24:	b510      	push	{r4, lr}
 8002e26:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <play+0x10>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	581b      	ldr	r3, [r3, r0]
 8002e2e:	4798      	blx	r3
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	200009ac 	.word	0x200009ac

08002e38 <PSDrawers_Initialized>:

/* Tasks */

void PSDrawers_Initialized(void)
{
 8002e38:	b510      	push	{r4, lr}
	SSD1306_Init();
 8002e3a:	f7fe f823 	bl	8000e84 <SSD1306_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8002e3e:	480b      	ldr	r0, [pc, #44]	; (8002e6c <PSDrawers_Initialized+0x34>)
 8002e40:	f002 f868 	bl	8004f14 <HAL_TIM_Base_Start_IT>

	/* Write user code here */
	if(start()) time_setting();
 8002e44:	f7fe fda2 	bl	800198c <start>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d001      	beq.n	8002e50 <PSDrawers_Initialized+0x18>
 8002e4c:	f7fe fe00 	bl	8001a50 <time_setting>
	init_value;
 8002e50:	2300      	movs	r3, #0
 8002e52:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <PSDrawers_Initialized+0x38>)
 8002e54:	7013      	strb	r3, [r2, #0]
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <PSDrawers_Initialized+0x3c>)
 8002e58:	7013      	strb	r3, [r2, #0]
 8002e5a:	7053      	strb	r3, [r2, #1]
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <PSDrawers_Initialized+0x40>)
 8002e5e:	7013      	strb	r3, [r2, #0]
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <PSDrawers_Initialized+0x44>)
 8002e62:	7013      	strb	r3, [r2, #0]
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <PSDrawers_Initialized+0x48>)
 8002e66:	7013      	strb	r3, [r2, #0]
}
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000560 	.word	0x20000560
 8002e70:	200009cc 	.word	0x200009cc
 8002e74:	2000103e 	.word	0x2000103e
 8002e78:	200009ac 	.word	0x200009ac
 8002e7c:	2000103b 	.word	0x2000103b
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <PSDrawers_Main>:

void PSDrawers_Main(void)
{
 8002e84:	b510      	push	{r4, lr}
	while(1)
	{
		/* Write user code here */
//		play_task[ModeF]();
		play(play_task);
 8002e86:	4802      	ldr	r0, [pc, #8]	; (8002e90 <PSDrawers_Main+0xc>)
 8002e88:	f7ff ffcc 	bl	8002e24 <play>
	while(1)
 8002e8c:	e7fb      	b.n	8002e86 <PSDrawers_Main+0x2>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000010 	.word	0x20000010

08002e94 <HAL_TIM_PeriodElapsedCallback>:

/* Callbacks */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	6802      	ldr	r2, [r0, #0]
{
 8002e98:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM2)
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d14a      	bne.n	8002f36 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_ADC_Start(&hadc);
 8002ea0:	4c2d      	ldr	r4, [pc, #180]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002ea2:	0020      	movs	r0, r4
 8002ea4:	f000 fa7e 	bl	80033a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002ea8:	210a      	movs	r1, #10
 8002eaa:	0020      	movs	r0, r4
 8002eac:	f000 fac4 	bl	8003438 <HAL_ADC_PollForConversion>
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f000 fb25 	bl	8003500 <HAL_ADC_GetValue>
 8002eb6:	4d29      	ldr	r5, [pc, #164]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8002eb8:	210a      	movs	r1, #10
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002eba:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8002ebc:	0020      	movs	r0, r4
 8002ebe:	f000 fabb 	bl	8003438 <HAL_ADC_PollForConversion>
		adcV[1] = HAL_ADC_GetValue(&hadc);
 8002ec2:	0020      	movs	r0, r4
 8002ec4:	f000 fb1c 	bl	8003500 <HAL_ADC_GetValue>
 8002ec8:	8068      	strh	r0, [r5, #2]
		HAL_ADC_Stop(&hadc);
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f000 fa96 	bl	80033fc <HAL_ADC_Stop>

		cnt++;
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0xcc>)

		if(buzM) buzC++;
 8002ed2:	4d24      	ldr	r5, [pc, #144]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		cnt++;
 8002ed4:	8813      	ldrh	r3, [r2, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	8013      	strh	r3, [r2, #0]
		if(buzM) buzC++;
 8002eda:	782a      	ldrb	r2, [r5, #0]
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x86>
 8002ee0:	4c21      	ldr	r4, [pc, #132]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002ee2:	8823      	ldrh	r3, [r4, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8023      	strh	r3, [r4, #0]
		if(buzM == 1){
 8002eea:	2a01      	cmp	r2, #1
 8002eec:	d109      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(buzC < 500) BUZ(1);
 8002eee:	21fa      	movs	r1, #250	; 0xfa
 8002ef0:	0049      	lsls	r1, r1, #1
 8002ef2:	428b      	cmp	r3, r1
 8002ef4:	d220      	bcs.n	8002f38 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002ef6:	39ed      	subs	r1, #237	; 0xed
 8002ef8:	39ff      	subs	r1, #255	; 0xff
			else { buzM = buzC = 0; BUZ(0); }
 8002efa:	20a0      	movs	r0, #160	; 0xa0
 8002efc:	05c0      	lsls	r0, r0, #23
 8002efe:	f000 fe19 	bl	8003b34 <HAL_GPIO_WritePin>
		}
		if(buzM == 2){
 8002f02:	782b      	ldrb	r3, [r5, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d108      	bne.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x86>
			if(buzC < 25) BUZ(1);
 8002f08:	8823      	ldrh	r3, [r4, #0]
 8002f0a:	2b18      	cmp	r3, #24
 8002f0c:	d819      	bhi.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0xae>
 8002f0e:	2201      	movs	r2, #1
			else if(buzC < 50) BUZ(0);
			else if(buzC < 75) BUZ(1);
			else { buzM = buzC = 0; BUZ(0); }
 8002f10:	20a0      	movs	r0, #160	; 0xa0
 8002f12:	2108      	movs	r1, #8
 8002f14:	05c0      	lsls	r0, r0, #23
 8002f16:	f000 fe0d 	bl	8003b34 <HAL_GPIO_WritePin>
		}
		if(ledM) ledC = ledC < 1000 ? ledC + 1 : 0;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d017      	beq.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002f24:	20fa      	movs	r0, #250	; 0xfa
 8002f26:	8813      	ldrh	r3, [r2, #0]
 8002f28:	2100      	movs	r1, #0
 8002f2a:	0080      	lsls	r0, r0, #2
 8002f2c:	4283      	cmp	r3, r0
 8002f2e:	d201      	bcs.n	8002f34 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002f30:	3301      	adds	r3, #1
 8002f32:	b299      	uxth	r1, r3
 8002f34:	8011      	strh	r1, [r2, #0]
		else ledC = 0;
	}
}
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
			else { buzM = buzC = 0; BUZ(0); }
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2108      	movs	r1, #8
 8002f3c:	8022      	strh	r2, [r4, #0]
 8002f3e:	702a      	strb	r2, [r5, #0]
 8002f40:	e7db      	b.n	8002efa <HAL_TIM_PeriodElapsedCallback+0x66>
			else if(buzC < 50) BUZ(0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2b31      	cmp	r3, #49	; 0x31
 8002f46:	d9e3      	bls.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(buzC < 75) BUZ(1);
 8002f48:	2b4a      	cmp	r3, #74	; 0x4a
 8002f4a:	d9e0      	bls.n	8002f0e <HAL_TIM_PeriodElapsedCallback+0x7a>
			else { buzM = buzC = 0; BUZ(0); }
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	8022      	strh	r2, [r4, #0]
 8002f50:	702a      	strb	r2, [r5, #0]
 8002f52:	e7dd      	b.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x7c>
		else ledC = 0;
 8002f54:	8013      	strh	r3, [r2, #0]
}
 8002f56:	e7ee      	b.n	8002f36 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002f58:	20000418 	.word	0x20000418
 8002f5c:	200009ae 	.word	0x200009ae
 8002f60:	200009b8 	.word	0x200009b8
 8002f64:	200009b4 	.word	0x200009b4
 8002f68:	200009b2 	.word	0x200009b2
 8002f6c:	200009d0 	.word	0x200009d0
 8002f70:	200009ce 	.word	0x200009ce

08002f74 <Reset_Handler>:
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <LoopForever+0x2>)
 8002f76:	4685      	mov	sp, r0
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <LoopForever+0x6>)
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <LoopForever+0xa>)
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <LoopForever+0xe>)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:
 8002f82:	58d4      	ldr	r4, [r2, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:
 8002f88:	18c4      	adds	r4, r0, r3
 8002f8a:	428c      	cmp	r4, r1
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <LoopForever+0x12>)
 8002f90:	4c0b      	ldr	r4, [pc, #44]	; (8002fc0 <LoopForever+0x16>)
 8002f92:	2300      	movs	r3, #0
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:
 8002f9a:	42a2      	cmp	r2, r4
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>
 8002f9e:	f7fe f927 	bl	80011f0 <SystemInit>
 8002fa2:	f002 f959 	bl	8005258 <__libc_init_array>
 8002fa6:	f7fd fc71 	bl	800088c <main>

08002faa <LoopForever>:
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
 8002fac:	20002000 	.word	0x20002000
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000098 	.word	0x20000098
 8002fb8:	080069e4 	.word	0x080069e4
 8002fbc:	20000098 	.word	0x20000098
 8002fc0:	20001070 	.word	0x20001070

08002fc4 <ADC1_COMP_IRQHandler>:
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_COMP_IRQHandler>
	...

08002fc8 <HAL_InitTick>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	0005      	movs	r5, r0
 8002fcc:	20fa      	movs	r0, #250	; 0xfa
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_InitTick+0x3c>)
 8002fd0:	0080      	lsls	r0, r0, #2
 8002fd2:	7819      	ldrb	r1, [r3, #0]
 8002fd4:	f7fd f8b6 	bl	8000144 <__udivsi3>
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_InitTick+0x40>)
 8002fda:	0001      	movs	r1, r0
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	f7fd f8b1 	bl	8000144 <__udivsi3>
 8002fe2:	f000 fb1b 	bl	800361c <HAL_SYSTICK_Config>
 8002fe6:	0004      	movs	r4, r0
 8002fe8:	2001      	movs	r0, #1
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	d109      	bne.n	8003002 <HAL_InitTick+0x3a>
 8002fee:	2d03      	cmp	r5, #3
 8002ff0:	d807      	bhi.n	8003002 <HAL_InitTick+0x3a>
 8002ff2:	3802      	subs	r0, #2
 8002ff4:	0022      	movs	r2, r4
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	f000 fada 	bl	80035b0 <HAL_NVIC_SetPriority>
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_InitTick+0x44>)
 8003000:	601d      	str	r5, [r3, #0]
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	2000002f 	.word	0x2000002f
 8003008:	20000008 	.word	0x20000008
 800300c:	20000030 	.word	0x20000030

08003010 <HAL_Init>:
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_Init+0x24>)
 8003014:	b510      	push	{r4, lr}
 8003016:	6811      	ldr	r1, [r2, #0]
 8003018:	2003      	movs	r0, #3
 800301a:	430b      	orrs	r3, r1
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	f7ff ffd3 	bl	8002fc8 <HAL_InitTick>
 8003022:	1e04      	subs	r4, r0, #0
 8003024:	d103      	bne.n	800302e <HAL_Init+0x1e>
 8003026:	f7fd fff3 	bl	8001010 <HAL_MspInit>
 800302a:	0020      	movs	r0, r4
 800302c:	bd10      	pop	{r4, pc}
 800302e:	2401      	movs	r4, #1
 8003030:	e7fb      	b.n	800302a <HAL_Init+0x1a>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_IncTick>:
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_IncTick+0x10>)
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_IncTick+0x14>)
 800303c:	6811      	ldr	r1, [r2, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	185b      	adds	r3, r3, r1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4770      	bx	lr
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	20001044 	.word	0x20001044
 800304c:	2000002f 	.word	0x2000002f

08003050 <HAL_GetTick>:
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <HAL_GetTick+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20001044 	.word	0x20001044

0800305c <HAL_Delay>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	0004      	movs	r4, r0
 8003060:	f7ff fff6 	bl	8003050 <HAL_GetTick>
 8003064:	0005      	movs	r5, r0
 8003066:	1c63      	adds	r3, r4, #1
 8003068:	d002      	beq.n	8003070 <HAL_Delay+0x14>
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <HAL_Delay+0x20>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	18e4      	adds	r4, r4, r3
 8003070:	f7ff ffee 	bl	8003050 <HAL_GetTick>
 8003074:	1b40      	subs	r0, r0, r5
 8003076:	42a0      	cmp	r0, r4
 8003078:	d3fa      	bcc.n	8003070 <HAL_Delay+0x14>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	2000002f 	.word	0x2000002f

08003080 <ADC_DelayMicroSecond>:
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <ADC_DelayMicroSecond+0x24>)
 8003082:	b513      	push	{r0, r1, r4, lr}
 8003084:	0004      	movs	r4, r0
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <ADC_DelayMicroSecond+0x28>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f7fd f85b 	bl	8000144 <__udivsi3>
 800308e:	4344      	muls	r4, r0
 8003090:	9401      	str	r4, [sp, #4]
 8003092:	9b01      	ldr	r3, [sp, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d100      	bne.n	800309a <ADC_DelayMicroSecond+0x1a>
 8003098:	bd13      	pop	{r0, r1, r4, pc}
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	3b01      	subs	r3, #1
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	e7f7      	b.n	8003092 <ADC_DelayMicroSecond+0x12>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	20000008 	.word	0x20000008
 80030a8:	000f4240 	.word	0x000f4240

080030ac <ADC_Disable>:
 80030ac:	2103      	movs	r1, #3
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0004      	movs	r4, r0
 80030b4:	6898      	ldr	r0, [r3, #8]
 80030b6:	4008      	ands	r0, r1
 80030b8:	2801      	cmp	r0, #1
 80030ba:	d001      	beq.n	80030c0 <ADC_Disable+0x14>
 80030bc:	2000      	movs	r0, #0
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4202      	tst	r2, r0
 80030c4:	d0fa      	beq.n	80030bc <ADC_Disable+0x10>
 80030c6:	2205      	movs	r2, #5
 80030c8:	689d      	ldr	r5, [r3, #8]
 80030ca:	4015      	ands	r5, r2
 80030cc:	2d01      	cmp	r5, #1
 80030ce:	d11d      	bne.n	800310c <ADC_Disable+0x60>
 80030d0:	6898      	ldr	r0, [r3, #8]
 80030d2:	3a03      	subs	r2, #3
 80030d4:	4302      	orrs	r2, r0
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	6019      	str	r1, [r3, #0]
 80030da:	f7ff ffb9 	bl	8003050 <HAL_GetTick>
 80030de:	0006      	movs	r6, r0
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	422b      	tst	r3, r5
 80030e6:	d0e9      	beq.n	80030bc <ADC_Disable+0x10>
 80030e8:	f7ff ffb2 	bl	8003050 <HAL_GetTick>
 80030ec:	1b80      	subs	r0, r0, r6
 80030ee:	280a      	cmp	r0, #10
 80030f0:	d9f6      	bls.n	80030e0 <ADC_Disable+0x34>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	422b      	tst	r3, r5
 80030f8:	d0f2      	beq.n	80030e0 <ADC_Disable+0x34>
 80030fa:	2310      	movs	r3, #16
 80030fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030fe:	2001      	movs	r0, #1
 8003100:	4313      	orrs	r3, r2
 8003102:	6563      	str	r3, [r4, #84]	; 0x54
 8003104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003106:	431d      	orrs	r5, r3
 8003108:	65a5      	str	r5, [r4, #88]	; 0x58
 800310a:	e7d8      	b.n	80030be <ADC_Disable+0x12>
 800310c:	2310      	movs	r3, #16
 800310e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003110:	4313      	orrs	r3, r2
 8003112:	6563      	str	r3, [r4, #84]	; 0x54
 8003114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003116:	4303      	orrs	r3, r0
 8003118:	65a3      	str	r3, [r4, #88]	; 0x58
 800311a:	e7d0      	b.n	80030be <ADC_Disable+0x12>

0800311c <ADC_Enable>:
 800311c:	2103      	movs	r1, #3
 800311e:	6803      	ldr	r3, [r0, #0]
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	0004      	movs	r4, r0
 8003126:	400a      	ands	r2, r1
 8003128:	2a01      	cmp	r2, #1
 800312a:	d104      	bne.n	8003136 <ADC_Enable+0x1a>
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	4211      	tst	r1, r2
 8003130:	d001      	beq.n	8003136 <ADC_Enable+0x1a>
 8003132:	2000      	movs	r0, #0
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <ADC_Enable+0x74>)
 800313a:	4211      	tst	r1, r2
 800313c:	d008      	beq.n	8003150 <ADC_Enable+0x34>
 800313e:	2310      	movs	r3, #16
 8003140:	2001      	movs	r0, #1
 8003142:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003144:	4313      	orrs	r3, r2
 8003146:	6563      	str	r3, [r4, #84]	; 0x54
 8003148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800314a:	4303      	orrs	r3, r0
 800314c:	65a3      	str	r3, [r4, #88]	; 0x58
 800314e:	e7f1      	b.n	8003134 <ADC_Enable+0x18>
 8003150:	2501      	movs	r5, #1
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	0028      	movs	r0, r5
 8003156:	432a      	orrs	r2, r5
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	f7ff ff91 	bl	8003080 <ADC_DelayMicroSecond>
 800315e:	f7ff ff77 	bl	8003050 <HAL_GetTick>
 8003162:	0006      	movs	r6, r0
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	422b      	tst	r3, r5
 800316a:	d1e2      	bne.n	8003132 <ADC_Enable+0x16>
 800316c:	f7ff ff70 	bl	8003050 <HAL_GetTick>
 8003170:	1b80      	subs	r0, r0, r6
 8003172:	280a      	cmp	r0, #10
 8003174:	d9f6      	bls.n	8003164 <ADC_Enable+0x48>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	422b      	tst	r3, r5
 800317c:	d1f2      	bne.n	8003164 <ADC_Enable+0x48>
 800317e:	2310      	movs	r3, #16
 8003180:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003182:	2001      	movs	r0, #1
 8003184:	4313      	orrs	r3, r2
 8003186:	6563      	str	r3, [r4, #84]	; 0x54
 8003188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800318a:	431d      	orrs	r5, r3
 800318c:	65a5      	str	r5, [r4, #88]	; 0x58
 800318e:	e7d1      	b.n	8003134 <ADC_Enable+0x18>
 8003190:	80000017 	.word	0x80000017

08003194 <ADC_ConversionStop>:
 8003194:	2204      	movs	r2, #4
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	0004      	movs	r4, r0
 800319e:	4211      	tst	r1, r2
 80031a0:	d101      	bne.n	80031a6 <ADC_ConversionStop+0x12>
 80031a2:	2000      	movs	r0, #0
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	4211      	tst	r1, r2
 80031aa:	d006      	beq.n	80031ba <ADC_ConversionStop+0x26>
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	0792      	lsls	r2, r2, #30
 80031b0:	d403      	bmi.n	80031ba <ADC_ConversionStop+0x26>
 80031b2:	2210      	movs	r2, #16
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	f7ff ff49 	bl	8003050 <HAL_GetTick>
 80031be:	2604      	movs	r6, #4
 80031c0:	0005      	movs	r5, r0
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4233      	tst	r3, r6
 80031c8:	d0eb      	beq.n	80031a2 <ADC_ConversionStop+0xe>
 80031ca:	f7ff ff41 	bl	8003050 <HAL_GetTick>
 80031ce:	1b40      	subs	r0, r0, r5
 80031d0:	280a      	cmp	r0, #10
 80031d2:	d9f6      	bls.n	80031c2 <ADC_ConversionStop+0x2e>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4233      	tst	r3, r6
 80031da:	d0f2      	beq.n	80031c2 <ADC_ConversionStop+0x2e>
 80031dc:	2310      	movs	r3, #16
 80031de:	2001      	movs	r0, #1
 80031e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031e2:	4313      	orrs	r3, r2
 80031e4:	6563      	str	r3, [r4, #84]	; 0x54
 80031e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031e8:	4303      	orrs	r3, r0
 80031ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80031ec:	e7da      	b.n	80031a4 <ADC_ConversionStop+0x10>
	...

080031f0 <HAL_ADC_Init>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	0004      	movs	r4, r0
 80031f4:	2001      	movs	r0, #1
 80031f6:	2c00      	cmp	r4, #0
 80031f8:	d01b      	beq.n	8003232 <HAL_ADC_Init+0x42>
 80031fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_ADC_Init+0x1e>
 8003200:	0022      	movs	r2, r4
 8003202:	3250      	adds	r2, #80	; 0x50
 8003204:	65a3      	str	r3, [r4, #88]	; 0x58
 8003206:	0020      	movs	r0, r4
 8003208:	7013      	strb	r3, [r2, #0]
 800320a:	f7fd ff0f 	bl	800102c <HAL_ADC_MspInit>
 800320e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003210:	06db      	lsls	r3, r3, #27
 8003212:	d406      	bmi.n	8003222 <HAL_ADC_Init+0x32>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	2204      	movs	r2, #4
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	0008      	movs	r0, r1
 800321c:	4010      	ands	r0, r2
 800321e:	4211      	tst	r1, r2
 8003220:	d008      	beq.n	8003234 <HAL_ADC_Init+0x44>
 8003222:	2310      	movs	r3, #16
 8003224:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003226:	2001      	movs	r0, #1
 8003228:	4313      	orrs	r3, r2
 800322a:	6563      	str	r3, [r4, #84]	; 0x54
 800322c:	2300      	movs	r3, #0
 800322e:	3450      	adds	r4, #80	; 0x50
 8003230:	7023      	strb	r3, [r4, #0]
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003236:	4955      	ldr	r1, [pc, #340]	; (800338c <HAL_ADC_Init+0x19c>)
 8003238:	4011      	ands	r1, r2
 800323a:	2202      	movs	r2, #2
 800323c:	430a      	orrs	r2, r1
 800323e:	6562      	str	r2, [r4, #84]	; 0x54
 8003240:	2203      	movs	r2, #3
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	4011      	ands	r1, r2
 8003246:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_ADC_Init+0x1a0>)
 8003248:	2901      	cmp	r1, #1
 800324a:	d102      	bne.n	8003252 <HAL_ADC_Init+0x62>
 800324c:	681d      	ldr	r5, [r3, #0]
 800324e:	420d      	tst	r5, r1
 8003250:	d119      	bne.n	8003286 <HAL_ADC_Init+0x96>
 8003252:	2680      	movs	r6, #128	; 0x80
 8003254:	6861      	ldr	r1, [r4, #4]
 8003256:	05f6      	lsls	r6, r6, #23
 8003258:	004d      	lsls	r5, r1, #1
 800325a:	086d      	lsrs	r5, r5, #1
 800325c:	42b5      	cmp	r5, r6
 800325e:	d003      	beq.n	8003268 <HAL_ADC_Init+0x78>
 8003260:	2580      	movs	r5, #128	; 0x80
 8003262:	062d      	lsls	r5, r5, #24
 8003264:	42a9      	cmp	r1, r5
 8003266:	d176      	bne.n	8003356 <HAL_ADC_Init+0x166>
 8003268:	691d      	ldr	r5, [r3, #16]
 800326a:	00ad      	lsls	r5, r5, #2
 800326c:	08ad      	lsrs	r5, r5, #2
 800326e:	611d      	str	r5, [r3, #16]
 8003270:	691d      	ldr	r5, [r3, #16]
 8003272:	4329      	orrs	r1, r5
 8003274:	6119      	str	r1, [r3, #16]
 8003276:	2518      	movs	r5, #24
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	43a9      	bics	r1, r5
 800327c:	60d9      	str	r1, [r3, #12]
 800327e:	68d9      	ldr	r1, [r3, #12]
 8003280:	68a5      	ldr	r5, [r4, #8]
 8003282:	4329      	orrs	r1, r5
 8003284:	60d9      	str	r1, [r3, #12]
 8003286:	6811      	ldr	r1, [r2, #0]
 8003288:	4d42      	ldr	r5, [pc, #264]	; (8003394 <HAL_ADC_Init+0x1a4>)
 800328a:	4029      	ands	r1, r5
 800328c:	6011      	str	r1, [r2, #0]
 800328e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003290:	6815      	ldr	r5, [r2, #0]
 8003292:	0649      	lsls	r1, r1, #25
 8003294:	4329      	orrs	r1, r5
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	0552      	lsls	r2, r2, #21
 800329e:	4211      	tst	r1, r2
 80032a0:	d102      	bne.n	80032a8 <HAL_ADC_Init+0xb8>
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	493b      	ldr	r1, [pc, #236]	; (8003398 <HAL_ADC_Init+0x1a8>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	68dd      	ldr	r5, [r3, #12]
 80032b4:	68e2      	ldr	r2, [r4, #12]
 80032b6:	2902      	cmp	r1, #2
 80032b8:	d100      	bne.n	80032bc <HAL_ADC_Init+0xcc>
 80032ba:	2004      	movs	r0, #4
 80032bc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80032be:	1c61      	adds	r1, r4, #1
 80032c0:	4332      	orrs	r2, r6
 80032c2:	432a      	orrs	r2, r5
 80032c4:	69a5      	ldr	r5, [r4, #24]
 80032c6:	7fc9      	ldrb	r1, [r1, #31]
 80032c8:	03ad      	lsls	r5, r5, #14
 80032ca:	432a      	orrs	r2, r5
 80032cc:	69e5      	ldr	r5, [r4, #28]
 80032ce:	03ed      	lsls	r5, r5, #15
 80032d0:	432a      	orrs	r2, r5
 80032d2:	034d      	lsls	r5, r1, #13
 80032d4:	432a      	orrs	r2, r5
 80032d6:	0025      	movs	r5, r4
 80032d8:	352c      	adds	r5, #44	; 0x2c
 80032da:	782d      	ldrb	r5, [r5, #0]
 80032dc:	006d      	lsls	r5, r5, #1
 80032de:	432a      	orrs	r2, r5
 80032e0:	4302      	orrs	r2, r0
 80032e2:	20c2      	movs	r0, #194	; 0xc2
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032e8:	30ff      	adds	r0, #255	; 0xff
 80032ea:	4282      	cmp	r2, r0
 80032ec:	d004      	beq.n	80032f8 <HAL_ADC_Init+0x108>
 80032ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80032f0:	68d8      	ldr	r0, [r3, #12]
 80032f2:	432a      	orrs	r2, r5
 80032f4:	4302      	orrs	r2, r0
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	1ca2      	adds	r2, r4, #2
 80032fa:	7fd2      	ldrb	r2, [r2, #31]
 80032fc:	2a01      	cmp	r2, #1
 80032fe:	d106      	bne.n	800330e <HAL_ADC_Init+0x11e>
 8003300:	2900      	cmp	r1, #0
 8003302:	d134      	bne.n	800336e <HAL_ADC_Init+0x17e>
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	0252      	lsls	r2, r2, #9
 800330a:	430a      	orrs	r2, r1
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	2901      	cmp	r1, #1
 8003314:	d133      	bne.n	800337e <HAL_ADC_Init+0x18e>
 8003316:	4821      	ldr	r0, [pc, #132]	; (800339c <HAL_ADC_Init+0x1ac>)
 8003318:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800331a:	4002      	ands	r2, r0
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003320:	6918      	ldr	r0, [r3, #16]
 8003322:	432a      	orrs	r2, r5
 8003324:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003326:	432a      	orrs	r2, r5
 8003328:	4302      	orrs	r2, r0
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	4311      	orrs	r1, r2
 8003330:	6119      	str	r1, [r3, #16]
 8003332:	2107      	movs	r1, #7
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	2000      	movs	r0, #0
 8003338:	438a      	bics	r2, r1
 800333a:	615a      	str	r2, [r3, #20]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003340:	430a      	orrs	r2, r1
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	2203      	movs	r2, #3
 8003346:	65a0      	str	r0, [r4, #88]	; 0x58
 8003348:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800334a:	4393      	bics	r3, r2
 800334c:	001a      	movs	r2, r3
 800334e:	2301      	movs	r3, #1
 8003350:	4313      	orrs	r3, r2
 8003352:	6563      	str	r3, [r4, #84]	; 0x54
 8003354:	e76d      	b.n	8003232 <HAL_ADC_Init+0x42>
 8003356:	691d      	ldr	r5, [r3, #16]
 8003358:	4e11      	ldr	r6, [pc, #68]	; (80033a0 <HAL_ADC_Init+0x1b0>)
 800335a:	00ad      	lsls	r5, r5, #2
 800335c:	08ad      	lsrs	r5, r5, #2
 800335e:	611d      	str	r5, [r3, #16]
 8003360:	6815      	ldr	r5, [r2, #0]
 8003362:	4035      	ands	r5, r6
 8003364:	6015      	str	r5, [r2, #0]
 8003366:	6815      	ldr	r5, [r2, #0]
 8003368:	4329      	orrs	r1, r5
 800336a:	6011      	str	r1, [r2, #0]
 800336c:	e783      	b.n	8003276 <HAL_ADC_Init+0x86>
 800336e:	2120      	movs	r1, #32
 8003370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003372:	4301      	orrs	r1, r0
 8003374:	6561      	str	r1, [r4, #84]	; 0x54
 8003376:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003378:	430a      	orrs	r2, r1
 800337a:	65a2      	str	r2, [r4, #88]	; 0x58
 800337c:	e7c7      	b.n	800330e <HAL_ADC_Init+0x11e>
 800337e:	2101      	movs	r1, #1
 8003380:	420a      	tst	r2, r1
 8003382:	d0d6      	beq.n	8003332 <HAL_ADC_Init+0x142>
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	438a      	bics	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e7d2      	b.n	8003332 <HAL_ADC_Init+0x142>
 800338c:	fffffefd 	.word	0xfffffefd
 8003390:	40012708 	.word	0x40012708
 8003394:	fdffffff 	.word	0xfdffffff
 8003398:	fffe0219 	.word	0xfffe0219
 800339c:	fffffc03 	.word	0xfffffc03
 80033a0:	ffc3ffff 	.word	0xffc3ffff

080033a4 <HAL_ADC_Start>:
 80033a4:	6803      	ldr	r3, [r0, #0]
 80033a6:	b570      	push	{r4, r5, r6, lr}
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0004      	movs	r4, r0
 80033ac:	2002      	movs	r0, #2
 80033ae:	075b      	lsls	r3, r3, #29
 80033b0:	d41a      	bmi.n	80033e8 <HAL_ADC_Start+0x44>
 80033b2:	0025      	movs	r5, r4
 80033b4:	3550      	adds	r5, #80	; 0x50
 80033b6:	782b      	ldrb	r3, [r5, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d015      	beq.n	80033e8 <HAL_ADC_Start+0x44>
 80033bc:	2301      	movs	r3, #1
 80033be:	702b      	strb	r3, [r5, #0]
 80033c0:	69e3      	ldr	r3, [r4, #28]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d111      	bne.n	80033ea <HAL_ADC_Start+0x46>
 80033c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <HAL_ADC_Start+0x54>)
 80033ca:	2000      	movs	r0, #0
 80033cc:	401a      	ands	r2, r3
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4313      	orrs	r3, r2
 80033d4:	221c      	movs	r2, #28
 80033d6:	6563      	str	r3, [r4, #84]	; 0x54
 80033d8:	65a0      	str	r0, [r4, #88]	; 0x58
 80033da:	7028      	strb	r0, [r5, #0]
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	3a18      	subs	r2, #24
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	0020      	movs	r0, r4
 80033ec:	f7ff fe96 	bl	800311c <ADC_Enable>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d0e8      	beq.n	80033c6 <HAL_ADC_Start+0x22>
 80033f4:	e7f8      	b.n	80033e8 <HAL_ADC_Start+0x44>
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	fffff0fe 	.word	0xfffff0fe

080033fc <HAL_ADC_Stop>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	0006      	movs	r6, r0
 8003400:	3650      	adds	r6, #80	; 0x50
 8003402:	7833      	ldrb	r3, [r6, #0]
 8003404:	0004      	movs	r4, r0
 8003406:	2002      	movs	r0, #2
 8003408:	2b01      	cmp	r3, #1
 800340a:	d012      	beq.n	8003432 <HAL_ADC_Stop+0x36>
 800340c:	2501      	movs	r5, #1
 800340e:	0020      	movs	r0, r4
 8003410:	7035      	strb	r5, [r6, #0]
 8003412:	f7ff febf 	bl	8003194 <ADC_ConversionStop>
 8003416:	2800      	cmp	r0, #0
 8003418:	d109      	bne.n	800342e <HAL_ADC_Stop+0x32>
 800341a:	0020      	movs	r0, r4
 800341c:	f7ff fe46 	bl	80030ac <ADC_Disable>
 8003420:	2800      	cmp	r0, #0
 8003422:	d104      	bne.n	800342e <HAL_ADC_Stop+0x32>
 8003424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_ADC_Stop+0x38>)
 8003428:	4013      	ands	r3, r2
 800342a:	431d      	orrs	r5, r3
 800342c:	6565      	str	r5, [r4, #84]	; 0x54
 800342e:	2300      	movs	r3, #0
 8003430:	7033      	strb	r3, [r6, #0]
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	fffffefe 	.word	0xfffffefe

08003438 <HAL_ADC_PollForConversion>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	6945      	ldr	r5, [r0, #20]
 800343c:	0004      	movs	r4, r0
 800343e:	000e      	movs	r6, r1
 8003440:	2d08      	cmp	r5, #8
 8003442:	d00d      	beq.n	8003460 <HAL_ADC_PollForConversion+0x28>
 8003444:	6803      	ldr	r3, [r0, #0]
 8003446:	2001      	movs	r0, #1
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	250c      	movs	r5, #12
 800344c:	4203      	tst	r3, r0
 800344e:	d007      	beq.n	8003460 <HAL_ADC_PollForConversion+0x28>
 8003450:	2320      	movs	r3, #32
 8003452:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003454:	3450      	adds	r4, #80	; 0x50
 8003456:	4313      	orrs	r3, r2
 8003458:	6063      	str	r3, [r4, #4]
 800345a:	2300      	movs	r3, #0
 800345c:	7023      	strb	r3, [r4, #0]
 800345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003460:	f7ff fdf6 	bl	8003050 <HAL_GetTick>
 8003464:	0007      	movs	r7, r0
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4215      	tst	r5, r2
 800346c:	d024      	beq.n	80034b8 <HAL_ADC_PollForConversion+0x80>
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003472:	0092      	lsls	r2, r2, #2
 8003474:	430a      	orrs	r2, r1
 8003476:	6562      	str	r2, [r4, #84]	; 0x54
 8003478:	22c0      	movs	r2, #192	; 0xc0
 800347a:	68d9      	ldr	r1, [r3, #12]
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	4211      	tst	r1, r2
 8003480:	d113      	bne.n	80034aa <HAL_ADC_PollForConversion+0x72>
 8003482:	1c62      	adds	r2, r4, #1
 8003484:	7fd2      	ldrb	r2, [r2, #31]
 8003486:	2a00      	cmp	r2, #0
 8003488:	d10f      	bne.n	80034aa <HAL_ADC_PollForConversion+0x72>
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	0712      	lsls	r2, r2, #28
 800348e:	d50c      	bpl.n	80034aa <HAL_ADC_PollForConversion+0x72>
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	0752      	lsls	r2, r2, #29
 8003494:	d428      	bmi.n	80034e8 <HAL_ADC_PollForConversion+0xb0>
 8003496:	210c      	movs	r1, #12
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	438a      	bics	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_ADC_PollForConversion+0xc4>)
 80034a2:	4011      	ands	r1, r2
 80034a4:	2201      	movs	r2, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	6562      	str	r2, [r4, #84]	; 0x54
 80034aa:	2000      	movs	r0, #0
 80034ac:	69a2      	ldr	r2, [r4, #24]
 80034ae:	4282      	cmp	r2, r0
 80034b0:	d1d5      	bne.n	800345e <HAL_ADC_PollForConversion+0x26>
 80034b2:	220c      	movs	r2, #12
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e7d2      	b.n	800345e <HAL_ADC_PollForConversion+0x26>
 80034b8:	1c72      	adds	r2, r6, #1
 80034ba:	d0d5      	beq.n	8003468 <HAL_ADC_PollForConversion+0x30>
 80034bc:	2e00      	cmp	r6, #0
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_PollForConversion+0xa4>
 80034c0:	002a      	movs	r2, r5
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	401a      	ands	r2, r3
 80034c8:	421d      	tst	r5, r3
 80034ca:	d1cc      	bne.n	8003466 <HAL_ADC_PollForConversion+0x2e>
 80034cc:	2304      	movs	r3, #4
 80034ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80034d0:	3450      	adds	r4, #80	; 0x50
 80034d2:	430b      	orrs	r3, r1
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	2003      	movs	r0, #3
 80034d8:	7022      	strb	r2, [r4, #0]
 80034da:	e7c0      	b.n	800345e <HAL_ADC_PollForConversion+0x26>
 80034dc:	f7ff fdb8 	bl	8003050 <HAL_GetTick>
 80034e0:	1bc0      	subs	r0, r0, r7
 80034e2:	42b0      	cmp	r0, r6
 80034e4:	d8ec      	bhi.n	80034c0 <HAL_ADC_PollForConversion+0x88>
 80034e6:	e7be      	b.n	8003466 <HAL_ADC_PollForConversion+0x2e>
 80034e8:	2220      	movs	r2, #32
 80034ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80034ec:	430a      	orrs	r2, r1
 80034ee:	6562      	str	r2, [r4, #84]	; 0x54
 80034f0:	2201      	movs	r2, #1
 80034f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034f4:	430a      	orrs	r2, r1
 80034f6:	65a2      	str	r2, [r4, #88]	; 0x58
 80034f8:	e7d7      	b.n	80034aa <HAL_ADC_PollForConversion+0x72>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	fffffefe 	.word	0xfffffefe

08003500 <HAL_ADC_GetValue>:
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003504:	4770      	bx	lr
	...

08003508 <HAL_ADC_ConfigChannel>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	0004      	movs	r4, r0
 800350c:	3450      	adds	r4, #80	; 0x50
 800350e:	7822      	ldrb	r2, [r4, #0]
 8003510:	0003      	movs	r3, r0
 8003512:	000d      	movs	r5, r1
 8003514:	2002      	movs	r0, #2
 8003516:	2a01      	cmp	r2, #1
 8003518:	d00b      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x2a>
 800351a:	3801      	subs	r0, #1
 800351c:	7020      	strb	r0, [r4, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	6891      	ldr	r1, [r2, #8]
 8003522:	0749      	lsls	r1, r1, #29
 8003524:	d506      	bpl.n	8003534 <HAL_ADC_ConfigChannel+0x2c>
 8003526:	2220      	movs	r2, #32
 8003528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800352a:	430a      	orrs	r2, r1
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
 800352e:	2300      	movs	r3, #0
 8003530:	7023      	strb	r3, [r4, #0]
 8003532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	6828      	ldr	r0, [r5, #0]
 8003538:	4e19      	ldr	r6, [pc, #100]	; (80035a0 <HAL_ADC_ConfigChannel+0x98>)
 800353a:	686f      	ldr	r7, [r5, #4]
 800353c:	0341      	lsls	r1, r0, #13
 800353e:	02db      	lsls	r3, r3, #11
 8003540:	0b49      	lsrs	r1, r1, #13
 8003542:	4003      	ands	r3, r0
 8003544:	42b7      	cmp	r7, r6
 8003546:	d019      	beq.n	800357c <HAL_ADC_ConfigChannel+0x74>
 8003548:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800354a:	4301      	orrs	r1, r0
 800354c:	6291      	str	r1, [r2, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x5c>
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_ADC_ConfigChannel+0x9c>)
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	6811      	ldr	r1, [r2, #0]
 800355a:	200a      	movs	r0, #10
 800355c:	430b      	orrs	r3, r1
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	f7ff fd8e 	bl	8003080 <ADC_DelayMicroSecond>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	039b      	lsls	r3, r3, #14
 8003568:	d505      	bpl.n	8003576 <HAL_ADC_ConfigChannel+0x6e>
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_ADC_ConfigChannel+0x9c>)
 800356e:	03db      	lsls	r3, r3, #15
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	430b      	orrs	r3, r1
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	2000      	movs	r0, #0
 8003578:	7020      	strb	r0, [r4, #0]
 800357a:	e7da      	b.n	8003532 <HAL_ADC_ConfigChannel+0x2a>
 800357c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800357e:	438d      	bics	r5, r1
 8003580:	6295      	str	r5, [r2, #40]	; 0x28
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x88>
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_ADC_ConfigChannel+0x9c>)
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <HAL_ADC_ConfigChannel+0xa0>)
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	400b      	ands	r3, r1
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	0383      	lsls	r3, r0, #14
 8003592:	d5f0      	bpl.n	8003576 <HAL_ADC_ConfigChannel+0x6e>
 8003594:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <HAL_ADC_ConfigChannel+0x9c>)
 8003596:	4905      	ldr	r1, [pc, #20]	; (80035ac <HAL_ADC_ConfigChannel+0xa4>)
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	400b      	ands	r3, r1
 800359c:	e7ea      	b.n	8003574 <HAL_ADC_ConfigChannel+0x6c>
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	00001001 	.word	0x00001001
 80035a4:	40012708 	.word	0x40012708
 80035a8:	ff7fffff 	.word	0xff7fffff
 80035ac:	ffbfffff 	.word	0xffbfffff

080035b0 <HAL_NVIC_SetPriority>:
 80035b0:	b530      	push	{r4, r5, lr}
 80035b2:	25ff      	movs	r5, #255	; 0xff
 80035b4:	2403      	movs	r4, #3
 80035b6:	002a      	movs	r2, r5
 80035b8:	4004      	ands	r4, r0
 80035ba:	00e4      	lsls	r4, r4, #3
 80035bc:	40a2      	lsls	r2, r4
 80035be:	0189      	lsls	r1, r1, #6
 80035c0:	4029      	ands	r1, r5
 80035c2:	43d2      	mvns	r2, r2
 80035c4:	40a1      	lsls	r1, r4
 80035c6:	b2c3      	uxtb	r3, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	db0a      	blt.n	80035e2 <HAL_NVIC_SetPriority+0x32>
 80035cc:	24c0      	movs	r4, #192	; 0xc0
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_NVIC_SetPriority+0x4c>)
 80035d0:	0880      	lsrs	r0, r0, #2
 80035d2:	0080      	lsls	r0, r0, #2
 80035d4:	18c0      	adds	r0, r0, r3
 80035d6:	00a4      	lsls	r4, r4, #2
 80035d8:	5903      	ldr	r3, [r0, r4]
 80035da:	401a      	ands	r2, r3
 80035dc:	4311      	orrs	r1, r2
 80035de:	5101      	str	r1, [r0, r4]
 80035e0:	bd30      	pop	{r4, r5, pc}
 80035e2:	200f      	movs	r0, #15
 80035e4:	4003      	ands	r3, r0
 80035e6:	3b08      	subs	r3, #8
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <HAL_NVIC_SetPriority+0x50>)
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	181b      	adds	r3, r3, r0
 80035f0:	69d8      	ldr	r0, [r3, #28]
 80035f2:	4002      	ands	r2, r0
 80035f4:	4311      	orrs	r1, r2
 80035f6:	61d9      	str	r1, [r3, #28]
 80035f8:	e7f2      	b.n	80035e0 <HAL_NVIC_SetPriority+0x30>
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	e000e100 	.word	0xe000e100
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <HAL_NVIC_EnableIRQ>:
 8003604:	2800      	cmp	r0, #0
 8003606:	db05      	blt.n	8003614 <HAL_NVIC_EnableIRQ+0x10>
 8003608:	231f      	movs	r3, #31
 800360a:	4018      	ands	r0, r3
 800360c:	3b1e      	subs	r3, #30
 800360e:	4083      	lsls	r3, r0
 8003610:	4a01      	ldr	r2, [pc, #4]	; (8003618 <HAL_NVIC_EnableIRQ+0x14>)
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4770      	bx	lr
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	e000e100 	.word	0xe000e100

0800361c <HAL_SYSTICK_Config>:
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	1e43      	subs	r3, r0, #1
 8003620:	0452      	lsls	r2, r2, #17
 8003622:	2001      	movs	r0, #1
 8003624:	4293      	cmp	r3, r2
 8003626:	d20d      	bcs.n	8003644 <HAL_SYSTICK_Config+0x28>
 8003628:	21c0      	movs	r1, #192	; 0xc0
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <HAL_SYSTICK_Config+0x2c>)
 800362c:	4807      	ldr	r0, [pc, #28]	; (800364c <HAL_SYSTICK_Config+0x30>)
 800362e:	6053      	str	r3, [r2, #4]
 8003630:	6a03      	ldr	r3, [r0, #32]
 8003632:	0609      	lsls	r1, r1, #24
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	430b      	orrs	r3, r1
 800363a:	6203      	str	r3, [r0, #32]
 800363c:	2000      	movs	r0, #0
 800363e:	2307      	movs	r3, #7
 8003640:	6090      	str	r0, [r2, #8]
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4770      	bx	lr
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	e000e010 	.word	0xe000e010
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <HAL_DMA_Init>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	0004      	movs	r4, r0
 8003654:	2001      	movs	r0, #1
 8003656:	2c00      	cmp	r4, #0
 8003658:	d035      	beq.n	80036c6 <HAL_DMA_Init+0x76>
 800365a:	6825      	ldr	r5, [r4, #0]
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_DMA_Init+0x78>)
 800365e:	2114      	movs	r1, #20
 8003660:	18e8      	adds	r0, r5, r3
 8003662:	f7fc fd6f 	bl	8000144 <__udivsi3>
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_DMA_Init+0x7c>)
 8003668:	0080      	lsls	r0, r0, #2
 800366a:	6423      	str	r3, [r4, #64]	; 0x40
 800366c:	2302      	movs	r3, #2
 800366e:	1da2      	adds	r2, r4, #6
 8003670:	6460      	str	r0, [r4, #68]	; 0x44
 8003672:	77d3      	strb	r3, [r2, #31]
 8003674:	682e      	ldr	r6, [r5, #0]
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_DMA_Init+0x80>)
 8003678:	68a1      	ldr	r1, [r4, #8]
 800367a:	401e      	ands	r6, r3
 800367c:	68e3      	ldr	r3, [r4, #12]
 800367e:	6927      	ldr	r7, [r4, #16]
 8003680:	430b      	orrs	r3, r1
 8003682:	433b      	orrs	r3, r7
 8003684:	6967      	ldr	r7, [r4, #20]
 8003686:	433b      	orrs	r3, r7
 8003688:	69a7      	ldr	r7, [r4, #24]
 800368a:	433b      	orrs	r3, r7
 800368c:	69e7      	ldr	r7, [r4, #28]
 800368e:	433b      	orrs	r3, r7
 8003690:	6a27      	ldr	r7, [r4, #32]
 8003692:	433b      	orrs	r3, r7
 8003694:	4333      	orrs	r3, r6
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	01db      	lsls	r3, r3, #7
 800369c:	4299      	cmp	r1, r3
 800369e:	d00c      	beq.n	80036ba <HAL_DMA_Init+0x6a>
 80036a0:	251c      	movs	r5, #28
 80036a2:	4028      	ands	r0, r5
 80036a4:	3d0d      	subs	r5, #13
 80036a6:	4085      	lsls	r5, r0
 80036a8:	490a      	ldr	r1, [pc, #40]	; (80036d4 <HAL_DMA_Init+0x84>)
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	43ab      	bics	r3, r5
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	680d      	ldr	r5, [r1, #0]
 80036b4:	4083      	lsls	r3, r0
 80036b6:	432b      	orrs	r3, r5
 80036b8:	600b      	str	r3, [r1, #0]
 80036ba:	2000      	movs	r0, #0
 80036bc:	2301      	movs	r3, #1
 80036be:	63e0      	str	r0, [r4, #60]	; 0x3c
 80036c0:	3405      	adds	r4, #5
 80036c2:	77d3      	strb	r3, [r2, #31]
 80036c4:	77e0      	strb	r0, [r4, #31]
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	bffdfff8 	.word	0xbffdfff8
 80036cc:	40020000 	.word	0x40020000
 80036d0:	ffff800f 	.word	0xffff800f
 80036d4:	400200a8 	.word	0x400200a8

080036d8 <HAL_DMA_Start_IT>:
 80036d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036da:	1d45      	adds	r5, r0, #5
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	7feb      	ldrb	r3, [r5, #31]
 80036e0:	0004      	movs	r4, r0
 80036e2:	2002      	movs	r0, #2
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d029      	beq.n	800373c <HAL_DMA_Start_IT+0x64>
 80036e8:	2301      	movs	r3, #1
 80036ea:	1da7      	adds	r7, r4, #6
 80036ec:	77eb      	strb	r3, [r5, #31]
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2600      	movs	r6, #0
 80036f2:	469c      	mov	ip, r3
 80036f4:	4660      	mov	r0, ip
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2801      	cmp	r0, #1
 80036fa:	d12a      	bne.n	8003752 <HAL_DMA_Start_IT+0x7a>
 80036fc:	3001      	adds	r0, #1
 80036fe:	77f8      	strb	r0, [r7, #31]
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003704:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8003706:	6805      	ldr	r5, [r0, #0]
 8003708:	361c      	adds	r6, #28
 800370a:	403e      	ands	r6, r7
 800370c:	439d      	bics	r5, r3
 800370e:	40b3      	lsls	r3, r6
 8003710:	6005      	str	r5, [r0, #0]
 8003712:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003714:	606b      	str	r3, [r5, #4]
 8003716:	9b01      	ldr	r3, [sp, #4]
 8003718:	6043      	str	r3, [r0, #4]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	2b10      	cmp	r3, #16
 800371e:	d10e      	bne.n	800373e <HAL_DMA_Start_IT+0x66>
 8003720:	6082      	str	r2, [r0, #8]
 8003722:	60c1      	str	r1, [r0, #12]
 8003724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_DMA_Start_IT+0x6c>
 800372a:	230e      	movs	r3, #14
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	6003      	str	r3, [r0, #0]
 8003732:	2301      	movs	r3, #1
 8003734:	6802      	ldr	r2, [r0, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	6003      	str	r3, [r0, #0]
 800373a:	2000      	movs	r0, #0
 800373c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800373e:	6081      	str	r1, [r0, #8]
 8003740:	60c2      	str	r2, [r0, #12]
 8003742:	e7ef      	b.n	8003724 <HAL_DMA_Start_IT+0x4c>
 8003744:	2204      	movs	r2, #4
 8003746:	6803      	ldr	r3, [r0, #0]
 8003748:	4393      	bics	r3, r2
 800374a:	6003      	str	r3, [r0, #0]
 800374c:	6802      	ldr	r2, [r0, #0]
 800374e:	230a      	movs	r3, #10
 8003750:	e7ed      	b.n	800372e <HAL_DMA_Start_IT+0x56>
 8003752:	2002      	movs	r0, #2
 8003754:	77ee      	strb	r6, [r5, #31]
 8003756:	e7f1      	b.n	800373c <HAL_DMA_Start_IT+0x64>

08003758 <HAL_DMA_IRQHandler>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	221c      	movs	r2, #28
 800375c:	2704      	movs	r7, #4
 800375e:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003760:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003762:	4032      	ands	r2, r6
 8003764:	003e      	movs	r6, r7
 8003766:	4096      	lsls	r6, r2
 8003768:	680d      	ldr	r5, [r1, #0]
 800376a:	6803      	ldr	r3, [r0, #0]
 800376c:	681c      	ldr	r4, [r3, #0]
 800376e:	4235      	tst	r5, r6
 8003770:	d00d      	beq.n	800378e <HAL_DMA_IRQHandler+0x36>
 8003772:	423c      	tst	r4, r7
 8003774:	d00b      	beq.n	800378e <HAL_DMA_IRQHandler+0x36>
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	0692      	lsls	r2, r2, #26
 800377a:	d402      	bmi.n	8003782 <HAL_DMA_IRQHandler+0x2a>
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	43ba      	bics	r2, r7
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003784:	604e      	str	r6, [r1, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d019      	beq.n	80037be <HAL_DMA_IRQHandler+0x66>
 800378a:	4798      	blx	r3
 800378c:	e017      	b.n	80037be <HAL_DMA_IRQHandler+0x66>
 800378e:	2702      	movs	r7, #2
 8003790:	003e      	movs	r6, r7
 8003792:	4096      	lsls	r6, r2
 8003794:	4235      	tst	r5, r6
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x68>
 8003798:	423c      	tst	r4, r7
 800379a:	d011      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x68>
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	0692      	lsls	r2, r2, #26
 80037a0:	d406      	bmi.n	80037b0 <HAL_DMA_IRQHandler+0x58>
 80037a2:	240a      	movs	r4, #10
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	43a2      	bics	r2, r4
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	1d83      	adds	r3, r0, #6
 80037ae:	77da      	strb	r2, [r3, #31]
 80037b0:	2200      	movs	r2, #0
 80037b2:	1d43      	adds	r3, r0, #5
 80037b4:	604e      	str	r6, [r1, #4]
 80037b6:	77da      	strb	r2, [r3, #31]
 80037b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d1e5      	bne.n	800378a <HAL_DMA_IRQHandler+0x32>
 80037be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c0:	2608      	movs	r6, #8
 80037c2:	0037      	movs	r7, r6
 80037c4:	4097      	lsls	r7, r2
 80037c6:	423d      	tst	r5, r7
 80037c8:	d0f9      	beq.n	80037be <HAL_DMA_IRQHandler+0x66>
 80037ca:	4234      	tst	r4, r6
 80037cc:	d0f7      	beq.n	80037be <HAL_DMA_IRQHandler+0x66>
 80037ce:	250e      	movs	r5, #14
 80037d0:	681c      	ldr	r4, [r3, #0]
 80037d2:	43ac      	bics	r4, r5
 80037d4:	601c      	str	r4, [r3, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	001c      	movs	r4, r3
 80037da:	4094      	lsls	r4, r2
 80037dc:	1d82      	adds	r2, r0, #6
 80037de:	604c      	str	r4, [r1, #4]
 80037e0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80037e2:	77d3      	strb	r3, [r2, #31]
 80037e4:	2200      	movs	r2, #0
 80037e6:	1d43      	adds	r3, r0, #5
 80037e8:	77da      	strb	r2, [r3, #31]
 80037ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037ec:	e7e5      	b.n	80037ba <HAL_DMA_IRQHandler+0x62>
	...

080037f0 <FLASH_SetErrorCode>:
 80037f0:	4a28      	ldr	r2, [pc, #160]	; (8003894 <FLASH_SetErrorCode+0xa4>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	6990      	ldr	r0, [r2, #24]
 80037f6:	0049      	lsls	r1, r1, #1
 80037f8:	0003      	movs	r3, r0
 80037fa:	b530      	push	{r4, r5, lr}
 80037fc:	400b      	ands	r3, r1
 80037fe:	4208      	tst	r0, r1
 8003800:	d005      	beq.n	800380e <FLASH_SetErrorCode+0x1e>
 8003802:	2302      	movs	r3, #2
 8003804:	4824      	ldr	r0, [pc, #144]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 8003806:	6944      	ldr	r4, [r0, #20]
 8003808:	4323      	orrs	r3, r4
 800380a:	6143      	str	r3, [r0, #20]
 800380c:	000b      	movs	r3, r1
 800380e:	2080      	movs	r0, #128	; 0x80
 8003810:	6991      	ldr	r1, [r2, #24]
 8003812:	0080      	lsls	r0, r0, #2
 8003814:	4201      	tst	r1, r0
 8003816:	d005      	beq.n	8003824 <FLASH_SetErrorCode+0x34>
 8003818:	2101      	movs	r1, #1
 800381a:	4c1f      	ldr	r4, [pc, #124]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 800381c:	4303      	orrs	r3, r0
 800381e:	6965      	ldr	r5, [r4, #20]
 8003820:	4329      	orrs	r1, r5
 8003822:	6161      	str	r1, [r4, #20]
 8003824:	2080      	movs	r0, #128	; 0x80
 8003826:	6991      	ldr	r1, [r2, #24]
 8003828:	00c0      	lsls	r0, r0, #3
 800382a:	4201      	tst	r1, r0
 800382c:	d005      	beq.n	800383a <FLASH_SetErrorCode+0x4a>
 800382e:	2108      	movs	r1, #8
 8003830:	4c19      	ldr	r4, [pc, #100]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 8003832:	4303      	orrs	r3, r0
 8003834:	6965      	ldr	r5, [r4, #20]
 8003836:	4329      	orrs	r1, r5
 8003838:	6161      	str	r1, [r4, #20]
 800383a:	2080      	movs	r0, #128	; 0x80
 800383c:	6991      	ldr	r1, [r2, #24]
 800383e:	0100      	lsls	r0, r0, #4
 8003840:	4201      	tst	r1, r0
 8003842:	d005      	beq.n	8003850 <FLASH_SetErrorCode+0x60>
 8003844:	2104      	movs	r1, #4
 8003846:	4c14      	ldr	r4, [pc, #80]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 8003848:	4303      	orrs	r3, r0
 800384a:	6965      	ldr	r5, [r4, #20]
 800384c:	4329      	orrs	r1, r5
 800384e:	6161      	str	r1, [r4, #20]
 8003850:	2080      	movs	r0, #128	; 0x80
 8003852:	6991      	ldr	r1, [r2, #24]
 8003854:	0180      	lsls	r0, r0, #6
 8003856:	4201      	tst	r1, r0
 8003858:	d005      	beq.n	8003866 <FLASH_SetErrorCode+0x76>
 800385a:	2110      	movs	r1, #16
 800385c:	4c0e      	ldr	r4, [pc, #56]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 800385e:	4303      	orrs	r3, r0
 8003860:	6965      	ldr	r5, [r4, #20]
 8003862:	4329      	orrs	r1, r5
 8003864:	6161      	str	r1, [r4, #20]
 8003866:	6991      	ldr	r1, [r2, #24]
 8003868:	0389      	lsls	r1, r1, #14
 800386a:	d505      	bpl.n	8003878 <FLASH_SetErrorCode+0x88>
 800386c:	2020      	movs	r0, #32
 800386e:	4c0a      	ldr	r4, [pc, #40]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 8003870:	4303      	orrs	r3, r0
 8003872:	6961      	ldr	r1, [r4, #20]
 8003874:	4301      	orrs	r1, r0
 8003876:	6161      	str	r1, [r4, #20]
 8003878:	2080      	movs	r0, #128	; 0x80
 800387a:	6991      	ldr	r1, [r2, #24]
 800387c:	0240      	lsls	r0, r0, #9
 800387e:	4201      	tst	r1, r0
 8003880:	d005      	beq.n	800388e <FLASH_SetErrorCode+0x9e>
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	4c04      	ldr	r4, [pc, #16]	; (8003898 <FLASH_SetErrorCode+0xa8>)
 8003886:	4303      	orrs	r3, r0
 8003888:	6965      	ldr	r5, [r4, #20]
 800388a:	4329      	orrs	r1, r5
 800388c:	6161      	str	r1, [r4, #20]
 800388e:	6193      	str	r3, [r2, #24]
 8003890:	bd30      	pop	{r4, r5, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40022000 	.word	0x40022000
 8003898:	20001048 	.word	0x20001048

0800389c <FLASH_WaitForLastOperation>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	0004      	movs	r4, r0
 80038a0:	f7ff fbd6 	bl	8003050 <HAL_GetTick>
 80038a4:	2601      	movs	r6, #1
 80038a6:	0005      	movs	r5, r0
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <FLASH_WaitForLastOperation+0x70>)
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	4232      	tst	r2, r6
 80038ae:	d121      	bne.n	80038f4 <FLASH_WaitForLastOperation+0x58>
 80038b0:	2202      	movs	r2, #2
 80038b2:	6999      	ldr	r1, [r3, #24]
 80038b4:	4211      	tst	r1, r2
 80038b6:	d000      	beq.n	80038ba <FLASH_WaitForLastOperation+0x1e>
 80038b8:	619a      	str	r2, [r3, #24]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	05d2      	lsls	r2, r2, #23
 80038be:	d415      	bmi.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	0592      	lsls	r2, r2, #22
 80038c4:	d412      	bmi.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	0552      	lsls	r2, r2, #21
 80038ca:	d40f      	bmi.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	0512      	lsls	r2, r2, #20
 80038d0:	d40c      	bmi.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	0492      	lsls	r2, r2, #18
 80038d6:	d409      	bmi.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	0008      	movs	r0, r1
 80038de:	0292      	lsls	r2, r2, #10
 80038e0:	4010      	ands	r0, r2
 80038e2:	4211      	tst	r1, r2
 80038e4:	d102      	bne.n	80038ec <FLASH_WaitForLastOperation+0x50>
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	03db      	lsls	r3, r3, #15
 80038ea:	d508      	bpl.n	80038fe <FLASH_WaitForLastOperation+0x62>
 80038ec:	f7ff ff80 	bl	80037f0 <FLASH_SetErrorCode>
 80038f0:	2001      	movs	r0, #1
 80038f2:	e004      	b.n	80038fe <FLASH_WaitForLastOperation+0x62>
 80038f4:	1c62      	adds	r2, r4, #1
 80038f6:	d0d8      	beq.n	80038aa <FLASH_WaitForLastOperation+0xe>
 80038f8:	2c00      	cmp	r4, #0
 80038fa:	d101      	bne.n	8003900 <FLASH_WaitForLastOperation+0x64>
 80038fc:	2003      	movs	r0, #3
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f7ff fba6 	bl	8003050 <HAL_GetTick>
 8003904:	1b40      	subs	r0, r0, r5
 8003906:	42a0      	cmp	r0, r4
 8003908:	d9ce      	bls.n	80038a8 <FLASH_WaitForLastOperation+0xc>
 800390a:	e7f7      	b.n	80038fc <FLASH_WaitForLastOperation+0x60>
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_FLASHEx_DATAEEPROM_Unlock>:
 8003910:	2201      	movs	r2, #1
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 8003914:	2000      	movs	r0, #0
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	4211      	tst	r1, r2
 800391a:	d00a      	beq.n	8003932 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 800391c:	f3ef 8110 	mrs	r1, PRIMASK
 8003920:	b672      	cpsid	i
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003924:	60d8      	str	r0, [r3, #12]
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003928:	60d8      	str	r0, [r3, #12]
 800392a:	f381 8810 	msr	PRIMASK, r1
 800392e:	6858      	ldr	r0, [r3, #4]
 8003930:	4010      	ands	r0, r2
 8003932:	4770      	bx	lr
 8003934:	40022000 	.word	0x40022000
 8003938:	89abcdef 	.word	0x89abcdef
 800393c:	02030405 	.word	0x02030405

08003940 <HAL_FLASHEx_DATAEEPROM_Lock>:
 8003940:	2301      	movs	r3, #1
 8003942:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8003944:	2000      	movs	r0, #0
 8003946:	6851      	ldr	r1, [r2, #4]
 8003948:	430b      	orrs	r3, r1
 800394a:	6053      	str	r3, [r2, #4]
 800394c:	4770      	bx	lr
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	40022000 	.word	0x40022000

08003954 <HAL_FLASHEx_DATAEEPROM_Program>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	4f12      	ldr	r7, [pc, #72]	; (80039a0 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
 8003958:	0006      	movs	r6, r0
 800395a:	7c3b      	ldrb	r3, [r7, #16]
 800395c:	000d      	movs	r5, r1
 800395e:	0014      	movs	r4, r2
 8003960:	2002      	movs	r0, #2
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00c      	beq.n	8003980 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003966:	2301      	movs	r3, #1
 8003968:	480e      	ldr	r0, [pc, #56]	; (80039a4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800396a:	743b      	strb	r3, [r7, #16]
 800396c:	f7ff ff96 	bl	800389c <FLASH_WaitForLastOperation>
 8003970:	2800      	cmp	r0, #0
 8003972:	d103      	bne.n	800397c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003974:	6178      	str	r0, [r7, #20]
 8003976:	2e02      	cmp	r6, #2
 8003978:	d103      	bne.n	8003982 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
 800397a:	602c      	str	r4, [r5, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	743b      	strb	r3, [r7, #16]
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003982:	2e01      	cmp	r6, #1
 8003984:	d102      	bne.n	800398c <HAL_FLASHEx_DATAEEPROM_Program+0x38>
 8003986:	b2a4      	uxth	r4, r4
 8003988:	802c      	strh	r4, [r5, #0]
 800398a:	e7f7      	b.n	800397c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800398c:	2e00      	cmp	r6, #0
 800398e:	d003      	beq.n	8003998 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003992:	f7ff ff83 	bl	800389c <FLASH_WaitForLastOperation>
 8003996:	e7f1      	b.n	800397c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003998:	b2e4      	uxtb	r4, r4
 800399a:	702c      	strb	r4, [r5, #0]
 800399c:	e7ee      	b.n	800397c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20001048 	.word	0x20001048
 80039a4:	0000c350 	.word	0x0000c350

080039a8 <HAL_GPIO_Init>:
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_GPIO_Init+0x164>)
 80039aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ac:	1882      	adds	r2, r0, r2
 80039ae:	1e54      	subs	r4, r2, #1
 80039b0:	41a2      	sbcs	r2, r4
 80039b2:	2300      	movs	r3, #0
 80039b4:	b087      	sub	sp, #28
 80039b6:	3205      	adds	r2, #5
 80039b8:	9103      	str	r1, [sp, #12]
 80039ba:	9205      	str	r2, [sp, #20]
 80039bc:	9a03      	ldr	r2, [sp, #12]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	0014      	movs	r4, r2
 80039c2:	40dc      	lsrs	r4, r3
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_Init+0x22>
 80039c6:	b007      	add	sp, #28
 80039c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ca:	2101      	movs	r1, #1
 80039cc:	000d      	movs	r5, r1
 80039ce:	0014      	movs	r4, r2
 80039d0:	409d      	lsls	r5, r3
 80039d2:	402c      	ands	r4, r5
 80039d4:	468c      	mov	ip, r1
 80039d6:	9402      	str	r4, [sp, #8]
 80039d8:	422a      	tst	r2, r5
 80039da:	d100      	bne.n	80039de <HAL_GPIO_Init+0x36>
 80039dc:	e094      	b.n	8003b08 <HAL_GPIO_Init+0x160>
 80039de:	2403      	movs	r4, #3
 80039e0:	9a03      	ldr	r2, [sp, #12]
 80039e2:	005e      	lsls	r6, r3, #1
 80039e4:	6852      	ldr	r2, [r2, #4]
 80039e6:	9201      	str	r2, [sp, #4]
 80039e8:	4022      	ands	r2, r4
 80039ea:	40b4      	lsls	r4, r6
 80039ec:	43e1      	mvns	r1, r4
 80039ee:	1e54      	subs	r4, r2, #1
 80039f0:	9104      	str	r1, [sp, #16]
 80039f2:	4564      	cmp	r4, ip
 80039f4:	d82a      	bhi.n	8003a4c <HAL_GPIO_Init+0xa4>
 80039f6:	6887      	ldr	r7, [r0, #8]
 80039f8:	400f      	ands	r7, r1
 80039fa:	9903      	ldr	r1, [sp, #12]
 80039fc:	68cc      	ldr	r4, [r1, #12]
 80039fe:	9901      	ldr	r1, [sp, #4]
 8003a00:	40b4      	lsls	r4, r6
 8003a02:	433c      	orrs	r4, r7
 8003a04:	6084      	str	r4, [r0, #8]
 8003a06:	6844      	ldr	r4, [r0, #4]
 8003a08:	43ac      	bics	r4, r5
 8003a0a:	0025      	movs	r5, r4
 8003a0c:	090c      	lsrs	r4, r1, #4
 8003a0e:	4661      	mov	r1, ip
 8003a10:	400c      	ands	r4, r1
 8003a12:	409c      	lsls	r4, r3
 8003a14:	432c      	orrs	r4, r5
 8003a16:	6044      	str	r4, [r0, #4]
 8003a18:	68c5      	ldr	r5, [r0, #12]
 8003a1a:	9904      	ldr	r1, [sp, #16]
 8003a1c:	400d      	ands	r5, r1
 8003a1e:	9903      	ldr	r1, [sp, #12]
 8003a20:	688c      	ldr	r4, [r1, #8]
 8003a22:	40b4      	lsls	r4, r6
 8003a24:	432c      	orrs	r4, r5
 8003a26:	60c4      	str	r4, [r0, #12]
 8003a28:	2a02      	cmp	r2, #2
 8003a2a:	d111      	bne.n	8003a50 <HAL_GPIO_Init+0xa8>
 8003a2c:	2507      	movs	r5, #7
 8003a2e:	210f      	movs	r1, #15
 8003a30:	401d      	ands	r5, r3
 8003a32:	00ad      	lsls	r5, r5, #2
 8003a34:	40a9      	lsls	r1, r5
 8003a36:	08dc      	lsrs	r4, r3, #3
 8003a38:	00a4      	lsls	r4, r4, #2
 8003a3a:	1904      	adds	r4, r0, r4
 8003a3c:	6a27      	ldr	r7, [r4, #32]
 8003a3e:	438f      	bics	r7, r1
 8003a40:	9903      	ldr	r1, [sp, #12]
 8003a42:	6909      	ldr	r1, [r1, #16]
 8003a44:	40a9      	lsls	r1, r5
 8003a46:	430f      	orrs	r7, r1
 8003a48:	6227      	str	r7, [r4, #32]
 8003a4a:	e001      	b.n	8003a50 <HAL_GPIO_Init+0xa8>
 8003a4c:	2a03      	cmp	r2, #3
 8003a4e:	d1e3      	bne.n	8003a18 <HAL_GPIO_Init+0x70>
 8003a50:	40b2      	lsls	r2, r6
 8003a52:	6804      	ldr	r4, [r0, #0]
 8003a54:	9904      	ldr	r1, [sp, #16]
 8003a56:	4021      	ands	r1, r4
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	6002      	str	r2, [r0, #0]
 8003a5c:	22c0      	movs	r2, #192	; 0xc0
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	0292      	lsls	r2, r2, #10
 8003a62:	4211      	tst	r1, r2
 8003a64:	d050      	beq.n	8003b08 <HAL_GPIO_Init+0x160>
 8003a66:	2701      	movs	r7, #1
 8003a68:	4c29      	ldr	r4, [pc, #164]	; (8003b10 <HAL_GPIO_Init+0x168>)
 8003a6a:	2603      	movs	r6, #3
 8003a6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003a6e:	001d      	movs	r5, r3
 8003a70:	433a      	orrs	r2, r7
 8003a72:	6362      	str	r2, [r4, #52]	; 0x34
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_GPIO_Init+0x16c>)
 8003a76:	089c      	lsrs	r4, r3, #2
 8003a78:	00a4      	lsls	r4, r4, #2
 8003a7a:	18a4      	adds	r4, r4, r2
 8003a7c:	68a2      	ldr	r2, [r4, #8]
 8003a7e:	4035      	ands	r5, r6
 8003a80:	4694      	mov	ip, r2
 8003a82:	220f      	movs	r2, #15
 8003a84:	00ad      	lsls	r5, r5, #2
 8003a86:	40aa      	lsls	r2, r5
 8003a88:	4661      	mov	r1, ip
 8003a8a:	4391      	bics	r1, r2
 8003a8c:	22a0      	movs	r2, #160	; 0xa0
 8003a8e:	05d2      	lsls	r2, r2, #23
 8003a90:	4694      	mov	ip, r2
 8003a92:	2200      	movs	r2, #0
 8003a94:	4560      	cmp	r0, ip
 8003a96:	d00d      	beq.n	8003ab4 <HAL_GPIO_Init+0x10c>
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <HAL_GPIO_Init+0x170>)
 8003a9a:	4694      	mov	ip, r2
 8003a9c:	003a      	movs	r2, r7
 8003a9e:	4560      	cmp	r0, ip
 8003aa0:	d008      	beq.n	8003ab4 <HAL_GPIO_Init+0x10c>
 8003aa2:	4f1e      	ldr	r7, [pc, #120]	; (8003b1c <HAL_GPIO_Init+0x174>)
 8003aa4:	1892      	adds	r2, r2, r2
 8003aa6:	42b8      	cmp	r0, r7
 8003aa8:	d004      	beq.n	8003ab4 <HAL_GPIO_Init+0x10c>
 8003aaa:	4f1d      	ldr	r7, [pc, #116]	; (8003b20 <HAL_GPIO_Init+0x178>)
 8003aac:	0032      	movs	r2, r6
 8003aae:	42b8      	cmp	r0, r7
 8003ab0:	d000      	beq.n	8003ab4 <HAL_GPIO_Init+0x10c>
 8003ab2:	9a05      	ldr	r2, [sp, #20]
 8003ab4:	40aa      	lsls	r2, r5
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	9902      	ldr	r1, [sp, #8]
 8003aba:	60a2      	str	r2, [r4, #8]
 8003abc:	000d      	movs	r5, r1
 8003abe:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <HAL_GPIO_Init+0x17c>)
 8003ac0:	43cc      	mvns	r4, r1
 8003ac2:	6816      	ldr	r6, [r2, #0]
 8003ac4:	9901      	ldr	r1, [sp, #4]
 8003ac6:	4335      	orrs	r5, r6
 8003ac8:	03c9      	lsls	r1, r1, #15
 8003aca:	d401      	bmi.n	8003ad0 <HAL_GPIO_Init+0x128>
 8003acc:	0035      	movs	r5, r6
 8003ace:	4025      	ands	r5, r4
 8003ad0:	6015      	str	r5, [r2, #0]
 8003ad2:	6856      	ldr	r6, [r2, #4]
 8003ad4:	9d02      	ldr	r5, [sp, #8]
 8003ad6:	9901      	ldr	r1, [sp, #4]
 8003ad8:	4335      	orrs	r5, r6
 8003ada:	0389      	lsls	r1, r1, #14
 8003adc:	d401      	bmi.n	8003ae2 <HAL_GPIO_Init+0x13a>
 8003ade:	0035      	movs	r5, r6
 8003ae0:	4025      	ands	r5, r4
 8003ae2:	6055      	str	r5, [r2, #4]
 8003ae4:	6896      	ldr	r6, [r2, #8]
 8003ae6:	9d02      	ldr	r5, [sp, #8]
 8003ae8:	9901      	ldr	r1, [sp, #4]
 8003aea:	4335      	orrs	r5, r6
 8003aec:	02c9      	lsls	r1, r1, #11
 8003aee:	d401      	bmi.n	8003af4 <HAL_GPIO_Init+0x14c>
 8003af0:	0035      	movs	r5, r6
 8003af2:	4025      	ands	r5, r4
 8003af4:	6095      	str	r5, [r2, #8]
 8003af6:	68d5      	ldr	r5, [r2, #12]
 8003af8:	9e02      	ldr	r6, [sp, #8]
 8003afa:	9901      	ldr	r1, [sp, #4]
 8003afc:	432e      	orrs	r6, r5
 8003afe:	0289      	lsls	r1, r1, #10
 8003b00:	d401      	bmi.n	8003b06 <HAL_GPIO_Init+0x15e>
 8003b02:	4025      	ands	r5, r4
 8003b04:	002e      	movs	r6, r5
 8003b06:	60d6      	str	r6, [r2, #12]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	e757      	b.n	80039bc <HAL_GPIO_Init+0x14>
 8003b0c:	afffe400 	.word	0xafffe400
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40010000 	.word	0x40010000
 8003b18:	50000400 	.word	0x50000400
 8003b1c:	50000800 	.word	0x50000800
 8003b20:	50000c00 	.word	0x50000c00
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_GPIO_ReadPin>:
 8003b28:	6900      	ldr	r0, [r0, #16]
 8003b2a:	4008      	ands	r0, r1
 8003b2c:	1e43      	subs	r3, r0, #1
 8003b2e:	4198      	sbcs	r0, r3
 8003b30:	b2c0      	uxtb	r0, r0
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_WritePin>:
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_GPIO_WritePin+0x8>
 8003b38:	6181      	str	r1, [r0, #24]
 8003b3a:	4770      	bx	lr
 8003b3c:	6281      	str	r1, [r0, #40]	; 0x28
 8003b3e:	e7fc      	b.n	8003b3a <HAL_GPIO_WritePin+0x6>

08003b40 <I2C_Flush_TXDR>:
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	0792      	lsls	r2, r2, #30
 8003b46:	d501      	bpl.n	8003b4c <I2C_Flush_TXDR+0xc>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	6999      	ldr	r1, [r3, #24]
 8003b50:	4211      	tst	r1, r2
 8003b52:	d102      	bne.n	8003b5a <I2C_Flush_TXDR+0x1a>
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]
 8003b5a:	4770      	bx	lr

08003b5c <I2C_TransferConfig>:
 8003b5c:	b530      	push	{r4, r5, lr}
 8003b5e:	9c03      	ldr	r4, [sp, #12]
 8003b60:	0412      	lsls	r2, r2, #16
 8003b62:	6800      	ldr	r0, [r0, #0]
 8003b64:	4322      	orrs	r2, r4
 8003b66:	431a      	orrs	r2, r3
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <I2C_TransferConfig+0x24>)
 8003b6a:	6845      	ldr	r5, [r0, #4]
 8003b6c:	0589      	lsls	r1, r1, #22
 8003b6e:	0d64      	lsrs	r4, r4, #21
 8003b70:	0d89      	lsrs	r1, r1, #22
 8003b72:	431c      	orrs	r4, r3
 8003b74:	43a5      	bics	r5, r4
 8003b76:	430a      	orrs	r2, r1
 8003b78:	432a      	orrs	r2, r5
 8003b7a:	6042      	str	r2, [r0, #4]
 8003b7c:	bd30      	pop	{r4, r5, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	03ff63ff 	.word	0x03ff63ff

08003b84 <I2C_IsAcknowledgeFailed>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	0016      	movs	r6, r2
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	0004      	movs	r4, r0
 8003b8e:	000d      	movs	r5, r1
 8003b90:	2000      	movs	r0, #0
 8003b92:	06d2      	lsls	r2, r2, #27
 8003b94:	d536      	bpl.n	8003c04 <I2C_IsAcknowledgeFailed+0x80>
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	0192      	lsls	r2, r2, #6
 8003b9a:	d404      	bmi.n	8003ba6 <I2C_IsAcknowledgeFailed+0x22>
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	01d2      	lsls	r2, r2, #7
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	2720      	movs	r7, #32
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	423a      	tst	r2, r7
 8003bae:	d012      	beq.n	8003bd6 <I2C_IsAcknowledgeFailed+0x52>
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	0020      	movs	r0, r4
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	61df      	str	r7, [r3, #28]
 8003bb8:	f7ff ffc2 	bl	8003b40 <I2C_Flush_TXDR>
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	4912      	ldr	r1, [pc, #72]	; (8003c08 <I2C_IsAcknowledgeFailed+0x84>)
 8003bc0:	6853      	ldr	r3, [r2, #4]
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	6463      	str	r3, [r4, #68]	; 0x44
 8003bce:	0023      	movs	r3, r4
 8003bd0:	3341      	adds	r3, #65	; 0x41
 8003bd2:	701f      	strb	r7, [r3, #0]
 8003bd4:	e00f      	b.n	8003bf6 <I2C_IsAcknowledgeFailed+0x72>
 8003bd6:	1c6a      	adds	r2, r5, #1
 8003bd8:	d0e7      	beq.n	8003baa <I2C_IsAcknowledgeFailed+0x26>
 8003bda:	f7ff fa39 	bl	8003050 <HAL_GetTick>
 8003bde:	1b80      	subs	r0, r0, r6
 8003be0:	4285      	cmp	r5, r0
 8003be2:	d301      	bcc.n	8003be8 <I2C_IsAcknowledgeFailed+0x64>
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	d1df      	bne.n	8003ba8 <I2C_IsAcknowledgeFailed+0x24>
 8003be8:	2220      	movs	r2, #32
 8003bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bec:	4313      	orrs	r3, r2
 8003bee:	6463      	str	r3, [r4, #68]	; 0x44
 8003bf0:	0023      	movs	r3, r4
 8003bf2:	3341      	adds	r3, #65	; 0x41
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	0022      	movs	r2, r4
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	3242      	adds	r2, #66	; 0x42
 8003bfe:	3440      	adds	r4, #64	; 0x40
 8003c00:	7013      	strb	r3, [r2, #0]
 8003c02:	7023      	strb	r3, [r4, #0]
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	fe00e800 	.word	0xfe00e800

08003c0c <I2C_WaitOnTXISFlagUntilTimeout>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	0004      	movs	r4, r0
 8003c10:	000d      	movs	r5, r1
 8003c12:	0016      	movs	r6, r2
 8003c14:	2702      	movs	r7, #2
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	423b      	tst	r3, r7
 8003c1c:	d001      	beq.n	8003c22 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c22:	0032      	movs	r2, r6
 8003c24:	0029      	movs	r1, r5
 8003c26:	0020      	movs	r0, r4
 8003c28:	f7ff ffac 	bl	8003b84 <I2C_IsAcknowledgeFailed>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d115      	bne.n	8003c5c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
 8003c30:	1c6b      	adds	r3, r5, #1
 8003c32:	d0f0      	beq.n	8003c16 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8003c34:	f7ff fa0c 	bl	8003050 <HAL_GetTick>
 8003c38:	1b80      	subs	r0, r0, r6
 8003c3a:	42a8      	cmp	r0, r5
 8003c3c:	d801      	bhi.n	8003c42 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	d1e9      	bne.n	8003c16 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8003c42:	2220      	movs	r2, #32
 8003c44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c46:	4313      	orrs	r3, r2
 8003c48:	6463      	str	r3, [r4, #68]	; 0x44
 8003c4a:	0023      	movs	r3, r4
 8003c4c:	3341      	adds	r3, #65	; 0x41
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	0022      	movs	r2, r4
 8003c52:	2300      	movs	r3, #0
 8003c54:	3242      	adds	r2, #66	; 0x42
 8003c56:	3440      	adds	r4, #64	; 0x40
 8003c58:	7013      	strb	r3, [r2, #0]
 8003c5a:	7023      	strb	r3, [r4, #0]
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e7df      	b.n	8003c20 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	0004      	movs	r4, r0
 8003c64:	000d      	movs	r5, r1
 8003c66:	0016      	movs	r6, r2
 8003c68:	2720      	movs	r7, #32
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	4213      	tst	r3, r2
 8003c72:	d111      	bne.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 8003c74:	0032      	movs	r2, r6
 8003c76:	0029      	movs	r1, r5
 8003c78:	0020      	movs	r0, r4
 8003c7a:	f7ff ff83 	bl	8003b84 <I2C_IsAcknowledgeFailed>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d119      	bne.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	423a      	tst	r2, r7
 8003c88:	d017      	beq.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	420a      	tst	r2, r1
 8003c90:	d004      	beq.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8003c92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9c:	61df      	str	r7, [r3, #28]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	0022      	movs	r2, r4
 8003ca8:	2300      	movs	r3, #0
 8003caa:	3241      	adds	r2, #65	; 0x41
 8003cac:	6463      	str	r3, [r4, #68]	; 0x44
 8003cae:	7017      	strb	r7, [r2, #0]
 8003cb0:	3440      	adds	r4, #64	; 0x40
 8003cb2:	7053      	strb	r3, [r2, #1]
 8003cb4:	7023      	strb	r3, [r4, #0]
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	e7ef      	b.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003cba:	f7ff f9c9 	bl	8003050 <HAL_GetTick>
 8003cbe:	1b80      	subs	r0, r0, r6
 8003cc0:	42a8      	cmp	r0, r5
 8003cc2:	d801      	bhi.n	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d1d0      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 8003cc8:	2220      	movs	r2, #32
 8003cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	6463      	str	r3, [r4, #68]	; 0x44
 8003cd0:	0023      	movs	r3, r4
 8003cd2:	3341      	adds	r3, #65	; 0x41
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	3440      	adds	r4, #64	; 0x40
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e7eb      	b.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <I2C_WaitOnFlagUntilTimeout>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	000e      	movs	r6, r1
 8003ce6:	0017      	movs	r7, r2
 8003ce8:	001d      	movs	r5, r3
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	6993      	ldr	r3, [r2, #24]
 8003cee:	4033      	ands	r3, r6
 8003cf0:	1b9b      	subs	r3, r3, r6
 8003cf2:	4259      	negs	r1, r3
 8003cf4:	414b      	adcs	r3, r1
 8003cf6:	42bb      	cmp	r3, r7
 8003cf8:	d001      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x1e>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e017      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x4e>
 8003cfe:	1c6b      	adds	r3, r5, #1
 8003d00:	d0f4      	beq.n	8003cec <I2C_WaitOnFlagUntilTimeout+0xc>
 8003d02:	f7ff f9a5 	bl	8003050 <HAL_GetTick>
 8003d06:	9b06      	ldr	r3, [sp, #24]
 8003d08:	1ac0      	subs	r0, r0, r3
 8003d0a:	42a8      	cmp	r0, r5
 8003d0c:	d801      	bhi.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	d1eb      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0xa>
 8003d12:	2220      	movs	r2, #32
 8003d14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d16:	2001      	movs	r0, #1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	6463      	str	r3, [r4, #68]	; 0x44
 8003d1c:	0023      	movs	r3, r4
 8003d1e:	3341      	adds	r3, #65	; 0x41
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	0022      	movs	r2, r4
 8003d24:	2300      	movs	r3, #0
 8003d26:	3242      	adds	r2, #66	; 0x42
 8003d28:	3440      	adds	r4, #64	; 0x40
 8003d2a:	7013      	strb	r3, [r2, #0]
 8003d2c:	7023      	strb	r3, [r4, #0]
 8003d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	0004      	movs	r4, r0
 8003d34:	000d      	movs	r5, r1
 8003d36:	0016      	movs	r6, r2
 8003d38:	2720      	movs	r7, #32
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	423b      	tst	r3, r7
 8003d40:	d001      	beq.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8003d42:	2000      	movs	r0, #0
 8003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d46:	0032      	movs	r2, r6
 8003d48:	0029      	movs	r1, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f7ff ff1a 	bl	8003b84 <I2C_IsAcknowledgeFailed>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d113      	bne.n	8003d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
 8003d54:	f7ff f97c 	bl	8003050 <HAL_GetTick>
 8003d58:	1b80      	subs	r0, r0, r6
 8003d5a:	42a8      	cmp	r0, r5
 8003d5c:	d801      	bhi.n	8003d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	d1eb      	bne.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8003d62:	2220      	movs	r2, #32
 8003d64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d66:	4313      	orrs	r3, r2
 8003d68:	6463      	str	r3, [r4, #68]	; 0x44
 8003d6a:	0023      	movs	r3, r4
 8003d6c:	3341      	adds	r3, #65	; 0x41
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	0022      	movs	r2, r4
 8003d72:	2300      	movs	r3, #0
 8003d74:	3242      	adds	r2, #66	; 0x42
 8003d76:	3440      	adds	r4, #64	; 0x40
 8003d78:	7013      	strb	r3, [r2, #0]
 8003d7a:	7023      	strb	r3, [r4, #0]
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e7e1      	b.n	8003d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003d80 <HAL_I2C_Init>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	0004      	movs	r4, r0
 8003d84:	2001      	movs	r0, #1
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	d03f      	beq.n	8003e0a <HAL_I2C_Init+0x8a>
 8003d8a:	0025      	movs	r5, r4
 8003d8c:	3541      	adds	r5, #65	; 0x41
 8003d8e:	782b      	ldrb	r3, [r5, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_I2C_Init+0x22>
 8003d96:	0023      	movs	r3, r4
 8003d98:	3340      	adds	r3, #64	; 0x40
 8003d9a:	0020      	movs	r0, r4
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	f7fd f96d 	bl	800107c <HAL_I2C_MspInit>
 8003da2:	2324      	movs	r3, #36	; 0x24
 8003da4:	2101      	movs	r1, #1
 8003da6:	702b      	strb	r3, [r5, #0]
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	481d      	ldr	r0, [pc, #116]	; (8003e20 <HAL_I2C_Init+0xa0>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68a6      	ldr	r6, [r4, #8]
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	6861      	ldr	r1, [r4, #4]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_I2C_Init+0xa4>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4002      	ands	r2, r0
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	68e2      	ldr	r2, [r4, #12]
 8003dc4:	2a01      	cmp	r2, #1
 8003dc6:	d121      	bne.n	8003e0c <HAL_I2C_Init+0x8c>
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0209      	lsls	r1, r1, #8
 8003dcc:	4331      	orrs	r1, r6
 8003dce:	6099      	str	r1, [r3, #8]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	4915      	ldr	r1, [pc, #84]	; (8003e28 <HAL_I2C_Init+0xa8>)
 8003dd4:	4311      	orrs	r1, r2
 8003dd6:	6059      	str	r1, [r3, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	6961      	ldr	r1, [r4, #20]
 8003ddc:	4002      	ands	r2, r0
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	6922      	ldr	r2, [r4, #16]
 8003de2:	2000      	movs	r0, #0
 8003de4:	430a      	orrs	r2, r1
 8003de6:	69a1      	ldr	r1, [r4, #24]
 8003de8:	0209      	lsls	r1, r1, #8
 8003dea:	430a      	orrs	r2, r1
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	6a21      	ldr	r1, [r4, #32]
 8003df0:	69e2      	ldr	r2, [r4, #28]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	2320      	movs	r3, #32
 8003e00:	6460      	str	r0, [r4, #68]	; 0x44
 8003e02:	702b      	strb	r3, [r5, #0]
 8003e04:	6320      	str	r0, [r4, #48]	; 0x30
 8003e06:	3442      	adds	r4, #66	; 0x42
 8003e08:	7020      	strb	r0, [r4, #0]
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	2184      	movs	r1, #132	; 0x84
 8003e0e:	0209      	lsls	r1, r1, #8
 8003e10:	4331      	orrs	r1, r6
 8003e12:	6099      	str	r1, [r3, #8]
 8003e14:	2a02      	cmp	r2, #2
 8003e16:	d1db      	bne.n	8003dd0 <HAL_I2C_Init+0x50>
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	e7d7      	b.n	8003dd0 <HAL_I2C_Init+0x50>
 8003e20:	ffff7fff 	.word	0xffff7fff
 8003e24:	f0ffffff 	.word	0xf0ffffff
 8003e28:	02008000 	.word	0x02008000

08003e2c <HAL_I2C_Master_Transmit>:
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	9305      	str	r3, [sp, #20]
 8003e32:	0003      	movs	r3, r0
 8003e34:	3341      	adds	r3, #65	; 0x41
 8003e36:	9204      	str	r2, [sp, #16]
 8003e38:	9303      	str	r3, [sp, #12]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	0004      	movs	r4, r0
 8003e3e:	000f      	movs	r7, r1
 8003e40:	2002      	movs	r0, #2
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d114      	bne.n	8003e70 <HAL_I2C_Master_Transmit+0x44>
 8003e46:	0023      	movs	r3, r4
 8003e48:	3340      	adds	r3, #64	; 0x40
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	2a01      	cmp	r2, #1
 8003e4e:	d00f      	beq.n	8003e70 <HAL_I2C_Master_Transmit+0x44>
 8003e50:	2601      	movs	r6, #1
 8003e52:	701e      	strb	r6, [r3, #0]
 8003e54:	f7ff f8fc 	bl	8003050 <HAL_GetTick>
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0005      	movs	r5, r0
 8003e5c:	9000      	str	r0, [sp, #0]
 8003e5e:	2319      	movs	r3, #25
 8003e60:	0032      	movs	r2, r6
 8003e62:	0020      	movs	r0, r4
 8003e64:	0209      	lsls	r1, r1, #8
 8003e66:	f7ff ff3b 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_I2C_Master_Transmit+0x48>
 8003e6e:	2001      	movs	r0, #1
 8003e70:	b007      	add	sp, #28
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e74:	2321      	movs	r3, #33	; 0x21
 8003e76:	0026      	movs	r6, r4
 8003e78:	9a03      	ldr	r2, [sp, #12]
 8003e7a:	3642      	adds	r6, #66	; 0x42
 8003e7c:	7013      	strb	r3, [r2, #0]
 8003e7e:	3b11      	subs	r3, #17
 8003e80:	7033      	strb	r3, [r6, #0]
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	6460      	str	r0, [r4, #68]	; 0x44
 8003e86:	6263      	str	r3, [r4, #36]	; 0x24
 8003e88:	9b05      	ldr	r3, [sp, #20]
 8003e8a:	6360      	str	r0, [r4, #52]	; 0x34
 8003e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003e8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_I2C_Master_Transmit+0x11c>)
 8003e92:	2aff      	cmp	r2, #255	; 0xff
 8003e94:	d920      	bls.n	8003ed8 <HAL_I2C_Master_Transmit+0xac>
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	8522      	strh	r2, [r4, #40]	; 0x28
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	045b      	lsls	r3, r3, #17
 8003ea0:	0039      	movs	r1, r7
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7ff fe5a 	bl	8003b5c <I2C_TransferConfig>
 8003ea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eaa:	002a      	movs	r2, r5
 8003eac:	0020      	movs	r0, r4
 8003eae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d119      	bne.n	8003ee8 <HAL_I2C_Master_Transmit+0xbc>
 8003eb4:	f7ff ff3c 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d1d8      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0x42>
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	4d22      	ldr	r5, [pc, #136]	; (8003f4c <HAL_I2C_Master_Transmit+0x120>)
 8003ec2:	61d9      	str	r1, [r3, #28]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	402a      	ands	r2, r5
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	0023      	movs	r3, r4
 8003ecc:	3440      	adds	r4, #64	; 0x40
 8003ece:	3341      	adds	r3, #65	; 0x41
 8003ed0:	7019      	strb	r1, [r3, #0]
 8003ed2:	7030      	strb	r0, [r6, #0]
 8003ed4:	7020      	strb	r0, [r4, #0]
 8003ed6:	e7cb      	b.n	8003e70 <HAL_I2C_Master_Transmit+0x44>
 8003ed8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003eda:	b292      	uxth	r2, r2
 8003edc:	8522      	strh	r2, [r4, #40]	; 0x28
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	049b      	lsls	r3, r3, #18
 8003ee6:	e7db      	b.n	8003ea0 <HAL_I2C_Master_Transmit+0x74>
 8003ee8:	f7ff fe90 	bl	8003c0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1be      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0x42>
 8003ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	7819      	ldrb	r1, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	6291      	str	r1, [r2, #40]	; 0x28
 8003efa:	6263      	str	r3, [r4, #36]	; 0x24
 8003efc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003efe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003f06:	3a01      	subs	r2, #1
 8003f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	8522      	strh	r2, [r4, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ca      	beq.n	8003ea8 <HAL_I2C_Master_Transmit+0x7c>
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d1c8      	bne.n	8003ea8 <HAL_I2C_Master_Transmit+0x7c>
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0020      	movs	r0, r4
 8003f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f1c:	9500      	str	r5, [sp, #0]
 8003f1e:	f7ff fedf 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d1a3      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0x42>
 8003f26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f28:	2bff      	cmp	r3, #255	; 0xff
 8003f2a:	d906      	bls.n	8003f3a <HAL_I2C_Master_Transmit+0x10e>
 8003f2c:	23ff      	movs	r3, #255	; 0xff
 8003f2e:	8523      	strh	r3, [r4, #40]	; 0x28
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	9000      	str	r0, [sp, #0]
 8003f36:	045b      	lsls	r3, r3, #17
 8003f38:	e7b2      	b.n	8003ea0 <HAL_I2C_Master_Transmit+0x74>
 8003f3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	8522      	strh	r2, [r4, #40]	; 0x28
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	9000      	str	r0, [sp, #0]
 8003f44:	e7cd      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0xb6>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	80002000 	.word	0x80002000
 8003f4c:	fe00e800 	.word	0xfe00e800

08003f50 <HAL_I2C_Master_Receive>:
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	9305      	str	r3, [sp, #20]
 8003f56:	0003      	movs	r3, r0
 8003f58:	3341      	adds	r3, #65	; 0x41
 8003f5a:	9204      	str	r2, [sp, #16]
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	0004      	movs	r4, r0
 8003f62:	000f      	movs	r7, r1
 8003f64:	2002      	movs	r0, #2
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d114      	bne.n	8003f94 <HAL_I2C_Master_Receive+0x44>
 8003f6a:	0023      	movs	r3, r4
 8003f6c:	3340      	adds	r3, #64	; 0x40
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	2a01      	cmp	r2, #1
 8003f72:	d00f      	beq.n	8003f94 <HAL_I2C_Master_Receive+0x44>
 8003f74:	2601      	movs	r6, #1
 8003f76:	701e      	strb	r6, [r3, #0]
 8003f78:	f7ff f86a 	bl	8003050 <HAL_GetTick>
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	0005      	movs	r5, r0
 8003f80:	9000      	str	r0, [sp, #0]
 8003f82:	2319      	movs	r3, #25
 8003f84:	0032      	movs	r2, r6
 8003f86:	0020      	movs	r0, r4
 8003f88:	0209      	lsls	r1, r1, #8
 8003f8a:	f7ff fea9 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_I2C_Master_Receive+0x48>
 8003f92:	2001      	movs	r0, #1
 8003f94:	b007      	add	sp, #28
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f98:	2322      	movs	r3, #34	; 0x22
 8003f9a:	0026      	movs	r6, r4
 8003f9c:	9a03      	ldr	r2, [sp, #12]
 8003f9e:	3642      	adds	r6, #66	; 0x42
 8003fa0:	7013      	strb	r3, [r2, #0]
 8003fa2:	3b12      	subs	r3, #18
 8003fa4:	7033      	strb	r3, [r6, #0]
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	6460      	str	r0, [r4, #68]	; 0x44
 8003faa:	6263      	str	r3, [r4, #36]	; 0x24
 8003fac:	9b05      	ldr	r3, [sp, #20]
 8003fae:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003fb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_I2C_Master_Receive+0x11c>)
 8003fb6:	2aff      	cmp	r2, #255	; 0xff
 8003fb8:	d920      	bls.n	8003ffc <HAL_I2C_Master_Receive+0xac>
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	8522      	strh	r2, [r4, #40]	; 0x28
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	045b      	lsls	r3, r3, #17
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	0020      	movs	r0, r4
 8003fc8:	f7ff fdc8 	bl	8003b5c <I2C_TransferConfig>
 8003fcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fce:	002a      	movs	r2, r5
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d119      	bne.n	800400c <HAL_I2C_Master_Receive+0xbc>
 8003fd8:	f7ff feaa 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d1d8      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x42>
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4d22      	ldr	r5, [pc, #136]	; (8004070 <HAL_I2C_Master_Receive+0x120>)
 8003fe6:	61d9      	str	r1, [r3, #28]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	402a      	ands	r2, r5
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	0023      	movs	r3, r4
 8003ff0:	3440      	adds	r4, #64	; 0x40
 8003ff2:	3341      	adds	r3, #65	; 0x41
 8003ff4:	7019      	strb	r1, [r3, #0]
 8003ff6:	7030      	strb	r0, [r6, #0]
 8003ff8:	7020      	strb	r0, [r4, #0]
 8003ffa:	e7cb      	b.n	8003f94 <HAL_I2C_Master_Receive+0x44>
 8003ffc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ffe:	b292      	uxth	r2, r2
 8004000:	8522      	strh	r2, [r4, #40]	; 0x28
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	049b      	lsls	r3, r3, #18
 800400a:	e7db      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x74>
 800400c:	f7ff fe28 	bl	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004010:	2800      	cmp	r0, #0
 8004012:	d1be      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x42>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	7013      	strb	r3, [r2, #0]
 800401c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800401e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004020:	3301      	adds	r3, #1
 8004022:	6263      	str	r3, [r4, #36]	; 0x24
 8004024:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004026:	3a01      	subs	r2, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	b29b      	uxth	r3, r3
 800402c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800402e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004030:	b292      	uxth	r2, r2
 8004032:	8522      	strh	r2, [r4, #40]	; 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0c9      	beq.n	8003fcc <HAL_I2C_Master_Receive+0x7c>
 8004038:	2a00      	cmp	r2, #0
 800403a:	d1c7      	bne.n	8003fcc <HAL_I2C_Master_Receive+0x7c>
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0020      	movs	r0, r4
 8004040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004042:	9500      	str	r5, [sp, #0]
 8004044:	f7ff fe4c 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8004048:	2800      	cmp	r0, #0
 800404a:	d1a2      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x42>
 800404c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800404e:	2bff      	cmp	r3, #255	; 0xff
 8004050:	d906      	bls.n	8004060 <HAL_I2C_Master_Receive+0x110>
 8004052:	23ff      	movs	r3, #255	; 0xff
 8004054:	8523      	strh	r3, [r4, #40]	; 0x28
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	9000      	str	r0, [sp, #0]
 800405c:	045b      	lsls	r3, r3, #17
 800405e:	e7b1      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x74>
 8004060:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004062:	b292      	uxth	r2, r2
 8004064:	8522      	strh	r2, [r4, #40]	; 0x28
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	9000      	str	r0, [sp, #0]
 800406a:	e7cc      	b.n	8004006 <HAL_I2C_Master_Receive+0xb6>
 800406c:	80002400 	.word	0x80002400
 8004070:	fe00e800 	.word	0xfe00e800

08004074 <HAL_I2C_IsDeviceReady>:
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	001e      	movs	r6, r3
 8004078:	2300      	movs	r3, #0
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	0003      	movs	r3, r0
 8004080:	9205      	str	r2, [sp, #20]
 8004082:	3341      	adds	r3, #65	; 0x41
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	0004      	movs	r4, r0
 8004088:	2502      	movs	r5, #2
 800408a:	2a20      	cmp	r2, #32
 800408c:	d15b      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 800408e:	6802      	ldr	r2, [r0, #0]
 8004090:	6997      	ldr	r7, [r2, #24]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	0038      	movs	r0, r7
 8004096:	0212      	lsls	r2, r2, #8
 8004098:	4010      	ands	r0, r2
 800409a:	4217      	tst	r7, r2
 800409c:	d153      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 800409e:	0022      	movs	r2, r4
 80040a0:	3240      	adds	r2, #64	; 0x40
 80040a2:	7817      	ldrb	r7, [r2, #0]
 80040a4:	2f01      	cmp	r7, #1
 80040a6:	d04e      	beq.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 80040a8:	3d01      	subs	r5, #1
 80040aa:	7015      	strb	r5, [r2, #0]
 80040ac:	2224      	movs	r2, #36	; 0x24
 80040ae:	0589      	lsls	r1, r1, #22
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	0d8b      	lsrs	r3, r1, #22
 80040b4:	6460      	str	r0, [r4, #68]	; 0x44
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d12b      	bne.n	8004116 <HAL_I2C_IsDeviceReady+0xa2>
 80040be:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <HAL_I2C_IsDeviceReady+0x144>)
 80040c0:	9a04      	ldr	r2, [sp, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	6053      	str	r3, [r2, #4]
 80040c8:	f7fe ffc2 	bl	8003050 <HAL_GetTick>
 80040cc:	9003      	str	r0, [sp, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	699d      	ldr	r5, [r3, #24]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	096d      	lsrs	r5, r5, #5
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	4015      	ands	r5, r2
 80040dc:	4013      	ands	r3, r2
 80040de:	431d      	orrs	r5, r3
 80040e0:	d01c      	beq.n	800411c <HAL_I2C_IsDeviceReady+0xa8>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	2710      	movs	r7, #16
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	001a      	movs	r2, r3
 80040ea:	403a      	ands	r2, r7
 80040ec:	423b      	tst	r3, r7
 80040ee:	d12d      	bne.n	800414c <HAL_I2C_IsDeviceReady+0xd8>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	2120      	movs	r1, #32
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	0020      	movs	r0, r4
 80040f8:	0033      	movs	r3, r6
 80040fa:	f7ff fdf1 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d121      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 8004102:	2320      	movs	r3, #32
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	0005      	movs	r5, r0
 8004108:	61d3      	str	r3, [r2, #28]
 800410a:	0022      	movs	r2, r4
 800410c:	3440      	adds	r4, #64	; 0x40
 800410e:	3241      	adds	r2, #65	; 0x41
 8004110:	7013      	strb	r3, [r2, #0]
 8004112:	7020      	strb	r0, [r4, #0]
 8004114:	e017      	b.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 8004116:	23a0      	movs	r3, #160	; 0xa0
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	e7d1      	b.n	80040c0 <HAL_I2C_IsDeviceReady+0x4c>
 800411c:	1c73      	adds	r3, r6, #1
 800411e:	d0d6      	beq.n	80040ce <HAL_I2C_IsDeviceReady+0x5a>
 8004120:	f7fe ff96 	bl	8003050 <HAL_GetTick>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	1ac0      	subs	r0, r0, r3
 8004128:	42b0      	cmp	r0, r6
 800412a:	d801      	bhi.n	8004130 <HAL_I2C_IsDeviceReady+0xbc>
 800412c:	2e00      	cmp	r6, #0
 800412e:	d1ce      	bne.n	80040ce <HAL_I2C_IsDeviceReady+0x5a>
 8004130:	0022      	movs	r2, r4
 8004132:	2320      	movs	r3, #32
 8004134:	3241      	adds	r2, #65	; 0x41
 8004136:	7013      	strb	r3, [r2, #0]
 8004138:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800413a:	2501      	movs	r5, #1
 800413c:	4313      	orrs	r3, r2
 800413e:	6463      	str	r3, [r4, #68]	; 0x44
 8004140:	2300      	movs	r3, #0
 8004142:	3440      	adds	r4, #64	; 0x40
 8004144:	7023      	strb	r3, [r4, #0]
 8004146:	0028      	movs	r0, r5
 8004148:	b009      	add	sp, #36	; 0x24
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2120      	movs	r1, #32
 8004154:	0033      	movs	r3, r6
 8004156:	0020      	movs	r0, r4
 8004158:	f7ff fdc2 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 800415c:	1e02      	subs	r2, r0, #0
 800415e:	d1f2      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	9805      	ldr	r0, [sp, #20]
 8004164:	61df      	str	r7, [r3, #28]
 8004166:	2720      	movs	r7, #32
 8004168:	61df      	str	r7, [r3, #28]
 800416a:	9907      	ldr	r1, [sp, #28]
 800416c:	4281      	cmp	r1, r0
 800416e:	d10f      	bne.n	8004190 <HAL_I2C_IsDeviceReady+0x11c>
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	6858      	ldr	r0, [r3, #4]
 8004174:	01c9      	lsls	r1, r1, #7
 8004176:	4301      	orrs	r1, r0
 8004178:	6059      	str	r1, [r3, #4]
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	0039      	movs	r1, r7
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0020      	movs	r0, r4
 8004182:	0033      	movs	r3, r6
 8004184:	f7ff fdac 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8004188:	2800      	cmp	r0, #0
 800418a:	d1dc      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	61df      	str	r7, [r3, #28]
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	9a05      	ldr	r2, [sp, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	9307      	str	r3, [sp, #28]
 8004198:	9b07      	ldr	r3, [sp, #28]
 800419a:	4293      	cmp	r3, r2
 800419c:	d200      	bcs.n	80041a0 <HAL_I2C_IsDeviceReady+0x12c>
 800419e:	e78b      	b.n	80040b8 <HAL_I2C_IsDeviceReady+0x44>
 80041a0:	0022      	movs	r2, r4
 80041a2:	2320      	movs	r3, #32
 80041a4:	3241      	adds	r2, #65	; 0x41
 80041a6:	7013      	strb	r3, [r2, #0]
 80041a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041aa:	3440      	adds	r4, #64	; 0x40
 80041ac:	4313      	orrs	r3, r2
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	7023      	strb	r3, [r4, #0]
 80041b4:	e7c7      	b.n	8004146 <HAL_I2C_IsDeviceReady+0xd2>
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	02002000 	.word	0x02002000

080041bc <HAL_I2CEx_ConfigAnalogFilter>:
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	0004      	movs	r4, r0
 80041c0:	3441      	adds	r4, #65	; 0x41
 80041c2:	7822      	ldrb	r2, [r4, #0]
 80041c4:	0003      	movs	r3, r0
 80041c6:	000f      	movs	r7, r1
 80041c8:	2002      	movs	r0, #2
 80041ca:	b2d6      	uxtb	r6, r2
 80041cc:	2a20      	cmp	r2, #32
 80041ce:	d118      	bne.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80041d0:	001d      	movs	r5, r3
 80041d2:	3540      	adds	r5, #64	; 0x40
 80041d4:	782a      	ldrb	r2, [r5, #0]
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	d013      	beq.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	7022      	strb	r2, [r4, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3a23      	subs	r2, #35	; 0x23
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	4807      	ldr	r0, [pc, #28]	; (8004204 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80041e6:	4391      	bics	r1, r2
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	4001      	ands	r1, r0
 80041ee:	2000      	movs	r0, #0
 80041f0:	6019      	str	r1, [r3, #0]
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	4339      	orrs	r1, r7
 80041f6:	6019      	str	r1, [r3, #0]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	7026      	strb	r6, [r4, #0]
 8004200:	7028      	strb	r0, [r5, #0]
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004204:	ffffefff 	.word	0xffffefff

08004208 <HAL_I2CEx_ConfigDigitalFilter>:
 8004208:	0002      	movs	r2, r0
 800420a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420c:	3241      	adds	r2, #65	; 0x41
 800420e:	7814      	ldrb	r4, [r2, #0]
 8004210:	0003      	movs	r3, r0
 8004212:	b2e5      	uxtb	r5, r4
 8004214:	2002      	movs	r0, #2
 8004216:	2c20      	cmp	r4, #32
 8004218:	d117      	bne.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x42>
 800421a:	001c      	movs	r4, r3
 800421c:	3440      	adds	r4, #64	; 0x40
 800421e:	7826      	ldrb	r6, [r4, #0]
 8004220:	2e01      	cmp	r6, #1
 8004222:	d012      	beq.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8004224:	3022      	adds	r0, #34	; 0x22
 8004226:	7010      	strb	r0, [r2, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3823      	subs	r0, #35	; 0x23
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	4f07      	ldr	r7, [pc, #28]	; (800424c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
 8004230:	4386      	bics	r6, r0
 8004232:	601e      	str	r6, [r3, #0]
 8004234:	681e      	ldr	r6, [r3, #0]
 8004236:	0209      	lsls	r1, r1, #8
 8004238:	403e      	ands	r6, r7
 800423a:	4331      	orrs	r1, r6
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	4308      	orrs	r0, r1
 8004242:	6018      	str	r0, [r3, #0]
 8004244:	2000      	movs	r0, #0
 8004246:	7015      	strb	r5, [r2, #0]
 8004248:	7020      	strb	r0, [r4, #0]
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424c:	fffff0ff 	.word	0xfffff0ff

08004250 <HAL_RCC_GetSysClockFreq>:
 8004250:	220c      	movs	r2, #12
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	68dc      	ldr	r4, [r3, #12]
 8004258:	4022      	ands	r2, r4
 800425a:	2a08      	cmp	r2, #8
 800425c:	d031      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0x72>
 800425e:	2a0c      	cmp	r2, #12
 8004260:	d009      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x26>
 8004262:	2a04      	cmp	r2, #4
 8004264:	d125      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x62>
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_RCC_GetSysClockFreq+0x7c>)
 800426a:	06c0      	lsls	r0, r0, #27
 800426c:	17c0      	asrs	r0, r0, #31
 800426e:	4018      	ands	r0, r3
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x80>)
 8004272:	18c0      	adds	r0, r0, r3
 8004274:	bd70      	pop	{r4, r5, r6, pc}
 8004276:	02a2      	lsls	r2, r4, #10
 8004278:	4816      	ldr	r0, [pc, #88]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x84>)
 800427a:	0f12      	lsrs	r2, r2, #28
 800427c:	5c80      	ldrb	r0, [r0, r2]
 800427e:	2280      	movs	r2, #128	; 0x80
 8004280:	0224      	lsls	r4, r4, #8
 8004282:	68d9      	ldr	r1, [r3, #12]
 8004284:	0fa4      	lsrs	r4, r4, #30
 8004286:	0252      	lsls	r2, r2, #9
 8004288:	3401      	adds	r4, #1
 800428a:	4211      	tst	r1, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0x52>
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x88>)
 8004290:	2300      	movs	r3, #0
 8004292:	2100      	movs	r1, #0
 8004294:	f7fc f802 	bl	800029c <__aeabi_lmul>
 8004298:	0022      	movs	r2, r4
 800429a:	2300      	movs	r3, #0
 800429c:	f7fb ffde 	bl	800025c <__aeabi_uldivmod>
 80042a0:	e7e8      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x24>
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2310      	movs	r3, #16
 80042a6:	421a      	tst	r2, r3
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x5e>
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_RCC_GetSysClockFreq+0x8c>)
 80042ac:	e7f0      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x80>)
 80042b0:	e7ee      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 80042b2:	2080      	movs	r0, #128	; 0x80
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	0200      	lsls	r0, r0, #8
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	0f5b      	lsrs	r3, r3, #29
 80042bc:	3301      	adds	r3, #1
 80042be:	4098      	lsls	r0, r3
 80042c0:	e7d8      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x24>
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x88>)
 80042c4:	e7d6      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x24>
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	40021000 	.word	0x40021000
 80042cc:	ff48e500 	.word	0xff48e500
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	08006634 	.word	0x08006634
 80042d8:	007a1200 	.word	0x007a1200
 80042dc:	003d0900 	.word	0x003d0900

080042e0 <HAL_RCC_OscConfig>:
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	0005      	movs	r5, r0
 80042e4:	b085      	sub	sp, #20
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d05a      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80042ea:	230c      	movs	r3, #12
 80042ec:	4cbe      	ldr	r4, [pc, #760]	; (80045e8 <HAL_RCC_OscConfig+0x308>)
 80042ee:	6802      	ldr	r2, [r0, #0]
 80042f0:	68e6      	ldr	r6, [r4, #12]
 80042f2:	68e7      	ldr	r7, [r4, #12]
 80042f4:	401e      	ands	r6, r3
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	0019      	movs	r1, r3
 80042fc:	401f      	ands	r7, r3
 80042fe:	07d2      	lsls	r2, r2, #31
 8004300:	d442      	bmi.n	8004388 <HAL_RCC_OscConfig+0xa8>
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	079b      	lsls	r3, r3, #30
 8004306:	d500      	bpl.n	800430a <HAL_RCC_OscConfig+0x2a>
 8004308:	e08b      	b.n	8004422 <HAL_RCC_OscConfig+0x142>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	06db      	lsls	r3, r3, #27
 800430e:	d529      	bpl.n	8004364 <HAL_RCC_OscConfig+0x84>
 8004310:	2e00      	cmp	r6, #0
 8004312:	d000      	beq.n	8004316 <HAL_RCC_OscConfig+0x36>
 8004314:	e0dc      	b.n	80044d0 <HAL_RCC_OscConfig+0x1f0>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	059b      	lsls	r3, r3, #22
 800431a:	d502      	bpl.n	8004322 <HAL_RCC_OscConfig+0x42>
 800431c:	69eb      	ldr	r3, [r5, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d03e      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 8004322:	6862      	ldr	r2, [r4, #4]
 8004324:	49b1      	ldr	r1, [pc, #708]	; (80045ec <HAL_RCC_OscConfig+0x30c>)
 8004326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004328:	400a      	ands	r2, r1
 800432a:	431a      	orrs	r2, r3
 800432c:	6062      	str	r2, [r4, #4]
 800432e:	6861      	ldr	r1, [r4, #4]
 8004330:	6a2a      	ldr	r2, [r5, #32]
 8004332:	0209      	lsls	r1, r1, #8
 8004334:	0a09      	lsrs	r1, r1, #8
 8004336:	0612      	lsls	r2, r2, #24
 8004338:	430a      	orrs	r2, r1
 800433a:	6062      	str	r2, [r4, #4]
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	0b5b      	lsrs	r3, r3, #13
 8004340:	3301      	adds	r3, #1
 8004342:	0212      	lsls	r2, r2, #8
 8004344:	409a      	lsls	r2, r3
 8004346:	0013      	movs	r3, r2
 8004348:	68e1      	ldr	r1, [r4, #12]
 800434a:	060a      	lsls	r2, r1, #24
 800434c:	49a8      	ldr	r1, [pc, #672]	; (80045f0 <HAL_RCC_OscConfig+0x310>)
 800434e:	0f12      	lsrs	r2, r2, #28
 8004350:	5c8a      	ldrb	r2, [r1, r2]
 8004352:	40d3      	lsrs	r3, r2
 8004354:	4aa7      	ldr	r2, [pc, #668]	; (80045f4 <HAL_RCC_OscConfig+0x314>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4ba7      	ldr	r3, [pc, #668]	; (80045f8 <HAL_RCC_OscConfig+0x318>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	f7fe fe34 	bl	8002fc8 <HAL_InitTick>
 8004360:	2800      	cmp	r0, #0
 8004362:	d134      	bne.n	80043ce <HAL_RCC_OscConfig+0xee>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	071b      	lsls	r3, r3, #28
 8004368:	d500      	bpl.n	800436c <HAL_RCC_OscConfig+0x8c>
 800436a:	e0e8      	b.n	800453e <HAL_RCC_OscConfig+0x25e>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	075b      	lsls	r3, r3, #29
 8004370:	d500      	bpl.n	8004374 <HAL_RCC_OscConfig+0x94>
 8004372:	e10a      	b.n	800458a <HAL_RCC_OscConfig+0x2aa>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	d500      	bpl.n	800437c <HAL_RCC_OscConfig+0x9c>
 800437a:	e18e      	b.n	800469a <HAL_RCC_OscConfig+0x3ba>
 800437c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d000      	beq.n	8004384 <HAL_RCC_OscConfig+0xa4>
 8004382:	e1bd      	b.n	8004700 <HAL_RCC_OscConfig+0x420>
 8004384:	2000      	movs	r0, #0
 8004386:	e022      	b.n	80043ce <HAL_RCC_OscConfig+0xee>
 8004388:	2e08      	cmp	r6, #8
 800438a:	d003      	beq.n	8004394 <HAL_RCC_OscConfig+0xb4>
 800438c:	2e0c      	cmp	r6, #12
 800438e:	d109      	bne.n	80043a4 <HAL_RCC_OscConfig+0xc4>
 8004390:	2f00      	cmp	r7, #0
 8004392:	d007      	beq.n	80043a4 <HAL_RCC_OscConfig+0xc4>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	039b      	lsls	r3, r3, #14
 8004398:	d5b3      	bpl.n	8004302 <HAL_RCC_OscConfig+0x22>
 800439a:	686b      	ldr	r3, [r5, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1b0      	bne.n	8004302 <HAL_RCC_OscConfig+0x22>
 80043a0:	2001      	movs	r0, #1
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0xee>
 80043a4:	686a      	ldr	r2, [r5, #4]
 80043a6:	428a      	cmp	r2, r1
 80043a8:	d113      	bne.n	80043d2 <HAL_RCC_OscConfig+0xf2>
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	f7fe fe4e 	bl	8003050 <HAL_GetTick>
 80043b4:	9000      	str	r0, [sp, #0]
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	0292      	lsls	r2, r2, #10
 80043bc:	4213      	tst	r3, r2
 80043be:	d1a0      	bne.n	8004302 <HAL_RCC_OscConfig+0x22>
 80043c0:	f7fe fe46 	bl	8003050 <HAL_GetTick>
 80043c4:	9b00      	ldr	r3, [sp, #0]
 80043c6:	1ac0      	subs	r0, r0, r3
 80043c8:	2864      	cmp	r0, #100	; 0x64
 80043ca:	d9f4      	bls.n	80043b6 <HAL_RCC_OscConfig+0xd6>
 80043cc:	2003      	movs	r0, #3
 80043ce:	b005      	add	sp, #20
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	21a0      	movs	r1, #160	; 0xa0
 80043d4:	02c9      	lsls	r1, r1, #11
 80043d6:	428a      	cmp	r2, r1
 80043d8:	d105      	bne.n	80043e6 <HAL_RCC_OscConfig+0x106>
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	6821      	ldr	r1, [r4, #0]
 80043de:	02d2      	lsls	r2, r2, #11
 80043e0:	430a      	orrs	r2, r1
 80043e2:	6022      	str	r2, [r4, #0]
 80043e4:	e7e1      	b.n	80043aa <HAL_RCC_OscConfig+0xca>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	4884      	ldr	r0, [pc, #528]	; (80045fc <HAL_RCC_OscConfig+0x31c>)
 80043ea:	4001      	ands	r1, r0
 80043ec:	6021      	str	r1, [r4, #0]
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	400b      	ands	r3, r1
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	4982      	ldr	r1, [pc, #520]	; (8004600 <HAL_RCC_OscConfig+0x320>)
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	400b      	ands	r3, r1
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d1d6      	bne.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004402:	f7fe fe25 	bl	8003050 <HAL_GetTick>
 8004406:	9000      	str	r0, [sp, #0]
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	0292      	lsls	r2, r2, #10
 800440e:	4213      	tst	r3, r2
 8004410:	d100      	bne.n	8004414 <HAL_RCC_OscConfig+0x134>
 8004412:	e776      	b.n	8004302 <HAL_RCC_OscConfig+0x22>
 8004414:	f7fe fe1c 	bl	8003050 <HAL_GetTick>
 8004418:	9b00      	ldr	r3, [sp, #0]
 800441a:	1ac0      	subs	r0, r0, r3
 800441c:	2864      	cmp	r0, #100	; 0x64
 800441e:	d9f3      	bls.n	8004408 <HAL_RCC_OscConfig+0x128>
 8004420:	e7d4      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004422:	68ea      	ldr	r2, [r5, #12]
 8004424:	2e04      	cmp	r6, #4
 8004426:	d003      	beq.n	8004430 <HAL_RCC_OscConfig+0x150>
 8004428:	2e0c      	cmp	r6, #12
 800442a:	d124      	bne.n	8004476 <HAL_RCC_OscConfig+0x196>
 800442c:	2f00      	cmp	r7, #0
 800442e:	d122      	bne.n	8004476 <HAL_RCC_OscConfig+0x196>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	075b      	lsls	r3, r3, #29
 8004434:	d501      	bpl.n	800443a <HAL_RCC_OscConfig+0x15a>
 8004436:	2a00      	cmp	r2, #0
 8004438:	d0b2      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	692b      	ldr	r3, [r5, #16]
 800443e:	4871      	ldr	r0, [pc, #452]	; (8004604 <HAL_RCC_OscConfig+0x324>)
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4001      	ands	r1, r0
 8004444:	430b      	orrs	r3, r1
 8004446:	2109      	movs	r1, #9
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	438b      	bics	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	f7ff fefd 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	4a65      	ldr	r2, [pc, #404]	; (80045f0 <HAL_RCC_OscConfig+0x310>)
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	0f1b      	lsrs	r3, r3, #28
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	40d8      	lsrs	r0, r3
 8004462:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_RCC_OscConfig+0x314>)
 8004464:	6018      	str	r0, [r3, #0]
 8004466:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <HAL_RCC_OscConfig+0x318>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f7fe fdad 	bl	8002fc8 <HAL_InitTick>
 800446e:	2800      	cmp	r0, #0
 8004470:	d100      	bne.n	8004474 <HAL_RCC_OscConfig+0x194>
 8004472:	e74a      	b.n	800430a <HAL_RCC_OscConfig+0x2a>
 8004474:	e7ab      	b.n	80043ce <HAL_RCC_OscConfig+0xee>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	2a00      	cmp	r2, #0
 800447a:	d018      	beq.n	80044ae <HAL_RCC_OscConfig+0x1ce>
 800447c:	2109      	movs	r1, #9
 800447e:	438b      	bics	r3, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	f7fe fde4 	bl	8003050 <HAL_GetTick>
 8004488:	0007      	movs	r7, r0
 800448a:	2204      	movs	r2, #4
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	4213      	tst	r3, r2
 8004490:	d007      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1c2>
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	692b      	ldr	r3, [r5, #16]
 8004496:	495b      	ldr	r1, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x324>)
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	400a      	ands	r2, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	e733      	b.n	800430a <HAL_RCC_OscConfig+0x2a>
 80044a2:	f7fe fdd5 	bl	8003050 <HAL_GetTick>
 80044a6:	1bc0      	subs	r0, r0, r7
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d9ee      	bls.n	800448a <HAL_RCC_OscConfig+0x1aa>
 80044ac:	e78e      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 80044ae:	2201      	movs	r2, #1
 80044b0:	4393      	bics	r3, r2
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	f7fe fdcc 	bl	8003050 <HAL_GetTick>
 80044b8:	0007      	movs	r7, r0
 80044ba:	2204      	movs	r2, #4
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	4213      	tst	r3, r2
 80044c0:	d100      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1e4>
 80044c2:	e722      	b.n	800430a <HAL_RCC_OscConfig+0x2a>
 80044c4:	f7fe fdc4 	bl	8003050 <HAL_GetTick>
 80044c8:	1bc0      	subs	r0, r0, r7
 80044ca:	2802      	cmp	r0, #2
 80044cc:	d9f5      	bls.n	80044ba <HAL_RCC_OscConfig+0x1da>
 80044ce:	e77d      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 80044d0:	69eb      	ldr	r3, [r5, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d020      	beq.n	8004518 <HAL_RCC_OscConfig+0x238>
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4313      	orrs	r3, r2
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	f7fe fdb6 	bl	8003050 <HAL_GetTick>
 80044e4:	0007      	movs	r7, r0
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	4213      	tst	r3, r2
 80044ee:	d00d      	beq.n	800450c <HAL_RCC_OscConfig+0x22c>
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <HAL_RCC_OscConfig+0x30c>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80044f8:	4313      	orrs	r3, r2
 80044fa:	6063      	str	r3, [r4, #4]
 80044fc:	6862      	ldr	r2, [r4, #4]
 80044fe:	6a2b      	ldr	r3, [r5, #32]
 8004500:	0212      	lsls	r2, r2, #8
 8004502:	061b      	lsls	r3, r3, #24
 8004504:	0a12      	lsrs	r2, r2, #8
 8004506:	4313      	orrs	r3, r2
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	e72b      	b.n	8004364 <HAL_RCC_OscConfig+0x84>
 800450c:	f7fe fda0 	bl	8003050 <HAL_GetTick>
 8004510:	1bc0      	subs	r0, r0, r7
 8004512:	2802      	cmp	r0, #2
 8004514:	d9e7      	bls.n	80044e6 <HAL_RCC_OscConfig+0x206>
 8004516:	e759      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4a3b      	ldr	r2, [pc, #236]	; (8004608 <HAL_RCC_OscConfig+0x328>)
 800451c:	4013      	ands	r3, r2
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	f7fe fd96 	bl	8003050 <HAL_GetTick>
 8004524:	0007      	movs	r7, r0
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4213      	tst	r3, r2
 800452e:	d100      	bne.n	8004532 <HAL_RCC_OscConfig+0x252>
 8004530:	e718      	b.n	8004364 <HAL_RCC_OscConfig+0x84>
 8004532:	f7fe fd8d 	bl	8003050 <HAL_GetTick>
 8004536:	1bc0      	subs	r0, r0, r7
 8004538:	2802      	cmp	r0, #2
 800453a:	d9f4      	bls.n	8004526 <HAL_RCC_OscConfig+0x246>
 800453c:	e746      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 800453e:	696a      	ldr	r2, [r5, #20]
 8004540:	2301      	movs	r3, #1
 8004542:	2a00      	cmp	r2, #0
 8004544:	d010      	beq.n	8004568 <HAL_RCC_OscConfig+0x288>
 8004546:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004548:	4313      	orrs	r3, r2
 800454a:	6523      	str	r3, [r4, #80]	; 0x50
 800454c:	f7fe fd80 	bl	8003050 <HAL_GetTick>
 8004550:	0007      	movs	r7, r0
 8004552:	2202      	movs	r2, #2
 8004554:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004556:	4213      	tst	r3, r2
 8004558:	d000      	beq.n	800455c <HAL_RCC_OscConfig+0x27c>
 800455a:	e707      	b.n	800436c <HAL_RCC_OscConfig+0x8c>
 800455c:	f7fe fd78 	bl	8003050 <HAL_GetTick>
 8004560:	1bc0      	subs	r0, r0, r7
 8004562:	2802      	cmp	r0, #2
 8004564:	d9f5      	bls.n	8004552 <HAL_RCC_OscConfig+0x272>
 8004566:	e731      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004568:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800456a:	439a      	bics	r2, r3
 800456c:	6522      	str	r2, [r4, #80]	; 0x50
 800456e:	f7fe fd6f 	bl	8003050 <HAL_GetTick>
 8004572:	0007      	movs	r7, r0
 8004574:	2202      	movs	r2, #2
 8004576:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004578:	4213      	tst	r3, r2
 800457a:	d100      	bne.n	800457e <HAL_RCC_OscConfig+0x29e>
 800457c:	e6f6      	b.n	800436c <HAL_RCC_OscConfig+0x8c>
 800457e:	f7fe fd67 	bl	8003050 <HAL_GetTick>
 8004582:	1bc0      	subs	r0, r0, r7
 8004584:	2802      	cmp	r0, #2
 8004586:	d9f5      	bls.n	8004574 <HAL_RCC_OscConfig+0x294>
 8004588:	e720      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	2100      	movs	r1, #0
 800458e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004590:	055b      	lsls	r3, r3, #21
 8004592:	9100      	str	r1, [sp, #0]
 8004594:	421a      	tst	r2, r3
 8004596:	d104      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2c2>
 8004598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800459a:	4313      	orrs	r3, r2
 800459c:	63a3      	str	r3, [r4, #56]	; 0x38
 800459e:	2301      	movs	r3, #1
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	4f19      	ldr	r7, [pc, #100]	; (800460c <HAL_RCC_OscConfig+0x32c>)
 80045a6:	0052      	lsls	r2, r2, #1
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4213      	tst	r3, r2
 80045ac:	d008      	beq.n	80045c0 <HAL_RCC_OscConfig+0x2e0>
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	68ab      	ldr	r3, [r5, #8]
 80045b2:	0052      	lsls	r2, r2, #1
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d12b      	bne.n	8004610 <HAL_RCC_OscConfig+0x330>
 80045b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80045ba:	4313      	orrs	r3, r2
 80045bc:	6523      	str	r3, [r4, #80]	; 0x50
 80045be:	e04c      	b.n	800465a <HAL_RCC_OscConfig+0x37a>
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	f7fe fd41 	bl	8003050 <HAL_GetTick>
 80045ce:	9001      	str	r0, [sp, #4]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	0052      	lsls	r2, r2, #1
 80045d6:	4213      	tst	r3, r2
 80045d8:	d1e9      	bne.n	80045ae <HAL_RCC_OscConfig+0x2ce>
 80045da:	f7fe fd39 	bl	8003050 <HAL_GetTick>
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	1ac0      	subs	r0, r0, r3
 80045e2:	2864      	cmp	r0, #100	; 0x64
 80045e4:	d9f4      	bls.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
 80045e6:	e6f1      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	ffff1fff 	.word	0xffff1fff
 80045f0:	08006624 	.word	0x08006624
 80045f4:	20000008 	.word	0x20000008
 80045f8:	20000030 	.word	0x20000030
 80045fc:	fffeffff 	.word	0xfffeffff
 8004600:	fffbffff 	.word	0xfffbffff
 8004604:	ffffe0ff 	.word	0xffffe0ff
 8004608:	fffffeff 	.word	0xfffffeff
 800460c:	40007000 	.word	0x40007000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <HAL_RCC_OscConfig+0x362>
 8004614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004616:	4a6b      	ldr	r2, [pc, #428]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 8004618:	4013      	ands	r3, r2
 800461a:	6523      	str	r3, [r4, #80]	; 0x50
 800461c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800461e:	4a6a      	ldr	r2, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 8004620:	4013      	ands	r3, r2
 8004622:	6523      	str	r3, [r4, #80]	; 0x50
 8004624:	f7fe fd14 	bl	8003050 <HAL_GetTick>
 8004628:	0007      	movs	r7, r0
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	4213      	tst	r3, r2
 8004632:	d01a      	beq.n	800466a <HAL_RCC_OscConfig+0x38a>
 8004634:	f7fe fd0c 	bl	8003050 <HAL_GetTick>
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 800463a:	1bc0      	subs	r0, r0, r7
 800463c:	4298      	cmp	r0, r3
 800463e:	d9f4      	bls.n	800462a <HAL_RCC_OscConfig+0x34a>
 8004640:	e6c4      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004642:	21a0      	movs	r1, #160	; 0xa0
 8004644:	00c9      	lsls	r1, r1, #3
 8004646:	428b      	cmp	r3, r1
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x39c>
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	430b      	orrs	r3, r1
 8004652:	6523      	str	r3, [r4, #80]	; 0x50
 8004654:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004656:	431a      	orrs	r2, r3
 8004658:	6522      	str	r2, [r4, #80]	; 0x50
 800465a:	f7fe fcf9 	bl	8003050 <HAL_GetTick>
 800465e:	0007      	movs	r7, r0
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	4213      	tst	r3, r2
 8004668:	d010      	beq.n	800468c <HAL_RCC_OscConfig+0x3ac>
 800466a:	9b00      	ldr	r3, [sp, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d000      	beq.n	8004672 <HAL_RCC_OscConfig+0x392>
 8004670:	e680      	b.n	8004374 <HAL_RCC_OscConfig+0x94>
 8004672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004674:	4a56      	ldr	r2, [pc, #344]	; (80047d0 <HAL_RCC_OscConfig+0x4f0>)
 8004676:	4013      	ands	r3, r2
 8004678:	63a3      	str	r3, [r4, #56]	; 0x38
 800467a:	e67b      	b.n	8004374 <HAL_RCC_OscConfig+0x94>
 800467c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800467e:	4a51      	ldr	r2, [pc, #324]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 8004680:	4013      	ands	r3, r2
 8004682:	6523      	str	r3, [r4, #80]	; 0x50
 8004684:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004686:	4a50      	ldr	r2, [pc, #320]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 8004688:	4013      	ands	r3, r2
 800468a:	e797      	b.n	80045bc <HAL_RCC_OscConfig+0x2dc>
 800468c:	f7fe fce0 	bl	8003050 <HAL_GetTick>
 8004690:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004692:	1bc0      	subs	r0, r0, r7
 8004694:	4298      	cmp	r0, r3
 8004696:	d9e3      	bls.n	8004660 <HAL_RCC_OscConfig+0x380>
 8004698:	e698      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 800469a:	69a9      	ldr	r1, [r5, #24]
 800469c:	2301      	movs	r3, #1
 800469e:	4a4d      	ldr	r2, [pc, #308]	; (80047d4 <HAL_RCC_OscConfig+0x4f4>)
 80046a0:	2900      	cmp	r1, #0
 80046a2:	d018      	beq.n	80046d6 <HAL_RCC_OscConfig+0x3f6>
 80046a4:	68a1      	ldr	r1, [r4, #8]
 80046a6:	4319      	orrs	r1, r3
 80046a8:	60a1      	str	r1, [r4, #8]
 80046aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6363      	str	r3, [r4, #52]	; 0x34
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	6a11      	ldr	r1, [r2, #32]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6213      	str	r3, [r2, #32]
 80046ba:	f7fe fcc9 	bl	8003050 <HAL_GetTick>
 80046be:	0007      	movs	r7, r0
 80046c0:	2202      	movs	r2, #2
 80046c2:	68a3      	ldr	r3, [r4, #8]
 80046c4:	4213      	tst	r3, r2
 80046c6:	d000      	beq.n	80046ca <HAL_RCC_OscConfig+0x3ea>
 80046c8:	e658      	b.n	800437c <HAL_RCC_OscConfig+0x9c>
 80046ca:	f7fe fcc1 	bl	8003050 <HAL_GetTick>
 80046ce:	1bc0      	subs	r0, r0, r7
 80046d0:	2802      	cmp	r0, #2
 80046d2:	d9f5      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3e0>
 80046d4:	e67a      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 80046d6:	68a1      	ldr	r1, [r4, #8]
 80046d8:	4399      	bics	r1, r3
 80046da:	60a1      	str	r1, [r4, #8]
 80046dc:	6a13      	ldr	r3, [r2, #32]
 80046de:	493e      	ldr	r1, [pc, #248]	; (80047d8 <HAL_RCC_OscConfig+0x4f8>)
 80046e0:	400b      	ands	r3, r1
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	f7fe fcb4 	bl	8003050 <HAL_GetTick>
 80046e8:	0007      	movs	r7, r0
 80046ea:	2202      	movs	r2, #2
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	4213      	tst	r3, r2
 80046f0:	d100      	bne.n	80046f4 <HAL_RCC_OscConfig+0x414>
 80046f2:	e643      	b.n	800437c <HAL_RCC_OscConfig+0x9c>
 80046f4:	f7fe fcac 	bl	8003050 <HAL_GetTick>
 80046f8:	1bc0      	subs	r0, r0, r7
 80046fa:	2802      	cmp	r0, #2
 80046fc:	d9f5      	bls.n	80046ea <HAL_RCC_OscConfig+0x40a>
 80046fe:	e665      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004700:	2e0c      	cmp	r6, #12
 8004702:	d043      	beq.n	800478c <HAL_RCC_OscConfig+0x4ac>
 8004704:	4a35      	ldr	r2, [pc, #212]	; (80047dc <HAL_RCC_OscConfig+0x4fc>)
 8004706:	2b02      	cmp	r3, #2
 8004708:	d12e      	bne.n	8004768 <HAL_RCC_OscConfig+0x488>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	2780      	movs	r7, #128	; 0x80
 800470e:	4013      	ands	r3, r2
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	f7fe fc9d 	bl	8003050 <HAL_GetTick>
 8004716:	0006      	movs	r6, r0
 8004718:	04bf      	lsls	r7, r7, #18
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	423b      	tst	r3, r7
 800471e:	d11d      	bne.n	800475c <HAL_RCC_OscConfig+0x47c>
 8004720:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004722:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004724:	68e2      	ldr	r2, [r4, #12]
 8004726:	430b      	orrs	r3, r1
 8004728:	492d      	ldr	r1, [pc, #180]	; (80047e0 <HAL_RCC_OscConfig+0x500>)
 800472a:	2680      	movs	r6, #128	; 0x80
 800472c:	400a      	ands	r2, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004732:	04b6      	lsls	r6, r6, #18
 8004734:	4313      	orrs	r3, r2
 8004736:	60e3      	str	r3, [r4, #12]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	045b      	lsls	r3, r3, #17
 800473e:	4313      	orrs	r3, r2
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	f7fe fc85 	bl	8003050 <HAL_GetTick>
 8004746:	0005      	movs	r5, r0
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	4233      	tst	r3, r6
 800474c:	d000      	beq.n	8004750 <HAL_RCC_OscConfig+0x470>
 800474e:	e619      	b.n	8004384 <HAL_RCC_OscConfig+0xa4>
 8004750:	f7fe fc7e 	bl	8003050 <HAL_GetTick>
 8004754:	1b40      	subs	r0, r0, r5
 8004756:	2802      	cmp	r0, #2
 8004758:	d9f6      	bls.n	8004748 <HAL_RCC_OscConfig+0x468>
 800475a:	e637      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 800475c:	f7fe fc78 	bl	8003050 <HAL_GetTick>
 8004760:	1b80      	subs	r0, r0, r6
 8004762:	2802      	cmp	r0, #2
 8004764:	d9d9      	bls.n	800471a <HAL_RCC_OscConfig+0x43a>
 8004766:	e631      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	2680      	movs	r6, #128	; 0x80
 800476c:	4013      	ands	r3, r2
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	f7fe fc6e 	bl	8003050 <HAL_GetTick>
 8004774:	0005      	movs	r5, r0
 8004776:	04b6      	lsls	r6, r6, #18
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	4233      	tst	r3, r6
 800477c:	d100      	bne.n	8004780 <HAL_RCC_OscConfig+0x4a0>
 800477e:	e601      	b.n	8004384 <HAL_RCC_OscConfig+0xa4>
 8004780:	f7fe fc66 	bl	8003050 <HAL_GetTick>
 8004784:	1b40      	subs	r0, r0, r5
 8004786:	2802      	cmp	r0, #2
 8004788:	d9f6      	bls.n	8004778 <HAL_RCC_OscConfig+0x498>
 800478a:	e61f      	b.n	80043cc <HAL_RCC_OscConfig+0xec>
 800478c:	0018      	movs	r0, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d100      	bne.n	8004794 <HAL_RCC_OscConfig+0x4b4>
 8004792:	e61c      	b.n	80043ce <HAL_RCC_OscConfig+0xee>
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800479a:	0252      	lsls	r2, r2, #9
 800479c:	401a      	ands	r2, r3
 800479e:	428a      	cmp	r2, r1
 80047a0:	d000      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4c4>
 80047a2:	e5fd      	b.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80047a4:	22f0      	movs	r2, #240	; 0xf0
 80047a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80047a8:	0392      	lsls	r2, r2, #14
 80047aa:	401a      	ands	r2, r3
 80047ac:	428a      	cmp	r2, r1
 80047ae:	d000      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4d2>
 80047b0:	e5f6      	b.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80047b2:	22c0      	movs	r2, #192	; 0xc0
 80047b4:	0412      	lsls	r2, r2, #16
 80047b6:	4013      	ands	r3, r2
 80047b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d100      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
 80047be:	e5e1      	b.n	8004384 <HAL_RCC_OscConfig+0xa4>
 80047c0:	e5ee      	b.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	fffffeff 	.word	0xfffffeff
 80047c8:	fffffbff 	.word	0xfffffbff
 80047cc:	00001388 	.word	0x00001388
 80047d0:	efffffff 	.word	0xefffffff
 80047d4:	40010000 	.word	0x40010000
 80047d8:	ffffdfff 	.word	0xffffdfff
 80047dc:	feffffff 	.word	0xfeffffff
 80047e0:	ff02ffff 	.word	0xff02ffff

080047e4 <HAL_RCC_ClockConfig>:
 80047e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e6:	1e04      	subs	r4, r0, #0
 80047e8:	9101      	str	r1, [sp, #4]
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc>
 80047ec:	2001      	movs	r0, #1
 80047ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047f0:	2501      	movs	r5, #1
 80047f2:	4e5b      	ldr	r6, [pc, #364]	; (8004960 <HAL_RCC_ClockConfig+0x17c>)
 80047f4:	9a01      	ldr	r2, [sp, #4]
 80047f6:	6833      	ldr	r3, [r6, #0]
 80047f8:	402b      	ands	r3, r5
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d331      	bcc.n	8004862 <HAL_RCC_ClockConfig+0x7e>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	0793      	lsls	r3, r2, #30
 8004802:	d443      	bmi.n	800488c <HAL_RCC_ClockConfig+0xa8>
 8004804:	07d3      	lsls	r3, r2, #31
 8004806:	d449      	bmi.n	800489c <HAL_RCC_ClockConfig+0xb8>
 8004808:	2501      	movs	r5, #1
 800480a:	6833      	ldr	r3, [r6, #0]
 800480c:	9a01      	ldr	r2, [sp, #4]
 800480e:	402b      	ands	r3, r5
 8004810:	4293      	cmp	r3, r2
 8004812:	d909      	bls.n	8004828 <HAL_RCC_ClockConfig+0x44>
 8004814:	6833      	ldr	r3, [r6, #0]
 8004816:	43ab      	bics	r3, r5
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	f7fe fc19 	bl	8003050 <HAL_GetTick>
 800481e:	0007      	movs	r7, r0
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	422b      	tst	r3, r5
 8004824:	d000      	beq.n	8004828 <HAL_RCC_ClockConfig+0x44>
 8004826:	e08c      	b.n	8004942 <HAL_RCC_ClockConfig+0x15e>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	4d4e      	ldr	r5, [pc, #312]	; (8004964 <HAL_RCC_ClockConfig+0x180>)
 800482c:	0753      	lsls	r3, r2, #29
 800482e:	d500      	bpl.n	8004832 <HAL_RCC_ClockConfig+0x4e>
 8004830:	e08f      	b.n	8004952 <HAL_RCC_ClockConfig+0x16e>
 8004832:	0713      	lsls	r3, r2, #28
 8004834:	d506      	bpl.n	8004844 <HAL_RCC_ClockConfig+0x60>
 8004836:	68e9      	ldr	r1, [r5, #12]
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	4a4b      	ldr	r2, [pc, #300]	; (8004968 <HAL_RCC_ClockConfig+0x184>)
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	400a      	ands	r2, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	60eb      	str	r3, [r5, #12]
 8004844:	f7ff fd04 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8004848:	68eb      	ldr	r3, [r5, #12]
 800484a:	4a48      	ldr	r2, [pc, #288]	; (800496c <HAL_RCC_ClockConfig+0x188>)
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	40d8      	lsrs	r0, r3
 8004854:	4b46      	ldr	r3, [pc, #280]	; (8004970 <HAL_RCC_ClockConfig+0x18c>)
 8004856:	6018      	str	r0, [r3, #0]
 8004858:	4b46      	ldr	r3, [pc, #280]	; (8004974 <HAL_RCC_ClockConfig+0x190>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f7fe fbb4 	bl	8002fc8 <HAL_InitTick>
 8004860:	e7c5      	b.n	80047ee <HAL_RCC_ClockConfig+0xa>
 8004862:	6833      	ldr	r3, [r6, #0]
 8004864:	9a01      	ldr	r2, [sp, #4]
 8004866:	43ab      	bics	r3, r5
 8004868:	4313      	orrs	r3, r2
 800486a:	6033      	str	r3, [r6, #0]
 800486c:	f7fe fbf0 	bl	8003050 <HAL_GetTick>
 8004870:	0007      	movs	r7, r0
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	9a01      	ldr	r2, [sp, #4]
 8004876:	402b      	ands	r3, r5
 8004878:	4293      	cmp	r3, r2
 800487a:	d0c0      	beq.n	80047fe <HAL_RCC_ClockConfig+0x1a>
 800487c:	f7fe fbe8 	bl	8003050 <HAL_GetTick>
 8004880:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 8004882:	1bc0      	subs	r0, r0, r7
 8004884:	4298      	cmp	r0, r3
 8004886:	d9f4      	bls.n	8004872 <HAL_RCC_ClockConfig+0x8e>
 8004888:	2003      	movs	r0, #3
 800488a:	e7b0      	b.n	80047ee <HAL_RCC_ClockConfig+0xa>
 800488c:	20f0      	movs	r0, #240	; 0xf0
 800488e:	4935      	ldr	r1, [pc, #212]	; (8004964 <HAL_RCC_ClockConfig+0x180>)
 8004890:	68cb      	ldr	r3, [r1, #12]
 8004892:	4383      	bics	r3, r0
 8004894:	68a0      	ldr	r0, [r4, #8]
 8004896:	4303      	orrs	r3, r0
 8004898:	60cb      	str	r3, [r1, #12]
 800489a:	e7b3      	b.n	8004804 <HAL_RCC_ClockConfig+0x20>
 800489c:	4d31      	ldr	r5, [pc, #196]	; (8004964 <HAL_RCC_ClockConfig+0x180>)
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	2a02      	cmp	r2, #2
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xf4>
 80048a6:	039b      	lsls	r3, r3, #14
 80048a8:	d5a0      	bpl.n	80047ec <HAL_RCC_ClockConfig+0x8>
 80048aa:	2103      	movs	r1, #3
 80048ac:	68eb      	ldr	r3, [r5, #12]
 80048ae:	438b      	bics	r3, r1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60eb      	str	r3, [r5, #12]
 80048b4:	f7fe fbcc 	bl	8003050 <HAL_GetTick>
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	0007      	movs	r7, r0
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d118      	bne.n	80048f2 <HAL_RCC_ClockConfig+0x10e>
 80048c0:	220c      	movs	r2, #12
 80048c2:	68eb      	ldr	r3, [r5, #12]
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d09e      	beq.n	8004808 <HAL_RCC_ClockConfig+0x24>
 80048ca:	f7fe fbc1 	bl	8003050 <HAL_GetTick>
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 80048d0:	1bc0      	subs	r0, r0, r7
 80048d2:	4298      	cmp	r0, r3
 80048d4:	d9f4      	bls.n	80048c0 <HAL_RCC_ClockConfig+0xdc>
 80048d6:	e7d7      	b.n	8004888 <HAL_RCC_ClockConfig+0xa4>
 80048d8:	2a03      	cmp	r2, #3
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xfe>
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	d4e4      	bmi.n	80048aa <HAL_RCC_ClockConfig+0xc6>
 80048e0:	e784      	b.n	80047ec <HAL_RCC_ClockConfig+0x8>
 80048e2:	2a01      	cmp	r2, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_ClockConfig+0x108>
 80048e6:	075b      	lsls	r3, r3, #29
 80048e8:	d4df      	bmi.n	80048aa <HAL_RCC_ClockConfig+0xc6>
 80048ea:	e77f      	b.n	80047ec <HAL_RCC_ClockConfig+0x8>
 80048ec:	059b      	lsls	r3, r3, #22
 80048ee:	d4dc      	bmi.n	80048aa <HAL_RCC_ClockConfig+0xc6>
 80048f0:	e77c      	b.n	80047ec <HAL_RCC_ClockConfig+0x8>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d10b      	bne.n	800490e <HAL_RCC_ClockConfig+0x12a>
 80048f6:	220c      	movs	r2, #12
 80048f8:	68eb      	ldr	r3, [r5, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d083      	beq.n	8004808 <HAL_RCC_ClockConfig+0x24>
 8004900:	f7fe fba6 	bl	8003050 <HAL_GetTick>
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 8004906:	1bc0      	subs	r0, r0, r7
 8004908:	4298      	cmp	r0, r3
 800490a:	d9f4      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x112>
 800490c:	e7bc      	b.n	8004888 <HAL_RCC_ClockConfig+0xa4>
 800490e:	2b01      	cmp	r3, #1
 8004910:	d011      	beq.n	8004936 <HAL_RCC_ClockConfig+0x152>
 8004912:	220c      	movs	r2, #12
 8004914:	68eb      	ldr	r3, [r5, #12]
 8004916:	4213      	tst	r3, r2
 8004918:	d100      	bne.n	800491c <HAL_RCC_ClockConfig+0x138>
 800491a:	e775      	b.n	8004808 <HAL_RCC_ClockConfig+0x24>
 800491c:	f7fe fb98 	bl	8003050 <HAL_GetTick>
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 8004922:	1bc0      	subs	r0, r0, r7
 8004924:	4298      	cmp	r0, r3
 8004926:	d9f4      	bls.n	8004912 <HAL_RCC_ClockConfig+0x12e>
 8004928:	e7ae      	b.n	8004888 <HAL_RCC_ClockConfig+0xa4>
 800492a:	f7fe fb91 	bl	8003050 <HAL_GetTick>
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 8004930:	1bc0      	subs	r0, r0, r7
 8004932:	4298      	cmp	r0, r3
 8004934:	d8a8      	bhi.n	8004888 <HAL_RCC_ClockConfig+0xa4>
 8004936:	220c      	movs	r2, #12
 8004938:	68eb      	ldr	r3, [r5, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	2b04      	cmp	r3, #4
 800493e:	d1f4      	bne.n	800492a <HAL_RCC_ClockConfig+0x146>
 8004940:	e762      	b.n	8004808 <HAL_RCC_ClockConfig+0x24>
 8004942:	f7fe fb85 	bl	8003050 <HAL_GetTick>
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCC_ClockConfig+0x194>)
 8004948:	1bc0      	subs	r0, r0, r7
 800494a:	4298      	cmp	r0, r3
 800494c:	d800      	bhi.n	8004950 <HAL_RCC_ClockConfig+0x16c>
 800494e:	e767      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c>
 8004950:	e79a      	b.n	8004888 <HAL_RCC_ClockConfig+0xa4>
 8004952:	68eb      	ldr	r3, [r5, #12]
 8004954:	4909      	ldr	r1, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x198>)
 8004956:	400b      	ands	r3, r1
 8004958:	68e1      	ldr	r1, [r4, #12]
 800495a:	430b      	orrs	r3, r1
 800495c:	60eb      	str	r3, [r5, #12]
 800495e:	e768      	b.n	8004832 <HAL_RCC_ClockConfig+0x4e>
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	ffffc7ff 	.word	0xffffc7ff
 800496c:	08006624 	.word	0x08006624
 8004970:	20000008 	.word	0x20000008
 8004974:	20000030 	.word	0x20000030
 8004978:	00001388 	.word	0x00001388
 800497c:	fffff8ff 	.word	0xfffff8ff

08004980 <HAL_RCCEx_PeriphCLKConfig>:
 8004980:	6803      	ldr	r3, [r0, #0]
 8004982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004984:	0005      	movs	r5, r0
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	d53c      	bpl.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	2100      	movs	r1, #0
 800498e:	4c5a      	ldr	r4, [pc, #360]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004990:	055b      	lsls	r3, r3, #21
 8004992:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004994:	9100      	str	r1, [sp, #0]
 8004996:	421a      	tst	r2, r3
 8004998:	d104      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800499a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800499c:	4313      	orrs	r3, r2
 800499e:	63a3      	str	r3, [r4, #56]	; 0x38
 80049a0:	2301      	movs	r3, #1
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2780      	movs	r7, #128	; 0x80
 80049a6:	4e55      	ldr	r6, [pc, #340]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80049a8:	007f      	lsls	r7, r7, #1
 80049aa:	6833      	ldr	r3, [r6, #0]
 80049ac:	423b      	tst	r3, r7
 80049ae:	d062      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80049b0:	686a      	ldr	r2, [r5, #4]
 80049b2:	23c0      	movs	r3, #192	; 0xc0
 80049b4:	20c0      	movs	r0, #192	; 0xc0
 80049b6:	0016      	movs	r6, r2
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	0380      	lsls	r0, r0, #14
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	401e      	ands	r6, r3
 80049c0:	4002      	ands	r2, r0
 80049c2:	4001      	ands	r1, r0
 80049c4:	428a      	cmp	r2, r1
 80049c6:	d167      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80049c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049ca:	0011      	movs	r1, r2
 80049cc:	4019      	ands	r1, r3
 80049ce:	421a      	tst	r2, r3
 80049d0:	d16a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80049d2:	6869      	ldr	r1, [r5, #4]
 80049d4:	23c0      	movs	r3, #192	; 0xc0
 80049d6:	000a      	movs	r2, r1
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	401a      	ands	r2, r3
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	4847      	ldr	r0, [pc, #284]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80049e4:	4003      	ands	r3, r0
 80049e6:	20c0      	movs	r0, #192	; 0xc0
 80049e8:	0380      	lsls	r0, r0, #14
 80049ea:	4001      	ands	r1, r0
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049f2:	431a      	orrs	r2, r3
 80049f4:	9b00      	ldr	r3, [sp, #0]
 80049f6:	6522      	str	r2, [r4, #80]	; 0x50
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d103      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80049fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049fe:	4a41      	ldr	r2, [pc, #260]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	07da      	lsls	r2, r3, #31
 8004a08:	d506      	bpl.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a0a:	2003      	movs	r0, #3
 8004a0c:	493a      	ldr	r1, [pc, #232]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a0e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a10:	4382      	bics	r2, r0
 8004a12:	68a8      	ldr	r0, [r5, #8]
 8004a14:	4302      	orrs	r2, r0
 8004a16:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004a18:	079a      	lsls	r2, r3, #30
 8004a1a:	d506      	bpl.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8004a1c:	200c      	movs	r0, #12
 8004a1e:	4936      	ldr	r1, [pc, #216]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a20:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a22:	4382      	bics	r2, r0
 8004a24:	68e8      	ldr	r0, [r5, #12]
 8004a26:	4302      	orrs	r2, r0
 8004a28:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004a2a:	075a      	lsls	r2, r3, #29
 8004a2c:	d506      	bpl.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8004a2e:	4932      	ldr	r1, [pc, #200]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a30:	4835      	ldr	r0, [pc, #212]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004a32:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a34:	4002      	ands	r2, r0
 8004a36:	6928      	ldr	r0, [r5, #16]
 8004a38:	4302      	orrs	r2, r0
 8004a3a:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004a3c:	071a      	lsls	r2, r3, #28
 8004a3e:	d506      	bpl.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004a40:	492d      	ldr	r1, [pc, #180]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a42:	4832      	ldr	r0, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004a44:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a46:	4002      	ands	r2, r0
 8004a48:	6968      	ldr	r0, [r5, #20]
 8004a4a:	4302      	orrs	r2, r0
 8004a4c:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004a4e:	065a      	lsls	r2, r3, #25
 8004a50:	d506      	bpl.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004a52:	4929      	ldr	r1, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a54:	482e      	ldr	r0, [pc, #184]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004a56:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a58:	4002      	ands	r2, r0
 8004a5a:	69e8      	ldr	r0, [r5, #28]
 8004a5c:	4302      	orrs	r2, r0
 8004a5e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004a60:	2000      	movs	r0, #0
 8004a62:	061b      	lsls	r3, r3, #24
 8004a64:	d517      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a66:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004a68:	492a      	ldr	r1, [pc, #168]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004a6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004a6c:	400b      	ands	r3, r1
 8004a6e:	69a9      	ldr	r1, [r5, #24]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a74:	e00f      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a76:	6833      	ldr	r3, [r6, #0]
 8004a78:	433b      	orrs	r3, r7
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f7fe fae8 	bl	8003050 <HAL_GetTick>
 8004a80:	9001      	str	r0, [sp, #4]
 8004a82:	6833      	ldr	r3, [r6, #0]
 8004a84:	423b      	tst	r3, r7
 8004a86:	d193      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004a88:	f7fe fae2 	bl	8003050 <HAL_GetTick>
 8004a8c:	9b01      	ldr	r3, [sp, #4]
 8004a8e:	1ac0      	subs	r0, r0, r3
 8004a90:	2864      	cmp	r0, #100	; 0x64
 8004a92:	d9f6      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004a94:	2003      	movs	r0, #3
 8004a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a98:	429e      	cmp	r6, r3
 8004a9a:	d195      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	0392      	lsls	r2, r2, #14
 8004aa2:	d400      	bmi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004aa4:	e790      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004aa6:	e7f6      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004aa8:	42b1      	cmp	r1, r6
 8004aaa:	d100      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004aac:	e791      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	069b      	lsls	r3, r3, #26
 8004ab2:	d400      	bmi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ab4:	e78d      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004aba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004abc:	0312      	lsls	r2, r2, #12
 8004abe:	4302      	orrs	r2, r0
 8004ac0:	6522      	str	r2, [r4, #80]	; 0x50
 8004ac2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004ac4:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004ac6:	4815      	ldr	r0, [pc, #84]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004ac8:	400b      	ands	r3, r1
 8004aca:	4002      	ands	r2, r0
 8004acc:	6522      	str	r2, [r4, #80]	; 0x50
 8004ace:	6523      	str	r3, [r4, #80]	; 0x50
 8004ad0:	05cb      	lsls	r3, r1, #23
 8004ad2:	d400      	bmi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004ad4:	e77d      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ad6:	f7fe fabb 	bl	8003050 <HAL_GetTick>
 8004ada:	2780      	movs	r7, #128	; 0x80
 8004adc:	0006      	movs	r6, r0
 8004ade:	00bf      	lsls	r7, r7, #2
 8004ae0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ae2:	423b      	tst	r3, r7
 8004ae4:	d000      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ae6:	e774      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ae8:	f7fe fab2 	bl	8003050 <HAL_GetTick>
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004aee:	1b80      	subs	r0, r0, r6
 8004af0:	4298      	cmp	r0, r3
 8004af2:	d9f5      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004af4:	e7ce      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
 8004b00:	ffcfffff 	.word	0xffcfffff
 8004b04:	efffffff 	.word	0xefffffff
 8004b08:	fffff3ff 	.word	0xfffff3ff
 8004b0c:	ffffcfff 	.word	0xffffcfff
 8004b10:	fbffffff 	.word	0xfbffffff
 8004b14:	fff3ffff 	.word	0xfff3ffff
 8004b18:	fffcffff 	.word	0xfffcffff
 8004b1c:	fff7ffff 	.word	0xfff7ffff
 8004b20:	00001388 	.word	0x00001388

08004b24 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	001d      	movs	r5, r3
 8004b28:	0017      	movs	r7, r2
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	000e      	movs	r6, r1
 8004b2e:	0004      	movs	r4, r0
 8004b30:	f7fe fa8e 	bl	8003050 <HAL_GetTick>
 8004b34:	19ed      	adds	r5, r5, r7
 8004b36:	1a2d      	subs	r5, r5, r0
 8004b38:	f7fe fa8a 	bl	8003050 <HAL_GetTick>
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
 8004b3e:	9001      	str	r0, [sp, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	436b      	muls	r3, r5
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	6893      	ldr	r3, [r2, #8]
 8004b4e:	4033      	ands	r3, r6
 8004b50:	429e      	cmp	r6, r3
 8004b52:	d001      	beq.n	8004b58 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
 8004b54:	2000      	movs	r0, #0
 8004b56:	e032      	b.n	8004bbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
 8004b58:	1c7b      	adds	r3, r7, #1
 8004b5a:	d0f7      	beq.n	8004b4c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
 8004b5c:	f7fe fa78 	bl	8003050 <HAL_GetTick>
 8004b60:	9b01      	ldr	r3, [sp, #4]
 8004b62:	1ac0      	subs	r0, r0, r3
 8004b64:	42a8      	cmp	r0, r5
 8004b66:	d32c      	bcc.n	8004bc2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
 8004b68:	21e0      	movs	r1, #224	; 0xe0
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	438a      	bics	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	2282      	movs	r2, #130	; 0x82
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	0052      	lsls	r2, r2, #1
 8004b78:	4291      	cmp	r1, r2
 8004b7a:	d10c      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	68a2      	ldr	r2, [r4, #8]
 8004b80:	0209      	lsls	r1, r1, #8
 8004b82:	428a      	cmp	r2, r1
 8004b84:	d003      	beq.n	8004b8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	00c9      	lsls	r1, r1, #3
 8004b8a:	428a      	cmp	r2, r1
 8004b8c:	d103      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	438a      	bics	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b9a:	0189      	lsls	r1, r1, #6
 8004b9c:	428a      	cmp	r2, r1
 8004b9e:	d106      	bne.n	8004bae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004ba4:	4001      	ands	r1, r0
 8004ba6:	6019      	str	r1, [r3, #0]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	0023      	movs	r3, r4
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	3351      	adds	r3, #81	; 0x51
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2003      	movs	r0, #3
 8004bba:	3450      	adds	r4, #80	; 0x50
 8004bbc:	7023      	strb	r3, [r4, #0]
 8004bbe:	b005      	add	sp, #20
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	4193      	sbcs	r3, r2
 8004bc8:	425b      	negs	r3, r3
 8004bca:	401d      	ands	r5, r3
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	e7ba      	b.n	8004b48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000008 	.word	0x20000008
 8004bd8:	ffffdfff 	.word	0xffffdfff

08004bdc <SPI_EndRxTxTransaction>:
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <SPI_EndRxTxTransaction+0x5c>)
 8004bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004be0:	0004      	movs	r4, r0
 8004be2:	000d      	movs	r5, r1
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	4915      	ldr	r1, [pc, #84]	; (8004c3c <SPI_EndRxTxTransaction+0x60>)
 8004be8:	0016      	movs	r6, r2
 8004bea:	f7fb faab 	bl	8000144 <__udivsi3>
 8004bee:	23fa      	movs	r3, #250	; 0xfa
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4343      	muls	r3, r0
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2382      	movs	r3, #130	; 0x82
 8004bf8:	6861      	ldr	r1, [r4, #4]
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	4299      	cmp	r1, r3
 8004c00:	d10d      	bne.n	8004c1e <SPI_EndRxTxTransaction+0x42>
 8004c02:	0033      	movs	r3, r6
 8004c04:	002a      	movs	r2, r5
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	0020      	movs	r0, r4
 8004c0a:	f7ff ff8b 	bl	8004b24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d00f      	beq.n	8004c32 <SPI_EndRxTxTransaction+0x56>
 8004c12:	2320      	movs	r3, #32
 8004c14:	2003      	movs	r0, #3
 8004c16:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	6563      	str	r3, [r4, #84]	; 0x54
 8004c1c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <SPI_EndRxTxTransaction+0x56>
 8004c24:	9b01      	ldr	r3, [sp, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	4213      	tst	r3, r2
 8004c30:	d1f5      	bne.n	8004c1e <SPI_EndRxTxTransaction+0x42>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e7f2      	b.n	8004c1c <SPI_EndRxTxTransaction+0x40>
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	20000008 	.word	0x20000008
 8004c3c:	016e3600 	.word	0x016e3600

08004c40 <HAL_SPI_Init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	0004      	movs	r4, r0
 8004c44:	2001      	movs	r0, #1
 8004c46:	2c00      	cmp	r4, #0
 8004c48:	d054      	beq.n	8004cf4 <HAL_SPI_Init+0xb4>
 8004c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d152      	bne.n	8004cf6 <HAL_SPI_Init+0xb6>
 8004c50:	2282      	movs	r2, #130	; 0x82
 8004c52:	6861      	ldr	r1, [r4, #4]
 8004c54:	0052      	lsls	r2, r2, #1
 8004c56:	4291      	cmp	r1, r2
 8004c58:	d000      	beq.n	8004c5c <HAL_SPI_Init+0x1c>
 8004c5a:	61e3      	str	r3, [r4, #28]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	0025      	movs	r5, r4
 8004c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c62:	3551      	adds	r5, #81	; 0x51
 8004c64:	782b      	ldrb	r3, [r5, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <HAL_SPI_Init+0x38>
 8004c6c:	0023      	movs	r3, r4
 8004c6e:	3350      	adds	r3, #80	; 0x50
 8004c70:	0020      	movs	r0, r4
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	f7fc fa30 	bl	80010d8 <HAL_SPI_MspInit>
 8004c78:	2002      	movs	r0, #2
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	7028      	strb	r0, [r5, #0]
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	6866      	ldr	r6, [r4, #4]
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	68a7      	ldr	r7, [r4, #8]
 8004c86:	4393      	bics	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
 8004c8a:	2382      	movs	r3, #130	; 0x82
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4033      	ands	r3, r6
 8004c90:	2684      	movs	r6, #132	; 0x84
 8004c92:	0236      	lsls	r6, r6, #8
 8004c94:	403e      	ands	r6, r7
 8004c96:	4333      	orrs	r3, r6
 8004c98:	2680      	movs	r6, #128	; 0x80
 8004c9a:	68e7      	ldr	r7, [r4, #12]
 8004c9c:	0136      	lsls	r6, r6, #4
 8004c9e:	403e      	ands	r6, r7
 8004ca0:	4333      	orrs	r3, r6
 8004ca2:	6926      	ldr	r6, [r4, #16]
 8004ca4:	69a2      	ldr	r2, [r4, #24]
 8004ca6:	4030      	ands	r0, r6
 8004ca8:	2601      	movs	r6, #1
 8004caa:	4303      	orrs	r3, r0
 8004cac:	6960      	ldr	r0, [r4, #20]
 8004cae:	69e7      	ldr	r7, [r4, #28]
 8004cb0:	4030      	ands	r0, r6
 8004cb2:	4303      	orrs	r3, r0
 8004cb4:	2080      	movs	r0, #128	; 0x80
 8004cb6:	0080      	lsls	r0, r0, #2
 8004cb8:	4010      	ands	r0, r2
 8004cba:	4303      	orrs	r3, r0
 8004cbc:	2038      	movs	r0, #56	; 0x38
 8004cbe:	4038      	ands	r0, r7
 8004cc0:	4303      	orrs	r3, r0
 8004cc2:	2080      	movs	r0, #128	; 0x80
 8004cc4:	6a27      	ldr	r7, [r4, #32]
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	4038      	ands	r0, r7
 8004cca:	4303      	orrs	r3, r0
 8004ccc:	2080      	movs	r0, #128	; 0x80
 8004cce:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004cd0:	0180      	lsls	r0, r0, #6
 8004cd2:	4038      	ands	r0, r7
 8004cd4:	4303      	orrs	r3, r0
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	2304      	movs	r3, #4
 8004cda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cdc:	401a      	ands	r2, r3
 8004cde:	330c      	adds	r3, #12
 8004ce0:	4003      	ands	r3, r0
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	604a      	str	r2, [r1, #4]
 8004ce8:	69cb      	ldr	r3, [r1, #28]
 8004cea:	4a05      	ldr	r2, [pc, #20]	; (8004d00 <HAL_SPI_Init+0xc0>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	61cb      	str	r3, [r1, #28]
 8004cf0:	6560      	str	r0, [r4, #84]	; 0x54
 8004cf2:	702e      	strb	r6, [r5, #0]
 8004cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	6163      	str	r3, [r4, #20]
 8004cfc:	e7ae      	b.n	8004c5c <HAL_SPI_Init+0x1c>
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	fffff7ff 	.word	0xfffff7ff

08004d04 <HAL_SPI_Transmit_DMA>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	0006      	movs	r6, r0
 8004d08:	3650      	adds	r6, #80	; 0x50
 8004d0a:	7833      	ldrb	r3, [r6, #0]
 8004d0c:	0004      	movs	r4, r0
 8004d0e:	2502      	movs	r5, #2
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d03e      	beq.n	8004d92 <HAL_SPI_Transmit_DMA+0x8e>
 8004d14:	2301      	movs	r3, #1
 8004d16:	0007      	movs	r7, r0
 8004d18:	7033      	strb	r3, [r6, #0]
 8004d1a:	3751      	adds	r7, #81	; 0x51
 8004d1c:	783b      	ldrb	r3, [r7, #0]
 8004d1e:	b2dd      	uxtb	r5, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d14a      	bne.n	8004dba <HAL_SPI_Transmit_DMA+0xb6>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d032      	beq.n	8004d8e <HAL_SPI_Transmit_DMA+0x8a>
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	d030      	beq.n	8004d8e <HAL_SPI_Transmit_DMA+0x8a>
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	703b      	strb	r3, [r7, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	6543      	str	r3, [r0, #84]	; 0x54
 8004d34:	6383      	str	r3, [r0, #56]	; 0x38
 8004d36:	86c2      	strh	r2, [r0, #54]	; 0x36
 8004d38:	6443      	str	r3, [r0, #68]	; 0x44
 8004d3a:	6403      	str	r3, [r0, #64]	; 0x40
 8004d3c:	8783      	strh	r3, [r0, #60]	; 0x3c
 8004d3e:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	8682      	strh	r2, [r0, #52]	; 0x34
 8004d44:	6301      	str	r1, [r0, #48]	; 0x30
 8004d46:	6802      	ldr	r2, [r0, #0]
 8004d48:	6880      	ldr	r0, [r0, #8]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	d108      	bne.n	8004d62 <HAL_SPI_Transmit_DMA+0x5e>
 8004d50:	2040      	movs	r0, #64	; 0x40
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	4383      	bics	r3, r0
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	6810      	ldr	r0, [r2, #0]
 8004d5c:	01db      	lsls	r3, r3, #7
 8004d5e:	4303      	orrs	r3, r0
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004d64:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <HAL_SPI_Transmit_DMA+0xbc>)
 8004d66:	320c      	adds	r2, #12
 8004d68:	6303      	str	r3, [r0, #48]	; 0x30
 8004d6a:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_SPI_Transmit_DMA+0xc0>)
 8004d6c:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004d6e:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <HAL_SPI_Transmit_DMA+0xc4>)
 8004d70:	6343      	str	r3, [r0, #52]	; 0x34
 8004d72:	2300      	movs	r3, #0
 8004d74:	6383      	str	r3, [r0, #56]	; 0x38
 8004d76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f7fe fcad 	bl	80036d8 <HAL_DMA_Start_IT>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_SPI_Transmit_DMA+0x92>
 8004d82:	2310      	movs	r3, #16
 8004d84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d86:	4313      	orrs	r3, r2
 8004d88:	6563      	str	r3, [r4, #84]	; 0x54
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	703b      	strb	r3, [r7, #0]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	7033      	strb	r3, [r6, #0]
 8004d92:	0028      	movs	r0, r5
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	4211      	tst	r1, r2
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_Transmit_DMA+0xa2>
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	2220      	movs	r2, #32
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	2500      	movs	r5, #0
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
 8004db8:	e7e9      	b.n	8004d8e <HAL_SPI_Transmit_DMA+0x8a>
 8004dba:	2502      	movs	r5, #2
 8004dbc:	e7e7      	b.n	8004d8e <HAL_SPI_Transmit_DMA+0x8a>
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004e01 	.word	0x08004e01
 8004dc8:	08004ddd 	.word	0x08004ddd

08004dcc <HAL_SPI_TxCpltCallback>:
 8004dcc:	4770      	bx	lr

08004dce <HAL_SPI_TxHalfCpltCallback>:
 8004dce:	4770      	bx	lr

08004dd0 <SPI_DMAHalfTransmitCplt>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004dd4:	f7ff fffb 	bl	8004dce <HAL_SPI_TxHalfCpltCallback>
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <HAL_SPI_ErrorCallback>:
 8004dda:	4770      	bx	lr

08004ddc <SPI_DMAError>:
 8004ddc:	2103      	movs	r1, #3
 8004dde:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004de0:	b510      	push	{r4, lr}
 8004de2:	6802      	ldr	r2, [r0, #0]
 8004de4:	6853      	ldr	r3, [r2, #4]
 8004de6:	438b      	bics	r3, r1
 8004de8:	6053      	str	r3, [r2, #4]
 8004dea:	2310      	movs	r3, #16
 8004dec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004dee:	4313      	orrs	r3, r2
 8004df0:	6543      	str	r3, [r0, #84]	; 0x54
 8004df2:	0003      	movs	r3, r0
 8004df4:	2201      	movs	r2, #1
 8004df6:	3351      	adds	r3, #81	; 0x51
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	f7ff ffee 	bl	8004dda <HAL_SPI_ErrorCallback>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <SPI_DMATransmitCplt>:
 8004e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e02:	0005      	movs	r5, r0
 8004e04:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004e06:	f7fe f923 	bl	8003050 <HAL_GetTick>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	2520      	movs	r5, #32
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0002      	movs	r2, r0
 8004e12:	422b      	tst	r3, r5
 8004e14:	d127      	bne.n	8004e66 <SPI_DMATransmitCplt+0x66>
 8004e16:	2002      	movs	r0, #2
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	43a9      	bics	r1, r5
 8004e1e:	6059      	str	r1, [r3, #4]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	4381      	bics	r1, r0
 8004e24:	6059      	str	r1, [r3, #4]
 8004e26:	0020      	movs	r0, r4
 8004e28:	2164      	movs	r1, #100	; 0x64
 8004e2a:	f7ff fed7 	bl	8004bdc <SPI_EndRxTxTransaction>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d002      	beq.n	8004e38 <SPI_DMATransmitCplt+0x38>
 8004e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e34:	431d      	orrs	r5, r3
 8004e36:	6565      	str	r5, [r4, #84]	; 0x54
 8004e38:	68a3      	ldr	r3, [r4, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <SPI_DMATransmitCplt+0x4c>
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	9201      	str	r2, [sp, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004e50:	0023      	movs	r3, r4
 8004e52:	2201      	movs	r2, #1
 8004e54:	3351      	adds	r3, #81	; 0x51
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <SPI_DMATransmitCplt+0x66>
 8004e5e:	0020      	movs	r0, r4
 8004e60:	f7ff ffbb 	bl	8004dda <HAL_SPI_ErrorCallback>
 8004e64:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004e66:	0020      	movs	r0, r4
 8004e68:	f7ff ffb0 	bl	8004dcc <HAL_SPI_TxCpltCallback>
 8004e6c:	e7fa      	b.n	8004e64 <SPI_DMATransmitCplt+0x64>
	...

08004e70 <TIM_Base_SetConfig>:
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	b510      	push	{r4, lr}
 8004e74:	6803      	ldr	r3, [r0, #0]
 8004e76:	05d2      	lsls	r2, r2, #23
 8004e78:	4290      	cmp	r0, r2
 8004e7a:	d005      	beq.n	8004e88 <TIM_Base_SetConfig+0x18>
 8004e7c:	4c10      	ldr	r4, [pc, #64]	; (8004ec0 <TIM_Base_SetConfig+0x50>)
 8004e7e:	42a0      	cmp	r0, r4
 8004e80:	d002      	beq.n	8004e88 <TIM_Base_SetConfig+0x18>
 8004e82:	4c10      	ldr	r4, [pc, #64]	; (8004ec4 <TIM_Base_SetConfig+0x54>)
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d10f      	bne.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e88:	2470      	movs	r4, #112	; 0x70
 8004e8a:	43a3      	bics	r3, r4
 8004e8c:	684c      	ldr	r4, [r1, #4]
 8004e8e:	4323      	orrs	r3, r4
 8004e90:	4290      	cmp	r0, r2
 8004e92:	d005      	beq.n	8004ea0 <TIM_Base_SetConfig+0x30>
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <TIM_Base_SetConfig+0x50>)
 8004e96:	4290      	cmp	r0, r2
 8004e98:	d002      	beq.n	8004ea0 <TIM_Base_SetConfig+0x30>
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <TIM_Base_SetConfig+0x54>)
 8004e9c:	4290      	cmp	r0, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <TIM_Base_SetConfig+0x58>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ca      	ldr	r2, [r1, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	4393      	bics	r3, r2
 8004eac:	690a      	ldr	r2, [r1, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	6003      	str	r3, [r0, #0]
 8004eb2:	688b      	ldr	r3, [r1, #8]
 8004eb4:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004eb6:	680b      	ldr	r3, [r1, #0]
 8004eb8:	6283      	str	r3, [r0, #40]	; 0x28
 8004eba:	2301      	movs	r3, #1
 8004ebc:	6143      	str	r3, [r0, #20]
 8004ebe:	bd10      	pop	{r4, pc}
 8004ec0:	40010800 	.word	0x40010800
 8004ec4:	40011400 	.word	0x40011400
 8004ec8:	fffffcff 	.word	0xfffffcff

08004ecc <HAL_TIM_Base_Init>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	0004      	movs	r4, r0
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	2c00      	cmp	r4, #0
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIM_Base_Init+0x46>
 8004ed6:	0025      	movs	r5, r4
 8004ed8:	3539      	adds	r5, #57	; 0x39
 8004eda:	782b      	ldrb	r3, [r5, #0]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_TIM_Base_Init+0x22>
 8004ee2:	0023      	movs	r3, r4
 8004ee4:	3338      	adds	r3, #56	; 0x38
 8004ee6:	0020      	movs	r0, r4
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	f7fc f93b 	bl	8001164 <HAL_TIM_Base_MspInit>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	702b      	strb	r3, [r5, #0]
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1d21      	adds	r1, r4, #4
 8004ef6:	f7ff ffbb 	bl	8004e70 <TIM_Base_SetConfig>
 8004efa:	0022      	movs	r2, r4
 8004efc:	2301      	movs	r3, #1
 8004efe:	2000      	movs	r0, #0
 8004f00:	323e      	adds	r2, #62	; 0x3e
 8004f02:	7013      	strb	r3, [r2, #0]
 8004f04:	343d      	adds	r4, #61	; 0x3d
 8004f06:	3a04      	subs	r2, #4
 8004f08:	7013      	strb	r3, [r2, #0]
 8004f0a:	7053      	strb	r3, [r2, #1]
 8004f0c:	7093      	strb	r3, [r2, #2]
 8004f0e:	7023      	strb	r3, [r4, #0]
 8004f10:	702b      	strb	r3, [r5, #0]
 8004f12:	bd70      	pop	{r4, r5, r6, pc}

08004f14 <HAL_TIM_Base_Start_IT>:
 8004f14:	0002      	movs	r2, r0
 8004f16:	0003      	movs	r3, r0
 8004f18:	2001      	movs	r0, #1
 8004f1a:	3239      	adds	r2, #57	; 0x39
 8004f1c:	7811      	ldrb	r1, [r2, #0]
 8004f1e:	4281      	cmp	r1, r0
 8004f20:	d119      	bne.n	8004f56 <HAL_TIM_Base_Start_IT+0x42>
 8004f22:	2102      	movs	r1, #2
 8004f24:	7011      	strb	r1, [r2, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4302      	orrs	r2, r0
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	05d2      	lsls	r2, r2, #23
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d005      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0x2e>
 8004f36:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_TIM_Base_Start_IT+0x50>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d002      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0x2e>
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <HAL_TIM_Base_Start_IT+0x54>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10a      	bne.n	8004f58 <HAL_TIM_Base_Start_IT+0x44>
 8004f42:	2107      	movs	r1, #7
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	2000      	movs	r0, #0
 8004f48:	400a      	ands	r2, r1
 8004f4a:	2a06      	cmp	r2, #6
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_Base_Start_IT+0x42>
 8004f4e:	2201      	movs	r2, #1
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	4770      	bx	lr
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4310      	orrs	r0, r2
 8004f5c:	6018      	str	r0, [r3, #0]
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e7f9      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0x42>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	40010800 	.word	0x40010800
 8004f68:	40011400 	.word	0x40011400

08004f6c <HAL_TIM_ConfigClockSource>:
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	0005      	movs	r5, r0
 8004f70:	2202      	movs	r2, #2
 8004f72:	3538      	adds	r5, #56	; 0x38
 8004f74:	782c      	ldrb	r4, [r5, #0]
 8004f76:	0003      	movs	r3, r0
 8004f78:	0010      	movs	r0, r2
 8004f7a:	2c01      	cmp	r4, #1
 8004f7c:	d01d      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x4e>
 8004f7e:	001e      	movs	r6, r3
 8004f80:	2401      	movs	r4, #1
 8004f82:	3639      	adds	r6, #57	; 0x39
 8004f84:	702c      	strb	r4, [r5, #0]
 8004f86:	7032      	strb	r2, [r6, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	484c      	ldr	r0, [pc, #304]	; (80050bc <HAL_TIM_ConfigClockSource+0x150>)
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	4002      	ands	r2, r0
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	680a      	ldr	r2, [r1, #0]
 8004f94:	2a60      	cmp	r2, #96	; 0x60
 8004f96:	d05f      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0xec>
 8004f98:	d832      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x94>
 8004f9a:	2a40      	cmp	r2, #64	; 0x40
 8004f9c:	d100      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x34>
 8004f9e:	e074      	b.n	800508a <HAL_TIM_ConfigClockSource+0x11e>
 8004fa0:	d814      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x60>
 8004fa2:	2a20      	cmp	r2, #32
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x54>
 8004fa6:	d809      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x50>
 8004fa8:	2110      	movs	r1, #16
 8004faa:	0010      	movs	r0, r2
 8004fac:	4388      	bics	r0, r1
 8004fae:	d007      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x54>
 8004fb0:	0020      	movs	r0, r4
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	7033      	strb	r3, [r6, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	702b      	strb	r3, [r5, #0]
 8004fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fbc:	2a30      	cmp	r2, #48	; 0x30
 8004fbe:	d1f7      	bne.n	8004fb0 <HAL_TIM_ConfigClockSource+0x44>
 8004fc0:	2070      	movs	r0, #112	; 0x70
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	4381      	bics	r1, r0
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	2107      	movs	r1, #7
 8004fca:	e032      	b.n	8005032 <HAL_TIM_ConfigClockSource+0xc6>
 8004fcc:	2a50      	cmp	r2, #80	; 0x50
 8004fce:	d1ef      	bne.n	8004fb0 <HAL_TIM_ConfigClockSource+0x44>
 8004fd0:	6a1f      	ldr	r7, [r3, #32]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	6848      	ldr	r0, [r1, #4]
 8004fd6:	43a2      	bics	r2, r4
 8004fd8:	24f0      	movs	r4, #240	; 0xf0
 8004fda:	68c9      	ldr	r1, [r1, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	43a2      	bics	r2, r4
 8004fe2:	0014      	movs	r4, r2
 8004fe4:	010a      	lsls	r2, r1, #4
 8004fe6:	210a      	movs	r1, #10
 8004fe8:	438f      	bics	r7, r1
 8004fea:	0039      	movs	r1, r7
 8004fec:	4322      	orrs	r2, r4
 8004fee:	4301      	orrs	r1, r0
 8004ff0:	619a      	str	r2, [r3, #24]
 8004ff2:	6219      	str	r1, [r3, #32]
 8004ff4:	2170      	movs	r1, #112	; 0x70
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	2257      	movs	r2, #87	; 0x57
 8004ffe:	e018      	b.n	8005032 <HAL_TIM_ConfigClockSource+0xc6>
 8005000:	2780      	movs	r7, #128	; 0x80
 8005002:	2000      	movs	r0, #0
 8005004:	017f      	lsls	r7, r7, #5
 8005006:	42ba      	cmp	r2, r7
 8005008:	d0d3      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x46>
 800500a:	2080      	movs	r0, #128	; 0x80
 800500c:	0180      	lsls	r0, r0, #6
 800500e:	4282      	cmp	r2, r0
 8005010:	d013      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xce>
 8005012:	0020      	movs	r0, r4
 8005014:	2a70      	cmp	r2, #112	; 0x70
 8005016:	d1cc      	bne.n	8004fb2 <HAL_TIM_ConfigClockSource+0x46>
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	4829      	ldr	r0, [pc, #164]	; (80050c0 <HAL_TIM_ConfigClockSource+0x154>)
 800501c:	684c      	ldr	r4, [r1, #4]
 800501e:	4010      	ands	r0, r2
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	68c9      	ldr	r1, [r1, #12]
 8005024:	4322      	orrs	r2, r4
 8005026:	0209      	lsls	r1, r1, #8
 8005028:	430a      	orrs	r2, r1
 800502a:	4302      	orrs	r2, r0
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	2277      	movs	r2, #119	; 0x77
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	430a      	orrs	r2, r1
 8005034:	2000      	movs	r0, #0
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	e7bb      	b.n	8004fb2 <HAL_TIM_ConfigClockSource+0x46>
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	4820      	ldr	r0, [pc, #128]	; (80050c0 <HAL_TIM_ConfigClockSource+0x154>)
 800503e:	684c      	ldr	r4, [r1, #4]
 8005040:	4010      	ands	r0, r2
 8005042:	688a      	ldr	r2, [r1, #8]
 8005044:	68c9      	ldr	r1, [r1, #12]
 8005046:	4322      	orrs	r2, r4
 8005048:	0209      	lsls	r1, r1, #8
 800504a:	430a      	orrs	r2, r1
 800504c:	4302      	orrs	r2, r0
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	01d2      	lsls	r2, r2, #7
 8005056:	e7ec      	b.n	8005032 <HAL_TIM_ConfigClockSource+0xc6>
 8005058:	6848      	ldr	r0, [r1, #4]
 800505a:	68cf      	ldr	r7, [r1, #12]
 800505c:	2110      	movs	r1, #16
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	4c18      	ldr	r4, [pc, #96]	; (80050c4 <HAL_TIM_ConfigClockSource+0x158>)
 8005062:	438a      	bics	r2, r1
 8005064:	621a      	str	r2, [r3, #32]
 8005066:	6999      	ldr	r1, [r3, #24]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	4021      	ands	r1, r4
 800506c:	24a0      	movs	r4, #160	; 0xa0
 800506e:	43a2      	bics	r2, r4
 8005070:	0014      	movs	r4, r2
 8005072:	033f      	lsls	r7, r7, #12
 8005074:	4339      	orrs	r1, r7
 8005076:	6199      	str	r1, [r3, #24]
 8005078:	2170      	movs	r1, #112	; 0x70
 800507a:	0102      	lsls	r2, r0, #4
 800507c:	4322      	orrs	r2, r4
 800507e:	621a      	str	r2, [r3, #32]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	438a      	bics	r2, r1
 8005084:	0011      	movs	r1, r2
 8005086:	2267      	movs	r2, #103	; 0x67
 8005088:	e7d3      	b.n	8005032 <HAL_TIM_ConfigClockSource+0xc6>
 800508a:	6a1f      	ldr	r7, [r3, #32]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	6848      	ldr	r0, [r1, #4]
 8005090:	43a2      	bics	r2, r4
 8005092:	24f0      	movs	r4, #240	; 0xf0
 8005094:	68c9      	ldr	r1, [r1, #12]
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	43a2      	bics	r2, r4
 800509c:	0014      	movs	r4, r2
 800509e:	010a      	lsls	r2, r1, #4
 80050a0:	210a      	movs	r1, #10
 80050a2:	438f      	bics	r7, r1
 80050a4:	0039      	movs	r1, r7
 80050a6:	4322      	orrs	r2, r4
 80050a8:	4301      	orrs	r1, r0
 80050aa:	619a      	str	r2, [r3, #24]
 80050ac:	6219      	str	r1, [r3, #32]
 80050ae:	2170      	movs	r1, #112	; 0x70
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	438a      	bics	r2, r1
 80050b4:	0011      	movs	r1, r2
 80050b6:	2247      	movs	r2, #71	; 0x47
 80050b8:	e7bb      	b.n	8005032 <HAL_TIM_ConfigClockSource+0xc6>
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	ffff0088 	.word	0xffff0088
 80050c0:	ffff00ff 	.word	0xffff00ff
 80050c4:	ffff0fff 	.word	0xffff0fff

080050c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_IC_CaptureCallback>:
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_TriggerCallback>:
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_IRQHandler>:
 80050d0:	2202      	movs	r2, #2
 80050d2:	6803      	ldr	r3, [r0, #0]
 80050d4:	b510      	push	{r4, lr}
 80050d6:	6919      	ldr	r1, [r3, #16]
 80050d8:	0004      	movs	r4, r0
 80050da:	4211      	tst	r1, r2
 80050dc:	d00d      	beq.n	80050fa <HAL_TIM_IRQHandler+0x2a>
 80050de:	68d9      	ldr	r1, [r3, #12]
 80050e0:	4211      	tst	r1, r2
 80050e2:	d00a      	beq.n	80050fa <HAL_TIM_IRQHandler+0x2a>
 80050e4:	3a05      	subs	r2, #5
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	3204      	adds	r2, #4
 80050ea:	7602      	strb	r2, [r0, #24]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d05e      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xe0>
 80050f2:	f7ff ffea 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 80050f6:	2300      	movs	r3, #0
 80050f8:	7623      	strb	r3, [r4, #24]
 80050fa:	2204      	movs	r2, #4
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	6919      	ldr	r1, [r3, #16]
 8005100:	4211      	tst	r1, r2
 8005102:	d010      	beq.n	8005126 <HAL_TIM_IRQHandler+0x56>
 8005104:	68d9      	ldr	r1, [r3, #12]
 8005106:	4211      	tst	r1, r2
 8005108:	d00d      	beq.n	8005126 <HAL_TIM_IRQHandler+0x56>
 800510a:	3a09      	subs	r2, #9
 800510c:	611a      	str	r2, [r3, #16]
 800510e:	3207      	adds	r2, #7
 8005110:	7622      	strb	r2, [r4, #24]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	23c0      	movs	r3, #192	; 0xc0
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	0020      	movs	r0, r4
 800511a:	421a      	tst	r2, r3
 800511c:	d04e      	beq.n	80051bc <HAL_TIM_IRQHandler+0xec>
 800511e:	f7ff ffd4 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8005122:	2300      	movs	r3, #0
 8005124:	7623      	strb	r3, [r4, #24]
 8005126:	2208      	movs	r2, #8
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	6919      	ldr	r1, [r3, #16]
 800512c:	4211      	tst	r1, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_IRQHandler+0x7e>
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	4211      	tst	r1, r2
 8005134:	d00b      	beq.n	800514e <HAL_TIM_IRQHandler+0x7e>
 8005136:	3a11      	subs	r2, #17
 8005138:	611a      	str	r2, [r3, #16]
 800513a:	320d      	adds	r2, #13
 800513c:	7622      	strb	r2, [r4, #24]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	0020      	movs	r0, r4
 8005142:	079b      	lsls	r3, r3, #30
 8005144:	d040      	beq.n	80051c8 <HAL_TIM_IRQHandler+0xf8>
 8005146:	f7ff ffc0 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 800514a:	2300      	movs	r3, #0
 800514c:	7623      	strb	r3, [r4, #24]
 800514e:	2210      	movs	r2, #16
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	6919      	ldr	r1, [r3, #16]
 8005154:	4211      	tst	r1, r2
 8005156:	d010      	beq.n	800517a <HAL_TIM_IRQHandler+0xaa>
 8005158:	68d9      	ldr	r1, [r3, #12]
 800515a:	4211      	tst	r1, r2
 800515c:	d00d      	beq.n	800517a <HAL_TIM_IRQHandler+0xaa>
 800515e:	3a21      	subs	r2, #33	; 0x21
 8005160:	611a      	str	r2, [r3, #16]
 8005162:	3219      	adds	r2, #25
 8005164:	7622      	strb	r2, [r4, #24]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	23c0      	movs	r3, #192	; 0xc0
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	0020      	movs	r0, r4
 800516e:	421a      	tst	r2, r3
 8005170:	d030      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x104>
 8005172:	f7ff ffaa 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8005176:	2300      	movs	r3, #0
 8005178:	7623      	strb	r3, [r4, #24]
 800517a:	2201      	movs	r2, #1
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	6919      	ldr	r1, [r3, #16]
 8005180:	4211      	tst	r1, r2
 8005182:	d007      	beq.n	8005194 <HAL_TIM_IRQHandler+0xc4>
 8005184:	68d9      	ldr	r1, [r3, #12]
 8005186:	4211      	tst	r1, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_IRQHandler+0xc4>
 800518a:	3a03      	subs	r2, #3
 800518c:	0020      	movs	r0, r4
 800518e:	611a      	str	r2, [r3, #16]
 8005190:	f7fd fe80 	bl	8002e94 <HAL_TIM_PeriodElapsedCallback>
 8005194:	2240      	movs	r2, #64	; 0x40
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	6919      	ldr	r1, [r3, #16]
 800519a:	4211      	tst	r1, r2
 800519c:	d007      	beq.n	80051ae <HAL_TIM_IRQHandler+0xde>
 800519e:	68d9      	ldr	r1, [r3, #12]
 80051a0:	4211      	tst	r1, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIM_IRQHandler+0xde>
 80051a4:	3a81      	subs	r2, #129	; 0x81
 80051a6:	0020      	movs	r0, r4
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	f7ff ff90 	bl	80050ce <HAL_TIM_TriggerCallback>
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	f7ff ff8a 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
 80051b4:	0020      	movs	r0, r4
 80051b6:	f7ff ff89 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
 80051ba:	e79c      	b.n	80050f6 <HAL_TIM_IRQHandler+0x26>
 80051bc:	f7ff ff84 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
 80051c0:	0020      	movs	r0, r4
 80051c2:	f7ff ff83 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
 80051c6:	e7ac      	b.n	8005122 <HAL_TIM_IRQHandler+0x52>
 80051c8:	f7ff ff7e 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
 80051cc:	0020      	movs	r0, r4
 80051ce:	f7ff ff7d 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
 80051d2:	e7ba      	b.n	800514a <HAL_TIM_IRQHandler+0x7a>
 80051d4:	f7ff ff78 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
 80051d8:	0020      	movs	r0, r4
 80051da:	f7ff ff77 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
 80051de:	e7ca      	b.n	8005176 <HAL_TIM_IRQHandler+0xa6>

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	0004      	movs	r4, r0
 80051e4:	2202      	movs	r2, #2
 80051e6:	3438      	adds	r4, #56	; 0x38
 80051e8:	7825      	ldrb	r5, [r4, #0]
 80051ea:	0003      	movs	r3, r0
 80051ec:	0010      	movs	r0, r2
 80051ee:	2d01      	cmp	r5, #1
 80051f0:	d01d      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80051f2:	001d      	movs	r5, r3
 80051f4:	2670      	movs	r6, #112	; 0x70
 80051f6:	3539      	adds	r5, #57	; 0x39
 80051f8:	702a      	strb	r2, [r5, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6858      	ldr	r0, [r3, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	43b0      	bics	r0, r6
 8005202:	680e      	ldr	r6, [r1, #0]
 8005204:	4330      	orrs	r0, r6
 8005206:	6058      	str	r0, [r3, #4]
 8005208:	2080      	movs	r0, #128	; 0x80
 800520a:	05c0      	lsls	r0, r0, #23
 800520c:	4283      	cmp	r3, r0
 800520e:	d005      	beq.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005210:	4807      	ldr	r0, [pc, #28]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005212:	4283      	cmp	r3, r0
 8005214:	d002      	beq.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005216:	4807      	ldr	r0, [pc, #28]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005218:	4283      	cmp	r3, r0
 800521a:	d104      	bne.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800521c:	2080      	movs	r0, #128	; 0x80
 800521e:	6849      	ldr	r1, [r1, #4]
 8005220:	4382      	bics	r2, r0
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	2301      	movs	r3, #1
 8005228:	2000      	movs	r0, #0
 800522a:	702b      	strb	r3, [r5, #0]
 800522c:	7020      	strb	r0, [r4, #0]
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	40010800 	.word	0x40010800
 8005234:	40011400 	.word	0x40011400

08005238 <calloc>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4b03      	ldr	r3, [pc, #12]	; (8005248 <calloc+0x10>)
 800523c:	000a      	movs	r2, r1
 800523e:	0001      	movs	r1, r0
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f000 f85b 	bl	80052fc <_calloc_r>
 8005246:	bd10      	pop	{r4, pc}
 8005248:	20000034 	.word	0x20000034

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	20000034 	.word	0x20000034

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	2600      	movs	r6, #0
 800525c:	4d0c      	ldr	r5, [pc, #48]	; (8005290 <__libc_init_array+0x38>)
 800525e:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	2600      	movs	r6, #0
 800526a:	f000 fcc7 	bl	8005bfc <_init>
 800526e:	4d0a      	ldr	r5, [pc, #40]	; (8005298 <__libc_init_array+0x40>)
 8005270:	4c0a      	ldr	r4, [pc, #40]	; (800529c <__libc_init_array+0x44>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	00b3      	lsls	r3, r6, #2
 800527e:	58eb      	ldr	r3, [r5, r3]
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	00b3      	lsls	r3, r6, #2
 8005288:	58eb      	ldr	r3, [r5, r3]
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	080069dc 	.word	0x080069dc
 8005294:	080069dc 	.word	0x080069dc
 8005298:	080069dc 	.word	0x080069dc
 800529c:	080069e0 	.word	0x080069e0

080052a0 <free>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <free+0x10>)
 80052a4:	0001      	movs	r1, r0
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f000 f854 	bl	8005354 <_free_r>
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000034 	.word	0x20000034

080052b4 <memcpy>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b510      	push	{r4, lr}
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d100      	bne.n	80052be <memcpy+0xa>
 80052bc:	bd10      	pop	{r4, pc}
 80052be:	5ccc      	ldrb	r4, [r1, r3]
 80052c0:	54c4      	strb	r4, [r0, r3]
 80052c2:	3301      	adds	r3, #1
 80052c4:	e7f8      	b.n	80052b8 <memcpy+0x4>

080052c6 <memmove>:
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4288      	cmp	r0, r1
 80052ca:	d902      	bls.n	80052d2 <memmove+0xc>
 80052cc:	188b      	adds	r3, r1, r2
 80052ce:	4298      	cmp	r0, r3
 80052d0:	d303      	bcc.n	80052da <memmove+0x14>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e007      	b.n	80052e6 <memmove+0x20>
 80052d6:	5c8b      	ldrb	r3, [r1, r2]
 80052d8:	5483      	strb	r3, [r0, r2]
 80052da:	3a01      	subs	r2, #1
 80052dc:	d2fb      	bcs.n	80052d6 <memmove+0x10>
 80052de:	bd10      	pop	{r4, pc}
 80052e0:	5ccc      	ldrb	r4, [r1, r3]
 80052e2:	54c4      	strb	r4, [r0, r3]
 80052e4:	3301      	adds	r3, #1
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d1fa      	bne.n	80052e0 <memmove+0x1a>
 80052ea:	e7f8      	b.n	80052de <memmove+0x18>

080052ec <memset>:
 80052ec:	0003      	movs	r3, r0
 80052ee:	1882      	adds	r2, r0, r2
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	7019      	strb	r1, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <_calloc_r>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	0c13      	lsrs	r3, r2, #16
 8005300:	0c0d      	lsrs	r5, r1, #16
 8005302:	d11e      	bne.n	8005342 <_calloc_r+0x46>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <_calloc_r+0x26>
 8005308:	b289      	uxth	r1, r1
 800530a:	b294      	uxth	r4, r2
 800530c:	434c      	muls	r4, r1
 800530e:	0021      	movs	r1, r4
 8005310:	f000 f88c 	bl	800542c <_malloc_r>
 8005314:	1e05      	subs	r5, r0, #0
 8005316:	d01b      	beq.n	8005350 <_calloc_r+0x54>
 8005318:	0022      	movs	r2, r4
 800531a:	2100      	movs	r1, #0
 800531c:	f7ff ffe6 	bl	80052ec <memset>
 8005320:	e016      	b.n	8005350 <_calloc_r+0x54>
 8005322:	1c1d      	adds	r5, r3, #0
 8005324:	1c0b      	adds	r3, r1, #0
 8005326:	b292      	uxth	r2, r2
 8005328:	b289      	uxth	r1, r1
 800532a:	b29c      	uxth	r4, r3
 800532c:	4351      	muls	r1, r2
 800532e:	b2ab      	uxth	r3, r5
 8005330:	4363      	muls	r3, r4
 8005332:	0c0c      	lsrs	r4, r1, #16
 8005334:	191c      	adds	r4, r3, r4
 8005336:	0c22      	lsrs	r2, r4, #16
 8005338:	d107      	bne.n	800534a <_calloc_r+0x4e>
 800533a:	0424      	lsls	r4, r4, #16
 800533c:	b289      	uxth	r1, r1
 800533e:	430c      	orrs	r4, r1
 8005340:	e7e5      	b.n	800530e <_calloc_r+0x12>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <_calloc_r+0x4e>
 8005346:	1c13      	adds	r3, r2, #0
 8005348:	e7ed      	b.n	8005326 <_calloc_r+0x2a>
 800534a:	230c      	movs	r3, #12
 800534c:	2500      	movs	r5, #0
 800534e:	6003      	str	r3, [r0, #0]
 8005350:	0028      	movs	r0, r5
 8005352:	bd70      	pop	{r4, r5, r6, pc}

08005354 <_free_r>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	0005      	movs	r5, r0
 8005358:	2900      	cmp	r1, #0
 800535a:	d010      	beq.n	800537e <_free_r+0x2a>
 800535c:	1f0c      	subs	r4, r1, #4
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	da00      	bge.n	8005366 <_free_r+0x12>
 8005364:	18e4      	adds	r4, r4, r3
 8005366:	0028      	movs	r0, r5
 8005368:	f000 f910 	bl	800558c <__malloc_lock>
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <_free_r+0x90>)
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <_free_r+0x2c>
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6014      	str	r4, [r2, #0]
 8005378:	0028      	movs	r0, r5
 800537a:	f000 f90f 	bl	800559c <__malloc_unlock>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	42a3      	cmp	r3, r4
 8005382:	d908      	bls.n	8005396 <_free_r+0x42>
 8005384:	6821      	ldr	r1, [r4, #0]
 8005386:	1860      	adds	r0, r4, r1
 8005388:	4283      	cmp	r3, r0
 800538a:	d1f3      	bne.n	8005374 <_free_r+0x20>
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	1841      	adds	r1, r0, r1
 8005392:	6021      	str	r1, [r4, #0]
 8005394:	e7ee      	b.n	8005374 <_free_r+0x20>
 8005396:	001a      	movs	r2, r3
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <_free_r+0x4e>
 800539e:	42a3      	cmp	r3, r4
 80053a0:	d9f9      	bls.n	8005396 <_free_r+0x42>
 80053a2:	6811      	ldr	r1, [r2, #0]
 80053a4:	1850      	adds	r0, r2, r1
 80053a6:	42a0      	cmp	r0, r4
 80053a8:	d10b      	bne.n	80053c2 <_free_r+0x6e>
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	1809      	adds	r1, r1, r0
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	4283      	cmp	r3, r0
 80053b4:	d1e0      	bne.n	8005378 <_free_r+0x24>
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	1841      	adds	r1, r0, r1
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	6053      	str	r3, [r2, #4]
 80053c0:	e7da      	b.n	8005378 <_free_r+0x24>
 80053c2:	42a0      	cmp	r0, r4
 80053c4:	d902      	bls.n	80053cc <_free_r+0x78>
 80053c6:	230c      	movs	r3, #12
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	e7d5      	b.n	8005378 <_free_r+0x24>
 80053cc:	6821      	ldr	r1, [r4, #0]
 80053ce:	1860      	adds	r0, r4, r1
 80053d0:	4283      	cmp	r3, r0
 80053d2:	d103      	bne.n	80053dc <_free_r+0x88>
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	1841      	adds	r1, r0, r1
 80053da:	6021      	str	r1, [r4, #0]
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	6054      	str	r4, [r2, #4]
 80053e0:	e7ca      	b.n	8005378 <_free_r+0x24>
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	20001060 	.word	0x20001060

080053e8 <sbrk_aligned>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4e0f      	ldr	r6, [pc, #60]	; (8005428 <sbrk_aligned+0x40>)
 80053ec:	000d      	movs	r5, r1
 80053ee:	6831      	ldr	r1, [r6, #0]
 80053f0:	0004      	movs	r4, r0
 80053f2:	2900      	cmp	r1, #0
 80053f4:	d102      	bne.n	80053fc <sbrk_aligned+0x14>
 80053f6:	f000 f88f 	bl	8005518 <_sbrk_r>
 80053fa:	6030      	str	r0, [r6, #0]
 80053fc:	0029      	movs	r1, r5
 80053fe:	0020      	movs	r0, r4
 8005400:	f000 f88a 	bl	8005518 <_sbrk_r>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d00a      	beq.n	800541e <sbrk_aligned+0x36>
 8005408:	2303      	movs	r3, #3
 800540a:	1cc5      	adds	r5, r0, #3
 800540c:	439d      	bics	r5, r3
 800540e:	42a8      	cmp	r0, r5
 8005410:	d007      	beq.n	8005422 <sbrk_aligned+0x3a>
 8005412:	1a29      	subs	r1, r5, r0
 8005414:	0020      	movs	r0, r4
 8005416:	f000 f87f 	bl	8005518 <_sbrk_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d101      	bne.n	8005422 <sbrk_aligned+0x3a>
 800541e:	2501      	movs	r5, #1
 8005420:	426d      	negs	r5, r5
 8005422:	0028      	movs	r0, r5
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20001064 	.word	0x20001064

0800542c <_malloc_r>:
 800542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542e:	2203      	movs	r2, #3
 8005430:	1ccb      	adds	r3, r1, #3
 8005432:	4393      	bics	r3, r2
 8005434:	3308      	adds	r3, #8
 8005436:	0006      	movs	r6, r0
 8005438:	001f      	movs	r7, r3
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d232      	bcs.n	80054a4 <_malloc_r+0x78>
 800543e:	270c      	movs	r7, #12
 8005440:	42b9      	cmp	r1, r7
 8005442:	d831      	bhi.n	80054a8 <_malloc_r+0x7c>
 8005444:	0030      	movs	r0, r6
 8005446:	f000 f8a1 	bl	800558c <__malloc_lock>
 800544a:	4d32      	ldr	r5, [pc, #200]	; (8005514 <_malloc_r+0xe8>)
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	001c      	movs	r4, r3
 8005450:	2c00      	cmp	r4, #0
 8005452:	d12e      	bne.n	80054b2 <_malloc_r+0x86>
 8005454:	0039      	movs	r1, r7
 8005456:	0030      	movs	r0, r6
 8005458:	f7ff ffc6 	bl	80053e8 <sbrk_aligned>
 800545c:	0004      	movs	r4, r0
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	d11e      	bne.n	80054a0 <_malloc_r+0x74>
 8005462:	682c      	ldr	r4, [r5, #0]
 8005464:	0025      	movs	r5, r4
 8005466:	2d00      	cmp	r5, #0
 8005468:	d14a      	bne.n	8005500 <_malloc_r+0xd4>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	0029      	movs	r1, r5
 800546e:	18e3      	adds	r3, r4, r3
 8005470:	0030      	movs	r0, r6
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	f000 f850 	bl	8005518 <_sbrk_r>
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	4283      	cmp	r3, r0
 800547c:	d143      	bne.n	8005506 <_malloc_r+0xda>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	3703      	adds	r7, #3
 8005482:	1aff      	subs	r7, r7, r3
 8005484:	2303      	movs	r3, #3
 8005486:	439f      	bics	r7, r3
 8005488:	3708      	adds	r7, #8
 800548a:	2f0c      	cmp	r7, #12
 800548c:	d200      	bcs.n	8005490 <_malloc_r+0x64>
 800548e:	270c      	movs	r7, #12
 8005490:	0039      	movs	r1, r7
 8005492:	0030      	movs	r0, r6
 8005494:	f7ff ffa8 	bl	80053e8 <sbrk_aligned>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d034      	beq.n	8005506 <_malloc_r+0xda>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	19df      	adds	r7, r3, r7
 80054a0:	6027      	str	r7, [r4, #0]
 80054a2:	e013      	b.n	80054cc <_malloc_r+0xa0>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dacb      	bge.n	8005440 <_malloc_r+0x14>
 80054a8:	230c      	movs	r3, #12
 80054aa:	2500      	movs	r5, #0
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	0028      	movs	r0, r5
 80054b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	1bd1      	subs	r1, r2, r7
 80054b6:	d420      	bmi.n	80054fa <_malloc_r+0xce>
 80054b8:	290b      	cmp	r1, #11
 80054ba:	d917      	bls.n	80054ec <_malloc_r+0xc0>
 80054bc:	19e2      	adds	r2, r4, r7
 80054be:	6027      	str	r7, [r4, #0]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d111      	bne.n	80054e8 <_malloc_r+0xbc>
 80054c4:	602a      	str	r2, [r5, #0]
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	0030      	movs	r0, r6
 80054ce:	0025      	movs	r5, r4
 80054d0:	f000 f864 	bl	800559c <__malloc_unlock>
 80054d4:	2207      	movs	r2, #7
 80054d6:	350b      	adds	r5, #11
 80054d8:	1d23      	adds	r3, r4, #4
 80054da:	4395      	bics	r5, r2
 80054dc:	1aea      	subs	r2, r5, r3
 80054de:	429d      	cmp	r5, r3
 80054e0:	d0e5      	beq.n	80054ae <_malloc_r+0x82>
 80054e2:	1b5b      	subs	r3, r3, r5
 80054e4:	50a3      	str	r3, [r4, r2]
 80054e6:	e7e2      	b.n	80054ae <_malloc_r+0x82>
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	e7ec      	b.n	80054c6 <_malloc_r+0x9a>
 80054ec:	6862      	ldr	r2, [r4, #4]
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	d101      	bne.n	80054f6 <_malloc_r+0xca>
 80054f2:	602a      	str	r2, [r5, #0]
 80054f4:	e7ea      	b.n	80054cc <_malloc_r+0xa0>
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	e7e8      	b.n	80054cc <_malloc_r+0xa0>
 80054fa:	0023      	movs	r3, r4
 80054fc:	6864      	ldr	r4, [r4, #4]
 80054fe:	e7a7      	b.n	8005450 <_malloc_r+0x24>
 8005500:	002c      	movs	r4, r5
 8005502:	686d      	ldr	r5, [r5, #4]
 8005504:	e7af      	b.n	8005466 <_malloc_r+0x3a>
 8005506:	230c      	movs	r3, #12
 8005508:	0030      	movs	r0, r6
 800550a:	6033      	str	r3, [r6, #0]
 800550c:	f000 f846 	bl	800559c <__malloc_unlock>
 8005510:	e7cd      	b.n	80054ae <_malloc_r+0x82>
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	20001060 	.word	0x20001060

08005518 <_sbrk_r>:
 8005518:	2300      	movs	r3, #0
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_sbrk_r+0x20>)
 800551e:	0004      	movs	r4, r0
 8005520:	0008      	movs	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fe44 	bl	80011b0 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d103      	bne.n	8005534 <_sbrk_r+0x1c>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d000      	beq.n	8005534 <_sbrk_r+0x1c>
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	20001068 	.word	0x20001068

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	b500      	push	{lr}
 8005540:	490b      	ldr	r1, [pc, #44]	; (8005570 <siprintf+0x34>)
 8005542:	b09c      	sub	sp, #112	; 0x70
 8005544:	ab1d      	add	r3, sp, #116	; 0x74
 8005546:	9002      	str	r0, [sp, #8]
 8005548:	9006      	str	r0, [sp, #24]
 800554a:	9107      	str	r1, [sp, #28]
 800554c:	9104      	str	r1, [sp, #16]
 800554e:	4809      	ldr	r0, [pc, #36]	; (8005574 <siprintf+0x38>)
 8005550:	4909      	ldr	r1, [pc, #36]	; (8005578 <siprintf+0x3c>)
 8005552:	cb04      	ldmia	r3!, {r2}
 8005554:	9105      	str	r1, [sp, #20]
 8005556:	6800      	ldr	r0, [r0, #0]
 8005558:	a902      	add	r1, sp, #8
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	f000 f888 	bl	8005670 <_svfiprintf_r>
 8005560:	2300      	movs	r3, #0
 8005562:	9a02      	ldr	r2, [sp, #8]
 8005564:	7013      	strb	r3, [r2, #0]
 8005566:	b01c      	add	sp, #112	; 0x70
 8005568:	bc08      	pop	{r3}
 800556a:	b003      	add	sp, #12
 800556c:	4718      	bx	r3
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	7fffffff 	.word	0x7fffffff
 8005574:	20000034 	.word	0x20000034
 8005578:	ffff0208 	.word	0xffff0208

0800557c <strcpy>:
 800557c:	0003      	movs	r3, r0
 800557e:	780a      	ldrb	r2, [r1, #0]
 8005580:	3101      	adds	r1, #1
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	2a00      	cmp	r2, #0
 8005588:	d1f9      	bne.n	800557e <strcpy+0x2>
 800558a:	4770      	bx	lr

0800558c <__malloc_lock>:
 800558c:	b510      	push	{r4, lr}
 800558e:	4802      	ldr	r0, [pc, #8]	; (8005598 <__malloc_lock+0xc>)
 8005590:	f000 faf0 	bl	8005b74 <__retarget_lock_acquire_recursive>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	2000106c 	.word	0x2000106c

0800559c <__malloc_unlock>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4802      	ldr	r0, [pc, #8]	; (80055a8 <__malloc_unlock+0xc>)
 80055a0:	f000 fae9 	bl	8005b76 <__retarget_lock_release_recursive>
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	2000106c 	.word	0x2000106c

080055ac <__ssputs_r>:
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	688e      	ldr	r6, [r1, #8]
 80055b0:	b085      	sub	sp, #20
 80055b2:	0007      	movs	r7, r0
 80055b4:	000c      	movs	r4, r1
 80055b6:	9203      	str	r2, [sp, #12]
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	429e      	cmp	r6, r3
 80055bc:	d83c      	bhi.n	8005638 <__ssputs_r+0x8c>
 80055be:	2390      	movs	r3, #144	; 0x90
 80055c0:	898a      	ldrh	r2, [r1, #12]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	421a      	tst	r2, r3
 80055c6:	d034      	beq.n	8005632 <__ssputs_r+0x86>
 80055c8:	6909      	ldr	r1, [r1, #16]
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	6960      	ldr	r0, [r4, #20]
 80055ce:	1a5b      	subs	r3, r3, r1
 80055d0:	9302      	str	r3, [sp, #8]
 80055d2:	2303      	movs	r3, #3
 80055d4:	4343      	muls	r3, r0
 80055d6:	0fdd      	lsrs	r5, r3, #31
 80055d8:	18ed      	adds	r5, r5, r3
 80055da:	9b01      	ldr	r3, [sp, #4]
 80055dc:	9802      	ldr	r0, [sp, #8]
 80055de:	3301      	adds	r3, #1
 80055e0:	181b      	adds	r3, r3, r0
 80055e2:	106d      	asrs	r5, r5, #1
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	d900      	bls.n	80055ea <__ssputs_r+0x3e>
 80055e8:	001d      	movs	r5, r3
 80055ea:	0553      	lsls	r3, r2, #21
 80055ec:	d532      	bpl.n	8005654 <__ssputs_r+0xa8>
 80055ee:	0029      	movs	r1, r5
 80055f0:	0038      	movs	r0, r7
 80055f2:	f7ff ff1b 	bl	800542c <_malloc_r>
 80055f6:	1e06      	subs	r6, r0, #0
 80055f8:	d109      	bne.n	800560e <__ssputs_r+0x62>
 80055fa:	230c      	movs	r3, #12
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	2340      	movs	r3, #64	; 0x40
 8005600:	2001      	movs	r0, #1
 8005602:	89a2      	ldrh	r2, [r4, #12]
 8005604:	4240      	negs	r0, r0
 8005606:	4313      	orrs	r3, r2
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	b005      	add	sp, #20
 800560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560e:	9a02      	ldr	r2, [sp, #8]
 8005610:	6921      	ldr	r1, [r4, #16]
 8005612:	f7ff fe4f 	bl	80052b4 <memcpy>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	4a14      	ldr	r2, [pc, #80]	; (800566c <__ssputs_r+0xc0>)
 800561a:	401a      	ands	r2, r3
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	4313      	orrs	r3, r2
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	6126      	str	r6, [r4, #16]
 8005626:	18f6      	adds	r6, r6, r3
 8005628:	6026      	str	r6, [r4, #0]
 800562a:	6165      	str	r5, [r4, #20]
 800562c:	9e01      	ldr	r6, [sp, #4]
 800562e:	1aed      	subs	r5, r5, r3
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	429e      	cmp	r6, r3
 8005636:	d900      	bls.n	800563a <__ssputs_r+0x8e>
 8005638:	9e01      	ldr	r6, [sp, #4]
 800563a:	0032      	movs	r2, r6
 800563c:	9903      	ldr	r1, [sp, #12]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	f7ff fe41 	bl	80052c6 <memmove>
 8005644:	68a3      	ldr	r3, [r4, #8]
 8005646:	2000      	movs	r0, #0
 8005648:	1b9b      	subs	r3, r3, r6
 800564a:	60a3      	str	r3, [r4, #8]
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	199e      	adds	r6, r3, r6
 8005650:	6026      	str	r6, [r4, #0]
 8005652:	e7da      	b.n	800560a <__ssputs_r+0x5e>
 8005654:	002a      	movs	r2, r5
 8005656:	0038      	movs	r0, r7
 8005658:	f000 fa99 	bl	8005b8e <_realloc_r>
 800565c:	1e06      	subs	r6, r0, #0
 800565e:	d1e0      	bne.n	8005622 <__ssputs_r+0x76>
 8005660:	0038      	movs	r0, r7
 8005662:	6921      	ldr	r1, [r4, #16]
 8005664:	f7ff fe76 	bl	8005354 <_free_r>
 8005668:	e7c7      	b.n	80055fa <__ssputs_r+0x4e>
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	fffffb7f 	.word	0xfffffb7f

08005670 <_svfiprintf_r>:
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005672:	b0a1      	sub	sp, #132	; 0x84
 8005674:	9003      	str	r0, [sp, #12]
 8005676:	001d      	movs	r5, r3
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	000f      	movs	r7, r1
 800567c:	0016      	movs	r6, r2
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	d511      	bpl.n	80056a6 <_svfiprintf_r+0x36>
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10e      	bne.n	80056a6 <_svfiprintf_r+0x36>
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	f7ff fecf 	bl	800542c <_malloc_r>
 800568e:	6038      	str	r0, [r7, #0]
 8005690:	6138      	str	r0, [r7, #16]
 8005692:	2800      	cmp	r0, #0
 8005694:	d105      	bne.n	80056a2 <_svfiprintf_r+0x32>
 8005696:	230c      	movs	r3, #12
 8005698:	9a03      	ldr	r2, [sp, #12]
 800569a:	3801      	subs	r0, #1
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	b021      	add	sp, #132	; 0x84
 80056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a2:	2340      	movs	r3, #64	; 0x40
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	ac08      	add	r4, sp, #32
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	3320      	adds	r3, #32
 80056ae:	7663      	strb	r3, [r4, #25]
 80056b0:	3310      	adds	r3, #16
 80056b2:	76a3      	strb	r3, [r4, #26]
 80056b4:	9507      	str	r5, [sp, #28]
 80056b6:	0035      	movs	r5, r6
 80056b8:	782b      	ldrb	r3, [r5, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <_svfiprintf_r+0x52>
 80056be:	2b25      	cmp	r3, #37	; 0x25
 80056c0:	d147      	bne.n	8005752 <_svfiprintf_r+0xe2>
 80056c2:	1bab      	subs	r3, r5, r6
 80056c4:	9305      	str	r3, [sp, #20]
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d00c      	beq.n	80056e4 <_svfiprintf_r+0x74>
 80056ca:	0032      	movs	r2, r6
 80056cc:	0039      	movs	r1, r7
 80056ce:	9803      	ldr	r0, [sp, #12]
 80056d0:	f7ff ff6c 	bl	80055ac <__ssputs_r>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d100      	bne.n	80056da <_svfiprintf_r+0x6a>
 80056d8:	e0ae      	b.n	8005838 <_svfiprintf_r+0x1c8>
 80056da:	6962      	ldr	r2, [r4, #20]
 80056dc:	9b05      	ldr	r3, [sp, #20]
 80056de:	4694      	mov	ip, r2
 80056e0:	4463      	add	r3, ip
 80056e2:	6163      	str	r3, [r4, #20]
 80056e4:	782b      	ldrb	r3, [r5, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d100      	bne.n	80056ec <_svfiprintf_r+0x7c>
 80056ea:	e0a5      	b.n	8005838 <_svfiprintf_r+0x1c8>
 80056ec:	2201      	movs	r2, #1
 80056ee:	2300      	movs	r3, #0
 80056f0:	4252      	negs	r2, r2
 80056f2:	6062      	str	r2, [r4, #4]
 80056f4:	a904      	add	r1, sp, #16
 80056f6:	3254      	adds	r2, #84	; 0x54
 80056f8:	1852      	adds	r2, r2, r1
 80056fa:	1c6e      	adds	r6, r5, #1
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	60e3      	str	r3, [r4, #12]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	7013      	strb	r3, [r2, #0]
 8005704:	65a3      	str	r3, [r4, #88]	; 0x58
 8005706:	2205      	movs	r2, #5
 8005708:	7831      	ldrb	r1, [r6, #0]
 800570a:	4854      	ldr	r0, [pc, #336]	; (800585c <_svfiprintf_r+0x1ec>)
 800570c:	f000 fa34 	bl	8005b78 <memchr>
 8005710:	1c75      	adds	r5, r6, #1
 8005712:	2800      	cmp	r0, #0
 8005714:	d11f      	bne.n	8005756 <_svfiprintf_r+0xe6>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	06d3      	lsls	r3, r2, #27
 800571a:	d504      	bpl.n	8005726 <_svfiprintf_r+0xb6>
 800571c:	2353      	movs	r3, #83	; 0x53
 800571e:	a904      	add	r1, sp, #16
 8005720:	185b      	adds	r3, r3, r1
 8005722:	2120      	movs	r1, #32
 8005724:	7019      	strb	r1, [r3, #0]
 8005726:	0713      	lsls	r3, r2, #28
 8005728:	d504      	bpl.n	8005734 <_svfiprintf_r+0xc4>
 800572a:	2353      	movs	r3, #83	; 0x53
 800572c:	a904      	add	r1, sp, #16
 800572e:	185b      	adds	r3, r3, r1
 8005730:	212b      	movs	r1, #43	; 0x2b
 8005732:	7019      	strb	r1, [r3, #0]
 8005734:	7833      	ldrb	r3, [r6, #0]
 8005736:	2b2a      	cmp	r3, #42	; 0x2a
 8005738:	d016      	beq.n	8005768 <_svfiprintf_r+0xf8>
 800573a:	0035      	movs	r5, r6
 800573c:	2100      	movs	r1, #0
 800573e:	200a      	movs	r0, #10
 8005740:	68e3      	ldr	r3, [r4, #12]
 8005742:	782a      	ldrb	r2, [r5, #0]
 8005744:	1c6e      	adds	r6, r5, #1
 8005746:	3a30      	subs	r2, #48	; 0x30
 8005748:	2a09      	cmp	r2, #9
 800574a:	d94e      	bls.n	80057ea <_svfiprintf_r+0x17a>
 800574c:	2900      	cmp	r1, #0
 800574e:	d111      	bne.n	8005774 <_svfiprintf_r+0x104>
 8005750:	e017      	b.n	8005782 <_svfiprintf_r+0x112>
 8005752:	3501      	adds	r5, #1
 8005754:	e7b0      	b.n	80056b8 <_svfiprintf_r+0x48>
 8005756:	4b41      	ldr	r3, [pc, #260]	; (800585c <_svfiprintf_r+0x1ec>)
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	1ac0      	subs	r0, r0, r3
 800575c:	2301      	movs	r3, #1
 800575e:	4083      	lsls	r3, r0
 8005760:	4313      	orrs	r3, r2
 8005762:	002e      	movs	r6, r5
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	e7ce      	b.n	8005706 <_svfiprintf_r+0x96>
 8005768:	9b07      	ldr	r3, [sp, #28]
 800576a:	1d19      	adds	r1, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	9107      	str	r1, [sp, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	db01      	blt.n	8005778 <_svfiprintf_r+0x108>
 8005774:	930b      	str	r3, [sp, #44]	; 0x2c
 8005776:	e004      	b.n	8005782 <_svfiprintf_r+0x112>
 8005778:	425b      	negs	r3, r3
 800577a:	60e3      	str	r3, [r4, #12]
 800577c:	2302      	movs	r3, #2
 800577e:	4313      	orrs	r3, r2
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	782b      	ldrb	r3, [r5, #0]
 8005784:	2b2e      	cmp	r3, #46	; 0x2e
 8005786:	d10a      	bne.n	800579e <_svfiprintf_r+0x12e>
 8005788:	786b      	ldrb	r3, [r5, #1]
 800578a:	2b2a      	cmp	r3, #42	; 0x2a
 800578c:	d135      	bne.n	80057fa <_svfiprintf_r+0x18a>
 800578e:	9b07      	ldr	r3, [sp, #28]
 8005790:	3502      	adds	r5, #2
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	9207      	str	r2, [sp, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	db2b      	blt.n	80057f4 <_svfiprintf_r+0x184>
 800579c:	9309      	str	r3, [sp, #36]	; 0x24
 800579e:	4e30      	ldr	r6, [pc, #192]	; (8005860 <_svfiprintf_r+0x1f0>)
 80057a0:	2203      	movs	r2, #3
 80057a2:	0030      	movs	r0, r6
 80057a4:	7829      	ldrb	r1, [r5, #0]
 80057a6:	f000 f9e7 	bl	8005b78 <memchr>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d006      	beq.n	80057bc <_svfiprintf_r+0x14c>
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	1b80      	subs	r0, r0, r6
 80057b2:	4083      	lsls	r3, r0
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	3501      	adds	r5, #1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	7829      	ldrb	r1, [r5, #0]
 80057be:	2206      	movs	r2, #6
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <_svfiprintf_r+0x1f4>)
 80057c2:	1c6e      	adds	r6, r5, #1
 80057c4:	7621      	strb	r1, [r4, #24]
 80057c6:	f000 f9d7 	bl	8005b78 <memchr>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d03c      	beq.n	8005848 <_svfiprintf_r+0x1d8>
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <_svfiprintf_r+0x1f8>)
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d125      	bne.n	8005820 <_svfiprintf_r+0x1b0>
 80057d4:	2207      	movs	r2, #7
 80057d6:	9b07      	ldr	r3, [sp, #28]
 80057d8:	3307      	adds	r3, #7
 80057da:	4393      	bics	r3, r2
 80057dc:	3308      	adds	r3, #8
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	6963      	ldr	r3, [r4, #20]
 80057e2:	9a04      	ldr	r2, [sp, #16]
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	6163      	str	r3, [r4, #20]
 80057e8:	e765      	b.n	80056b6 <_svfiprintf_r+0x46>
 80057ea:	4343      	muls	r3, r0
 80057ec:	0035      	movs	r5, r6
 80057ee:	2101      	movs	r1, #1
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	e7a6      	b.n	8005742 <_svfiprintf_r+0xd2>
 80057f4:	2301      	movs	r3, #1
 80057f6:	425b      	negs	r3, r3
 80057f8:	e7d0      	b.n	800579c <_svfiprintf_r+0x12c>
 80057fa:	2300      	movs	r3, #0
 80057fc:	200a      	movs	r0, #10
 80057fe:	001a      	movs	r2, r3
 8005800:	3501      	adds	r5, #1
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	7829      	ldrb	r1, [r5, #0]
 8005806:	1c6e      	adds	r6, r5, #1
 8005808:	3930      	subs	r1, #48	; 0x30
 800580a:	2909      	cmp	r1, #9
 800580c:	d903      	bls.n	8005816 <_svfiprintf_r+0x1a6>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0c5      	beq.n	800579e <_svfiprintf_r+0x12e>
 8005812:	9209      	str	r2, [sp, #36]	; 0x24
 8005814:	e7c3      	b.n	800579e <_svfiprintf_r+0x12e>
 8005816:	4342      	muls	r2, r0
 8005818:	0035      	movs	r5, r6
 800581a:	2301      	movs	r3, #1
 800581c:	1852      	adds	r2, r2, r1
 800581e:	e7f1      	b.n	8005804 <_svfiprintf_r+0x194>
 8005820:	ab07      	add	r3, sp, #28
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	003a      	movs	r2, r7
 8005826:	0021      	movs	r1, r4
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <_svfiprintf_r+0x1fc>)
 800582a:	9803      	ldr	r0, [sp, #12]
 800582c:	e000      	b.n	8005830 <_svfiprintf_r+0x1c0>
 800582e:	bf00      	nop
 8005830:	9004      	str	r0, [sp, #16]
 8005832:	9b04      	ldr	r3, [sp, #16]
 8005834:	3301      	adds	r3, #1
 8005836:	d1d3      	bne.n	80057e0 <_svfiprintf_r+0x170>
 8005838:	89bb      	ldrh	r3, [r7, #12]
 800583a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800583c:	065b      	lsls	r3, r3, #25
 800583e:	d400      	bmi.n	8005842 <_svfiprintf_r+0x1d2>
 8005840:	e72d      	b.n	800569e <_svfiprintf_r+0x2e>
 8005842:	2001      	movs	r0, #1
 8005844:	4240      	negs	r0, r0
 8005846:	e72a      	b.n	800569e <_svfiprintf_r+0x2e>
 8005848:	ab07      	add	r3, sp, #28
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	003a      	movs	r2, r7
 800584e:	0021      	movs	r1, r4
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <_svfiprintf_r+0x1fc>)
 8005852:	9803      	ldr	r0, [sp, #12]
 8005854:	f000 f87c 	bl	8005950 <_printf_i>
 8005858:	e7ea      	b.n	8005830 <_svfiprintf_r+0x1c0>
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	0800699f 	.word	0x0800699f
 8005860:	080069a5 	.word	0x080069a5
 8005864:	080069a9 	.word	0x080069a9
 8005868:	00000000 	.word	0x00000000
 800586c:	080055ad 	.word	0x080055ad

08005870 <_printf_common>:
 8005870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005872:	0015      	movs	r5, r2
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	688a      	ldr	r2, [r1, #8]
 8005878:	690b      	ldr	r3, [r1, #16]
 800587a:	000c      	movs	r4, r1
 800587c:	9000      	str	r0, [sp, #0]
 800587e:	4293      	cmp	r3, r2
 8005880:	da00      	bge.n	8005884 <_printf_common+0x14>
 8005882:	0013      	movs	r3, r2
 8005884:	0022      	movs	r2, r4
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	3243      	adds	r2, #67	; 0x43
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	2a00      	cmp	r2, #0
 800588e:	d001      	beq.n	8005894 <_printf_common+0x24>
 8005890:	3301      	adds	r3, #1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	069b      	lsls	r3, r3, #26
 8005898:	d502      	bpl.n	80058a0 <_printf_common+0x30>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	3302      	adds	r3, #2
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	2306      	movs	r3, #6
 80058a4:	0017      	movs	r7, r2
 80058a6:	401f      	ands	r7, r3
 80058a8:	421a      	tst	r2, r3
 80058aa:	d027      	beq.n	80058fc <_printf_common+0x8c>
 80058ac:	0023      	movs	r3, r4
 80058ae:	3343      	adds	r3, #67	; 0x43
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	4193      	sbcs	r3, r2
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	0692      	lsls	r2, r2, #26
 80058ba:	d430      	bmi.n	800591e <_printf_common+0xae>
 80058bc:	0022      	movs	r2, r4
 80058be:	9901      	ldr	r1, [sp, #4]
 80058c0:	9800      	ldr	r0, [sp, #0]
 80058c2:	9e08      	ldr	r6, [sp, #32]
 80058c4:	3243      	adds	r2, #67	; 0x43
 80058c6:	47b0      	blx	r6
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d025      	beq.n	8005918 <_printf_common+0xa8>
 80058cc:	2306      	movs	r3, #6
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	682a      	ldr	r2, [r5, #0]
 80058d2:	68e1      	ldr	r1, [r4, #12]
 80058d4:	2500      	movs	r5, #0
 80058d6:	4003      	ands	r3, r0
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d103      	bne.n	80058e4 <_printf_common+0x74>
 80058dc:	1a8d      	subs	r5, r1, r2
 80058de:	43eb      	mvns	r3, r5
 80058e0:	17db      	asrs	r3, r3, #31
 80058e2:	401d      	ands	r5, r3
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	6922      	ldr	r2, [r4, #16]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	dd01      	ble.n	80058f0 <_printf_common+0x80>
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	18ed      	adds	r5, r5, r3
 80058f0:	2700      	movs	r7, #0
 80058f2:	42bd      	cmp	r5, r7
 80058f4:	d120      	bne.n	8005938 <_printf_common+0xc8>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e010      	b.n	800591c <_printf_common+0xac>
 80058fa:	3701      	adds	r7, #1
 80058fc:	68e3      	ldr	r3, [r4, #12]
 80058fe:	682a      	ldr	r2, [r5, #0]
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	42bb      	cmp	r3, r7
 8005904:	ddd2      	ble.n	80058ac <_printf_common+0x3c>
 8005906:	0022      	movs	r2, r4
 8005908:	2301      	movs	r3, #1
 800590a:	9901      	ldr	r1, [sp, #4]
 800590c:	9800      	ldr	r0, [sp, #0]
 800590e:	9e08      	ldr	r6, [sp, #32]
 8005910:	3219      	adds	r2, #25
 8005912:	47b0      	blx	r6
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d1f0      	bne.n	80058fa <_printf_common+0x8a>
 8005918:	2001      	movs	r0, #1
 800591a:	4240      	negs	r0, r0
 800591c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800591e:	2030      	movs	r0, #48	; 0x30
 8005920:	18e1      	adds	r1, r4, r3
 8005922:	3143      	adds	r1, #67	; 0x43
 8005924:	7008      	strb	r0, [r1, #0]
 8005926:	0021      	movs	r1, r4
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	3145      	adds	r1, #69	; 0x45
 800592c:	7809      	ldrb	r1, [r1, #0]
 800592e:	18a2      	adds	r2, r4, r2
 8005930:	3243      	adds	r2, #67	; 0x43
 8005932:	3302      	adds	r3, #2
 8005934:	7011      	strb	r1, [r2, #0]
 8005936:	e7c1      	b.n	80058bc <_printf_common+0x4c>
 8005938:	0022      	movs	r2, r4
 800593a:	2301      	movs	r3, #1
 800593c:	9901      	ldr	r1, [sp, #4]
 800593e:	9800      	ldr	r0, [sp, #0]
 8005940:	9e08      	ldr	r6, [sp, #32]
 8005942:	321a      	adds	r2, #26
 8005944:	47b0      	blx	r6
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d0e6      	beq.n	8005918 <_printf_common+0xa8>
 800594a:	3701      	adds	r7, #1
 800594c:	e7d1      	b.n	80058f2 <_printf_common+0x82>
	...

08005950 <_printf_i>:
 8005950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005952:	b08b      	sub	sp, #44	; 0x2c
 8005954:	9206      	str	r2, [sp, #24]
 8005956:	000a      	movs	r2, r1
 8005958:	3243      	adds	r2, #67	; 0x43
 800595a:	9307      	str	r3, [sp, #28]
 800595c:	9005      	str	r0, [sp, #20]
 800595e:	9204      	str	r2, [sp, #16]
 8005960:	7e0a      	ldrb	r2, [r1, #24]
 8005962:	000c      	movs	r4, r1
 8005964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005966:	2a78      	cmp	r2, #120	; 0x78
 8005968:	d807      	bhi.n	800597a <_printf_i+0x2a>
 800596a:	2a62      	cmp	r2, #98	; 0x62
 800596c:	d809      	bhi.n	8005982 <_printf_i+0x32>
 800596e:	2a00      	cmp	r2, #0
 8005970:	d100      	bne.n	8005974 <_printf_i+0x24>
 8005972:	e0c1      	b.n	8005af8 <_printf_i+0x1a8>
 8005974:	2a58      	cmp	r2, #88	; 0x58
 8005976:	d100      	bne.n	800597a <_printf_i+0x2a>
 8005978:	e08c      	b.n	8005a94 <_printf_i+0x144>
 800597a:	0026      	movs	r6, r4
 800597c:	3642      	adds	r6, #66	; 0x42
 800597e:	7032      	strb	r2, [r6, #0]
 8005980:	e022      	b.n	80059c8 <_printf_i+0x78>
 8005982:	0010      	movs	r0, r2
 8005984:	3863      	subs	r0, #99	; 0x63
 8005986:	2815      	cmp	r0, #21
 8005988:	d8f7      	bhi.n	800597a <_printf_i+0x2a>
 800598a:	f7fa fbd1 	bl	8000130 <__gnu_thumb1_case_shi>
 800598e:	0016      	.short	0x0016
 8005990:	fff6001f 	.word	0xfff6001f
 8005994:	fff6fff6 	.word	0xfff6fff6
 8005998:	001ffff6 	.word	0x001ffff6
 800599c:	fff6fff6 	.word	0xfff6fff6
 80059a0:	fff6fff6 	.word	0xfff6fff6
 80059a4:	003600a8 	.word	0x003600a8
 80059a8:	fff6009a 	.word	0xfff6009a
 80059ac:	00b9fff6 	.word	0x00b9fff6
 80059b0:	0036fff6 	.word	0x0036fff6
 80059b4:	fff6fff6 	.word	0xfff6fff6
 80059b8:	009e      	.short	0x009e
 80059ba:	0026      	movs	r6, r4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	3642      	adds	r6, #66	; 0x42
 80059c0:	1d11      	adds	r1, r2, #4
 80059c2:	6019      	str	r1, [r3, #0]
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	7033      	strb	r3, [r6, #0]
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0a7      	b.n	8005b1c <_printf_i+0x1cc>
 80059cc:	6808      	ldr	r0, [r1, #0]
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	1d0a      	adds	r2, r1, #4
 80059d2:	0605      	lsls	r5, r0, #24
 80059d4:	d50b      	bpl.n	80059ee <_printf_i+0x9e>
 80059d6:	680d      	ldr	r5, [r1, #0]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	2d00      	cmp	r5, #0
 80059dc:	da03      	bge.n	80059e6 <_printf_i+0x96>
 80059de:	232d      	movs	r3, #45	; 0x2d
 80059e0:	9a04      	ldr	r2, [sp, #16]
 80059e2:	426d      	negs	r5, r5
 80059e4:	7013      	strb	r3, [r2, #0]
 80059e6:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <_printf_i+0x21c>)
 80059e8:	270a      	movs	r7, #10
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	e01b      	b.n	8005a26 <_printf_i+0xd6>
 80059ee:	680d      	ldr	r5, [r1, #0]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	0641      	lsls	r1, r0, #25
 80059f4:	d5f1      	bpl.n	80059da <_printf_i+0x8a>
 80059f6:	b22d      	sxth	r5, r5
 80059f8:	e7ef      	b.n	80059da <_printf_i+0x8a>
 80059fa:	680d      	ldr	r5, [r1, #0]
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	1d08      	adds	r0, r1, #4
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	062e      	lsls	r6, r5, #24
 8005a04:	d501      	bpl.n	8005a0a <_printf_i+0xba>
 8005a06:	680d      	ldr	r5, [r1, #0]
 8005a08:	e003      	b.n	8005a12 <_printf_i+0xc2>
 8005a0a:	066d      	lsls	r5, r5, #25
 8005a0c:	d5fb      	bpl.n	8005a06 <_printf_i+0xb6>
 8005a0e:	680d      	ldr	r5, [r1, #0]
 8005a10:	b2ad      	uxth	r5, r5
 8005a12:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <_printf_i+0x21c>)
 8005a14:	2708      	movs	r7, #8
 8005a16:	9303      	str	r3, [sp, #12]
 8005a18:	2a6f      	cmp	r2, #111	; 0x6f
 8005a1a:	d000      	beq.n	8005a1e <_printf_i+0xce>
 8005a1c:	3702      	adds	r7, #2
 8005a1e:	0023      	movs	r3, r4
 8005a20:	2200      	movs	r2, #0
 8005a22:	3343      	adds	r3, #67	; 0x43
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	db03      	blt.n	8005a36 <_printf_i+0xe6>
 8005a2e:	2204      	movs	r2, #4
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	4391      	bics	r1, r2
 8005a34:	6021      	str	r1, [r4, #0]
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	d102      	bne.n	8005a40 <_printf_i+0xf0>
 8005a3a:	9e04      	ldr	r6, [sp, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <_printf_i+0x10a>
 8005a40:	9e04      	ldr	r6, [sp, #16]
 8005a42:	0028      	movs	r0, r5
 8005a44:	0039      	movs	r1, r7
 8005a46:	f7fa fc03 	bl	8000250 <__aeabi_uidivmod>
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	3e01      	subs	r6, #1
 8005a4e:	5c5b      	ldrb	r3, [r3, r1]
 8005a50:	7033      	strb	r3, [r6, #0]
 8005a52:	002b      	movs	r3, r5
 8005a54:	0005      	movs	r5, r0
 8005a56:	429f      	cmp	r7, r3
 8005a58:	d9f3      	bls.n	8005a42 <_printf_i+0xf2>
 8005a5a:	2f08      	cmp	r7, #8
 8005a5c:	d109      	bne.n	8005a72 <_printf_i+0x122>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07db      	lsls	r3, r3, #31
 8005a62:	d506      	bpl.n	8005a72 <_printf_i+0x122>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	6922      	ldr	r2, [r4, #16]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	dc02      	bgt.n	8005a72 <_printf_i+0x122>
 8005a6c:	2330      	movs	r3, #48	; 0x30
 8005a6e:	3e01      	subs	r6, #1
 8005a70:	7033      	strb	r3, [r6, #0]
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	1b9b      	subs	r3, r3, r6
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	0021      	movs	r1, r4
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	9805      	ldr	r0, [sp, #20]
 8005a80:	9b06      	ldr	r3, [sp, #24]
 8005a82:	aa09      	add	r2, sp, #36	; 0x24
 8005a84:	f7ff fef4 	bl	8005870 <_printf_common>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d14c      	bne.n	8005b26 <_printf_i+0x1d6>
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	4240      	negs	r0, r0
 8005a90:	b00b      	add	sp, #44	; 0x2c
 8005a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a94:	3145      	adds	r1, #69	; 0x45
 8005a96:	700a      	strb	r2, [r1, #0]
 8005a98:	4a34      	ldr	r2, [pc, #208]	; (8005b6c <_printf_i+0x21c>)
 8005a9a:	9203      	str	r2, [sp, #12]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	ca20      	ldmia	r2!, {r5}
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	0608      	lsls	r0, r1, #24
 8005aa6:	d516      	bpl.n	8005ad6 <_printf_i+0x186>
 8005aa8:	07cb      	lsls	r3, r1, #31
 8005aaa:	d502      	bpl.n	8005ab2 <_printf_i+0x162>
 8005aac:	2320      	movs	r3, #32
 8005aae:	4319      	orrs	r1, r3
 8005ab0:	6021      	str	r1, [r4, #0]
 8005ab2:	2710      	movs	r7, #16
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	d1b2      	bne.n	8005a1e <_printf_i+0xce>
 8005ab8:	2320      	movs	r3, #32
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	439a      	bics	r2, r3
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	e7ad      	b.n	8005a1e <_printf_i+0xce>
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	6809      	ldr	r1, [r1, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	6022      	str	r2, [r4, #0]
 8005aca:	0022      	movs	r2, r4
 8005acc:	2178      	movs	r1, #120	; 0x78
 8005ace:	3245      	adds	r2, #69	; 0x45
 8005ad0:	7011      	strb	r1, [r2, #0]
 8005ad2:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <_printf_i+0x220>)
 8005ad4:	e7e1      	b.n	8005a9a <_printf_i+0x14a>
 8005ad6:	0648      	lsls	r0, r1, #25
 8005ad8:	d5e6      	bpl.n	8005aa8 <_printf_i+0x158>
 8005ada:	b2ad      	uxth	r5, r5
 8005adc:	e7e4      	b.n	8005aa8 <_printf_i+0x158>
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	680d      	ldr	r5, [r1, #0]
 8005ae2:	1d10      	adds	r0, r2, #4
 8005ae4:	6949      	ldr	r1, [r1, #20]
 8005ae6:	6018      	str	r0, [r3, #0]
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	062e      	lsls	r6, r5, #24
 8005aec:	d501      	bpl.n	8005af2 <_printf_i+0x1a2>
 8005aee:	6019      	str	r1, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <_printf_i+0x1a8>
 8005af2:	066d      	lsls	r5, r5, #25
 8005af4:	d5fb      	bpl.n	8005aee <_printf_i+0x19e>
 8005af6:	8019      	strh	r1, [r3, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	9e04      	ldr	r6, [sp, #16]
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	e7bb      	b.n	8005a78 <_printf_i+0x128>
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	1d11      	adds	r1, r2, #4
 8005b04:	6019      	str	r1, [r3, #0]
 8005b06:	6816      	ldr	r6, [r2, #0]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	0030      	movs	r0, r6
 8005b0c:	6862      	ldr	r2, [r4, #4]
 8005b0e:	f000 f833 	bl	8005b78 <memchr>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d001      	beq.n	8005b1a <_printf_i+0x1ca>
 8005b16:	1b80      	subs	r0, r0, r6
 8005b18:	6060      	str	r0, [r4, #4]
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	7013      	strb	r3, [r2, #0]
 8005b24:	e7a8      	b.n	8005a78 <_printf_i+0x128>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	0032      	movs	r2, r6
 8005b2a:	9906      	ldr	r1, [sp, #24]
 8005b2c:	9805      	ldr	r0, [sp, #20]
 8005b2e:	9d07      	ldr	r5, [sp, #28]
 8005b30:	47a8      	blx	r5
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	d0aa      	beq.n	8005a8c <_printf_i+0x13c>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	079b      	lsls	r3, r3, #30
 8005b3a:	d415      	bmi.n	8005b68 <_printf_i+0x218>
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	4298      	cmp	r0, r3
 8005b42:	daa5      	bge.n	8005a90 <_printf_i+0x140>
 8005b44:	0018      	movs	r0, r3
 8005b46:	e7a3      	b.n	8005a90 <_printf_i+0x140>
 8005b48:	0022      	movs	r2, r4
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	9906      	ldr	r1, [sp, #24]
 8005b4e:	9805      	ldr	r0, [sp, #20]
 8005b50:	9e07      	ldr	r6, [sp, #28]
 8005b52:	3219      	adds	r2, #25
 8005b54:	47b0      	blx	r6
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	d098      	beq.n	8005a8c <_printf_i+0x13c>
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	42ab      	cmp	r3, r5
 8005b64:	dcf0      	bgt.n	8005b48 <_printf_i+0x1f8>
 8005b66:	e7e9      	b.n	8005b3c <_printf_i+0x1ec>
 8005b68:	2500      	movs	r5, #0
 8005b6a:	e7f7      	b.n	8005b5c <_printf_i+0x20c>
 8005b6c:	080069b0 	.word	0x080069b0
 8005b70:	080069c1 	.word	0x080069c1

08005b74 <__retarget_lock_acquire_recursive>:
 8005b74:	4770      	bx	lr

08005b76 <__retarget_lock_release_recursive>:
 8005b76:	4770      	bx	lr

08005b78 <memchr>:
 8005b78:	b2c9      	uxtb	r1, r1
 8005b7a:	1882      	adds	r2, r0, r2
 8005b7c:	4290      	cmp	r0, r2
 8005b7e:	d101      	bne.n	8005b84 <memchr+0xc>
 8005b80:	2000      	movs	r0, #0
 8005b82:	4770      	bx	lr
 8005b84:	7803      	ldrb	r3, [r0, #0]
 8005b86:	428b      	cmp	r3, r1
 8005b88:	d0fb      	beq.n	8005b82 <memchr+0xa>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	e7f6      	b.n	8005b7c <memchr+0x4>

08005b8e <_realloc_r>:
 8005b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b90:	0007      	movs	r7, r0
 8005b92:	000e      	movs	r6, r1
 8005b94:	0014      	movs	r4, r2
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d105      	bne.n	8005ba6 <_realloc_r+0x18>
 8005b9a:	0011      	movs	r1, r2
 8005b9c:	f7ff fc46 	bl	800542c <_malloc_r>
 8005ba0:	0005      	movs	r5, r0
 8005ba2:	0028      	movs	r0, r5
 8005ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d103      	bne.n	8005bb2 <_realloc_r+0x24>
 8005baa:	f7ff fbd3 	bl	8005354 <_free_r>
 8005bae:	0025      	movs	r5, r4
 8005bb0:	e7f7      	b.n	8005ba2 <_realloc_r+0x14>
 8005bb2:	f000 f81b 	bl	8005bec <_malloc_usable_size_r>
 8005bb6:	9001      	str	r0, [sp, #4]
 8005bb8:	4284      	cmp	r4, r0
 8005bba:	d803      	bhi.n	8005bc4 <_realloc_r+0x36>
 8005bbc:	0035      	movs	r5, r6
 8005bbe:	0843      	lsrs	r3, r0, #1
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d3ee      	bcc.n	8005ba2 <_realloc_r+0x14>
 8005bc4:	0021      	movs	r1, r4
 8005bc6:	0038      	movs	r0, r7
 8005bc8:	f7ff fc30 	bl	800542c <_malloc_r>
 8005bcc:	1e05      	subs	r5, r0, #0
 8005bce:	d0e8      	beq.n	8005ba2 <_realloc_r+0x14>
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	0022      	movs	r2, r4
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	d900      	bls.n	8005bda <_realloc_r+0x4c>
 8005bd8:	001a      	movs	r2, r3
 8005bda:	0031      	movs	r1, r6
 8005bdc:	0028      	movs	r0, r5
 8005bde:	f7ff fb69 	bl	80052b4 <memcpy>
 8005be2:	0031      	movs	r1, r6
 8005be4:	0038      	movs	r0, r7
 8005be6:	f7ff fbb5 	bl	8005354 <_free_r>
 8005bea:	e7da      	b.n	8005ba2 <_realloc_r+0x14>

08005bec <_malloc_usable_size_r>:
 8005bec:	1f0b      	subs	r3, r1, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	1f18      	subs	r0, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	da01      	bge.n	8005bfa <_malloc_usable_size_r+0xe>
 8005bf6:	580b      	ldr	r3, [r1, r0]
 8005bf8:	18c0      	adds	r0, r0, r3
 8005bfa:	4770      	bx	lr

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
