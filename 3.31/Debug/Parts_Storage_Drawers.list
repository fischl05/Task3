
Parts_Storage_Drawers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005720  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d54  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006534  08006534  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800653c  0800653c  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08006544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf0  200000e4  08006628  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  08006628  00020dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bda4  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb4  00000000  00000000  0003beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000116c1  00000000  00000000  0003fe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00051528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c38  00000000  00000000  00052528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016696  00000000  00000000  00054160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee56  00000000  00000000  0006a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080e5e  00000000  00000000  0008964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a4aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003690  00000000  00000000  0010a4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e4 	.word	0x200000e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057c8 	.word	0x080057c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e8 	.word	0x200000e8
 8000104:	080057c8 	.word	0x080057c8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004e4:	2300      	movs	r3, #0
{
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 80004ea:	ac05      	add	r4, sp, #20
{
 80004ec:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004ee:	210a      	movs	r1, #10
{
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 80004f4:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000508:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800051e:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000520:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000522:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000524:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fa56 	bl	80039f8 <HAL_I2C_Master_Transmit>
}
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	20000508 	.word	0x20000508

08000554 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000554:	2300      	movs	r3, #0
{
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 800055c:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800055e:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000560:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
{
 8000566:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000568:	a902      	add	r1, sp, #8
{
 800056a:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fa3f 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 faca 	bl	8003b1c <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000588:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058a:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 800058c:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058e:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000590:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fa2c 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 fab7 	bl	8003b1c <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fa19 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 faa4 	bl	8003b1c <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000508 	.word	0x20000508

08000610 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000610:	2304      	movs	r3, #4
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000616:	ac05      	add	r4, sp, #20
{
 8000618:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 800061a:	210a      	movs	r1, #10
{
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000620:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000634:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064a:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 800064c:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064e:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000650:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 f9c0 	bl	80039f8 <HAL_I2C_Master_Transmit>
}
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	20000508 	.word	0x20000508

08000680 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000680:	2304      	movs	r3, #4
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000688:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068a:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 800068c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068e:	220f      	movs	r2, #15
{
 8000690:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
{
 8000694:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 f9a9 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fa34 	bl	8003b1c <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 f996 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fa21 	bl	8003b1c <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 f983 	bl	80039f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fa0e 	bl	8003b1c <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
}
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000508 	.word	0x20000508

08000738 <led_color>:
uint32_t ledData[36][3];



void led_color(uint8_t id, uint8_t r, uint8_t g, uint8_t b)
{
 8000738:	b530      	push	{r4, r5, lr}
	ledData[id][0] = g;
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
	ledData[id][1] = r;
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
	ledData[id][2] = b;
 8000746:	60a3      	str	r3, [r4, #8]
}
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000100 	.word	0x20000100

08000750 <led_update>:

void led_update(void)
{
	for(int i=0; i<36; i++)
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
{
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
	{
		spiBf[(i * 3)] = colLUT[ledData[i][0]];
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
	for(int i=0; i<36; i++)
 800075e:	3001      	adds	r0, #1
		spiBf[(i * 3)] = colLUT[ledData[i][0]];
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
		spiBf[(i * 3) + 1] = colLUT[ledData[i][1]];
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
		spiBf[(i * 3) + 2] = colLUT[ledData[i][2]];
 800076e:	6895      	ldr	r5, [r2, #8]
	for(int i=0; i<36; i++)
 8000770:	320c      	adds	r2, #12
		spiBf[(i * 3) + 2] = colLUT[ledData[i][2]];
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
	for(int i=0; i<36; i++)
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
	}

	spiBf[108] = 0;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]

	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)spiBf, 436);
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 f8a0 	bl	80048d0 <HAL_SPI_Transmit_DMA>
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200002b0 	.word	0x200002b0
 8000798:	20000100 	.word	0x20000100
 800079c:	08005800 	.word	0x08005800
 80007a0:	20000554 	.word	0x20000554

080007a4 <led_clear>:
void led_clear(void)
{
	memset(ledData,0,sizeof(ledData));
 80007a4:	22d8      	movs	r2, #216	; 0xd8
{
 80007a6:	b510      	push	{r4, lr}
	memset(ledData,0,sizeof(ledData));
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 fb83 	bl	8004eb8 <memset>

//	led_update();
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	20000100 	.word	0x20000100

080007b8 <led_cmp>:
uint8_t led_cmp(uint8_t id, uint8_t r, uint8_t g, uint8_t b)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t result = 0, return_value = 0;

	if(ledData[id][0] == g) { result++; }
 80007ba:	260c      	movs	r6, #12
 80007bc:	0035      	movs	r5, r6
 80007be:	4345      	muls	r5, r0
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <led_cmp+0x38>)
	if(ledData[id][1] == r) { result++; }
	if(ledData[id][2] == b) { result++; }
 80007c2:	4370      	muls	r0, r6
	if(ledData[id][0] == g) { result++; }
 80007c4:	592f      	ldr	r7, [r5, r4]
	if(ledData[id][1] == r) { result++; }
 80007c6:	1965      	adds	r5, r4, r5
 80007c8:	686d      	ldr	r5, [r5, #4]
	if(ledData[id][0] == g) { result++; }
 80007ca:	1aba      	subs	r2, r7, r2
	if(ledData[id][1] == r) { result++; }
 80007cc:	1a6d      	subs	r5, r5, r1
	if(ledData[id][0] == g) { result++; }
 80007ce:	4257      	negs	r7, r2
 80007d0:	417a      	adcs	r2, r7
	if(ledData[id][1] == r) { result++; }
 80007d2:	4269      	negs	r1, r5
 80007d4:	414d      	adcs	r5, r1
	if(ledData[id][2] == b) { result++; }
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	68a1      	ldr	r1, [r4, #8]
	uint8_t result = 0, return_value = 0;
 80007da:	b2d2      	uxtb	r2, r2
	if(ledData[id][1] == r) { result++; }
 80007dc:	1952      	adds	r2, r2, r5
	if(ledData[id][2] == b) { result++; }
 80007de:	4299      	cmp	r1, r3
 80007e0:	d101      	bne.n	80007e6 <led_cmp+0x2e>
 80007e2:	3201      	adds	r2, #1
 80007e4:	b2d2      	uxtb	r2, r2
	return_value = result == 3;
 80007e6:	3a03      	subs	r2, #3
 80007e8:	4253      	negs	r3, r2
 80007ea:	415a      	adcs	r2, r3
	return return_value;
 80007ec:	b2d0      	uxtb	r0, r2
}
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	20000100 	.word	0x20000100

080007f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007f4:	b510      	push	{r4, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f8:	2224      	movs	r2, #36	; 0x24
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80f      	add	r0, sp, #60	; 0x3c
 80007fe:	f004 fb5b 	bl	8004eb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a801      	add	r0, sp, #4
 8000808:	f004 fb56 	bl	8004eb8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	a806      	add	r0, sp, #24
 8000812:	f004 fb51 	bl	8004eb8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <SystemClock_Config+0x90>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0x94>)
 800081a:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4313      	orrs	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	2300      	movs	r3, #0
 8000830:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000832:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000834:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000838:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f003 fb33 	bl	8003eac <HAL_RCC_OscConfig>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800084c:	e7fe      	b.n	800084c <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085a:	0021      	movs	r1, r4
 800085c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000860:	f003 fda6 	bl	80043b0 <HAL_RCC_ClockConfig>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x78>
 8000868:	b672      	cpsid	i
	while (1)
 800086a:	e7fe      	b.n	800086a <SystemClock_Config+0x76>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086c:	2308      	movs	r3, #8
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800086e:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000872:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	f003 fe6a 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x8c>
 800087c:	b672      	cpsid	i
	while (1)
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x8a>
}
 8000880:	b01c      	add	sp, #112	; 0x70
 8000882:	bd10      	pop	{r4, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <main>:
{
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2601      	movs	r6, #1
{
 8000890:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8000892:	f002 f9a3 	bl	8002bdc <HAL_Init>
	SystemClock_Config();
 8000896:	f7ff ffad 	bl	80007f4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f004 fb0a 	bl	8004eb8 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008a6:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4f7a      	ldr	r7, [pc, #488]	; (8000a94 <main+0x208>)
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008aa:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2500      	movs	r5, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	4033      	ands	r3, r6
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	430a      	orrs	r2, r1
 80008c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	400b      	ands	r3, r1
 80008c8:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008ca:	3106      	adds	r1, #6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80008ce:	f002 ff17 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	0031      	movs	r1, r6
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <main+0x20c>)
 80008d8:	f002 ff12 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008dc:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80008de:	2304      	movs	r3, #4
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008e0:	a905      	add	r1, sp, #20
 80008e2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80008e4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f002 fe43 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008ee:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = BUZ_Pin;
 80008f0:	2208      	movs	r2, #8
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008f2:	a905      	add	r1, sp, #20
 80008f4:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = BUZ_Pin;
 80008f6:	9205      	str	r2, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f002 fe39 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8000902:	4865      	ldr	r0, [pc, #404]	; (8000a98 <main+0x20c>)
 8000904:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = RGB_DATA_Pin;
 8000906:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 800090e:	f002 fe31 	bl	8003574 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	2208      	movs	r2, #8
 8000914:	0029      	movs	r1, r5
 8000916:	a805      	add	r0, sp, #20
 8000918:	f004 face 	bl	8004eb8 <memset>
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 800091c:	2306      	movs	r3, #6
	hadc.Init.OversamplingMode = DISABLE;
 800091e:	4c5f      	ldr	r4, [pc, #380]	; (8000a9c <main+0x210>)
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8000920:	63a3      	str	r3, [r4, #56]	; 0x38
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	33ff      	adds	r3, #255	; 0xff
 8000926:	6263      	str	r3, [r4, #36]	; 0x24
	hadc.Instance = ADC1;
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x214>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 800092a:	0022      	movs	r2, r4
	hadc.Instance = ADC1;
 800092c:	6023      	str	r3, [r4, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	2304      	movs	r3, #4
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000930:	322c      	adds	r2, #44	; 0x2c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000932:	0020      	movs	r0, r4
	hadc.Init.ContinuousConvMode = DISABLE;
 8000934:	8425      	strh	r5, [r4, #32]
	hadc.Init.OversamplingMode = DISABLE;
 8000936:	63e5      	str	r5, [r4, #60]	; 0x3c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000938:	62a5      	str	r5, [r4, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 800093a:	7015      	strb	r5, [r2, #0]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093c:	6325      	str	r5, [r4, #48]	; 0x30
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800093e:	6365      	str	r5, [r4, #52]	; 0x34
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000940:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000942:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000944:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000946:	6126      	str	r6, [r4, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	6163      	str	r3, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800094a:	61a5      	str	r5, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800094c:	61e5      	str	r5, [r4, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800094e:	f002 fa35 	bl	8002dbc <HAL_ADC_Init>
 8000952:	42a8      	cmp	r0, r5
 8000954:	d001      	beq.n	800095a <main+0xce>
 8000956:	b672      	cpsid	i
	while (1)
 8000958:	e7fe      	b.n	8000958 <main+0xcc>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800095a:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800095c:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800095e:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000960:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_0;
 8000962:	9605      	str	r6, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000964:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000966:	f002 fbb5 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <main+0xe6>
 800096e:	b672      	cpsid	i
	while (1)
 8000970:	e7fe      	b.n	8000970 <main+0xe4>
	sConfig.Channel = ADC_CHANNEL_1;
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x218>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000974:	0020      	movs	r0, r4
 8000976:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_1;
 8000978:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800097a:	f002 fbab 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800097e:	1e04      	subs	r4, r0, #0
 8000980:	d001      	beq.n	8000986 <main+0xfa>
 8000982:	b672      	cpsid	i
	while (1)
 8000984:	e7fe      	b.n	8000984 <main+0xf8>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000988:	0001      	movs	r1, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4333      	orrs	r3, r6
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000990:	0002      	movs	r2, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000992:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000994:	200a      	movs	r0, #10
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800099a:	f002 fbef 	bl	800317c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 fc16 	bl	80031d0 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 80009a4:	4d40      	ldr	r5, [pc, #256]	; (8000aa8 <main+0x21c>)
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x220>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 80009aa:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x00200C28;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <main+0x224>)
	hi2c1.Init.OwnAddress1 = 0;
 80009ae:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.Timing = 0x00200C28;
 80009b0:	606b      	str	r3, [r5, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	60ee      	str	r6, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009b6:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009bc:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	f002 ffc5 	bl	800394c <HAL_I2C_Init>
 80009c2:	1e01      	subs	r1, r0, #0
 80009c4:	d001      	beq.n	80009ca <main+0x13e>
 80009c6:	b672      	cpsid	i
	while (1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x13c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	0028      	movs	r0, r5
 80009cc:	f003 f9dc 	bl	8003d88 <HAL_I2CEx_ConfigAnalogFilter>
 80009d0:	1e01      	subs	r1, r0, #0
 80009d2:	d001      	beq.n	80009d8 <main+0x14c>
 80009d4:	b672      	cpsid	i
	while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x14a>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	0028      	movs	r0, r5
 80009da:	f003 f9fb 	bl	8003dd4 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x15a>
 80009e2:	b672      	cpsid	i
	while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x158>
	hspi1.Instance = SPI1;
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <main+0x228>)
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <main+0x22c>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	6083      	str	r3, [r0, #8]
	hspi1.Instance = SPI1;
 80009ec:	6002      	str	r2, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	2282      	movs	r2, #130	; 0x82
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	6143      	str	r3, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f8:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009fc:	2410      	movs	r4, #16
	hspi1.Init.CRCPolynomial = 7;
 80009fe:	2307      	movs	r3, #7
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	6042      	str	r2, [r0, #4]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a04:	32fc      	adds	r2, #252	; 0xfc
 8000a06:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a08:	61c4      	str	r4, [r0, #28]
	hspi1.Init.CRCPolynomial = 7;
 8000a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	f003 fefe 	bl	800480c <HAL_SPI_Init>
 8000a10:	1e05      	subs	r5, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x18c>
 8000a14:	b672      	cpsid	i
	while (1)
 8000a16:	e7fe      	b.n	8000a16 <main+0x18a>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a18:	0022      	movs	r2, r4
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	a805      	add	r0, sp, #20
 8000a1e:	f004 fa4b 	bl	8004eb8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	2208      	movs	r2, #8
 8000a24:	0029      	movs	r1, r5
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f004 fa46 	bl	8004eb8 <memset>
	htim2.Instance = TIM2;
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	4c23      	ldr	r4, [pc, #140]	; (8000abc <main+0x230>)
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 8000a34:	231f      	movs	r3, #31
 8000a36:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 1000-1;
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <main+0x234>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a3a:	0020      	movs	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 1000-1;
 8000a3e:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a44:	f004 f828 	bl	8004a98 <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1c4>
 8000a4c:	b672      	cpsid	i
	while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1c2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a52:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a56:	a905      	add	r1, sp, #20
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f004 f86d 	bl	8004b38 <HAL_TIM_ConfigClockSource>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x1da>
 8000a62:	b672      	cpsid	i
	while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x1d8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6a:	a903      	add	r1, sp, #12
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f004 f99d 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x1ee>
 8000a76:	b672      	cpsid	i
	while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x1ec>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	0011      	movs	r1, r2
 8000a80:	f002 fb7c 	bl	800317c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f002 fba3 	bl	80031d0 <HAL_NVIC_EnableIRQ>
	PSDrawers_Initialized();
 8000a8a:	f001 ffcb 	bl	8002a24 <PSDrawers_Initialized>
	PSDrawers_Main();
 8000a8e:	f001 ffdb 	bl	8002a48 <PSDrawers_Main>
	while (1)
 8000a92:	e7fe      	b.n	8000a92 <main+0x206>
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	20000464 	.word	0x20000464
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	04000002 	.word	0x04000002
 8000aa8:	20000508 	.word	0x20000508
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00200c28 	.word	0x00200c28
 8000ab4:	20000554 	.word	0x20000554
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	200005ac 	.word	0x200005ac
 8000ac0:	000003e7 	.word	0x000003e7

08000ac4 <Error_Handler>:
 8000ac4:	b672      	cpsid	i
	while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x2>

08000ac8 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ac8:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000aca:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000acc:	4288      	cmp	r0, r1
 8000ace:	d000      	beq.n	8000ad2 <SSD1306_Fill+0xa>
 8000ad0:	31ff      	adds	r1, #255	; 0xff
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SSD1306_Fill+0x18>)
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	f004 f9ee 	bl	8004eb8 <memset>
}
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200005f2 	.word	0x200005f2

08000ae4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	0004      	movs	r4, r0
	if (
 8000ae8:	287f      	cmp	r0, #127	; 0x7f
 8000aea:	d812      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
			x >= SSD1306_WIDTH ||
 8000aec:	293f      	cmp	r1, #63	; 0x3f
 8000aee:	d810      	bhi.n	8000b12 <SSD1306_DrawPixel+0x2e>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0x48>)
 8000af2:	4d0f      	ldr	r5, [pc, #60]	; (8000b30 <SSD1306_DrawPixel+0x4c>)
 8000af4:	7918      	ldrb	r0, [r3, #4]
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d00b      	beq.n	8000b14 <SSD1306_DrawPixel+0x30>
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d10b      	bne.n	8000b18 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b00:	01d8      	lsls	r0, r3, #7
 8000b02:	2307      	movs	r3, #7
 8000b04:	4019      	ands	r1, r3
 8000b06:	3b06      	subs	r3, #6
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1900      	adds	r0, r0, r4
 8000b0c:	5c2a      	ldrb	r2, [r5, r0]
 8000b0e:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b10:	542b      	strb	r3, [r5, r0]
	}
}
 8000b12:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d0f3      	beq.n	8000b00 <SSD1306_DrawPixel+0x1c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b18:	01d8      	lsls	r0, r3, #7
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4019      	ands	r1, r3
 8000b20:	408a      	lsls	r2, r1
 8000b22:	1900      	adds	r0, r0, r4
 8000b24:	5c2b      	ldrb	r3, [r5, r0]
 8000b26:	4393      	bics	r3, r2
 8000b28:	e7f2      	b.n	8000b10 <SSD1306_DrawPixel+0x2c>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200005ec 	.word	0x200005ec
 8000b30:	200005f2 	.word	0x200005f2

08000b34 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <SSD1306_GotoXY+0x8>)
 8000b36:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000b38:	8059      	strh	r1, [r3, #2]
}
 8000b3a:	4770      	bx	lr
 8000b3c:	200005ec 	.word	0x200005ec

08000b40 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b42:	0007      	movs	r7, r0
 8000b44:	000c      	movs	r4, r1
	//		/* Error */
	//		return 0;
	//	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b46:	2500      	movs	r5, #0
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b48:	9200      	str	r2, [sp, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 8000b4a:	7863      	ldrb	r3, [r4, #1]
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d806      	bhi.n	8000b5e <SSD1306_Putc+0x1e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SSD1306_Putc+0x68>)
 8000b52:	7823      	ldrb	r3, [r4, #0]
 8000b54:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8000b56:	0038      	movs	r0, r7
	SSD1306.CurrentX += Font->FontWidth;
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	8013      	strh	r3, [r2, #0]
}
 8000b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b5e:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8000b60:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b62:	3a20      	subs	r2, #32
 8000b64:	4353      	muls	r3, r2
 8000b66:	6862      	ldr	r2, [r4, #4]
 8000b68:	195b      	adds	r3, r3, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	5a9b      	ldrh	r3, [r3, r2]
 8000b6e:	9301      	str	r3, [sp, #4]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SSD1306_Putc+0x68>)
		for (j = 0; j < Font->FontWidth; j++) {
 8000b72:	7822      	ldrb	r2, [r4, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b74:	8818      	ldrh	r0, [r3, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b76:	42b2      	cmp	r2, r6
 8000b78:	d801      	bhi.n	8000b7e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7e5      	b.n	8000b4a <SSD1306_Putc+0xa>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b7e:	8859      	ldrh	r1, [r3, #2]
			if ((b << j) & 0x8000) {
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	40b3      	lsls	r3, r6
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b86:	1980      	adds	r0, r0, r6
 8000b88:	1949      	adds	r1, r1, r5
			if ((b << j) & 0x8000) {
 8000b8a:	0212      	lsls	r2, r2, #8
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	b289      	uxth	r1, r1
			if ((b << j) & 0x8000) {
 8000b90:	4213      	tst	r3, r2
 8000b92:	d004      	beq.n	8000b9e <SSD1306_Putc+0x5e>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b94:	9a00      	ldr	r2, [sp, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b96:	f7ff ffa5 	bl	8000ae4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7e8      	b.n	8000b70 <SSD1306_Putc+0x30>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	425a      	negs	r2, r3
 8000ba2:	415a      	adcs	r2, r3
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	e7f6      	b.n	8000b96 <SSD1306_Putc+0x56>
 8000ba8:	200005ec 	.word	0x200005ec

08000bac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <SSD1306_Puts+0x10>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	f7ff ffbe 	bl	8000b40 <SSD1306_Putc>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	7820      	ldrb	r0, [r4, #0]
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	d1f6      	bne.n	8000bba <SSD1306_Puts+0xe>
		str++;
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7f1      	b.n	8000bb4 <SSD1306_Puts+0x8>

08000bd0 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	ac0c      	add	r4, sp, #48	; 0x30
 8000bd6:	7824      	ldrb	r4, [r4, #0]
 8000bd8:	9405      	str	r4, [sp, #20]
 8000bda:	1c04      	adds	r4, r0, #0
 8000bdc:	287f      	cmp	r0, #127	; 0x7f
 8000bde:	d900      	bls.n	8000be2 <SSD1306_DrawLine+0x12>
 8000be0:	247f      	movs	r4, #127	; 0x7f
 8000be2:	b2a4      	uxth	r4, r4

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8000be4:	1c16      	adds	r6, r2, #0
 8000be6:	2a7f      	cmp	r2, #127	; 0x7f
 8000be8:	d900      	bls.n	8000bec <SSD1306_DrawLine+0x1c>
 8000bea:	267f      	movs	r6, #127	; 0x7f
 8000bec:	b2b6      	uxth	r6, r6
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000bee:	1c0d      	adds	r5, r1, #0
 8000bf0:	293f      	cmp	r1, #63	; 0x3f
 8000bf2:	d900      	bls.n	8000bf6 <SSD1306_DrawLine+0x26>
 8000bf4:	253f      	movs	r5, #63	; 0x3f
 8000bf6:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000bf8:	1c1f      	adds	r7, r3, #0
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d900      	bls.n	8000c00 <SSD1306_DrawLine+0x30>
 8000bfe:	273f      	movs	r7, #63	; 0x3f
 8000c00:	b2bf      	uxth	r7, r7
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000c02:	1b33      	subs	r3, r6, r4
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d800      	bhi.n	8000c0a <SSD1306_DrawLine+0x3a>
 8000c08:	1ba3      	subs	r3, r4, r6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d224      	bcs.n	8000c5c <SSD1306_DrawLine+0x8c>
 8000c12:	1b7b      	subs	r3, r7, r5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000c1c:	9304      	str	r3, [sp, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d801      	bhi.n	8000c26 <SSD1306_DrawLine+0x56>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	9303      	str	r3, [sp, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000c26:	9b00      	ldr	r3, [sp, #0]
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd23      	ble.n	8000c76 <SSD1306_DrawLine+0xa6>
 8000c2e:	9a00      	ldr	r2, [sp, #0]
 8000c30:	0fdb      	lsrs	r3, r3, #31
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12b      	bne.n	8000c96 <SSD1306_DrawLine+0xc6>
		if (y1 < y0) {
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	d902      	bls.n	8000c48 <SSD1306_DrawLine+0x78>
 8000c42:	002b      	movs	r3, r5
 8000c44:	003d      	movs	r5, r7
 8000c46:	001f      	movs	r7, r3
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
 8000c48:	1c33      	adds	r3, r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d900      	bls.n	8000c50 <SSD1306_DrawLine+0x80>
 8000c4e:	1c23      	adds	r3, r4, #0
 8000c50:	b29c      	uxth	r4, r3
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000c52:	b22d      	sxth	r5, r5
 8000c54:	42bd      	cmp	r5, r7
 8000c56:	dd16      	ble.n	8000c86 <SSD1306_DrawLine+0xb6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8000c58:	b007      	add	sp, #28
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000c5c:	1beb      	subs	r3, r5, r7
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8000c62:	2301      	movs	r3, #1
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d903      	bls.n	8000c70 <SSD1306_DrawLine+0xa0>
 8000c68:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7da      	b.n	8000c26 <SSD1306_DrawLine+0x56>
	sx = (x0 < x1) ? 1 : -1; 
 8000c70:	425b      	negs	r3, r3
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	e7fa      	b.n	8000c6c <SSD1306_DrawLine+0x9c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0fdb      	lsrs	r3, r3, #31
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	e7d7      	b.n	8000c36 <SSD1306_DrawLine+0x66>
			SSD1306_DrawPixel(x0, i, c);
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	0029      	movs	r1, r5
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	9a05      	ldr	r2, [sp, #20]
 8000c8e:	f7ff ff29 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7dd      	b.n	8000c52 <SSD1306_DrawLine+0x82>
	if (dy == 0) {
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d115      	bne.n	8000cc8 <SSD1306_DrawLine+0xf8>
		if (y1 < y0) {
 8000c9c:	1c2b      	adds	r3, r5, #0
 8000c9e:	42bd      	cmp	r5, r7
 8000ca0:	d900      	bls.n	8000ca4 <SSD1306_DrawLine+0xd4>
 8000ca2:	1c3b      	adds	r3, r7, #0
 8000ca4:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d202      	bcs.n	8000cb0 <SSD1306_DrawLine+0xe0>
 8000caa:	0023      	movs	r3, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	001e      	movs	r6, r3
		for (i = x0; i <= x1; i++) {
 8000cb0:	b224      	sxth	r4, r4
 8000cb2:	42b4      	cmp	r4, r6
 8000cb4:	dcd0      	bgt.n	8000c58 <SSD1306_DrawLine+0x88>
			SSD1306_DrawPixel(i, y0, c);
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	0020      	movs	r0, r4
 8000cba:	0029      	movs	r1, r5
 8000cbc:	9a05      	ldr	r2, [sp, #20]
 8000cbe:	f7ff ff11 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	e7f4      	b.n	8000cb0 <SSD1306_DrawLine+0xe0>
		if (x1 < x0) {
 8000cc6:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8000cc8:	0029      	movs	r1, r5
 8000cca:	0020      	movs	r0, r4
 8000ccc:	9a05      	ldr	r2, [sp, #20]
 8000cce:	f7ff ff09 	bl	8000ae4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d101      	bne.n	8000cda <SSD1306_DrawLine+0x10a>
 8000cd6:	42bd      	cmp	r5, r7
 8000cd8:	d0be      	beq.n	8000c58 <SSD1306_DrawLine+0x88>
		if (e2 > -dx) {
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	425a      	negs	r2, r3
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dd05      	ble.n	8000cf0 <SSD1306_DrawLine+0x120>
			err -= dy;
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 8000ce8:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 8000cea:	b21b      	sxth	r3, r3
			x0 += sx;
 8000cec:	18a4      	adds	r4, r4, r2
 8000cee:	b2a4      	uxth	r4, r4
		if (e2 < dy) {
 8000cf0:	9a02      	ldr	r2, [sp, #8]
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	dae6      	bge.n	8000cc6 <SSD1306_DrawLine+0xf6>
			err += dx;
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	189b      	adds	r3, r3, r2
			y0 += sy;
 8000cfc:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 8000cfe:	b21b      	sxth	r3, r3
			y0 += sy;
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	e7df      	b.n	8000cc6 <SSD1306_DrawLine+0xf6>

08000d06 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0007      	movs	r7, r0
 8000d12:	000e      	movs	r6, r1
 8000d14:	9303      	str	r3, [sp, #12]
	/* Check input parameters */
	if (
 8000d16:	287f      	cmp	r0, #127	; 0x7f
 8000d18:	d831      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
			x >= SSD1306_WIDTH ||
 8000d1a:	293f      	cmp	r1, #63	; 0x3f
 8000d1c:	d82f      	bhi.n	8000d7e <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000d1e:	1883      	adds	r3, r0, r2
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dd02      	ble.n	8000d2a <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000d2a:	1973      	adds	r3, r6, r5
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd02      	ble.n	8000d36 <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1bad      	subs	r5, r5, r6
 8000d34:	b2ad      	uxth	r5, r5
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	19d2      	adds	r2, r2, r7
 8000d3a:	b294      	uxth	r4, r2
 8000d3c:	0022      	movs	r2, r4
 8000d3e:	0031      	movs	r1, r6
 8000d40:	0038      	movs	r0, r7
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0033      	movs	r3, r6
 8000d46:	f7ff ff43 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000d4a:	19ad      	adds	r5, r5, r6
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	0022      	movs	r2, r4
 8000d52:	0029      	movs	r1, r5
 8000d54:	0038      	movs	r0, r7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	f7ff ff39 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	003a      	movs	r2, r7
 8000d62:	0031      	movs	r1, r6
 8000d64:	0038      	movs	r0, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	002b      	movs	r3, r5
 8000d6a:	f7ff ff31 	bl	8000bd0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	0022      	movs	r2, r4
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0031      	movs	r1, r6
 8000d76:	002b      	movs	r3, r5
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff ff29 	bl	8000bd0 <SSD1306_DrawLine>
}
 8000d7e:	b005      	add	sp, #20
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	ab0a      	add	r3, sp, #40	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000f      	movs	r7, r1
 8000d90:	0014      	movs	r4, r2
 8000d92:	9303      	str	r3, [sp, #12]
	uint8_t i;

	/* Check input parameters */
	if (
 8000d94:	287f      	cmp	r0, #127	; 0x7f
 8000d96:	d814      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
			x >= SSD1306_WIDTH ||
 8000d98:	293f      	cmp	r1, #63	; 0x3f
 8000d9a:	d812      	bhi.n	8000dc2 <SSD1306_DrawFilledRectangle+0x40>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000d9c:	1883      	adds	r3, r0, r2
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	dd02      	ble.n	8000da8 <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	1a24      	subs	r4, r4, r0
 8000da6:	b2a4      	uxth	r4, r4
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000da8:	9b02      	ldr	r3, [sp, #8]
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	dd03      	ble.n	8000db8 <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	9302      	str	r3, [sp, #8]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000db8:	2600      	movs	r6, #0
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	b2b1      	uxth	r1, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawFilledRectangle+0x44>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	19c9      	adds	r1, r1, r7
 8000dca:	b289      	uxth	r1, r1
 8000dcc:	1962      	adds	r2, r4, r5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	b292      	uxth	r2, r2
	for (i = 0; i <= h; i++) {
 8000dd6:	3601      	adds	r6, #1
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000dd8:	f7ff fefa 	bl	8000bd0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000ddc:	b2f6      	uxtb	r6, r6
 8000dde:	e7ec      	b.n	8000dba <SSD1306_DrawFilledRectangle+0x38>

08000de0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000de0:	b570      	push	{r4, r5, r6, lr}
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
 8000de2:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000de4:	b0c2      	sub	sp, #264	; 0x108
 8000de6:	0015      	movs	r5, r2
	dt[0] = reg;
 8000de8:	aa02      	add	r2, sp, #8
 8000dea:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < count; i++)
 8000dec:	429c      	cmp	r4, r3
 8000dee:	d309      	bcc.n	8000e04 <ssd1306_I2C_WriteMulti+0x24>
		dt[i+1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000df0:	b281      	uxth	r1, r0
 8000df2:	200a      	movs	r0, #10
 8000df4:	3301      	adds	r3, #1
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ssd1306_I2C_WriteMulti+0x30>)
 8000dfc:	f002 fdfc 	bl	80039f8 <HAL_I2C_Master_Transmit>
}
 8000e00:	b042      	add	sp, #264	; 0x108
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
		dt[i+1] = data[i];
 8000e04:	5d2e      	ldrb	r6, [r5, r4]
 8000e06:	1911      	adds	r1, r2, r4
	for(i = 0; i < count; i++)
 8000e08:	3401      	adds	r4, #1
		dt[i+1] = data[i];
 8000e0a:	704e      	strb	r6, [r1, #1]
	for(i = 0; i < count; i++)
 8000e0c:	b2e4      	uxtb	r4, r4
 8000e0e:	e7ed      	b.n	8000dec <ssd1306_I2C_WriteMulti+0xc>
 8000e10:	20000508 	.word	0x20000508

08000e14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
 8000e16:	466b      	mov	r3, sp
 8000e18:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 8000e1a:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	0001      	movs	r1, r0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	aa03      	add	r2, sp, #12
 8000e24:	3b08      	subs	r3, #8
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <ssd1306_I2C_Write+0x1c>)
 8000e28:	f002 fde6 	bl	80039f8 <HAL_I2C_Master_Transmit>
}
 8000e2c:	b005      	add	sp, #20
 8000e2e:	bd00      	pop	{pc}
 8000e30:	20000508 	.word	0x20000508

08000e34 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e38:	2578      	movs	r5, #120	; 0x78
 8000e3a:	4e0e      	ldr	r6, [pc, #56]	; (8000e74 <SSD1306_UpdateScreen+0x40>)
 8000e3c:	0022      	movs	r2, r4
 8000e3e:	2100      	movs	r1, #0
 8000e40:	0028      	movs	r0, r5
 8000e42:	f7ff ffe7 	bl	8000e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e46:	2200      	movs	r2, #0
 8000e48:	0028      	movs	r0, r5
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	f7ff ffe2 	bl	8000e14 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8000e50:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	0028      	movs	r0, r5
 8000e58:	f7ff ffdc 	bl	8000e14 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8000e5c:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e5e:	0032      	movs	r2, r6
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	0028      	movs	r0, r5
 8000e66:	f7ff ffbb 	bl	8000de0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e6a:	3680      	adds	r6, #128	; 0x80
 8000e6c:	2cb8      	cmp	r4, #184	; 0xb8
 8000e6e:	d1e5      	bne.n	8000e3c <SSD1306_UpdateScreen+0x8>
}
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	200005f2 	.word	0x200005f2

08000e78 <SSD1306_Clear>:
{
 8000e78:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe24 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000e80:	f7ff ffd8 	bl	8000e34 <SSD1306_UpdateScreen>
}
 8000e84:	bd10      	pop	{r4, pc}
	...

08000e88 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8000e88:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2178      	movs	r1, #120	; 0x78
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <SSD1306_Init+0x150>)
 8000e90:	4852      	ldr	r0, [pc, #328]	; (8000fdc <SSD1306_Init+0x154>)
 8000e92:	f002 fed5 	bl	8003c40 <HAL_I2C_IsDeviceReady>
		return 0;
 8000e96:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d000      	beq.n	8000e9e <SSD1306_Init+0x16>
 8000e9c:	e09a      	b.n	8000fd4 <SSD1306_Init+0x14c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e9e:	0021      	movs	r1, r4
 8000ea0:	22ae      	movs	r2, #174	; 0xae
 8000ea2:	2078      	movs	r0, #120	; 0x78
 8000ea4:	f7ff ffb6 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2078      	movs	r0, #120	; 0x78
 8000eae:	f7ff ffb1 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	2078      	movs	r0, #120	; 0x78
 8000eb8:	f7ff ffac 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	22b0      	movs	r2, #176	; 0xb0
 8000ec0:	2078      	movs	r0, #120	; 0x78
 8000ec2:	f7ff ffa7 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	22c8      	movs	r2, #200	; 0xc8
 8000eca:	2078      	movs	r0, #120	; 0x78
 8000ecc:	f7ff ffa2 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ed0:	0022      	movs	r2, r4
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	2078      	movs	r0, #120	; 0x78
 8000ed6:	f7ff ff9d 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000eda:	0021      	movs	r1, r4
 8000edc:	2210      	movs	r2, #16
 8000ede:	2078      	movs	r0, #120	; 0x78
 8000ee0:	f7ff ff98 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f7ff ff93 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000eee:	0021      	movs	r1, r4
 8000ef0:	2281      	movs	r2, #129	; 0x81
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f7ff ff8e 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ef8:	0021      	movs	r1, r4
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	2078      	movs	r0, #120	; 0x78
 8000efe:	f7ff ff89 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f02:	0021      	movs	r1, r4
 8000f04:	22a1      	movs	r2, #161	; 0xa1
 8000f06:	2078      	movs	r0, #120	; 0x78
 8000f08:	f7ff ff84 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f0c:	0021      	movs	r1, r4
 8000f0e:	22a6      	movs	r2, #166	; 0xa6
 8000f10:	2078      	movs	r0, #120	; 0x78
 8000f12:	f7ff ff7f 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f16:	0021      	movs	r1, r4
 8000f18:	22a8      	movs	r2, #168	; 0xa8
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f7ff ff7a 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f20:	0021      	movs	r1, r4
 8000f22:	223f      	movs	r2, #63	; 0x3f
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f7ff ff75 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	22a4      	movs	r2, #164	; 0xa4
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f7ff ff70 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f34:	0021      	movs	r1, r4
 8000f36:	22d3      	movs	r2, #211	; 0xd3
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f7ff ff6b 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f3e:	0022      	movs	r2, r4
 8000f40:	0021      	movs	r1, r4
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f7ff ff66 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f48:	0021      	movs	r1, r4
 8000f4a:	22d5      	movs	r2, #213	; 0xd5
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f7ff ff61 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f52:	0021      	movs	r1, r4
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f7ff ff5c 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	22d9      	movs	r2, #217	; 0xd9
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f7ff ff57 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f66:	0021      	movs	r1, r4
 8000f68:	2222      	movs	r2, #34	; 0x22
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f7ff ff52 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f70:	0021      	movs	r1, r4
 8000f72:	22da      	movs	r2, #218	; 0xda
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f7ff ff4d 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f7ff ff48 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f84:	0021      	movs	r1, r4
 8000f86:	22db      	movs	r2, #219	; 0xdb
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f7ff ff43 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f8e:	0021      	movs	r1, r4
 8000f90:	2220      	movs	r2, #32
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f7ff ff3e 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f98:	0021      	movs	r1, r4
 8000f9a:	228d      	movs	r2, #141	; 0x8d
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f7ff ff39 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f7ff ff34 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fac:	0021      	movs	r1, r4
 8000fae:	22af      	movs	r2, #175	; 0xaf
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f7ff ff2f 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	222e      	movs	r2, #46	; 0x2e
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f7ff ff2a 	bl	8000e14 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	f7ff fd81 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000fc6:	f7ff ff35 	bl	8000e34 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SSD1306_Init+0x158>)
 8000fcc:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fce:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8000fd0:	3401      	adds	r4, #1
 8000fd2:	715c      	strb	r4, [r3, #5]
}
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	00004e20 	.word	0x00004e20
 8000fdc:	20000508 	.word	0x20000508
 8000fe0:	200005ec 	.word	0x200005ec

08000fe4 <eepWriteData>:
 */
#include "stm32l0xx_EEPROM.h"
#include "stm32l052xx.h"

void eepWriteData(uint16_t addr, uint8_t inData)
{
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	000d      	movs	r5, r1
 8000fe8:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8000fea:	f002 fa77 	bl	80034dc <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,(DATA_EEPROM_BASE+addr),inData);
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <eepWriteData+0x1c>)
 8000ff0:	002a      	movs	r2, r5
 8000ff2:	18e1      	adds	r1, r4, r3
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 fa93 	bl	8003520 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8000ffa:	f002 fa87 	bl	800350c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	08080000 	.word	0x08080000

08001004 <eepReadData>:
uint8_t eepReadData(uint16_t addr)
{
	//return (*(__IO uint32_t *)(EEP_START_ADRESS+addr));
	return (*(__IO uint8_t*)(DATA_EEPROM_BASE+addr));
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <eepReadData+0xc>)
 8001006:	18c0      	adds	r0, r0, r3
 8001008:	7800      	ldrb	r0, [r0, #0]
 800100a:	b2c0      	uxtb	r0, r0
}
 800100c:	4770      	bx	lr
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	08080000 	.word	0x08080000

08001014 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	2201      	movs	r2, #1
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_MspInit+0x18>)
 8001018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001022:	0552      	lsls	r2, r2, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	4770      	bx	lr
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b510      	push	{r4, lr}
 8001032:	0004      	movs	r4, r0
 8001034:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	2214      	movs	r2, #20
 8001038:	2100      	movs	r1, #0
 800103a:	a801      	add	r0, sp, #4
 800103c:	f003 ff3c 	bl	8004eb8 <memset>
  if(hadc->Instance==ADC1)
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x48>)
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d115      	bne.n	8001074 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x4c>)
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	400b      	ands	r3, r1
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8001068:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 800106c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f002 fa80 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001074:	b006      	add	sp, #24
 8001076:	bd10      	pop	{r4, pc}
 8001078:	40012400 	.word	0x40012400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b510      	push	{r4, lr}
 8001082:	0004      	movs	r4, r0
 8001084:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a801      	add	r0, sp, #4
 800108c:	f003 ff14 	bl	8004eb8 <memset>
  if(hi2c->Instance==I2C1)
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_I2C_MspInit+0x50>)
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d119      	bne.n	80010cc <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	2102      	movs	r1, #2
 800109a:	4c0e      	ldr	r4, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010a0:	430a      	orrs	r2, r1
 80010a2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80010a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a6:	400b      	ands	r3, r1
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ac:	23c0      	movs	r3, #192	; 0xc0
 80010ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	3bae      	subs	r3, #174	; 0xae
 80010b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	3b0f      	subs	r3, #15
 80010b6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80010ba:	3b02      	subs	r3, #2
 80010bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f002 fa59 	bl	8003574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4313      	orrs	r3, r2
 80010ca:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	b006      	add	sp, #24
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	50000400 	.word	0x50000400

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	0005      	movs	r5, r0
 80010e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	2214      	movs	r2, #20
 80010e4:	2100      	movs	r1, #0
 80010e6:	a801      	add	r0, sp, #4
 80010e8:	f003 fee6 	bl	8004eb8 <memset>
  if(hspi->Instance==SPI1)
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_SPI_MspInit+0x7c>)
 80010ee:	682a      	ldr	r2, [r5, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d12f      	bne.n	8001154 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f4:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_SPI_MspInit+0x80>)
 80010fa:	0152      	lsls	r2, r2, #5
 80010fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4332      	orrs	r2, r6
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4033      	ands	r3, r6
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	3b9e      	subs	r3, #158	; 0x9e
 800111c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	199b      	adds	r3, r3, r6
 8001120:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f002 fa27 	bl	8003574 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001126:	4c0e      	ldr	r4, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x84>)
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0x88>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800112c:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112e:	2310      	movs	r3, #16
 8001130:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001134:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001136:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001140:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001142:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001144:	f002 f86a 	bl	800321c <HAL_DMA_Init>
 8001148:	2800      	cmp	r0, #0
 800114a:	d001      	beq.n	8001150 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800114c:	f7ff fcba 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001150:	64ac      	str	r4, [r5, #72]	; 0x48
 8001152:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001154:	b006      	add	sp, #24
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000
 8001160:	200004c0 	.word	0x200004c0
 8001164:	40020030 	.word	0x40020030

08001168 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	429a      	cmp	r2, r3
 8001170:	d104      	bne.n	800117c <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001172:	2301      	movs	r3, #1
 8001174:	4a02      	ldr	r2, [pc, #8]	; (8001180 <HAL_TIM_Base_MspInit+0x18>)
 8001176:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001178:	430b      	orrs	r3, r1
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800117c:	4770      	bx	lr
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler>

08001186 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler>

08001188 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f001 fd39 	bl	8002c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bd10      	pop	{r4, pc}

08001194 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001194:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001198:	f002 f8c4 	bl	8003324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200004c0 	.word	0x200004c0

080011a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0xc>)
 80011a8:	f003 fd78 	bl	8004c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	200005ac 	.word	0x200005ac

080011b4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <_sbrk+0x30>)
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <_sbrk+0x34>)
{
 80011b8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ba:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <_sbrk+0x38>)
{
 80011be:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d101      	bne.n	80011ca <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <_sbrk+0x3c>)
 80011c8:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	18c3      	adds	r3, r0, r3
 80011ce:	428b      	cmp	r3, r1
 80011d0:	d906      	bls.n	80011e0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80011d2:	f003 fe21 	bl	8004e18 <__errno>
 80011d6:	230c      	movs	r3, #12
 80011d8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011da:	2001      	movs	r0, #1
 80011dc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011de:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011e0:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80011e2:	e7fc      	b.n	80011de <_sbrk+0x2a>
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20002000 	.word	0x20002000
 80011ec:	200009f4 	.word	0x200009f4
 80011f0:	20000dd8 	.word	0x20000dd8

080011f4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	4770      	bx	lr
	...

080011f8 <curxy>:
POS temp, min, max, ptionS, ptionE;

/* Functions */

__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
__STATIC_INLINE uint8_t curxy(void) { return temp.x + ((5 - temp.y) * 6); }
 80011f8:	2005      	movs	r0, #5
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <curxy+0x14>)
 80011fc:	7853      	ldrb	r3, [r2, #1]
 80011fe:	1ac3      	subs	r3, r0, r3
 8001200:	3001      	adds	r0, #1
 8001202:	4358      	muls	r0, r3
 8001204:	7813      	ldrb	r3, [r2, #0]
 8001206:	18c0      	adds	r0, r0, r3
 8001208:	b2c0      	uxtb	r0, r0
 800120a:	4770      	bx	lr
 800120c:	20000da2 	.word	0x20000da2

08001210 <init_value>:
__STATIC_INLINE void init_value(void) { firF = sel = ModeF = joy_result = temp.x = temp.y = 0; }
 8001210:	2300      	movs	r3, #0
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <init_value+0x1c>)
 8001214:	7013      	strb	r3, [r2, #0]
 8001216:	7053      	strb	r3, [r2, #1]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <init_value+0x20>)
 800121a:	7013      	strb	r3, [r2, #0]
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <init_value+0x24>)
 800121e:	7013      	strb	r3, [r2, #0]
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <init_value+0x28>)
 8001222:	7013      	strb	r3, [r2, #0]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <init_value+0x2c>)
 8001226:	7013      	strb	r3, [r2, #0]
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000da2 	.word	0x20000da2
 8001230:	20000a14 	.word	0x20000a14
 8001234:	200009f8 	.word	0x200009f8
 8001238:	20000d9f 	.word	0x20000d9f
 800123c:	2000000c 	.word	0x2000000c

08001240 <get_time>:

__STATIC_INLINE void get_time(void){
 8001240:	b510      	push	{r4, lr}
	DS3231_get_date(&time.day, &time.month, &time.year);
 8001242:	4c06      	ldr	r4, [pc, #24]	; (800125c <get_time+0x1c>)
 8001244:	0022      	movs	r2, r4
 8001246:	1c61      	adds	r1, r4, #1
 8001248:	1ca0      	adds	r0, r4, #2
 800124a:	f7ff fa19 	bl	8000680 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 800124e:	1ce2      	adds	r2, r4, #3
 8001250:	1d21      	adds	r1, r4, #4
 8001252:	1d60      	adds	r0, r4, #5
 8001254:	f7ff f97e 	bl	8000554 <DS3231_get_time>
}
 8001258:	bd10      	pop	{r4, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000071 	.word	0x20000071

08001260 <ssd1306_putsXY>:
__STATIC_INLINE void set_time(void){
	DS3231_set_date(time.day, time.month, time.year);
	DS3231_set_time(time.sec, time.min, time.hour);
}

void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 8001264:	2306      	movs	r3, #6
void ssd1306_putsXY(uint8_t x, uint8_t y, char* str, uint8_t color){
 8001266:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 8001268:	4358      	muls	r0, r3
 800126a:	00c9      	lsls	r1, r1, #3
 800126c:	f7ff fc62 	bl	8000b34 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 8001270:	002a      	movs	r2, r5
 8001272:	0020      	movs	r0, r4
 8001274:	4901      	ldr	r1, [pc, #4]	; (800127c <ssd1306_putsXY+0x1c>)
 8001276:	f7ff fc99 	bl	8000bac <SSD1306_Puts>
}
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	20000000 	.word	0x20000000

08001280 <array_puts>:

void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	001e      	movs	r6, r3
 8001286:	ab0a      	add	r3, sp, #40	; 0x28
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0004      	movs	r4, r0
	SSD1306_Fill(0);
 800128c:	2000      	movs	r0, #0
void array_puts(POS* pos, char* title, char** array, uint8_t color, uint8_t num){
 800128e:	000f      	movs	r7, r1
 8001290:	0015      	movs	r5, r2
 8001292:	9303      	str	r3, [sp, #12]
	SSD1306_Fill(0);
 8001294:	f7ff fc18 	bl	8000ac8 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8001298:	2100      	movs	r1, #0
 800129a:	2301      	movs	r3, #1
 800129c:	0008      	movs	r0, r1
 800129e:	227f      	movs	r2, #127	; 0x7f
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	3306      	adds	r3, #6
 80012a4:	f7ff fd6d 	bl	8000d82 <SSD1306_DrawFilledRectangle>
	ssd1306_putsXY(0, 0, title, 0);
 80012a8:	2300      	movs	r3, #0
 80012aa:	003a      	movs	r2, r7
 80012ac:	0019      	movs	r1, r3
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ffd6 	bl	8001260 <ssd1306_putsXY>
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 80012b4:	9b03      	ldr	r3, [sp, #12]
 80012b6:	005f      	lsls	r7, r3, #1
 80012b8:	19e7      	adds	r7, r4, r7
 80012ba:	42bc      	cmp	r4, r7
 80012bc:	d101      	bne.n	80012c2 <array_puts+0x42>
}
 80012be:	b005      	add	sp, #20
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < num ; i++) ssd1306_putsXY(pos[i].x, pos[i].y, array[i], color);
 80012c2:	7861      	ldrb	r1, [r4, #1]
 80012c4:	7820      	ldrb	r0, [r4, #0]
 80012c6:	0033      	movs	r3, r6
 80012c8:	cd04      	ldmia	r5!, {r2}
 80012ca:	f7ff ffc9 	bl	8001260 <ssd1306_putsXY>
 80012ce:	3402      	adds	r4, #2
 80012d0:	e7f3      	b.n	80012ba <array_puts+0x3a>
	...

080012d4 <get_adc>:

void get_adc(void){
 80012d4:	b510      	push	{r4, lr}
	static uint32_t frev_tick;
	uint32_t now_tick = HAL_GetTick();
 80012d6:	f001 fca1 	bl	8002c1c <HAL_GetTick>

	if(now_tick - frev_tick > 150){
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <get_adc+0x48>)
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	1ac3      	subs	r3, r0, r3
 80012e0:	2b96      	cmp	r3, #150	; 0x96
 80012e2:	d910      	bls.n	8001306 <get_adc+0x32>
		frev_tick = now_tick;
 80012e4:	2196      	movs	r1, #150	; 0x96
 80012e6:	6010      	str	r0, [r2, #0]
		if(JOY_U) joy_result = up;
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <get_adc+0x4c>)
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <get_adc+0x50>)
 80012ec:	8850      	ldrh	r0, [r2, #2]
 80012ee:	0049      	lsls	r1, r1, #1
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d909      	bls.n	8001308 <get_adc+0x34>
 80012f4:	2403      	movs	r4, #3
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <get_adc+0x54>)
		if(JOY_D) joy_result = down;
 80012f8:	7004      	strb	r4, [r0, #0]
		if(JOY_L) joy_result = left;
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	428a      	cmp	r2, r1
 80012fe:	d208      	bcs.n	8001312 <get_adc+0x3e>
 8001300:	2201      	movs	r2, #1
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <get_adc+0x54>)
		if(JOY_R) joy_result = right;
 8001304:	701a      	strb	r2, [r3, #0]
	}
}
 8001306:	bd10      	pop	{r4, pc}
		if(JOY_D) joy_result = down;
 8001308:	4288      	cmp	r0, r1
 800130a:	d2f6      	bcs.n	80012fa <get_adc+0x26>
 800130c:	2404      	movs	r4, #4
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <get_adc+0x54>)
 8001310:	e7f2      	b.n	80012f8 <get_adc+0x24>
		if(JOY_R) joy_result = right;
 8001312:	429a      	cmp	r2, r3
 8001314:	d9f7      	bls.n	8001306 <get_adc+0x32>
 8001316:	2202      	movs	r2, #2
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <get_adc+0x54>)
 800131a:	e7f3      	b.n	8001304 <get_adc+0x30>
 800131c:	20000a0c 	.word	0x20000a0c
 8001320:	200009fa 	.word	0x200009fa
 8001324:	00000dac 	.word	0x00000dac
 8001328:	20000a14 	.word	0x20000a14

0800132c <get_sel>:

void get_sel(uint8_t* sel, uint8_t max, uint8_t min, uint8_t state){
 800132c:	b510      	push	{r4, lr}
	switch(state){
 800132e:	2b01      	cmp	r3, #1
 8001330:	d015      	beq.n	800135e <get_sel+0x32>
 8001332:	2b02      	cmp	r3, #2
 8001334:	d020      	beq.n	8001378 <get_sel+0x4c>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11d      	bne.n	8001376 <get_sel+0x4a>
	case 0:
		if(joy_result == up) { if(*sel < max) *sel += 1; }
 800133a:	4c16      	ldr	r4, [pc, #88]	; (8001394 <get_sel+0x68>)
 800133c:	7823      	ldrb	r3, [r4, #0]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d104      	bne.n	800134c <get_sel+0x20>
 8001342:	7803      	ldrb	r3, [r0, #0]
 8001344:	428b      	cmp	r3, r1
 8001346:	d216      	bcs.n	8001376 <get_sel+0x4a>
 8001348:	3301      	adds	r3, #1
 800134a:	7003      	strb	r3, [r0, #0]
		if(joy_result == down) { if(*sel > min) *sel -= 1; }
 800134c:	7823      	ldrb	r3, [r4, #0]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d111      	bne.n	8001376 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
		break;
	case 2:
		if(joy_result == down) { if(*sel < max) *sel += 1; }
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 8001352:	7803      	ldrb	r3, [r0, #0]
 8001354:	4293      	cmp	r3, r2
 8001356:	d90e      	bls.n	8001376 <get_sel+0x4a>
 8001358:	3b01      	subs	r3, #1
 800135a:	7003      	strb	r3, [r0, #0]
		break;
	}
}
 800135c:	e00b      	b.n	8001376 <get_sel+0x4a>
		if(joy_result == right) { if(*sel < max) *sel += 1; }
 800135e:	4c0d      	ldr	r4, [pc, #52]	; (8001394 <get_sel+0x68>)
 8001360:	7823      	ldrb	r3, [r4, #0]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d104      	bne.n	8001370 <get_sel+0x44>
 8001366:	7803      	ldrb	r3, [r0, #0]
 8001368:	428b      	cmp	r3, r1
 800136a:	d204      	bcs.n	8001376 <get_sel+0x4a>
 800136c:	3301      	adds	r3, #1
 800136e:	7003      	strb	r3, [r0, #0]
		if(joy_result == left) { if(*sel > min) *sel -= 1; }
 8001370:	7823      	ldrb	r3, [r4, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d0ed      	beq.n	8001352 <get_sel+0x26>
}
 8001376:	bd10      	pop	{r4, pc}
		if(joy_result == down) { if(*sel < max) *sel += 1; }
 8001378:	4c06      	ldr	r4, [pc, #24]	; (8001394 <get_sel+0x68>)
 800137a:	7823      	ldrb	r3, [r4, #0]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d104      	bne.n	800138a <get_sel+0x5e>
 8001380:	7803      	ldrb	r3, [r0, #0]
 8001382:	428b      	cmp	r3, r1
 8001384:	d2f7      	bcs.n	8001376 <get_sel+0x4a>
 8001386:	3301      	adds	r3, #1
 8001388:	7003      	strb	r3, [r0, #0]
		if(joy_result == up) { if(*sel > min) *sel -= 1; }
 800138a:	7823      	ldrb	r3, [r4, #0]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d1f2      	bne.n	8001376 <get_sel+0x4a>
 8001390:	e7df      	b.n	8001352 <get_sel+0x26>
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000a14 	.word	0x20000a14

08001398 <read_sw>:

uint8_t read_sw(void){
	static uint8_t oldSW;
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 8001398:	20a0      	movs	r0, #160	; 0xa0
uint8_t read_sw(void){
 800139a:	b510      	push	{r4, lr}
	if(JOY_P && !oldSW) { oldSW = 1; return 1; }
 800139c:	2104      	movs	r1, #4
 800139e:	05c0      	lsls	r0, r0, #23
 80013a0:	f002 f9a8 	bl	80036f4 <HAL_GPIO_ReadPin>
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <read_sw+0x38>)
 80013a6:	7823      	ldrb	r3, [r4, #0]
 80013a8:	4318      	orrs	r0, r3
 80013aa:	b2c0      	uxtb	r0, r0
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d102      	bne.n	80013b6 <read_sw+0x1e>
 80013b0:	3001      	adds	r0, #1
	if(!JOY_P && oldSW) { oldSW = 0; }
 80013b2:	7020      	strb	r0, [r4, #0]
	return 0;
}
 80013b4:	bd10      	pop	{r4, pc}
	if(!JOY_P && oldSW) { oldSW = 0; }
 80013b6:	20a0      	movs	r0, #160	; 0xa0
 80013b8:	2104      	movs	r1, #4
 80013ba:	05c0      	lsls	r0, r0, #23
 80013bc:	f002 f99a 	bl	80036f4 <HAL_GPIO_ReadPin>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d0f7      	beq.n	80013b4 <read_sw+0x1c>
 80013c4:	7820      	ldrb	r0, [r4, #0]
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d0f4      	beq.n	80013b4 <read_sw+0x1c>
 80013ca:	2000      	movs	r0, #0
 80013cc:	e7f1      	b.n	80013b2 <read_sw+0x1a>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	20000a1e 	.word	0x20000a1e

080013d4 <led_display>:

void led_display(struct Part* a, uint8_t i){
 80013d4:	b510      	push	{r4, lr}
	switch(a->cate){
 80013d6:	7900      	ldrb	r0, [r0, #4]
void led_display(struct Part* a, uint8_t i){
 80013d8:	000c      	movs	r4, r1
	switch(a->cate){
 80013da:	3801      	subs	r0, #1
 80013dc:	2803      	cmp	r0, #3
 80013de:	d809      	bhi.n	80013f4 <led_display+0x20>
 80013e0:	f7fe fe9c 	bl	800011c <__gnu_thumb1_case_uqi>
 80013e4:	110d0902 	.word	0x110d0902
	case 1: led_color(i, 4, 1, 0); break;
 80013e8:	2300      	movs	r3, #0
 80013ea:	2201      	movs	r2, #1
 80013ec:	2104      	movs	r1, #4
	case 2: led_color(i, 1, 0, 4); break;
	case 3: led_color(i, 4, 4, 0); break;
	case 4: led_color(i, 0, 4, 4); break;
 80013ee:	0020      	movs	r0, r4
 80013f0:	f7ff f9a2 	bl	8000738 <led_color>
	}
}
 80013f4:	bd10      	pop	{r4, pc}
	case 2: led_color(i, 1, 0, 4); break;
 80013f6:	2304      	movs	r3, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	e7f7      	b.n	80013ee <led_display+0x1a>
	case 3: led_color(i, 4, 4, 0); break;
 80013fe:	2204      	movs	r2, #4
 8001400:	2300      	movs	r3, #0
 8001402:	0011      	movs	r1, r2
 8001404:	e7f3      	b.n	80013ee <led_display+0x1a>
	case 4: led_color(i, 0, 4, 4); break;
 8001406:	2304      	movs	r3, #4
 8001408:	2100      	movs	r1, #0
 800140a:	001a      	movs	r2, r3
 800140c:	e7ef      	b.n	80013ee <led_display+0x1a>
	...

08001410 <main_menu>:
	}
	set_time();
	eepWriteData(0, 1);
}

void main_menu(void){
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t check;
	if(!firF){
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <main_menu+0x148>)
void main_menu(void){
 8001414:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 8001416:	781c      	ldrb	r4, [r3, #0]
 8001418:	2c00      	cmp	r4, #0
 800141a:	d11b      	bne.n	8001454 <main_menu+0x44>
		firF = 1;
 800141c:	2201      	movs	r2, #1
		led_clear();
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800141e:	250c      	movs	r5, #12
		firF = 1;
 8001420:	701a      	strb	r2, [r3, #0]
		led_clear();
 8001422:	f7ff f9bf 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001426:	0028      	movs	r0, r5
 8001428:	4360      	muls	r0, r4
 800142a:	4b4c      	ldr	r3, [pc, #304]	; (800155c <main_menu+0x14c>)
 800142c:	b2e1      	uxtb	r1, r4
 800142e:	18c0      	adds	r0, r0, r3
 8001430:	3401      	adds	r4, #1
 8001432:	f7ff ffcf 	bl	80013d4 <led_display>
 8001436:	2c24      	cmp	r4, #36	; 0x24
 8001438:	d1f5      	bne.n	8001426 <main_menu+0x16>
		led_update();
 800143a:	f7ff f989 	bl	8000750 <led_update>
		for(uint8_t i = 0 ; i < 36 ; i++)
 800143e:	21d8      	movs	r1, #216	; 0xd8
		led_update();
 8001440:	2300      	movs	r3, #0
			if(pt[i].cate != 0) { check = 1; break; }
 8001442:	4847      	ldr	r0, [pc, #284]	; (8001560 <main_menu+0x150>)
		for(uint8_t i = 0 ; i < 36 ; i++)
 8001444:	0049      	lsls	r1, r1, #1
			if(pt[i].cate != 0) { check = 1; break; }
 8001446:	5cc2      	ldrb	r2, [r0, r3]
 8001448:	2a00      	cmp	r2, #0
 800144a:	d100      	bne.n	800144e <main_menu+0x3e>
 800144c:	e07c      	b.n	8001548 <main_menu+0x138>
 800144e:	2201      	movs	r2, #1
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <main_menu+0x154>)
 8001452:	701a      	strb	r2, [r3, #0]
			else check = 0;
	}
	get_time();
 8001454:	f7ff fef4 	bl	8001240 <get_time>
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 8001458:	2300      	movs	r3, #0
 800145a:	2102      	movs	r1, #2
 800145c:	4f42      	ldr	r7, [pc, #264]	; (8001568 <main_menu+0x158>)
 800145e:	ac02      	add	r4, sp, #8
 8001460:	7023      	strb	r3, [r4, #0]
 8001462:	783b      	ldrb	r3, [r7, #0]
 8001464:	2501      	movs	r5, #1
 8001466:	2205      	movs	r2, #5
 8001468:	3302      	adds	r3, #2
 800146a:	7063      	strb	r3, [r4, #1]
 800146c:	70e1      	strb	r1, [r4, #3]
 800146e:	2303      	movs	r3, #3
 8001470:	1849      	adds	r1, r1, r1
 8001472:	71e1      	strb	r1, [r4, #7]
 8001474:	73e1      	strb	r1, [r4, #15]
	char bf[2][20];
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001476:	21fa      	movs	r1, #250	; 0xfa
 8001478:	4e3c      	ldr	r6, [pc, #240]	; (800156c <main_menu+0x15c>)
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 800147a:	7262      	strb	r2, [r4, #9]
 800147c:	1952      	adds	r2, r2, r5
 800147e:	72e2      	strb	r2, [r4, #11]
 8001480:	3205      	adds	r2, #5
 8001482:	7163      	strb	r3, [r4, #5]
 8001484:	7322      	strb	r2, [r4, #12]
 8001486:	7363      	strb	r3, [r4, #13]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001488:	7832      	ldrb	r2, [r6, #0]
	POS pos[8] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {11, 3}, {13, 4}};
 800148a:	330a      	adds	r3, #10
 800148c:	70a5      	strb	r5, [r4, #2]
 800148e:	7125      	strb	r5, [r4, #4]
 8001490:	71a5      	strb	r5, [r4, #6]
 8001492:	7225      	strb	r5, [r4, #8]
 8001494:	72a5      	strb	r5, [r4, #10]
 8001496:	73a3      	strb	r3, [r4, #14]
	sprintf(bf[0], "%04d.%02d.%02d", 2000 + time.year, time.month, time.day);
 8001498:	00c9      	lsls	r1, r1, #3
 800149a:	1852      	adds	r2, r2, r1
 800149c:	78b1      	ldrb	r1, [r6, #2]
 800149e:	7873      	ldrb	r3, [r6, #1]
 80014a0:	a80e      	add	r0, sp, #56	; 0x38
 80014a2:	9100      	str	r1, [sp, #0]
 80014a4:	4932      	ldr	r1, [pc, #200]	; (8001570 <main_menu+0x160>)
 80014a6:	f003 fe2f 	bl	8005108 <siprintf>
	sprintf(bf[1], "%02d:%02d:%02d", time.hour, time.min, time.sec);
 80014aa:	7971      	ldrb	r1, [r6, #5]
 80014ac:	7933      	ldrb	r3, [r6, #4]
 80014ae:	78f2      	ldrb	r2, [r6, #3]
 80014b0:	a813      	add	r0, sp, #76	; 0x4c
 80014b2:	9100      	str	r1, [sp, #0]
 80014b4:	492f      	ldr	r1, [pc, #188]	; (8001574 <main_menu+0x164>)
 80014b6:	f003 fe27 	bl	8005108 <siprintf>
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <main_menu+0x168>)
 80014bc:	a90e      	add	r1, sp, #56	; 0x38
 80014be:	9306      	str	r3, [sp, #24]
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <main_menu+0x16c>)
 80014c2:	910c      	str	r1, [sp, #48]	; 0x30
 80014c4:	9307      	str	r3, [sp, #28]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <main_menu+0x170>)
 80014c8:	a913      	add	r1, sp, #76	; 0x4c
 80014ca:	9308      	str	r3, [sp, #32]
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <main_menu+0x174>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014ce:	0020      	movs	r0, r4
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014d0:	9309      	str	r3, [sp, #36]	; 0x24
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <main_menu+0x178>)
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014d4:	aa06      	add	r2, sp, #24
	char* array[8] = { ">", "Part save", "Part use", "Part find", "Partition", "Part log", bf[0], bf[1] };
 80014d6:	930a      	str	r3, [sp, #40]	; 0x28
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <main_menu+0x17c>)
 80014da:	910d      	str	r1, [sp, #52]	; 0x34
 80014dc:	930b      	str	r3, [sp, #44]	; 0x2c
	array_puts(pos, "#Menu", array, 1, sizeof(pos) / 2);
 80014de:	2308      	movs	r3, #8
 80014e0:	492b      	ldr	r1, [pc, #172]	; (8001590 <main_menu+0x180>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	002b      	movs	r3, r5
 80014e6:	f7ff fecb 	bl	8001280 <array_puts>
	SSD1306_UpdateScreen();
 80014ea:	f7ff fca3 	bl	8000e34 <SSD1306_UpdateScreen>

	get_adc();
 80014ee:	f7ff fef1 	bl	80012d4 <get_adc>
	get_sel(&sel, 4, 0, 2);
 80014f2:	2302      	movs	r3, #2
 80014f4:	2200      	movs	r2, #0
 80014f6:	2104      	movs	r1, #4
 80014f8:	0038      	movs	r0, r7
 80014fa:	f7ff ff17 	bl	800132c <get_sel>
	joy_result = basic;
 80014fe:	2200      	movs	r2, #0
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <main_menu+0x184>)
 8001502:	701a      	strb	r2, [r3, #0]

	if(read_sw()){
 8001504:	f7ff ff48 	bl	8001398 <read_sw>
 8001508:	2800      	cmp	r0, #0
 800150a:	d01b      	beq.n	8001544 <main_menu+0x134>
		if(sel == 0) { led_clear(); led_update(); start_check++; }
 800150c:	783b      	ldrb	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <main_menu+0x112>
 8001512:	f7ff f947 	bl	80007a4 <led_clear>
 8001516:	f7ff f91b 	bl	8000750 <led_update>
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <main_menu+0x188>)
 800151c:	7813      	ldrb	r3, [r2, #0]
 800151e:	195b      	adds	r3, r3, r5
 8001520:	7013      	strb	r3, [r2, #0]
		ModeF = sel + 1;
 8001522:	7839      	ldrb	r1, [r7, #0]
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <main_menu+0x18c>)
 8001526:	1c4b      	adds	r3, r1, #1
 8001528:	7003      	strb	r3, [r0, #0]
		firF = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <main_menu+0x148>)
 800152e:	7013      	strb	r3, [r2, #0]
		if(!check && sel != 0) { buzM = 1; ModeF = 0; }
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <main_menu+0x154>)
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d10d      	bne.n	8001554 <main_menu+0x144>
 8001538:	4299      	cmp	r1, r3
 800153a:	d00b      	beq.n	8001554 <main_menu+0x144>
 800153c:	2101      	movs	r1, #1
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <main_menu+0x190>)
 8001540:	7002      	strb	r2, [r0, #0]
 8001542:	7019      	strb	r1, [r3, #0]
		else sel = 0;
	}
}
 8001544:	b019      	add	sp, #100	; 0x64
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0 ; i < 36 ; i++)
 8001548:	330c      	adds	r3, #12
 800154a:	428b      	cmp	r3, r1
 800154c:	d000      	beq.n	8001550 <main_menu+0x140>
 800154e:	e77a      	b.n	8001446 <main_menu+0x36>
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <main_menu+0x154>)
 8001552:	e77e      	b.n	8001452 <main_menu+0x42>
		else sel = 0;
 8001554:	703b      	strb	r3, [r7, #0]
}
 8001556:	e7f5      	b.n	8001544 <main_menu+0x134>
 8001558:	2000000c 	.word	0x2000000c
 800155c:	20000a20 	.word	0x20000a20
 8001560:	20000a24 	.word	0x20000a24
 8001564:	20000a02 	.word	0x20000a02
 8001568:	20000d9f 	.word	0x20000d9f
 800156c:	20000071 	.word	0x20000071
 8001570:	08006209 	.word	0x08006209
 8001574:	08006218 	.word	0x08006218
 8001578:	08006227 	.word	0x08006227
 800157c:	08006229 	.word	0x08006229
 8001580:	08006233 	.word	0x08006233
 8001584:	0800623c 	.word	0x0800623c
 8001588:	08006425 	.word	0x08006425
 800158c:	08006246 	.word	0x08006246
 8001590:	0800624f 	.word	0x0800624f
 8001594:	20000a14 	.word	0x20000a14
 8001598:	20000da0 	.word	0x20000da0
 800159c:	200009f8 	.word	0x200009f8
 80015a0:	20000a00 	.word	0x20000a00

080015a4 <input_string>:
char* input_string(char* str){
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t input_sel = 0;
 80015a6:	2700      	movs	r7, #0
char* input_string(char* str){
 80015a8:	b08f      	sub	sp, #60	; 0x3c
 80015aa:	9007      	str	r0, [sp, #28]
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 80015ac:	210b      	movs	r1, #11
 80015ae:	2001      	movs	r0, #1
 80015b0:	f003 fc28 	bl	8004e04 <calloc>
	uint8_t keyX = 0, keyY = 0;
 80015b4:	003c      	movs	r4, r7
 80015b6:	003d      	movs	r5, r7
	char* input_keyboard = (char*)calloc(sizeof(char), 11);
 80015b8:	9003      	str	r0, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015ba:	2201      	movs	r2, #1
 80015bc:	18bb      	adds	r3, r7, r2
 80015be:	a809      	add	r0, sp, #36	; 0x24
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	7083      	strb	r3, [r0, #2]
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2302      	movs	r3, #2
 80015c8:	70c3      	strb	r3, [r0, #3]
		char* array[3] = { ">", "^", input_keyboard };
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <input_string+0x188>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015cc:	2600      	movs	r6, #0
		char* array[3] = { ">", "^", input_keyboard };
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <input_string+0x18c>)
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015d2:	7042      	strb	r2, [r0, #1]
		char* array[3] = { ">", "^", input_keyboard };
 80015d4:	930c      	str	r3, [sp, #48]	; 0x30
 80015d6:	9b03      	ldr	r3, [sp, #12]
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015d8:	7102      	strb	r2, [r0, #4]
		char* array[3] = { ">", "^", input_keyboard };
 80015da:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 80015dc:	2303      	movs	r3, #3
		POS pos[3] = {{0, 1}, {1 + input_sel, 2}, {1, 1}};
 80015de:	7142      	strb	r2, [r0, #5]
 80015e0:	7006      	strb	r6, [r0, #0]
		array_puts(pos, str, array, 1, sizeof(pos) / 2);
 80015e2:	9907      	ldr	r1, [sp, #28]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	0013      	movs	r3, r2
 80015e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ea:	f7ff fe49 	bl	8001280 <array_puts>
				SSD1306_GotoXY(14 + j * 10, (4 * 8) + (i * 8));
 80015ee:	00f3      	lsls	r3, r6, #3
 80015f0:	3320      	adds	r3, #32
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	9305      	str	r3, [sp, #20]
 80015f6:	00b3      	lsls	r3, r6, #2
 80015f8:	9306      	str	r3, [sp, #24]
 80015fa:	2300      	movs	r3, #0
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	200a      	movs	r0, #10
 8001600:	9b02      	ldr	r3, [sp, #8]
 8001602:	9905      	ldr	r1, [sp, #20]
 8001604:	4358      	muls	r0, r3
 8001606:	300e      	adds	r0, #14
 8001608:	b280      	uxth	r0, r0
 800160a:	f7ff fa93 	bl	8000b34 <SSD1306_GotoXY>
				SSD1306_Putc(keyboard[i][j], &Font_6x8, !(keyX == j && keyY == i));
 800160e:	9a06      	ldr	r2, [sp, #24]
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <input_string+0x190>)
 8001612:	58d3      	ldr	r3, [r2, r3]
 8001614:	9a02      	ldr	r2, [sp, #8]
 8001616:	5c98      	ldrb	r0, [r3, r2]
 8001618:	466b      	mov	r3, sp
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	2201      	movs	r2, #1
 800161e:	429d      	cmp	r5, r3
 8001620:	d103      	bne.n	800162a <input_string+0x86>
 8001622:	b2f2      	uxtb	r2, r6
 8001624:	1b12      	subs	r2, r2, r4
 8001626:	1e53      	subs	r3, r2, #1
 8001628:	419a      	sbcs	r2, r3
 800162a:	4943      	ldr	r1, [pc, #268]	; (8001738 <input_string+0x194>)
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f7ff fa87 	bl	8000b40 <SSD1306_Putc>
			for(uint8_t j = 0 ; j < 10 ; j++){
 8001632:	9b02      	ldr	r3, [sp, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2b0a      	cmp	r3, #10
 800163a:	d1e0      	bne.n	80015fe <input_string+0x5a>
		for(uint8_t i = 0 ; i < 4 ; i++)
 800163c:	3601      	adds	r6, #1
 800163e:	2e04      	cmp	r6, #4
 8001640:	d1d5      	bne.n	80015ee <input_string+0x4a>
		ssd1306_putsXY(19, 4, "&", !(keyX == 10 && keyY == 0));
 8001642:	2301      	movs	r3, #1
 8001644:	2d0a      	cmp	r5, #10
 8001646:	d102      	bne.n	800164e <input_string+0xaa>
 8001648:	0023      	movs	r3, r4
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	4193      	sbcs	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2104      	movs	r1, #4
 8001652:	2013      	movs	r0, #19
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <input_string+0x198>)
 8001656:	f7ff fe03 	bl	8001260 <ssd1306_putsXY>
		ssd1306_putsXY(19, 6, "*", !(keyX == 10 && keyY == 2));
 800165a:	2301      	movs	r3, #1
 800165c:	2d0a      	cmp	r5, #10
 800165e:	d102      	bne.n	8001666 <input_string+0xc2>
 8001660:	1ea3      	subs	r3, r4, #2
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	4193      	sbcs	r3, r2
 8001666:	2106      	movs	r1, #6
 8001668:	2013      	movs	r0, #19
 800166a:	4a35      	ldr	r2, [pc, #212]	; (8001740 <input_string+0x19c>)
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f7ff fdf7 	bl	8001260 <ssd1306_putsXY>
		if(keyY == 0 || keyY == 2) limitX = 10;
 8001672:	260a      	movs	r6, #10
		SSD1306_UpdateScreen();
 8001674:	f7ff fbde 	bl	8000e34 <SSD1306_UpdateScreen>
		if(keyY == 0 || keyY == 2) limitX = 10;
 8001678:	2c00      	cmp	r4, #0
 800167a:	d003      	beq.n	8001684 <input_string+0xe0>
 800167c:	1ea6      	subs	r6, r4, #2
 800167e:	4273      	negs	r3, r6
 8001680:	415e      	adcs	r6, r3
 8001682:	3609      	adds	r6, #9
		get_adc();
 8001684:	f7ff fe26 	bl	80012d4 <get_adc>
		if(joy_result == left) { keyX = keyX > 0 ? keyX - 1 : limitX; }
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <input_string+0x1a0>)
 800168a:	7813      	ldrb	r3, [r2, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <input_string+0xf8>
 8001690:	2d00      	cmp	r5, #0
 8001692:	d001      	beq.n	8001698 <input_string+0xf4>
 8001694:	3d01      	subs	r5, #1
 8001696:	b2ee      	uxtb	r6, r5
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 8001698:	0035      	movs	r5, r6
 800169a:	e00f      	b.n	80016bc <input_string+0x118>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 800169c:	2b02      	cmp	r3, #2
 800169e:	d009      	beq.n	80016b4 <input_string+0x110>
		if(joy_result == up){
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d01f      	beq.n	80016e4 <input_string+0x140>
		if(joy_result == down){
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d109      	bne.n	80016bc <input_string+0x118>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 80016a8:	2d0a      	cmp	r5, #10
 80016aa:	d01d      	beq.n	80016e8 <input_string+0x144>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 80016ac:	2c03      	cmp	r4, #3
 80016ae:	d026      	beq.n	80016fe <input_string+0x15a>
 80016b0:	3401      	adds	r4, #1
 80016b2:	e020      	b.n	80016f6 <input_string+0x152>
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 80016b4:	42b5      	cmp	r5, r6
 80016b6:	d237      	bcs.n	8001728 <input_string+0x184>
 80016b8:	3501      	adds	r5, #1
 80016ba:	b2ed      	uxtb	r5, r5
		joy_result = basic;
 80016bc:	2300      	movs	r3, #0
 80016be:	7013      	strb	r3, [r2, #0]
		if(read_sw()){
 80016c0:	f7ff fe6a 	bl	8001398 <read_sw>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d100      	bne.n	80016ca <input_string+0x126>
 80016c8:	e777      	b.n	80015ba <input_string+0x16>
			if(keyX < 10) input_keyboard[input_sel++] = keyboard[keyY][keyX];
 80016ca:	2d0a      	cmp	r5, #10
 80016cc:	d019      	beq.n	8001702 <input_string+0x15e>
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <input_string+0x190>)
 80016d0:	00a2      	lsls	r2, r4, #2
 80016d2:	58d3      	ldr	r3, [r2, r3]
 80016d4:	9a03      	ldr	r2, [sp, #12]
 80016d6:	5d5b      	ldrb	r3, [r3, r5]
 80016d8:	55d3      	strb	r3, [r2, r7]
		if(input_sel >= 10) break;
 80016da:	9b04      	ldr	r3, [sp, #16]
 80016dc:	2b0a      	cmp	r3, #10
 80016de:	d01d      	beq.n	800171c <input_string+0x178>
 80016e0:	001f      	movs	r7, r3
 80016e2:	e76a      	b.n	80015ba <input_string+0x16>
			if(keyX == 10) { keyY = keyY == 0 ? 2 : 0; }
 80016e4:	2d0a      	cmp	r5, #10
 80016e6:	d103      	bne.n	80016f0 <input_string+0x14c>
 80016e8:	4263      	negs	r3, r4
 80016ea:	415c      	adcs	r4, r3
 80016ec:	0064      	lsls	r4, r4, #1
 80016ee:	e7e5      	b.n	80016bc <input_string+0x118>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d002      	beq.n	80016fa <input_string+0x156>
 80016f4:	3c01      	subs	r4, #1
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 80016f6:	b2e4      	uxtb	r4, r4
 80016f8:	e7e0      	b.n	80016bc <input_string+0x118>
			else { keyY = keyY > 0 ? keyY - 1 : limitY; }
 80016fa:	001c      	movs	r4, r3
 80016fc:	e7de      	b.n	80016bc <input_string+0x118>
			else { keyY = keyY < limitY ? keyY + 1 : 0; }
 80016fe:	2400      	movs	r4, #0
 8001700:	e7dc      	b.n	80016bc <input_string+0x118>
				if(keyY == 0) input_keyboard[input_sel > 0 ? --input_sel : 0] = '\0';
 8001702:	2c00      	cmp	r4, #0
 8001704:	d107      	bne.n	8001716 <input_string+0x172>
 8001706:	2f00      	cmp	r7, #0
 8001708:	d001      	beq.n	800170e <input_string+0x16a>
 800170a:	3f01      	subs	r7, #1
 800170c:	b2ff      	uxtb	r7, r7
 800170e:	2300      	movs	r3, #0
 8001710:	9a03      	ldr	r2, [sp, #12]
 8001712:	55d3      	strb	r3, [r2, r7]
				if(keyY == 2) break;
 8001714:	e751      	b.n	80015ba <input_string+0x16>
 8001716:	2c02      	cmp	r4, #2
 8001718:	d000      	beq.n	800171c <input_string+0x178>
 800171a:	e74e      	b.n	80015ba <input_string+0x16>
	firF = 0;
 800171c:	2200      	movs	r2, #0
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <input_string+0x1a4>)
}
 8001720:	9803      	ldr	r0, [sp, #12]
	firF = 0;
 8001722:	701a      	strb	r2, [r3, #0]
}
 8001724:	b00f      	add	sp, #60	; 0x3c
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(joy_result == right) { keyX = keyX < limitX ? keyX + 1 : 0; }
 8001728:	2500      	movs	r5, #0
		if(joy_result == down){
 800172a:	e7c7      	b.n	80016bc <input_string+0x118>
 800172c:	08006227 	.word	0x08006227
 8001730:	08006255 	.word	0x08006255
 8001734:	20000010 	.word	0x20000010
 8001738:	20000000 	.word	0x20000000
 800173c:	08006257 	.word	0x08006257
 8001740:	08006259 	.word	0x08006259
 8001744:	20000a14 	.word	0x20000a14
 8001748:	2000000c 	.word	0x2000000c

0800174c <logShift>:
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800174c:	234a      	movs	r3, #74	; 0x4a
 800174e:	214a      	movs	r1, #74	; 0x4a
 8001750:	001a      	movs	r2, r3
void logShift(uint8_t workCate){
 8001752:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 8001754:	4f44      	ldr	r7, [pc, #272]	; (8001868 <logShift+0x11c>)
 8001756:	4249      	negs	r1, r1
 8001758:	783c      	ldrb	r4, [r7, #0]
void logShift(uint8_t workCate){
 800175a:	0005      	movs	r5, r0
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800175c:	4361      	muls	r1, r4
 800175e:	1e60      	subs	r0, r4, #1
 8001760:	18c9      	adds	r1, r1, r3
 8001762:	4343      	muls	r3, r0
 8001764:	4e41      	ldr	r6, [pc, #260]	; (800186c <logShift+0x120>)
 8001766:	18c9      	adds	r1, r1, r3
void logShift(uint8_t workCate){
 8001768:	b085      	sub	sp, #20
	for(uint8_t i = work_cnt ; i > 0 ; i--) ptLog[i] = ptLog[i - 1];
 800176a:	4362      	muls	r2, r4
 800176c:	4840      	ldr	r0, [pc, #256]	; (8001870 <logShift+0x124>)
 800176e:	1989      	adds	r1, r1, r6
 8001770:	f003 fb8f 	bl	8004e92 <memmove>
	if(work_cnt < 5) work_cnt++;
 8001774:	2c04      	cmp	r4, #4
 8001776:	d801      	bhi.n	800177c <logShift+0x30>
 8001778:	3401      	adds	r4, #1
 800177a:	703c      	strb	r4, [r7, #0]
	get_time();
 800177c:	f7ff fd60 	bl	8001240 <get_time>
	sprintf(ptLog[0].title, "%02d.%02d.%02d/%02d:%02d/%s", time.year, time.month, time.day, time.hour, time.min, ptWorkCate[workCate]);
 8001780:	483c      	ldr	r0, [pc, #240]	; (8001874 <logShift+0x128>)
 8001782:	00ac      	lsls	r4, r5, #2
 8001784:	493c      	ldr	r1, [pc, #240]	; (8001878 <logShift+0x12c>)
 8001786:	5820      	ldr	r0, [r4, r0]
 8001788:	784b      	ldrb	r3, [r1, #1]
 800178a:	780a      	ldrb	r2, [r1, #0]
 800178c:	9003      	str	r0, [sp, #12]
 800178e:	7908      	ldrb	r0, [r1, #4]
 8001790:	9002      	str	r0, [sp, #8]
 8001792:	78c8      	ldrb	r0, [r1, #3]
 8001794:	9001      	str	r0, [sp, #4]
 8001796:	7889      	ldrb	r1, [r1, #2]
 8001798:	0030      	movs	r0, r6
 800179a:	9100      	str	r1, [sp, #0]
 800179c:	4937      	ldr	r1, [pc, #220]	; (800187c <logShift+0x130>)
 800179e:	f003 fcb3 	bl	8005108 <siprintf>
	switch(workCate){
 80017a2:	2d03      	cmp	r5, #3
 80017a4:	d824      	bhi.n	80017f0 <logShift+0xa4>
 80017a6:	0028      	movs	r0, r5
 80017a8:	4e35      	ldr	r6, [pc, #212]	; (8001880 <logShift+0x134>)
 80017aa:	4d36      	ldr	r5, [pc, #216]	; (8001884 <logShift+0x138>)
 80017ac:	f7fe fcb6 	bl	800011c <__gnu_thumb1_case_uqi>
 80017b0:	483b2202 	.word	0x483b2202
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 80017b4:	f7ff fd20 	bl	80011f8 <curxy>
 80017b8:	270c      	movs	r7, #12
 80017ba:	4378      	muls	r0, r7
 80017bc:	4c32      	ldr	r4, [pc, #200]	; (8001888 <logShift+0x13c>)
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <logShift+0x140>)
 80017c0:	1823      	adds	r3, r4, r0
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	4932      	ldr	r1, [pc, #200]	; (8001890 <logShift+0x144>)
 80017c6:	3b01      	subs	r3, #1
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	589b      	ldr	r3, [r3, r2]
 80017cc:	5902      	ldr	r2, [r0, r4]
 80017ce:	0030      	movs	r0, r6
 80017d0:	f003 fc9a 	bl	8005108 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", pt[curxy()].store, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 80017d4:	f7ff fd10 	bl	80011f8 <curxy>
 80017d8:	4347      	muls	r7, r0
 80017da:	19e4      	adds	r4, r4, r7
 80017dc:	7aa3      	ldrb	r3, [r4, #10]
 80017de:	88e2      	ldrh	r2, [r4, #6]
 80017e0:	3301      	adds	r3, #1
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 80017e2:	7ae1      	ldrb	r1, [r4, #11]
 80017e4:	0028      	movs	r0, r5
 80017e6:	3101      	adds	r1, #1
 80017e8:	9100      	str	r1, [sp, #0]
 80017ea:	492a      	ldr	r1, [pc, #168]	; (8001894 <logShift+0x148>)
 80017ec:	f003 fc8c 	bl	8005108 <siprintf>
}
 80017f0:	b005      	add	sp, #20
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(ptLog[0].content1, "%s/%s", pt[curxy()].name, ptCate[pt[curxy()].cate - 1]);
 80017f4:	f7ff fd00 	bl	80011f8 <curxy>
 80017f8:	270c      	movs	r7, #12
 80017fa:	4378      	muls	r0, r7
 80017fc:	4c22      	ldr	r4, [pc, #136]	; (8001888 <logShift+0x13c>)
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <logShift+0x140>)
 8001800:	1823      	adds	r3, r4, r0
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <logShift+0x144>)
 8001806:	3b01      	subs	r3, #1
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	589b      	ldr	r3, [r3, r2]
 800180c:	5902      	ldr	r2, [r0, r4]
 800180e:	0030      	movs	r0, r6
 8001810:	f003 fc7a 	bl	8005108 <siprintf>
		sprintf(ptLog[0].content2, "%dpcs (%d,%d)", use_num, pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 8001814:	f7ff fcf0 	bl	80011f8 <curxy>
 8001818:	4347      	muls	r7, r0
 800181a:	19e4      	adds	r4, r4, r7
 800181c:	7aa3      	ldrb	r3, [r4, #10]
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <logShift+0x14c>)
 8001820:	3301      	adds	r3, #1
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	e7dd      	b.n	80017e2 <logShift+0x96>
		sprintf(ptLog[0].content1, "Sear:%s", find_name);
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <logShift+0x150>)
 8001828:	491d      	ldr	r1, [pc, #116]	; (80018a0 <logShift+0x154>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	0030      	movs	r0, r6
 800182e:	f003 fc6b 	bl	8005108 <siprintf>
		sprintf(ptLog[0].content2, "Num of Find:%d", findC);
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <logShift+0x158>)
 8001834:	491c      	ldr	r1, [pc, #112]	; (80018a8 <logShift+0x15c>)
 8001836:	781a      	ldrb	r2, [r3, #0]
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 8001838:	0028      	movs	r0, r5
 800183a:	f003 fc65 	bl	8005108 <siprintf>
}
 800183e:	e7d7      	b.n	80017f0 <logShift+0xa4>
		sprintf(ptLog[0].content1, "S(%d,%d) E(%d,%d)", ptionS.x + 1, ptionS.y + 1, ptionE.x + 1, ptionE.y + 1);
 8001840:	481a      	ldr	r0, [pc, #104]	; (80018ac <logShift+0x160>)
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <logShift+0x164>)
 8001844:	7841      	ldrb	r1, [r0, #1]
 8001846:	7853      	ldrb	r3, [r2, #1]
 8001848:	3101      	adds	r1, #1
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	9101      	str	r1, [sp, #4]
 800184e:	7801      	ldrb	r1, [r0, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	3101      	adds	r1, #1
 8001854:	3201      	adds	r2, #1
 8001856:	9100      	str	r1, [sp, #0]
 8001858:	0030      	movs	r0, r6
 800185a:	4916      	ldr	r1, [pc, #88]	; (80018b4 <logShift+0x168>)
 800185c:	f003 fc54 	bl	8005108 <siprintf>
		sprintf(ptLog[0].content2, "Size of ption:%d", ptionC);
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <logShift+0x16c>)
 8001862:	4916      	ldr	r1, [pc, #88]	; (80018bc <logShift+0x170>)
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	e7e7      	b.n	8001838 <logShift+0xec>
 8001868:	20000da4 	.word	0x20000da4
 800186c:	20000bd0 	.word	0x20000bd0
 8001870:	20000c1a 	.word	0x20000c1a
 8001874:	20000060 	.word	0x20000060
 8001878:	20000071 	.word	0x20000071
 800187c:	0800625b 	.word	0x0800625b
 8001880:	20000bee 	.word	0x20000bee
 8001884:	20000c04 	.word	0x20000c04
 8001888:	20000a20 	.word	0x20000a20
 800188c:	20000038 	.word	0x20000038
 8001890:	08006277 	.word	0x08006277
 8001894:	0800627d 	.word	0x0800627d
 8001898:	20000077 	.word	0x20000077
 800189c:	20000a08 	.word	0x20000a08
 80018a0:	0800628b 	.word	0x0800628b
 80018a4:	20000a06 	.word	0x20000a06
 80018a8:	08006293 	.word	0x08006293
 80018ac:	20000d99 	.word	0x20000d99
 80018b0:	20000d9b 	.word	0x20000d9b
 80018b4:	080062a2 	.word	0x080062a2
 80018b8:	20000d98 	.word	0x20000d98
 80018bc:	080062b4 	.word	0x080062b4

080018c0 <start>:
uint8_t start(void){
 80018c0:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 0 ; i < 36 ; i++)
 80018c2:	2400      	movs	r4, #0
		if(i / 6 == 0 || i / 6 == 3) led_color(i, 4, 0, 0);
 80018c4:	2c05      	cmp	r4, #5
 80018c6:	d903      	bls.n	80018d0 <start+0x10>
 80018c8:	0023      	movs	r3, r4
 80018ca:	3b12      	subs	r3, #18
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d839      	bhi.n	8001944 <start+0x84>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2104      	movs	r1, #4
 80018d4:	001a      	movs	r2, r3
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 80018d6:	0020      	movs	r0, r4
 80018d8:	f7fe ff2e 	bl	8000738 <led_color>
	for(uint8_t i = 0 ; i < 36 ; i++)
 80018dc:	3401      	adds	r4, #1
 80018de:	b2e4      	uxtb	r4, r4
 80018e0:	2c24      	cmp	r4, #36	; 0x24
 80018e2:	d1ef      	bne.n	80018c4 <start+0x4>
	led_update();
 80018e4:	f7fe ff34 	bl	8000750 <led_update>
 80018e8:	3c0c      	subs	r4, #12
		SSD1306_GotoXY(43, 24 + i);
 80018ea:	0021      	movs	r1, r4
 80018ec:	202b      	movs	r0, #43	; 0x2b
 80018ee:	f7ff f921 	bl	8000b34 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 80018f2:	4d1f      	ldr	r5, [pc, #124]	; (8001970 <start+0xb0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	0029      	movs	r1, r5
 80018f8:	481e      	ldr	r0, [pc, #120]	; (8001974 <start+0xb4>)
 80018fa:	f7ff f957 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY(39, 24);
 80018fe:	2118      	movs	r1, #24
 8001900:	2027      	movs	r0, #39	; 0x27
 8001902:	f7ff f917 	bl	8000b34 <SSD1306_GotoXY>
	for(uint8_t i = 0 ; i < 9 ; i++){
 8001906:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 8001908:	2201      	movs	r2, #1
 800190a:	0029      	movs	r1, r5
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <start+0xb8>)
 800190e:	f7ff f94d 	bl	8000bac <SSD1306_Puts>
	for(uint8_t i = 0 ; i < 9 ; i++){
 8001912:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 8001914:	f7ff fa8e 	bl	8000e34 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 8001918:	20c8      	movs	r0, #200	; 0xc8
 800191a:	f001 f985 	bl	8002c28 <HAL_Delay>
	for(uint8_t i = 0 ; i < 9 ; i++){
 800191e:	2c21      	cmp	r4, #33	; 0x21
 8001920:	d1e3      	bne.n	80018ea <start+0x2a>
	HAL_Delay(1000);
 8001922:	20fa      	movs	r0, #250	; 0xfa
 8001924:	0080      	lsls	r0, r0, #2
 8001926:	f001 f97f 	bl	8002c28 <HAL_Delay>
	SSD1306_Clear();
 800192a:	f7ff faa5 	bl	8000e78 <SSD1306_Clear>
	led_clear();
 800192e:	f7fe ff39 	bl	80007a4 <led_clear>
	led_update();
 8001932:	f7fe ff0d 	bl	8000750 <led_update>
	if(!eepReadData(0)) return 1;
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fb64 	bl	8001004 <eepReadData>
 800193c:	4243      	negs	r3, r0
 800193e:	4158      	adcs	r0, r3
}
 8001940:	b2c0      	uxtb	r0, r0
 8001942:	bd70      	pop	{r4, r5, r6, pc}
		else if(i / 6 == 1 || i / 6 == 4) led_color(i, 0, 4, 0);
 8001944:	1fa3      	subs	r3, r4, #6
 8001946:	2b05      	cmp	r3, #5
 8001948:	d902      	bls.n	8001950 <start+0x90>
 800194a:	3b12      	subs	r3, #18
 800194c:	2b05      	cmp	r3, #5
 800194e:	d803      	bhi.n	8001958 <start+0x98>
 8001950:	2300      	movs	r3, #0
 8001952:	2204      	movs	r2, #4
 8001954:	0019      	movs	r1, r3
 8001956:	e7be      	b.n	80018d6 <start+0x16>
		else if(i / 6 == 2 || i / 6 == 5) led_color(i, 0, 0, 4);
 8001958:	0023      	movs	r3, r4
 800195a:	3b0c      	subs	r3, #12
 800195c:	2b05      	cmp	r3, #5
 800195e:	d902      	bls.n	8001966 <start+0xa6>
 8001960:	3b12      	subs	r3, #18
 8001962:	2b05      	cmp	r3, #5
 8001964:	d8ba      	bhi.n	80018dc <start+0x1c>
 8001966:	2200      	movs	r2, #0
 8001968:	2304      	movs	r3, #4
 800196a:	0011      	movs	r1, r2
 800196c:	e7b3      	b.n	80018d6 <start+0x16>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	20000000 	.word	0x20000000
 8001974:	080062c5 	.word	0x080062c5
 8001978:	080062cc 	.word	0x080062cc

0800197c <time_settting>:
void time_settting(void){
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b08b      	sub	sp, #44	; 0x2c
	while(!read_sw()){
 8001980:	f7ff fd0a 	bl	8001398 <read_sw>
 8001984:	4c48      	ldr	r4, [pc, #288]	; (8001aa8 <time_settting+0x12c>)
 8001986:	1e05      	subs	r5, r0, #0
 8001988:	d00f      	beq.n	80019aa <time_settting+0x2e>
	DS3231_set_date(time.day, time.month, time.year);
 800198a:	7822      	ldrb	r2, [r4, #0]
 800198c:	7861      	ldrb	r1, [r4, #1]
 800198e:	78a0      	ldrb	r0, [r4, #2]
 8001990:	f7fe fe3e 	bl	8000610 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 8001994:	78e2      	ldrb	r2, [r4, #3]
 8001996:	7921      	ldrb	r1, [r4, #4]
 8001998:	7960      	ldrb	r0, [r4, #5]
 800199a:	f7fe fda3 	bl	80004e4 <DS3231_set_time>
	eepWriteData(0, 1);
 800199e:	2101      	movs	r1, #1
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fb1f 	bl	8000fe4 <eepWriteData>
}
 80019a6:	b00b      	add	sp, #44	; 0x2c
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		get_adc();
 80019aa:	f7ff fc93 	bl	80012d4 <get_adc>
		get_sel(&sel, 5, 0, 1);
 80019ae:	4e3f      	ldr	r6, [pc, #252]	; (8001aac <time_settting+0x130>)
 80019b0:	002a      	movs	r2, r5
 80019b2:	2301      	movs	r3, #1
 80019b4:	2105      	movs	r1, #5
 80019b6:	0030      	movs	r0, r6
 80019b8:	f7ff fcb8 	bl	800132c <get_sel>
		if(sel == 0) get_sel(&time.year, 99, 0, 0);
 80019bc:	7832      	ldrb	r2, [r6, #0]
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d104      	bne.n	80019cc <time_settting+0x50>
 80019c2:	0013      	movs	r3, r2
 80019c4:	2163      	movs	r1, #99	; 0x63
 80019c6:	0020      	movs	r0, r4
 80019c8:	f7ff fcb0 	bl	800132c <get_sel>
		if(sel == 1) get_sel(&time.month, 12, 1, 0);
 80019cc:	7832      	ldrb	r2, [r6, #0]
 80019ce:	2a01      	cmp	r2, #1
 80019d0:	d104      	bne.n	80019dc <time_settting+0x60>
 80019d2:	2300      	movs	r3, #0
 80019d4:	210c      	movs	r1, #12
 80019d6:	1c60      	adds	r0, r4, #1
 80019d8:	f7ff fca8 	bl	800132c <get_sel>
		if(sel == 2) get_sel(&time.day, lastDay[time.month - 1], 1, 0);
 80019dc:	7833      	ldrb	r3, [r6, #0]
 80019de:	4f34      	ldr	r7, [pc, #208]	; (8001ab0 <time_settting+0x134>)
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d108      	bne.n	80019f6 <time_settting+0x7a>
 80019e4:	7863      	ldrb	r3, [r4, #1]
 80019e6:	2201      	movs	r2, #1
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	7819      	ldrb	r1, [r3, #0]
 80019ee:	1ca0      	adds	r0, r4, #2
 80019f0:	2300      	movs	r3, #0
 80019f2:	f7ff fc9b 	bl	800132c <get_sel>
		if(sel == 3) get_sel(&time.hour, 23, 0, 0);
 80019f6:	7833      	ldrb	r3, [r6, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d105      	bne.n	8001a08 <time_settting+0x8c>
 80019fc:	2300      	movs	r3, #0
 80019fe:	2117      	movs	r1, #23
 8001a00:	001a      	movs	r2, r3
 8001a02:	1ce0      	adds	r0, r4, #3
 8001a04:	f7ff fc92 	bl	800132c <get_sel>
		if(sel == 4) get_sel(&time.min, 59, 0, 0);
 8001a08:	7833      	ldrb	r3, [r6, #0]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d105      	bne.n	8001a1a <time_settting+0x9e>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	213b      	movs	r1, #59	; 0x3b
 8001a12:	001a      	movs	r2, r3
 8001a14:	1d20      	adds	r0, r4, #4
 8001a16:	f7ff fc89 	bl	800132c <get_sel>
		if(sel == 5) get_sel(&time.sec, 59, 0, 0);
 8001a1a:	7833      	ldrb	r3, [r6, #0]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d105      	bne.n	8001a2c <time_settting+0xb0>
 8001a20:	2300      	movs	r3, #0
 8001a22:	213b      	movs	r1, #59	; 0x3b
 8001a24:	001a      	movs	r2, r3
 8001a26:	1d60      	adds	r0, r4, #5
 8001a28:	f7ff fc80 	bl	800132c <get_sel>
		if(time.day > lastDay[time.month - 1]) time.day = lastDay[time.month - 1];
 8001a2c:	7865      	ldrb	r5, [r4, #1]
 8001a2e:	78a2      	ldrb	r2, [r4, #2]
 8001a30:	197f      	adds	r7, r7, r5
 8001a32:	3f01      	subs	r7, #1
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d900      	bls.n	8001a3c <time_settting+0xc0>
 8001a3a:	70a3      	strb	r3, [r4, #2]
		joy_result = basic;
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <time_settting+0x138>)
		POS pos[2] = {{0, 2}, {0, 4}};
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <time_settting+0x13c>)
		joy_result = basic;
 8001a42:	701a      	strb	r2, [r3, #0]
		POS pos[2] = {{0, 2}, {0, 4}};
 8001a44:	a802      	add	r0, sp, #8
 8001a46:	3204      	adds	r2, #4
 8001a48:	f003 fa1a 	bl	8004e80 <memcpy>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001a4c:	7833      	ldrb	r3, [r6, #0]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <time_settting+0x140>)
 8001a50:	0099      	lsls	r1, r3, #2
 8001a52:	588a      	ldr	r2, [r1, r2]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d117      	bne.n	8001a88 <time_settting+0x10c>
 8001a58:	23fa      	movs	r3, #250	; 0xfa
 8001a5a:	7825      	ldrb	r5, [r4, #0]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	18ed      	adds	r5, r5, r3
 8001a60:	ac05      	add	r4, sp, #20
 8001a62:	002b      	movs	r3, r5
 8001a64:	0020      	movs	r0, r4
 8001a66:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <time_settting+0x144>)
 8001a68:	f003 fb4e 	bl	8005108 <siprintf>
		char* array[2] = { "RTC Time setting.", bf };
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <time_settting+0x148>)
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a6e:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <time_settting+0x14c>)
		char* array[2] = { "RTC Time setting.", bf };
 8001a70:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a72:	2302      	movs	r3, #2
 8001a74:	aa03      	add	r2, sp, #12
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	a802      	add	r0, sp, #8
 8001a7a:	3b01      	subs	r3, #1
		char* array[2] = { "RTC Time setting.", bf };
 8001a7c:	9404      	str	r4, [sp, #16]
		array_puts(pos, "#Time set", array, 1, sizeof(pos) / 2);
 8001a7e:	f7ff fbff 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 8001a82:	f7ff f9d7 	bl	8000e34 <SSD1306_UpdateScreen>
 8001a86:	e77b      	b.n	8001980 <time_settting+0x4>
		sprintf(bf, "%s=%02d", ptTime[sel], sel == 0 ? 2000 + time.year : sel == 1 ? time.month : sel == 2 ? time.day : sel == 3 ? time.hour : sel == 4 ? time.min : time.sec);
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d0e9      	beq.n	8001a60 <time_settting+0xe4>
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d101      	bne.n	8001a94 <time_settting+0x118>
 8001a90:	78a5      	ldrb	r5, [r4, #2]
 8001a92:	e7e5      	b.n	8001a60 <time_settting+0xe4>
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d101      	bne.n	8001a9c <time_settting+0x120>
 8001a98:	78e5      	ldrb	r5, [r4, #3]
 8001a9a:	e7e1      	b.n	8001a60 <time_settting+0xe4>
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d101      	bne.n	8001aa4 <time_settting+0x128>
 8001aa0:	7925      	ldrb	r5, [r4, #4]
 8001aa2:	e7dd      	b.n	8001a60 <time_settting+0xe4>
 8001aa4:	7965      	ldrb	r5, [r4, #5]
 8001aa6:	e7db      	b.n	8001a60 <time_settting+0xe4>
 8001aa8:	20000071 	.word	0x20000071
 8001aac:	20000d9f 	.word	0x20000d9f
 8001ab0:	080064f5 	.word	0x080064f5
 8001ab4:	20000a14 	.word	0x20000a14
 8001ab8:	080057e0 	.word	0x080057e0
 8001abc:	20000048 	.word	0x20000048
 8001ac0:	080062d4 	.word	0x080062d4
 8001ac4:	080062dc 	.word	0x080062dc
 8001ac8:	080062ee 	.word	0x080062ee

08001acc <position_set>:

void position_set(void){
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS new = temp;
 8001ace:	4f54      	ldr	r7, [pc, #336]	; (8001c20 <position_set+0x154>)
void position_set(void){
 8001ad0:	b089      	sub	sp, #36	; 0x24
	POS new = temp;
 8001ad2:	783c      	ldrb	r4, [r7, #0]
 8001ad4:	787e      	ldrb	r6, [r7, #1]
	while(!read_sw()){
 8001ad6:	f7ff fc5f 	bl	8001398 <read_sw>
 8001ada:	1e05      	subs	r5, r0, #0
 8001adc:	d004      	beq.n	8001ae8 <position_set+0x1c>
		}
		if(new.x > 5) new.x = temp.x;
		if(new.y > 5) new.y = temp.y;
		temp = new;
	}
	firF = 0;
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <position_set+0x158>)
 8001ae2:	701a      	strb	r2, [r3, #0]
}
 8001ae4:	b009      	add	sp, #36	; 0x24
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(bf, "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	783a      	ldrb	r2, [r7, #0]
 8001aec:	494e      	ldr	r1, [pc, #312]	; (8001c28 <position_set+0x15c>)
 8001aee:	3301      	adds	r3, #1
 8001af0:	3201      	adds	r2, #1
 8001af2:	a803      	add	r0, sp, #12
 8001af4:	f003 fb08 	bl	8005108 <siprintf>
		ssd1306_putsXY(pos.x, pos.y, bf, 0);
 8001af8:	002b      	movs	r3, r5
 8001afa:	2106      	movs	r1, #6
 8001afc:	2001      	movs	r0, #1
 8001afe:	aa03      	add	r2, sp, #12
 8001b00:	f7ff fbae 	bl	8001260 <ssd1306_putsXY>
		SSD1306_UpdateScreen();
 8001b04:	f7ff f996 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 8001b08:	f7fe fe4c 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <position_set+0x160>)
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	7919      	ldrb	r1, [r3, #4]
 8001b14:	2900      	cmp	r1, #0
 8001b16:	d100      	bne.n	8001b1a <position_set+0x4e>
 8001b18:	e07e      	b.n	8001c18 <position_set+0x14c>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	001a      	movs	r2, r3
 8001b20:	0028      	movs	r0, r5
 8001b22:	f7fe fe09 	bl	8000738 <led_color>
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	3501      	adds	r5, #1
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	b2ed      	uxtb	r5, r5
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2d24      	cmp	r5, #36	; 0x24
 8001b32:	d1ed      	bne.n	8001b10 <position_set+0x44>
		led_color(curxy(), 4, 4, 4);
 8001b34:	f7ff fb60 	bl	80011f8 <curxy>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	f7fe fdfb 	bl	8000738 <led_color>
		led_update();
 8001b42:	f7fe fe05 	bl	8000750 <led_update>
		if(cnt > 150){
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <position_set+0x164>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	2a96      	cmp	r2, #150	; 0x96
 8001b4c:	d95b      	bls.n	8001c06 <position_set+0x13a>
			cnt = 0;
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <position_set+0x168>)
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <position_set+0x16c>)
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d911      	bls.n	8001b80 <position_set+0xb4>
 8001b5c:	3601      	adds	r6, #1
 8001b5e:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001b60:	2305      	movs	r3, #5
 8001b62:	1b58      	subs	r0, r3, r5
 8001b64:	3301      	adds	r3, #1
 8001b66:	4358      	muls	r0, r3
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b68:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001b6a:	1820      	adds	r0, r4, r0
			if(JOY_U) do{ new.y++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	2104      	movs	r1, #4
 8001b70:	b2c0      	uxtb	r0, r0
 8001b72:	f7fe fe21 	bl	80007b8 <led_cmp>
 8001b76:	002e      	movs	r6, r5
 8001b78:	3501      	adds	r5, #1
 8001b7a:	b2ed      	uxtb	r5, r5
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d1ef      	bne.n	8001b60 <position_set+0x94>
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b80:	2296      	movs	r2, #150	; 0x96
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <position_set+0x168>)
 8001b84:	0052      	lsls	r2, r2, #1
 8001b86:	885b      	ldrh	r3, [r3, #2]
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d211      	bcs.n	8001bb0 <position_set+0xe4>
 8001b8c:	3e01      	subs	r6, #1
 8001b8e:	b2f5      	uxtb	r5, r6
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001b90:	2305      	movs	r3, #5
 8001b92:	1b58      	subs	r0, r3, r5
 8001b94:	3301      	adds	r3, #1
 8001b96:	4358      	muls	r0, r3
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b98:	2300      	movs	r3, #0
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001b9a:	1820      	adds	r0, r4, r0
			if(JOY_D) do{ new.y--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	b2c0      	uxtb	r0, r0
 8001ba2:	f7fe fe09 	bl	80007b8 <led_cmp>
 8001ba6:	002e      	movs	r6, r5
 8001ba8:	3d01      	subs	r5, #1
 8001baa:	b2ed      	uxtb	r5, r5
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d1ef      	bne.n	8001b90 <position_set+0xc4>
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bb0:	2296      	movs	r2, #150	; 0x96
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <position_set+0x168>)
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d20f      	bcs.n	8001bdc <position_set+0x110>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	2506      	movs	r5, #6
 8001bc0:	1b9b      	subs	r3, r3, r6
 8001bc2:	435d      	muls	r5, r3
 8001bc4:	b2ed      	uxtb	r5, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	3c01      	subs	r4, #1
 8001bca:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001bcc:	1960      	adds	r0, r4, r5
			if(JOY_L) do{ new.x--; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bce:	001a      	movs	r2, r3
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	b2c0      	uxtb	r0, r0
 8001bd4:	f7fe fdf0 	bl	80007b8 <led_cmp>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1f4      	bne.n	8001bc6 <position_set+0xfa>
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <position_set+0x168>)
 8001bde:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <position_set+0x16c>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d90f      	bls.n	8001c06 <position_set+0x13a>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001be6:	2305      	movs	r3, #5
 8001be8:	2506      	movs	r5, #6
 8001bea:	1b9b      	subs	r3, r3, r6
 8001bec:	435d      	muls	r5, r3
 8001bee:	b2ed      	uxtb	r5, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	3401      	adds	r4, #1
 8001bf4:	b2e4      	uxtb	r4, r4
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8001bf6:	1960      	adds	r0, r4, r5
			if(JOY_R) do{ new.x++; }while(led_cmp(calxy(new.x, new.y), 4, 0, 0));
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	f7fe fddb 	bl	80007b8 <led_cmp>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d1f4      	bne.n	8001bf0 <position_set+0x124>
		if(new.x > 5) new.x = temp.x;
 8001c06:	2c05      	cmp	r4, #5
 8001c08:	d900      	bls.n	8001c0c <position_set+0x140>
 8001c0a:	783c      	ldrb	r4, [r7, #0]
		if(new.y > 5) new.y = temp.y;
 8001c0c:	2e05      	cmp	r6, #5
 8001c0e:	d900      	bls.n	8001c12 <position_set+0x146>
 8001c10:	787e      	ldrb	r6, [r7, #1]
		temp = new;
 8001c12:	703c      	strb	r4, [r7, #0]
 8001c14:	707e      	strb	r6, [r7, #1]
 8001c16:	e75e      	b.n	8001ad6 <position_set+0xa>
		for(uint8_t i = 0 ; i < 36 ; i++) pt[i].cate != 0 ? led_color(i, 4, 0, 0) : led_color(i, 0, 4, 0);
 8001c18:	000b      	movs	r3, r1
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	e780      	b.n	8001b20 <position_set+0x54>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	20000da2 	.word	0x20000da2
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	080062f8 	.word	0x080062f8
 8001c2c:	20000a20 	.word	0x20000a20
 8001c30:	20000a04 	.word	0x20000a04
 8001c34:	200009fa 	.word	0x200009fa
 8001c38:	00000dac 	.word	0x00000dac

08001c3c <save_mode>:

void save_mode(void){
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t store_num = 1, store_max;
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <save_mode+0x1d8>)
void save_mode(void){
 8001c40:	b0a3      	sub	sp, #140	; 0x8c
	store_max = cate_sel == res ? 200 : cate_sel == cap ? 100 : cate_sel == ic ? 50 : 10;
 8001c42:	7819      	ldrb	r1, [r3, #0]
 8001c44:	23c8      	movs	r3, #200	; 0xc8
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d006      	beq.n	8001c58 <save_mode+0x1c>
 8001c4a:	3b64      	subs	r3, #100	; 0x64
 8001c4c:	2901      	cmp	r1, #1
 8001c4e:	d003      	beq.n	8001c58 <save_mode+0x1c>
 8001c50:	3b32      	subs	r3, #50	; 0x32
 8001c52:	2902      	cmp	r1, #2
 8001c54:	d000      	beq.n	8001c58 <save_mode+0x1c>
 8001c56:	3b28      	subs	r3, #40	; 0x28
 8001c58:	4a6f      	ldr	r2, [pc, #444]	; (8001e18 <save_mode+0x1dc>)
 8001c5a:	7013      	strb	r3, [r2, #0]
	if(!firF){
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <save_mode+0x1e0>)
 8001c5e:	7818      	ldrb	r0, [r3, #0]
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d152      	bne.n	8001d0a <save_mode+0xce>
		firF = 1;
 8001c64:	2201      	movs	r2, #1
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001c66:	4c6e      	ldr	r4, [pc, #440]	; (8001e20 <save_mode+0x1e4>)
		firF = 1;
 8001c68:	701a      	strb	r2, [r3, #0]
		POS pos[7] = {{0, 3 + sel}, {0, 1}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8001c6a:	ab03      	add	r3, sp, #12
 8001c6c:	7018      	strb	r0, [r3, #0]
 8001c6e:	7098      	strb	r0, [r3, #2]
 8001c70:	3003      	adds	r0, #3
 8001c72:	7158      	strb	r0, [r3, #5]
 8001c74:	7824      	ldrb	r4, [r4, #0]
 8001c76:	1880      	adds	r0, r0, r2
 8001c78:	71d8      	strb	r0, [r3, #7]
 8001c7a:	1880      	adds	r0, r0, r2
 8001c7c:	70da      	strb	r2, [r3, #3]
 8001c7e:	711a      	strb	r2, [r3, #4]
 8001c80:	719a      	strb	r2, [r3, #6]
 8001c82:	721a      	strb	r2, [r3, #8]
 8001c84:	7258      	strb	r0, [r3, #9]
 8001c86:	729a      	strb	r2, [r3, #10]
 8001c88:	1880      	adds	r0, r0, r2
 8001c8a:	731a      	strb	r2, [r3, #12]
 8001c8c:	3403      	adds	r4, #3
 8001c8e:	3206      	adds	r2, #6
 8001c90:	72d8      	strb	r0, [r3, #11]
 8001c92:	735a      	strb	r2, [r3, #13]
 8001c94:	705c      	strb	r4, [r3, #1]
		char bf[4][20];
		sprintf(bf[0], "Cate:%s", ptCate[cate_sel]);
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <save_mode+0x1e8>)
 8001c98:	0089      	lsls	r1, r1, #2
 8001c9a:	ae0e      	add	r6, sp, #56	; 0x38
 8001c9c:	58ca      	ldr	r2, [r1, r3]
 8001c9e:	0030      	movs	r0, r6
 8001ca0:	4961      	ldr	r1, [pc, #388]	; (8001e28 <save_mode+0x1ec>)
 8001ca2:	f003 fa31 	bl	8005108 <siprintf>
		sprintf(bf[1], "Name:%s", input_name[0] > 0 ? input_name : "(NONE)");
 8001ca6:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <save_mode+0x1f0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	7813      	ldrb	r3, [r2, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d100      	bne.n	8001cb2 <save_mode+0x76>
 8001cb0:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <save_mode+0x1f4>)
 8001cb2:	ad13      	add	r5, sp, #76	; 0x4c
 8001cb4:	495f      	ldr	r1, [pc, #380]	; (8001e34 <save_mode+0x1f8>)
 8001cb6:	0028      	movs	r0, r5
 8001cb8:	f003 fa26 	bl	8005108 <siprintf>
		sprintf(bf[2], "Store: %d/%d", store_num, store_max);
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <save_mode+0x1dc>)
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <save_mode+0x1fc>)
 8001cc0:	ac18      	add	r4, sp, #96	; 0x60
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	495d      	ldr	r1, [pc, #372]	; (8001e3c <save_mode+0x200>)
 8001cc8:	0020      	movs	r0, r4
 8001cca:	f003 fa1d 	bl	8005108 <siprintf>
		sprintf(bf[3], "Position (%d,%d)", temp.x + 1, temp.y + 1);
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <save_mode+0x204>)
 8001cd0:	af1d      	add	r7, sp, #116	; 0x74
 8001cd2:	7853      	ldrb	r3, [r2, #1]
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	495b      	ldr	r1, [pc, #364]	; (8001e44 <save_mode+0x208>)
 8001cd8:	3301      	adds	r3, #1
 8001cda:	3201      	adds	r2, #1
 8001cdc:	0038      	movs	r0, r7
 8001cde:	f003 fa13 	bl	8005108 <siprintf>
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <save_mode+0x20c>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001ce4:	4959      	ldr	r1, [pc, #356]	; (8001e4c <save_mode+0x210>)
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001ce6:	9307      	str	r3, [sp, #28]
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <save_mode+0x214>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001cea:	aa07      	add	r2, sp, #28
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001cec:	9308      	str	r3, [sp, #32]
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <save_mode+0x218>)
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001cf0:	a803      	add	r0, sp, #12
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001cf2:	930d      	str	r3, [sp, #52]	; 0x34
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	3b06      	subs	r3, #6
		char* array[7] = { ">", "Pls input information", bf[0], bf[1], bf[2], bf[3], "Enter" };
 8001cfa:	9609      	str	r6, [sp, #36]	; 0x24
 8001cfc:	950a      	str	r5, [sp, #40]	; 0x28
 8001cfe:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d00:	970c      	str	r7, [sp, #48]	; 0x30
		array_puts(pos, "#Save", array, 1, sizeof(pos) / 2);
 8001d02:	f7ff fabd 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 8001d06:	f7ff f895 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	get_adc();
 8001d0a:	f7ff fae3 	bl	80012d4 <get_adc>
	get_sel(&sel, 4, 0, 2);
 8001d0e:	4c44      	ldr	r4, [pc, #272]	; (8001e20 <save_mode+0x1e4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	2302      	movs	r3, #2
 8001d14:	2104      	movs	r1, #4
 8001d16:	0020      	movs	r0, r4
 8001d18:	f7ff fb08 	bl	800132c <get_sel>
	if(sel == 0) get_sel(&cate_sel, etc, res, 1);
 8001d1c:	7822      	ldrb	r2, [r4, #0]
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d104      	bne.n	8001d2c <save_mode+0xf0>
 8001d22:	2301      	movs	r3, #1
 8001d24:	2103      	movs	r1, #3
 8001d26:	483b      	ldr	r0, [pc, #236]	; (8001e14 <save_mode+0x1d8>)
 8001d28:	f7ff fb00 	bl	800132c <get_sel>
	if(sel == 2) get_sel(&store_num, store_max, 1, 1);
 8001d2c:	7823      	ldrb	r3, [r4, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d106      	bne.n	8001d40 <save_mode+0x104>
 8001d32:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <save_mode+0x1dc>)
 8001d34:	4840      	ldr	r0, [pc, #256]	; (8001e38 <save_mode+0x1fc>)
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	f7ff faf6 	bl	800132c <get_sel>
	if(joy_result != basic) { joy_result = basic; firF = 0; }
 8001d40:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <save_mode+0x21c>)
 8001d42:	7813      	ldrb	r3, [r2, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <save_mode+0x114>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	7013      	strb	r3, [r2, #0]
 8001d4c:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <save_mode+0x1e0>)
 8001d4e:	7013      	strb	r3, [r2, #0]
	if(read_sw()){
 8001d50:	f7ff fb22 	bl	8001398 <read_sw>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d056      	beq.n	8001e06 <save_mode+0x1ca>
		if(sel == 1) input_name = input_string("input Name");
 8001d58:	7823      	ldrb	r3, [r4, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <save_mode+0x12c>
 8001d5e:	483f      	ldr	r0, [pc, #252]	; (8001e5c <save_mode+0x220>)
 8001d60:	f7ff fc20 	bl	80015a4 <input_string>
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <save_mode+0x1f0>)
 8001d66:	6018      	str	r0, [r3, #0]
		if(sel == 3) position_set();
 8001d68:	7823      	ldrb	r3, [r4, #0]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d101      	bne.n	8001d72 <save_mode+0x136>
 8001d6e:	f7ff fead 	bl	8001acc <position_set>
		if(sel == 4){
 8001d72:	7823      	ldrb	r3, [r4, #0]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d146      	bne.n	8001e06 <save_mode+0x1ca>
			if(input_name[0] > 0){
 8001d78:	4f2c      	ldr	r7, [pc, #176]	; (8001e2c <save_mode+0x1f0>)
 8001d7a:	683e      	ldr	r6, [r7, #0]
 8001d7c:	7833      	ldrb	r3, [r6, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d043      	beq.n	8001e0a <save_mode+0x1ce>
				pt[curxy()].name = input_name;
 8001d82:	f7ff fa39 	bl	80011f8 <curxy>
 8001d86:	250c      	movs	r5, #12
 8001d88:	4368      	muls	r0, r5
 8001d8a:	4c35      	ldr	r4, [pc, #212]	; (8001e60 <save_mode+0x224>)
				pt[curxy()].cate = cate_sel + 1;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <save_mode+0x1d8>)
				pt[curxy()].name = input_name;
 8001d8e:	5106      	str	r6, [r0, r4]
				pt[curxy()].cate = cate_sel + 1;
 8001d90:	781e      	ldrb	r6, [r3, #0]
 8001d92:	f7ff fa31 	bl	80011f8 <curxy>
 8001d96:	4368      	muls	r0, r5
				pt[curxy()].max = store_max;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <save_mode+0x1dc>)
				pt[curxy()].cate = cate_sel + 1;
 8001d9a:	1820      	adds	r0, r4, r0
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	7106      	strb	r6, [r0, #4]
				pt[curxy()].max = store_max;
 8001da0:	781e      	ldrb	r6, [r3, #0]
 8001da2:	f7ff fa29 	bl	80011f8 <curxy>
 8001da6:	4368      	muls	r0, r5
				pt[curxy()].store = store_num;
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <save_mode+0x1fc>)
				pt[curxy()].max = store_max;
 8001daa:	1820      	adds	r0, r4, r0
 8001dac:	8106      	strh	r6, [r0, #8]
				pt[curxy()].store = store_num;
 8001dae:	781e      	ldrb	r6, [r3, #0]
 8001db0:	f7ff fa22 	bl	80011f8 <curxy>
 8001db4:	4368      	muls	r0, r5
 8001db6:	1820      	adds	r0, r4, r0
 8001db8:	80c6      	strh	r6, [r0, #6]
				pt[curxy()].pos = start_check;
 8001dba:	f7ff fa1d 	bl	80011f8 <curxy>
 8001dbe:	4368      	muls	r0, r5
 8001dc0:	4e28      	ldr	r6, [pc, #160]	; (8001e64 <save_mode+0x228>)
 8001dc2:	1820      	adds	r0, r4, r0
 8001dc4:	7833      	ldrb	r3, [r6, #0]
 8001dc6:	7143      	strb	r3, [r0, #5]
				pt[curxy()].temp = temp;
 8001dc8:	f7ff fa16 	bl	80011f8 <curxy>
 8001dcc:	4368      	muls	r0, r5
 8001dce:	1820      	adds	r0, r4, r0
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	491b      	ldr	r1, [pc, #108]	; (8001e40 <save_mode+0x204>)
 8001dd4:	300a      	adds	r0, #10
 8001dd6:	f003 f853 	bl	8004e80 <memcpy>

				logShift(0);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fcb6 	bl	800174c <logShift>

				if(start_check == 1) ptfirst = pt[curxy()];
 8001de0:	7833      	ldrb	r3, [r6, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <save_mode+0x1b8>
 8001de6:	f7ff fa07 	bl	80011f8 <curxy>
 8001dea:	4345      	muls	r5, r0
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <save_mode+0x22c>)
 8001dee:	1964      	adds	r4, r4, r5
 8001df0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001df2:	c307      	stmia	r3!, {r0, r1, r2}

				input_name = NULL;
 8001df4:	2300      	movs	r3, #0
				cate_sel = res;
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <save_mode+0x1d8>)
				input_name = NULL;
 8001df8:	603b      	str	r3, [r7, #0]
				cate_sel = res;
 8001dfa:	7013      	strb	r3, [r2, #0]
				store_num = 1;
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <save_mode+0x1fc>)
 8001dfe:	3301      	adds	r3, #1
 8001e00:	7013      	strb	r3, [r2, #0]
				init_value();
 8001e02:	f7ff fa05 	bl	8001210 <init_value>
			}
			else buzM = 2;
		}
	}
}
 8001e06:	b023      	add	sp, #140	; 0x8c
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else buzM = 2;
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <save_mode+0x230>)
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	e7f9      	b.n	8001e06 <save_mode+0x1ca>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20000a01 	.word	0x20000a01
 8001e18:	20000da1 	.word	0x20000da1
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000d9f 	.word	0x20000d9f
 8001e24:	20000038 	.word	0x20000038
 8001e28:	08006310 	.word	0x08006310
 8001e2c:	20000a10 	.word	0x20000a10
 8001e30:	08006309 	.word	0x08006309
 8001e34:	08006318 	.word	0x08006318
 8001e38:	20000070 	.word	0x20000070
 8001e3c:	08006320 	.word	0x08006320
 8001e40:	20000da2 	.word	0x20000da2
 8001e44:	080062f8 	.word	0x080062f8
 8001e48:	08006227 	.word	0x08006227
 8001e4c:	08006349 	.word	0x08006349
 8001e50:	0800632d 	.word	0x0800632d
 8001e54:	08006343 	.word	0x08006343
 8001e58:	20000a14 	.word	0x20000a14
 8001e5c:	0800634f 	.word	0x0800634f
 8001e60:	20000a20 	.word	0x20000a20
 8001e64:	20000da0 	.word	0x20000da0
 8001e68:	20000d8c 	.word	0x20000d8c
 8001e6c:	20000a00 	.word	0x20000a00

08001e70 <part_refill>:

void part_refill(void){
	uint8_t refill_num = 0;
 8001e70:	230f      	movs	r3, #15
 8001e72:	2200      	movs	r2, #0
void part_refill(void){
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	b08d      	sub	sp, #52	; 0x34
	uint8_t refill_num = 0;
 8001e78:	446b      	add	r3, sp
 8001e7a:	701a      	strb	r2, [r3, #0]
	while(!read_sw()){
 8001e7c:	f7ff fa8c 	bl	8001398 <read_sw>
 8001e80:	1e04      	subs	r4, r0, #0
 8001e82:	d012      	beq.n	8001eaa <part_refill+0x3a>

		get_adc();
		get_sel(&refill_num, pt[curxy()].max, 0, 0);
		joy_result = basic;
	}
	if(refill_num > 0) { pt[curxy()].store += refill_num; logShift(0); }
 8001e84:	230f      	movs	r3, #15
 8001e86:	446b      	add	r3, sp
 8001e88:	260c      	movs	r6, #12
 8001e8a:	781d      	ldrb	r5, [r3, #0]
 8001e8c:	f7ff f9b4 	bl	80011f8 <curxy>
 8001e90:	4c25      	ldr	r4, [pc, #148]	; (8001f28 <part_refill+0xb8>)
 8001e92:	4370      	muls	r0, r6
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d03a      	beq.n	8001f0e <part_refill+0x9e>
 8001e98:	1820      	adds	r0, r4, r0
 8001e9a:	88c3      	ldrh	r3, [r0, #6]
 8001e9c:	195d      	adds	r5, r3, r5
 8001e9e:	80c5      	strh	r5, [r0, #6]
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fc53 	bl	800174c <logShift>
	else { free(pt[curxy()].name); memset(&pt[curxy()], 0, sizeof(struct Part)); }
}
 8001ea6:	b00d      	add	sp, #52	; 0x34
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8001eaa:	2204      	movs	r2, #4
 8001eac:	491f      	ldr	r1, [pc, #124]	; (8001f2c <part_refill+0xbc>)
 8001eae:	a804      	add	r0, sp, #16
 8001eb0:	1889      	adds	r1, r1, r2
 8001eb2:	f002 ffe5 	bl	8004e80 <memcpy>
		sprintf(bf, "IN:%d/%d", refill_num, pt[curxy()].max);
 8001eb6:	f7ff f99f 	bl	80011f8 <curxy>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	260f      	movs	r6, #15
 8001ebe:	4358      	muls	r0, r3
 8001ec0:	4d19      	ldr	r5, [pc, #100]	; (8001f28 <part_refill+0xb8>)
 8001ec2:	446e      	add	r6, sp
 8001ec4:	1828      	adds	r0, r5, r0
 8001ec6:	af07      	add	r7, sp, #28
 8001ec8:	8903      	ldrh	r3, [r0, #8]
 8001eca:	7832      	ldrb	r2, [r6, #0]
 8001ecc:	4918      	ldr	r1, [pc, #96]	; (8001f30 <part_refill+0xc0>)
 8001ece:	0038      	movs	r0, r7
 8001ed0:	f003 f91a 	bl	8005108 <siprintf>
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001ed4:	2202      	movs	r2, #2
		char* array[2] = { "Part has all used.", bf };
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <part_refill+0xc4>)
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001ed8:	4917      	ldr	r1, [pc, #92]	; (8001f38 <part_refill+0xc8>)
 8001eda:	a804      	add	r0, sp, #16
		char* array[2] = { "Part has all used.", bf };
 8001edc:	9305      	str	r3, [sp, #20]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001ede:	9200      	str	r2, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	aa05      	add	r2, sp, #20
		char* array[2] = { "Part has all used.", bf };
 8001ee4:	9706      	str	r7, [sp, #24]
		array_puts(pos, "#refill", array, 1, sizeof(pos) / 2);
 8001ee6:	f7ff f9cb 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 8001eea:	f7fe ffa3 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8001eee:	f7ff f9f1 	bl	80012d4 <get_adc>
		get_sel(&refill_num, pt[curxy()].max, 0, 0);
 8001ef2:	f7ff f981 	bl	80011f8 <curxy>
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	4358      	muls	r0, r3
 8001efa:	182d      	adds	r5, r5, r0
 8001efc:	0023      	movs	r3, r4
 8001efe:	0022      	movs	r2, r4
 8001f00:	0030      	movs	r0, r6
 8001f02:	7a29      	ldrb	r1, [r5, #8]
 8001f04:	f7ff fa12 	bl	800132c <get_sel>
		joy_result = basic;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <part_refill+0xcc>)
 8001f0a:	701c      	strb	r4, [r3, #0]
 8001f0c:	e7b6      	b.n	8001e7c <part_refill+0xc>
	else { free(pt[curxy()].name); memset(&pt[curxy()], 0, sizeof(struct Part)); }
 8001f0e:	5820      	ldr	r0, [r4, r0]
 8001f10:	f002 ffac 	bl	8004e6c <free>
 8001f14:	f7ff f970 	bl	80011f8 <curxy>
 8001f18:	4370      	muls	r0, r6
 8001f1a:	0032      	movs	r2, r6
 8001f1c:	0029      	movs	r1, r5
 8001f1e:	1820      	adds	r0, r4, r0
 8001f20:	f002 ffca 	bl	8004eb8 <memset>
}
 8001f24:	e7bf      	b.n	8001ea6 <part_refill+0x36>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000a20 	.word	0x20000a20
 8001f2c:	080057e0 	.word	0x080057e0
 8001f30:	0800635a 	.word	0x0800635a
 8001f34:	08006363 	.word	0x08006363
 8001f38:	08006376 	.word	0x08006376
 8001f3c:	20000a14 	.word	0x20000a14

08001f40 <part_use>:

void part_use(void){
	use_num = 1;
 8001f40:	2201      	movs	r2, #1
void part_use(void){
 8001f42:	b5f0      	push	{r4, r5, r6, r7, lr}
	use_num = 1;
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <part_use+0xd4>)
void part_use(void){
 8001f46:	b08b      	sub	sp, #44	; 0x2c
	use_num = 1;
 8001f48:	701a      	strb	r2, [r3, #0]

	led_clear();
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	f7fe fc2a 	bl	80007a4 <led_clear>
	for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 8001f50:	250c      	movs	r5, #12
 8001f52:	0028      	movs	r0, r5
 8001f54:	4360      	muls	r0, r4
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <part_use+0xd8>)
 8001f58:	b2e1      	uxtb	r1, r4
 8001f5a:	18c0      	adds	r0, r0, r3
 8001f5c:	3401      	adds	r4, #1
 8001f5e:	f7ff fa39 	bl	80013d4 <led_display>
 8001f62:	2c24      	cmp	r4, #36	; 0x24
 8001f64:	d1f5      	bne.n	8001f52 <part_use+0x12>
	led_color(curxy(), 4, 4, 4);
 8001f66:	f7ff f947 	bl	80011f8 <curxy>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	0019      	movs	r1, r3
 8001f70:	f7fe fbe2 	bl	8000738 <led_color>
	led_update();
 8001f74:	f7fe fbec 	bl	8000750 <led_update>

	while(!read_sw()){
 8001f78:	f7ff fa0e 	bl	8001398 <read_sw>
 8001f7c:	1e04      	subs	r4, r0, #0
 8001f7e:	d018      	beq.n	8001fb2 <part_use+0x72>

		get_adc();
		get_sel(&use_num, pt[curxy()].store, 1, 0);
		joy_result = basic;
	}
	logShift(1);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff fbe3 	bl	800174c <logShift>
	pt[curxy()].store -= use_num;
 8001f86:	250c      	movs	r5, #12
 8001f88:	f7ff f936 	bl	80011f8 <curxy>
 8001f8c:	4368      	muls	r0, r5
 8001f8e:	4c22      	ldr	r4, [pc, #136]	; (8002018 <part_use+0xd8>)
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <part_use+0xd4>)
 8001f92:	1820      	adds	r0, r4, r0
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	88c3      	ldrh	r3, [r0, #6]
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	80c3      	strh	r3, [r0, #6]
	if(pt[curxy()].store == 0) part_refill();
 8001f9c:	f7ff f92c 	bl	80011f8 <curxy>
 8001fa0:	4345      	muls	r5, r0
 8001fa2:	1964      	adds	r4, r4, r5
 8001fa4:	88e3      	ldrh	r3, [r4, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <part_use+0x6e>
 8001faa:	f7ff ff61 	bl	8001e70 <part_refill>
}
 8001fae:	b00b      	add	sp, #44	; 0x2c
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		POS pos[2] = {{0, 1}, {0, 3}};
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4919      	ldr	r1, [pc, #100]	; (800201c <part_use+0xdc>)
 8001fb6:	a802      	add	r0, sp, #8
 8001fb8:	1889      	adds	r1, r1, r2
 8001fba:	f002 ff61 	bl	8004e80 <memcpy>
		sprintf(bf, "(%d/%d)", use_num, pt[curxy()].store);
 8001fbe:	f7ff f91b 	bl	80011f8 <curxy>
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	4358      	muls	r0, r3
 8001fc6:	4d14      	ldr	r5, [pc, #80]	; (8002018 <part_use+0xd8>)
 8001fc8:	4e12      	ldr	r6, [pc, #72]	; (8002014 <part_use+0xd4>)
 8001fca:	1828      	adds	r0, r5, r0
 8001fcc:	af05      	add	r7, sp, #20
 8001fce:	88c3      	ldrh	r3, [r0, #6]
 8001fd0:	7832      	ldrb	r2, [r6, #0]
 8001fd2:	4913      	ldr	r1, [pc, #76]	; (8002020 <part_use+0xe0>)
 8001fd4:	0038      	movs	r0, r7
 8001fd6:	f003 f897 	bl	8005108 <siprintf>
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8001fda:	2202      	movs	r2, #2
		char* array[2] = { "How many use?", bf };
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <part_use+0xe4>)
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8001fde:	4912      	ldr	r1, [pc, #72]	; (8002028 <part_use+0xe8>)
 8001fe0:	a802      	add	r0, sp, #8
		char* array[2] = { "How many use?", bf };
 8001fe2:	9303      	str	r3, [sp, #12]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8001fe4:	9200      	str	r2, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	aa03      	add	r2, sp, #12
		char* array[2] = { "How many use?", bf };
 8001fea:	9704      	str	r7, [sp, #16]
		array_puts(pos, "#Use", array, 1, sizeof(pos) / 2);
 8001fec:	f7ff f948 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 8001ff0:	f7fe ff20 	bl	8000e34 <SSD1306_UpdateScreen>
		get_adc();
 8001ff4:	f7ff f96e 	bl	80012d4 <get_adc>
		get_sel(&use_num, pt[curxy()].store, 1, 0);
 8001ff8:	f7ff f8fe 	bl	80011f8 <curxy>
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	4358      	muls	r0, r3
 8002000:	182d      	adds	r5, r5, r0
 8002002:	0023      	movs	r3, r4
 8002004:	2201      	movs	r2, #1
 8002006:	0030      	movs	r0, r6
 8002008:	79a9      	ldrb	r1, [r5, #6]
 800200a:	f7ff f98f 	bl	800132c <get_sel>
		joy_result = basic;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <part_use+0xec>)
 8002010:	701c      	strb	r4, [r3, #0]
 8002012:	e7b1      	b.n	8001f78 <part_use+0x38>
 8002014:	20000077 	.word	0x20000077
 8002018:	20000a20 	.word	0x20000a20
 800201c:	080057e0 	.word	0x080057e0
 8002020:	0800637e 	.word	0x0800637e
 8002024:	08006386 	.word	0x08006386
 8002028:	08006394 	.word	0x08006394
 800202c:	20000a14 	.word	0x20000a14

08002030 <use_mode>:

void use_mode(void){
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 8002032:	4c5f      	ldr	r4, [pc, #380]	; (80021b0 <use_mode+0x180>)
void use_mode(void){
 8002034:	b099      	sub	sp, #100	; 0x64
	if(!firF){
 8002036:	7823      	ldrb	r3, [r4, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d163      	bne.n	8002104 <use_mode+0xd4>
		firF = 1;
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 800203c:	2208      	movs	r2, #8
 800203e:	495d      	ldr	r1, [pc, #372]	; (80021b4 <use_mode+0x184>)
		firF = 1;
 8002040:	3301      	adds	r3, #1
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 8002042:	1889      	adds	r1, r1, r2
 8002044:	a803      	add	r0, sp, #12
		firF = 1;
 8002046:	7023      	strb	r3, [r4, #0]
		POS pos[4] = {{0, 1}, {0, 3}, {0, 4}, {0, 5}};
 8002048:	f002 ff1a 	bl	8004e80 <memcpy>
		char bf[3][20];
		sprintf(bf[0], pt[curxy()].cate != 0 ? "Cate:%s" : "(Empty)", ptCate[pt[curxy()].cate - 1]);
 800204c:	f7ff f8d4 	bl	80011f8 <curxy>
 8002050:	230c      	movs	r3, #12
 8002052:	4343      	muls	r3, r0
 8002054:	4d58      	ldr	r5, [pc, #352]	; (80021b8 <use_mode+0x188>)
 8002056:	4959      	ldr	r1, [pc, #356]	; (80021bc <use_mode+0x18c>)
 8002058:	18eb      	adds	r3, r5, r3
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <use_mode+0x32>
 8002060:	4957      	ldr	r1, [pc, #348]	; (80021c0 <use_mode+0x190>)
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <use_mode+0x194>)
 8002064:	3b01      	subs	r3, #1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	af09      	add	r7, sp, #36	; 0x24
 800206a:	589a      	ldr	r2, [r3, r2]
 800206c:	0038      	movs	r0, r7
 800206e:	f003 f84b 	bl	8005108 <siprintf>
		sprintf(bf[1], "Name:%s", pt[curxy()].cate != 0 ? pt[curxy()].name : "");
 8002072:	f7ff f8c1 	bl	80011f8 <curxy>
 8002076:	230c      	movs	r3, #12
 8002078:	4358      	muls	r0, r3
 800207a:	182b      	adds	r3, r5, r0
 800207c:	791b      	ldrb	r3, [r3, #4]
 800207e:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <use_mode+0x198>)
 8002080:	2b00      	cmp	r3, #0
 8002082:	d000      	beq.n	8002086 <use_mode+0x56>
 8002084:	582a      	ldr	r2, [r5, r0]
 8002086:	ae0e      	add	r6, sp, #56	; 0x38
 8002088:	4950      	ldr	r1, [pc, #320]	; (80021cc <use_mode+0x19c>)
 800208a:	0030      	movs	r0, r6
 800208c:	f003 f83c 	bl	8005108 <siprintf>
		sprintf(bf[2], "Store:%d", pt[curxy()].store);
 8002090:	f7ff f8b2 	bl	80011f8 <curxy>
 8002094:	230c      	movs	r3, #12
 8002096:	4358      	muls	r0, r3
 8002098:	4d47      	ldr	r5, [pc, #284]	; (80021b8 <use_mode+0x188>)
 800209a:	494d      	ldr	r1, [pc, #308]	; (80021d0 <use_mode+0x1a0>)
 800209c:	1828      	adds	r0, r5, r0
 800209e:	88c2      	ldrh	r2, [r0, #6]
 80020a0:	a813      	add	r0, sp, #76	; 0x4c
 80020a2:	f003 f831 	bl	8005108 <siprintf>
		char* array[4] = { "Select part", bf[0], bf[1], bf[2] };
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <use_mode+0x1a4>)
 80020a8:	aa13      	add	r2, sp, #76	; 0x4c
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	9208      	str	r2, [sp, #32]
 80020ae:	9706      	str	r7, [sp, #24]
 80020b0:	9607      	str	r6, [sp, #28]
		array_puts(pos, "#Use", array, 1, pt[curxy()].cate != 0 ? sizeof(pos) / 2 : 2);
 80020b2:	f7ff f8a1 	bl	80011f8 <curxy>
 80020b6:	230c      	movs	r3, #12
 80020b8:	4358      	muls	r0, r3
 80020ba:	1828      	adds	r0, r5, r0
 80020bc:	7902      	ldrb	r2, [r0, #4]
 80020be:	3b08      	subs	r3, #8
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d100      	bne.n	80020c6 <use_mode+0x96>
 80020c4:	3b02      	subs	r3, #2
 80020c6:	4944      	ldr	r1, [pc, #272]	; (80021d8 <use_mode+0x1a8>)
 80020c8:	aa05      	add	r2, sp, #20
 80020ca:	a803      	add	r0, sp, #12
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	f7ff f8d6 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();

		led_clear();
 80020d4:	2600      	movs	r6, #0
		SSD1306_UpdateScreen();
 80020d6:	f7fe fead 	bl	8000e34 <SSD1306_UpdateScreen>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80020da:	270c      	movs	r7, #12
		led_clear();
 80020dc:	f7fe fb62 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80020e0:	0038      	movs	r0, r7
 80020e2:	4370      	muls	r0, r6
 80020e4:	b2f1      	uxtb	r1, r6
 80020e6:	1828      	adds	r0, r5, r0
 80020e8:	3601      	adds	r6, #1
 80020ea:	f7ff f973 	bl	80013d4 <led_display>
 80020ee:	2e24      	cmp	r6, #36	; 0x24
 80020f0:	d1f6      	bne.n	80020e0 <use_mode+0xb0>
		led_color(curxy(), 4, 4, 4);
 80020f2:	f7ff f881 	bl	80011f8 <curxy>
 80020f6:	2304      	movs	r3, #4
 80020f8:	001a      	movs	r2, r3
 80020fa:	0019      	movs	r1, r3
 80020fc:	f7fe fb1c 	bl	8000738 <led_color>
		led_update();
 8002100:	f7fe fb26 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <use_mode+0x1ac>)
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	2a96      	cmp	r2, #150	; 0x96
 800210a:	d927      	bls.n	800215c <use_mode+0x12c>
		cnt = 0;
 800210c:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800210e:	4834      	ldr	r0, [pc, #208]	; (80021e0 <use_mode+0x1b0>)
		cnt = 0;
 8002110:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002112:	8842      	ldrh	r2, [r0, #2]
 8002114:	4933      	ldr	r1, [pc, #204]	; (80021e4 <use_mode+0x1b4>)
 8002116:	428a      	cmp	r2, r1
 8002118:	d933      	bls.n	8002182 <use_mode+0x152>
 800211a:	4d33      	ldr	r5, [pc, #204]	; (80021e8 <use_mode+0x1b8>)
 800211c:	786b      	ldrb	r3, [r5, #1]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d801      	bhi.n	8002126 <use_mode+0xf6>
 8002122:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002124:	b2db      	uxtb	r3, r3
 8002126:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002128:	8803      	ldrh	r3, [r0, #0]
 800212a:	2096      	movs	r0, #150	; 0x96
 800212c:	0040      	lsls	r0, r0, #1
 800212e:	4283      	cmp	r3, r0
 8002130:	d231      	bcs.n	8002196 <use_mode+0x166>
 8002132:	482d      	ldr	r0, [pc, #180]	; (80021e8 <use_mode+0x1b8>)
 8002134:	7801      	ldrb	r1, [r0, #0]
 8002136:	2900      	cmp	r1, #0
 8002138:	d001      	beq.n	800213e <use_mode+0x10e>
 800213a:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800213c:	b2c9      	uxtb	r1, r1
 800213e:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 8002140:	21c8      	movs	r1, #200	; 0xc8
 8002142:	3a2d      	subs	r2, #45	; 0x2d
 8002144:	3aff      	subs	r2, #255	; 0xff
 8002146:	b292      	uxth	r2, r2
 8002148:	0109      	lsls	r1, r1, #4
 800214a:	428a      	cmp	r2, r1
 800214c:	d804      	bhi.n	8002158 <use_mode+0x128>
 800214e:	3b2d      	subs	r3, #45	; 0x2d
 8002150:	3bff      	subs	r3, #255	; 0xff
 8002152:	b29b      	uxth	r3, r3
 8002154:	428b      	cmp	r3, r1
 8002156:	d901      	bls.n	800215c <use_mode+0x12c>
 8002158:	2300      	movs	r3, #0
 800215a:	7023      	strb	r3, [r4, #0]
	}
	if(read_sw()){
 800215c:	f7ff f91c 	bl	8001398 <read_sw>
 8002160:	2800      	cmp	r0, #0
 8002162:	d00c      	beq.n	800217e <use_mode+0x14e>
		if(pt[curxy()].cate != 0) { part_use(); init_value(); }
 8002164:	f7ff f848 	bl	80011f8 <curxy>
 8002168:	230c      	movs	r3, #12
 800216a:	4343      	muls	r3, r0
 800216c:	4812      	ldr	r0, [pc, #72]	; (80021b8 <use_mode+0x188>)
 800216e:	18c0      	adds	r0, r0, r3
 8002170:	7903      	ldrb	r3, [r0, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d017      	beq.n	80021a6 <use_mode+0x176>
 8002176:	f7ff fee3 	bl	8001f40 <part_use>
 800217a:	f7ff f849 	bl	8001210 <init_value>
		else buzM = 2;
	}
}
 800217e:	b019      	add	sp, #100	; 0x64
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002182:	2396      	movs	r3, #150	; 0x96
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	429a      	cmp	r2, r3
 8002188:	d2ce      	bcs.n	8002128 <use_mode+0xf8>
 800218a:	4d17      	ldr	r5, [pc, #92]	; (80021e8 <use_mode+0x1b8>)
 800218c:	786b      	ldrb	r3, [r5, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0c9      	beq.n	8002126 <use_mode+0xf6>
 8002192:	3b01      	subs	r3, #1
 8002194:	e7c6      	b.n	8002124 <use_mode+0xf4>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 8002196:	428b      	cmp	r3, r1
 8002198:	d9d2      	bls.n	8002140 <use_mode+0x110>
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <use_mode+0x1b8>)
 800219c:	7801      	ldrb	r1, [r0, #0]
 800219e:	2904      	cmp	r1, #4
 80021a0:	d8cd      	bhi.n	800213e <use_mode+0x10e>
 80021a2:	3101      	adds	r1, #1
 80021a4:	e7ca      	b.n	800213c <use_mode+0x10c>
		else buzM = 2;
 80021a6:	2202      	movs	r2, #2
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <use_mode+0x1bc>)
 80021aa:	701a      	strb	r2, [r3, #0]
}
 80021ac:	e7e7      	b.n	800217e <use_mode+0x14e>
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	080057e0 	.word	0x080057e0
 80021b8:	20000a20 	.word	0x20000a20
 80021bc:	08006310 	.word	0x08006310
 80021c0:	08006399 	.word	0x08006399
 80021c4:	20000038 	.word	0x20000038
 80021c8:	08006506 	.word	0x08006506
 80021cc:	08006318 	.word	0x08006318
 80021d0:	080063a1 	.word	0x080063a1
 80021d4:	080063aa 	.word	0x080063aa
 80021d8:	08006394 	.word	0x08006394
 80021dc:	20000a04 	.word	0x20000a04
 80021e0:	200009fa 	.word	0x200009fa
 80021e4:	00000dac 	.word	0x00000dac
 80021e8:	20000da2 	.word	0x20000da2
 80021ec:	20000a00 	.word	0x20000a00

080021f0 <find_result>:

void find_result(char* str){
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t find_num = 0;
 80021f2:	2400      	movs	r4, #0
void find_result(char* str){
 80021f4:	b085      	sub	sp, #20
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	4d7e      	ldr	r5, [pc, #504]	; (80023f4 <find_result+0x204>)
 80021fa:	6038      	str	r0, [r7, #0]
	for(uint8_t i = 0 ; i < 36 ; i++) if(!strcmp(pt[i].name, str)) find_num++;
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	6828      	ldr	r0, [r5, #0]
 8002200:	f7fd ff82 	bl	8000108 <strcmp>
 8002204:	2800      	cmp	r0, #0
 8002206:	d101      	bne.n	800220c <find_result+0x1c>
 8002208:	3401      	adds	r4, #1
 800220a:	b2e4      	uxtb	r4, r4
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <find_result+0x208>)
 800220e:	350c      	adds	r5, #12
 8002210:	429d      	cmp	r5, r3
 8002212:	d1f3      	bne.n	80021fc <find_result+0xc>
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 8002214:	0021      	movs	r1, r4
 8002216:	200c      	movs	r0, #12
 8002218:	f002 fdf4 	bl	8004e04 <calloc>
	findC = 0;
 800221c:	2400      	movs	r4, #0
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <find_result+0x20c>)
	struct Part* find_part = (struct Part*)calloc(sizeof(struct Part), find_num);
 8002220:	6078      	str	r0, [r7, #4]
	findC = 0;
 8002222:	701c      	strb	r4, [r3, #0]
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002224:	4b76      	ldr	r3, [pc, #472]	; (8002400 <find_result+0x210>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	42a3      	cmp	r3, r4
 800222a:	d819      	bhi.n	8002260 <find_result+0x70>
		for(uint8_t j = 0 ; j < 36 ; j++)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
	while(!read_sw()){
 800222c:	f7ff f8b4 	bl	8001398 <read_sw>
 8002230:	4d72      	ldr	r5, [pc, #456]	; (80023fc <find_result+0x20c>)
 8002232:	1e06      	subs	r6, r0, #0
 8002234:	d032      	beq.n	800229c <find_result+0xac>
		array[1] = ">";
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
		SSD1306_UpdateScreen();
	}
	logShift(2);
 8002236:	2002      	movs	r0, #2
 8002238:	f7ff fa88 	bl	800174c <logShift>
	if(findC > 0) { temp = find_part[sel].temp; part_use(); }
 800223c:	782b      	ldrb	r3, [r5, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <find_result+0x6c>
 8002242:	210c      	movs	r1, #12
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <find_result+0x214>)
 8002246:	2202      	movs	r2, #2
 8002248:	7818      	ldrb	r0, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4341      	muls	r1, r0
 800224e:	1859      	adds	r1, r3, r1
 8002250:	310a      	adds	r1, #10
 8002252:	486d      	ldr	r0, [pc, #436]	; (8002408 <find_result+0x218>)
 8002254:	f002 fe14 	bl	8004e80 <memcpy>
 8002258:	f7ff fe72 	bl	8001f40 <part_use>
}
 800225c:	46bd      	mov	sp, r7
 800225e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002260:	4d64      	ldr	r5, [pc, #400]	; (80023f4 <find_result+0x204>)
			if(!strcmp(pt[j].name, str) && pt[j].pos - 1 == i) find_part[findC++] = pt[j];
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	6828      	ldr	r0, [r5, #0]
 8002266:	f7fd ff4f 	bl	8000108 <strcmp>
 800226a:	2800      	cmp	r0, #0
 800226c:	d10f      	bne.n	800228e <find_result+0x9e>
 800226e:	796b      	ldrb	r3, [r5, #5]
 8002270:	3b01      	subs	r3, #1
 8002272:	42a3      	cmp	r3, r4
 8002274:	d10b      	bne.n	800228e <find_result+0x9e>
 8002276:	4b61      	ldr	r3, [pc, #388]	; (80023fc <find_result+0x20c>)
 8002278:	4960      	ldr	r1, [pc, #384]	; (80023fc <find_result+0x20c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	700a      	strb	r2, [r1, #0]
 8002280:	220c      	movs	r2, #12
 8002282:	4353      	muls	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	18d3      	adds	r3, r2, r3
 8002288:	002a      	movs	r2, r5
 800228a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800228c:	c343      	stmia	r3!, {r0, r1, r6}
		for(uint8_t j = 0 ; j < 36 ; j++)
 800228e:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <find_result+0x208>)
 8002290:	350c      	adds	r5, #12
 8002292:	429d      	cmp	r5, r3
 8002294:	d1e5      	bne.n	8002262 <find_result+0x72>
	for(uint8_t i = 0 ; i < start_check ; i++)
 8002296:	3401      	adds	r4, #1
 8002298:	b2e4      	uxtb	r4, r4
 800229a:	e7c3      	b.n	8002224 <find_result+0x34>
		if(findC > 0){
 800229c:	782b      	ldrb	r3, [r5, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d032      	beq.n	8002308 <find_result+0x118>
			get_adc();
 80022a2:	f7ff f817 	bl	80012d4 <get_adc>
			get_sel(&sel, findC - 1, 0, 2);
 80022a6:	7829      	ldrb	r1, [r5, #0]
 80022a8:	2302      	movs	r3, #2
 80022aa:	3901      	subs	r1, #1
 80022ac:	0032      	movs	r2, r6
 80022ae:	4855      	ldr	r0, [pc, #340]	; (8002404 <find_result+0x214>)
 80022b0:	b2c9      	uxtb	r1, r1
 80022b2:	f7ff f83b 	bl	800132c <get_sel>
			joy_result = basic;
 80022b6:	4b55      	ldr	r3, [pc, #340]	; (800240c <find_result+0x21c>)
			led_clear();
 80022b8:	0034      	movs	r4, r6
			joy_result = basic;
 80022ba:	701e      	strb	r6, [r3, #0]
			led_clear();
 80022bc:	f7fe fa72 	bl	80007a4 <led_clear>
			for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 80022c0:	200c      	movs	r0, #12
 80022c2:	4360      	muls	r0, r4
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <find_result+0x204>)
 80022c6:	b2e1      	uxtb	r1, r4
 80022c8:	18c0      	adds	r0, r0, r3
 80022ca:	3401      	adds	r4, #1
 80022cc:	f7ff f882 	bl	80013d4 <led_display>
 80022d0:	2c24      	cmp	r4, #36	; 0x24
 80022d2:	d1f5      	bne.n	80022c0 <find_result+0xd0>
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <find_result+0x214>)
 80022d6:	494e      	ldr	r1, [pc, #312]	; (8002410 <find_result+0x220>)
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	230c      	movs	r3, #12
 80022dc:	435a      	muls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8809      	ldrh	r1, [r1, #0]
 80022e2:	189a      	adds	r2, r3, r2
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80022e4:	2305      	movs	r3, #5
 80022e6:	7ad0      	ldrb	r0, [r2, #11]
 80022e8:	1a18      	subs	r0, r3, r0
 80022ea:	3301      	adds	r3, #1
 80022ec:	4343      	muls	r3, r0
 80022ee:	7a90      	ldrb	r0, [r2, #10]
 80022f0:	1818      	adds	r0, r3, r0
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 80022f2:	23fa      	movs	r3, #250	; 0xfa
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80022f4:	b2c0      	uxtb	r0, r0
			if(ledC < 500) led_display(&find_part[sel], calxy(find_part[sel].temp.x, find_part[sel].temp.y));
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4299      	cmp	r1, r3
 80022fa:	d24b      	bcs.n	8002394 <find_result+0x1a4>
 80022fc:	0001      	movs	r1, r0
 80022fe:	0010      	movs	r0, r2
 8002300:	f7ff f868 	bl	80013d4 <led_display>
			led_update();
 8002304:	f7fe fa24 	bl	8000750 <led_update>
		POS pos[2 + findC];
 8002308:	782b      	ldrb	r3, [r5, #0]
 800230a:	466d      	mov	r5, sp
 800230c:	005a      	lsls	r2, r3, #1
 800230e:	320b      	adds	r2, #11
 8002310:	08d2      	lsrs	r2, r2, #3
 8002312:	00d2      	lsls	r2, r2, #3
 8002314:	1aaa      	subs	r2, r5, r2
 8002316:	4695      	mov	sp, r2
		char bf[findC][30];
 8002318:	221e      	movs	r2, #30
 800231a:	4353      	muls	r3, r2
 800231c:	466a      	mov	r2, sp
 800231e:	3307      	adds	r3, #7
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1ad3      	subs	r3, r2, r3
		POS pos[2 + findC];
 8002326:	ac02      	add	r4, sp, #8
		char bf[findC][30];
 8002328:	469d      	mov	sp, r3
 800232a:	ab02      	add	r3, sp, #8
 800232c:	603b      	str	r3, [r7, #0]
		pos[0].x = 0, pos[0].y = 1;
 800232e:	2300      	movs	r3, #0
 8002330:	2201      	movs	r2, #1
 8002332:	7023      	strb	r3, [r4, #0]
		pos[1].x = 0, pos[1].y = 2 + sel;
 8002334:	70a3      	strb	r3, [r4, #2]
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <find_result+0x214>)
		pos[0].x = 0, pos[0].y = 1;
 8002338:	7062      	strb	r2, [r4, #1]
		pos[1].x = 0, pos[1].y = 2 + sel;
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3302      	adds	r3, #2
 800233e:	70e3      	strb	r3, [r4, #3]
		for(uint8_t i = 0 ; i < findC ; i++){
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <find_result+0x20c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429e      	cmp	r6, r3
 8002346:	d32b      	bcc.n	80023a0 <find_result+0x1b0>
		char* array[2 + findC];
 8002348:	4669      	mov	r1, sp
 800234a:	009a      	lsls	r2, r3, #2
 800234c:	320f      	adds	r2, #15
 800234e:	08d2      	lsrs	r2, r2, #3
 8002350:	00d2      	lsls	r2, r2, #3
 8002352:	1a8a      	subs	r2, r1, r2
 8002354:	4695      	mov	sp, r2
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 8002356:	492f      	ldr	r1, [pc, #188]	; (8002414 <find_result+0x224>)
		char* array[2 + findC];
 8002358:	aa02      	add	r2, sp, #8
		array[0] = findC > 0 ? "Find some parts!" : "Not found..";
 800235a:	2b00      	cmp	r3, #0
 800235c:	d100      	bne.n	8002360 <find_result+0x170>
 800235e:	492e      	ldr	r1, [pc, #184]	; (8002418 <find_result+0x228>)
 8002360:	201e      	movs	r0, #30
 8002362:	0016      	movs	r6, r2
 8002364:	4358      	muls	r0, r3
 8002366:	6011      	str	r1, [r2, #0]
		array[1] = ">";
 8002368:	492c      	ldr	r1, [pc, #176]	; (800241c <find_result+0x22c>)
 800236a:	3608      	adds	r6, #8
 800236c:	6051      	str	r1, [r2, #4]
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	1808      	adds	r0, r1, r0
 8002372:	4288      	cmp	r0, r1
 8002374:	d13a      	bne.n	80023ec <find_result+0x1fc>
		array_puts(pos, "#Find result", array, 1, findC > 0 ? 2 + findC : 1);
 8002376:	2101      	movs	r1, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <find_result+0x190>
 800237c:	3302      	adds	r3, #2
 800237e:	b2d9      	uxtb	r1, r3
 8002380:	9100      	str	r1, [sp, #0]
 8002382:	2301      	movs	r3, #1
 8002384:	0020      	movs	r0, r4
 8002386:	4926      	ldr	r1, [pc, #152]	; (8002420 <find_result+0x230>)
 8002388:	f7fe ff7a 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 800238c:	f7fe fd52 	bl	8000e34 <SSD1306_UpdateScreen>
 8002390:	46ad      	mov	sp, r5
 8002392:	e74b      	b.n	800222c <find_result+0x3c>
			else led_color(calxy(find_part[sel].temp.x,  find_part[sel].temp.y), 0, 0, 0);
 8002394:	2300      	movs	r3, #0
 8002396:	001a      	movs	r2, r3
 8002398:	0019      	movs	r1, r3
 800239a:	f7fe f9cd 	bl	8000738 <led_color>
 800239e:	e7b1      	b.n	8002304 <find_result+0x114>
			sprintf(bf[i], "%s(%s/%d,%d)", find_part[i].name, ptCate[find_part[sel].cate - 1], find_part[i].temp.x + 1, find_part[i].temp.y + 1);
 80023a0:	220c      	movs	r2, #12
 80023a2:	210c      	movs	r1, #12
 80023a4:	201e      	movs	r0, #30
 80023a6:	4372      	muls	r2, r6
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4370      	muls	r0, r6
 80023ac:	189a      	adds	r2, r3, r2
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <find_result+0x214>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	434b      	muls	r3, r1
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	18cb      	adds	r3, r1, r3
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	1808      	adds	r0, r1, r0
 80023be:	7ad1      	ldrb	r1, [r2, #11]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	3101      	adds	r1, #1
 80023c4:	9101      	str	r1, [sp, #4]
 80023c6:	7a91      	ldrb	r1, [r2, #10]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3101      	adds	r1, #1
 80023cc:	9100      	str	r1, [sp, #0]
 80023ce:	4915      	ldr	r1, [pc, #84]	; (8002424 <find_result+0x234>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	585b      	ldr	r3, [r3, r1]
 80023d4:	4914      	ldr	r1, [pc, #80]	; (8002428 <find_result+0x238>)
 80023d6:	f002 fe97 	bl	8005108 <siprintf>
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 80023da:	2201      	movs	r2, #1
 80023dc:	0073      	lsls	r3, r6, #1
 80023de:	18e3      	adds	r3, r4, r3
 80023e0:	711a      	strb	r2, [r3, #4]
 80023e2:	1cb2      	adds	r2, r6, #2
		for(uint8_t i = 0 ; i < findC ; i++){
 80023e4:	3601      	adds	r6, #1
			pos[2 + i].x = 1, pos[2 + i].y = 2 + i;
 80023e6:	715a      	strb	r2, [r3, #5]
		for(uint8_t i = 0 ; i < findC ; i++){
 80023e8:	b2f6      	uxtb	r6, r6
 80023ea:	e7a9      	b.n	8002340 <find_result+0x150>
		for(uint8_t i = 0 ; i < findC ; i++) array[2 + i] = bf[i];
 80023ec:	c602      	stmia	r6!, {r1}
 80023ee:	311e      	adds	r1, #30
 80023f0:	e7bf      	b.n	8002372 <find_result+0x182>
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000a20 	.word	0x20000a20
 80023f8:	20000bd0 	.word	0x20000bd0
 80023fc:	20000a06 	.word	0x20000a06
 8002400:	20000da0 	.word	0x20000da0
 8002404:	20000d9f 	.word	0x20000d9f
 8002408:	20000da2 	.word	0x20000da2
 800240c:	20000a14 	.word	0x20000a14
 8002410:	20000a16 	.word	0x20000a16
 8002414:	080063b6 	.word	0x080063b6
 8002418:	080063c7 	.word	0x080063c7
 800241c:	08006227 	.word	0x08006227
 8002420:	080063e0 	.word	0x080063e0
 8002424:	20000038 	.word	0x20000038
 8002428:	080063d3 	.word	0x080063d3

0800242c <find_mode>:

void find_mode(void){
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 800242e:	4c2a      	ldr	r4, [pc, #168]	; (80024d8 <find_mode+0xac>)
void find_mode(void){
 8002430:	b08b      	sub	sp, #44	; 0x2c
	if(!firF){
 8002432:	7823      	ldrb	r3, [r4, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d12b      	bne.n	8002490 <find_mode+0x64>
		firF = 1;
		POS pos = {3, 4};
 8002438:	4928      	ldr	r1, [pc, #160]	; (80024dc <find_mode+0xb0>)
		firF = 1;
 800243a:	3301      	adds	r3, #1
		POS pos = {3, 4};
 800243c:	3110      	adds	r1, #16
 800243e:	2202      	movs	r2, #2
 8002440:	a803      	add	r0, sp, #12
		firF = 1;
 8002442:	7023      	strb	r3, [r4, #0]
		POS pos = {3, 4};
 8002444:	f002 fd1c 	bl	8004e80 <memcpy>
		char bf[20];
		sprintf(bf, find_name[0] > 0 ? find_name : "Input find name");
 8002448:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <find_mode+0xb4>)
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	780b      	ldrb	r3, [r1, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d100      	bne.n	8002454 <find_mode+0x28>
 8002452:	4924      	ldr	r1, [pc, #144]	; (80024e4 <find_mode+0xb8>)
 8002454:	ad05      	add	r5, sp, #20
 8002456:	0028      	movs	r0, r5
 8002458:	f002 fe56 	bl	8005108 <siprintf>
		char* array = { bf };
 800245c:	9504      	str	r5, [sp, #16]
		array_puts(&pos, "#Find", &array, 1, sizeof(pos) / 2);
 800245e:	2501      	movs	r5, #1
 8002460:	4921      	ldr	r1, [pc, #132]	; (80024e8 <find_mode+0xbc>)
 8002462:	002b      	movs	r3, r5
 8002464:	aa04      	add	r2, sp, #16
 8002466:	a803      	add	r0, sp, #12
 8002468:	9500      	str	r5, [sp, #0]
 800246a:	f7fe ff09 	bl	8001280 <array_puts>
		SSD1306_DrawRectangle(pos.x * 6 - 2, pos.y * 8 - 3, strlen("Input find name") * 6 + 3, 12, 1);
 800246e:	466b      	mov	r3, sp
 8002470:	7b59      	ldrb	r1, [r3, #13]
 8002472:	7b18      	ldrb	r0, [r3, #12]
 8002474:	2306      	movs	r3, #6
 8002476:	4358      	muls	r0, r3
 8002478:	00c9      	lsls	r1, r1, #3
 800247a:	3903      	subs	r1, #3
 800247c:	3802      	subs	r0, #2
 800247e:	225d      	movs	r2, #93	; 0x5d
 8002480:	b289      	uxth	r1, r1
 8002482:	b280      	uxth	r0, r0
 8002484:	18db      	adds	r3, r3, r3
 8002486:	9500      	str	r5, [sp, #0]
 8002488:	f7fe fc3d 	bl	8000d06 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 800248c:	f7fe fcd2 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	if(read_sw()){
 8002490:	f7fe ff82 	bl	8001398 <read_sw>
 8002494:	2800      	cmp	r0, #0
 8002496:	d00e      	beq.n	80024b6 <find_mode+0x8a>
		if(!screenState) { find_name = input_string("#input part name"); firF = 0; }
 8002498:	4e14      	ldr	r6, [pc, #80]	; (80024ec <find_mode+0xc0>)
 800249a:	4d11      	ldr	r5, [pc, #68]	; (80024e0 <find_mode+0xb4>)
 800249c:	7837      	ldrb	r7, [r6, #0]
 800249e:	2f00      	cmp	r7, #0
 80024a0:	d10b      	bne.n	80024ba <find_mode+0x8e>
 80024a2:	4813      	ldr	r0, [pc, #76]	; (80024f0 <find_mode+0xc4>)
 80024a4:	f7ff f87e 	bl	80015a4 <input_string>
 80024a8:	7027      	strb	r7, [r4, #0]
 80024aa:	6028      	str	r0, [r5, #0]
		else{
			{ ledM = 1; find_result(find_name); ledM = 0; }
			{ free(find_name); find_name = NULL; }
			init_value();
		}
		screenState = find_name[0] > 0;
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	1e5a      	subs	r2, r3, #1
 80024b2:	4193      	sbcs	r3, r2
 80024b4:	7033      	strb	r3, [r6, #0]
	}
}
 80024b6:	b00b      	add	sp, #44	; 0x2c
 80024b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ ledM = 1; find_result(find_name); ledM = 0; }
 80024ba:	2301      	movs	r3, #1
 80024bc:	2400      	movs	r4, #0
 80024be:	4f0d      	ldr	r7, [pc, #52]	; (80024f4 <find_mode+0xc8>)
 80024c0:	6828      	ldr	r0, [r5, #0]
 80024c2:	703b      	strb	r3, [r7, #0]
 80024c4:	f7ff fe94 	bl	80021f0 <find_result>
			{ free(find_name); find_name = NULL; }
 80024c8:	6828      	ldr	r0, [r5, #0]
			{ ledM = 1; find_result(find_name); ledM = 0; }
 80024ca:	703c      	strb	r4, [r7, #0]
			{ free(find_name); find_name = NULL; }
 80024cc:	f002 fcce 	bl	8004e6c <free>
 80024d0:	602c      	str	r4, [r5, #0]
			init_value();
 80024d2:	f7fe fe9d 	bl	8001210 <init_value>
 80024d6:	e7e9      	b.n	80024ac <find_mode+0x80>
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	080057e0 	.word	0x080057e0
 80024e0:	20000a08 	.word	0x20000a08
 80024e4:	080063ed 	.word	0x080063ed
 80024e8:	080063fd 	.word	0x080063fd
 80024ec:	20000d9e 	.word	0x20000d9e
 80024f0:	08006403 	.word	0x08006403
 80024f4:	20000a18 	.word	0x20000a18

080024f8 <partition_save>:

void partition_save(void){
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b08f      	sub	sp, #60	; 0x3c
	struct Part spart;
	memset(&spart, 0, sizeof(struct Part));
 80024fc:	ac06      	add	r4, sp, #24
 80024fe:	220c      	movs	r2, #12
 8002500:	2100      	movs	r1, #0
 8002502:	0020      	movs	r0, r4
 8002504:	f002 fcd8 	bl	8004eb8 <memset>
	ptionC = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	4a5f      	ldr	r2, [pc, #380]	; (8002688 <partition_save+0x190>)
 800250c:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <partition_save+0x194>)
 8002510:	785a      	ldrb	r2, [r3, #1]
 8002512:	9202      	str	r2, [sp, #8]
 8002514:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <partition_save+0x198>)
 8002516:	9902      	ldr	r1, [sp, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	428b      	cmp	r3, r1
 800251e:	d211      	bcs.n	8002544 <partition_save+0x4c>
		for(uint8_t j = min.x ; j <= max.x ; j++){
			if(pt[calxy(j, i)].cate != 0) spart = pt[calxy(j, i)];
			ptionC++;
		}
	if(spart.cate == 0) spart = ptfirst;
 8002520:	7923      	ldrb	r3, [r4, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <partition_save+0x34>
 8002526:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <partition_save+0x19c>)
 8002528:	cb23      	ldmia	r3!, {r0, r1, r5}
 800252a:	c423      	stmia	r4!, {r0, r1, r5}

	for(uint8_t i = min.y ; i <= max.y ; i++)
 800252c:	9b03      	ldr	r3, [sp, #12]
 800252e:	4293      	cmp	r3, r2
 8002530:	d22f      	bcs.n	8002592 <partition_save+0x9a>
				pt[calxy(j,  i)].temp.x = j;
				pt[calxy(j,  i)].temp.y = i;
			}
			pt[calxy(j,  i)].max *= ptionC;
		}
	while(!read_sw()){
 8002532:	f7fe ff31 	bl	8001398 <read_sw>
 8002536:	2800      	cmp	r0, #0
 8002538:	d065      	beq.n	8002606 <partition_save+0x10e>
				for(uint8_t j = min.x ; j <= max.x ; j++)
					led_color(calxy(j,  i), 0, 4, 0);
		else led_clear();
		led_update();
	}
	logShift(3);
 800253a:	2003      	movs	r0, #3
 800253c:	f7ff f906 	bl	800174c <logShift>
}
 8002540:	b00f      	add	sp, #60	; 0x3c
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002544:	4b51      	ldr	r3, [pc, #324]	; (800268c <partition_save+0x194>)
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002546:	2706      	movs	r7, #6
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002548:	7818      	ldrb	r0, [r3, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 800254a:	2305      	movs	r3, #5
 800254c:	9902      	ldr	r1, [sp, #8]
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	437b      	muls	r3, r7
 8002552:	b2db      	uxtb	r3, r3
 8002554:	9303      	str	r3, [sp, #12]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <partition_save+0x198>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4283      	cmp	r3, r0
 800255c:	d204      	bcs.n	8002568 <partition_save+0x70>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 800255e:	9902      	ldr	r1, [sp, #8]
 8002560:	3101      	adds	r1, #1
 8002562:	b2cb      	uxtb	r3, r1
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	e7d5      	b.n	8002514 <partition_save+0x1c>
			if(pt[calxy(j, i)].cate != 0) spart = pt[calxy(j, i)];
 8002568:	270c      	movs	r7, #12
 800256a:	9b03      	ldr	r3, [sp, #12]
 800256c:	494a      	ldr	r1, [pc, #296]	; (8002698 <partition_save+0x1a0>)
 800256e:	18c3      	adds	r3, r0, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	437b      	muls	r3, r7
 8002574:	18cb      	adds	r3, r1, r3
 8002576:	791f      	ldrb	r7, [r3, #4]
 8002578:	2f00      	cmp	r7, #0
 800257a:	d002      	beq.n	8002582 <partition_save+0x8a>
 800257c:	0027      	movs	r7, r4
 800257e:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002580:	c762      	stmia	r7!, {r1, r5, r6}
			ptionC++;
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <partition_save+0x190>)
 8002584:	4f40      	ldr	r7, [pc, #256]	; (8002688 <partition_save+0x190>)
 8002586:	781b      	ldrb	r3, [r3, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002588:	3001      	adds	r0, #1
			ptionC++;
 800258a:	3301      	adds	r3, #1
 800258c:	703b      	strb	r3, [r7, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800258e:	b2c0      	uxtb	r0, r0
 8002590:	e7e1      	b.n	8002556 <partition_save+0x5e>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002592:	2105      	movs	r1, #5
 8002594:	2006      	movs	r0, #6
 8002596:	1a89      	subs	r1, r1, r2
 8002598:	4341      	muls	r1, r0
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800259a:	4b3c      	ldr	r3, [pc, #240]	; (800268c <partition_save+0x194>)
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 800259c:	b2c9      	uxtb	r1, r1
		for(uint8_t j = min.x ; j <= max.x ; j++){
 800259e:	781b      	ldrb	r3, [r3, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80025a0:	9102      	str	r1, [sp, #8]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025a2:	493b      	ldr	r1, [pc, #236]	; (8002690 <partition_save+0x198>)
 80025a4:	7809      	ldrb	r1, [r1, #0]
 80025a6:	4299      	cmp	r1, r3
 80025a8:	d202      	bcs.n	80025b0 <partition_save+0xb8>
	for(uint8_t i = min.y ; i <= max.y ; i++)
 80025aa:	3201      	adds	r2, #1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	e7bd      	b.n	800252c <partition_save+0x34>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80025b0:	2505      	movs	r5, #5
			if(calxy(j, i) != calxy(spart.temp.x, spart.temp.y)){
 80025b2:	a806      	add	r0, sp, #24
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 80025b4:	7ac4      	ldrb	r4, [r0, #11]
 80025b6:	9902      	ldr	r1, [sp, #8]
 80025b8:	1b2c      	subs	r4, r5, r4
 80025ba:	3501      	adds	r5, #1
 80025bc:	436c      	muls	r4, r5
 80025be:	7a85      	ldrb	r5, [r0, #10]
 80025c0:	1859      	adds	r1, r3, r1
 80025c2:	1964      	adds	r4, r4, r5
 80025c4:	b2c9      	uxtb	r1, r1
			if(calxy(j, i) != calxy(spart.temp.x, spart.temp.y)){
 80025c6:	b2e4      	uxtb	r4, r4
 80025c8:	428c      	cmp	r4, r1
 80025ca:	d010      	beq.n	80025ee <partition_save+0xf6>
				pt[calxy(j,  i)] = spart;
 80025cc:	250c      	movs	r5, #12
 80025ce:	434d      	muls	r5, r1
 80025d0:	46ac      	mov	ip, r5
 80025d2:	4c31      	ldr	r4, [pc, #196]	; (8002698 <partition_save+0x1a0>)
 80025d4:	1965      	adds	r5, r4, r5
 80025d6:	c8d0      	ldmia	r0!, {r4, r6, r7}
 80025d8:	c5d0      	stmia	r5!, {r4, r6, r7}
				pt[calxy(j,  i)].pos = ++start_check;
 80025da:	4d30      	ldr	r5, [pc, #192]	; (800269c <partition_save+0x1a4>)
 80025dc:	4c2e      	ldr	r4, [pc, #184]	; (8002698 <partition_save+0x1a0>)
 80025de:	7828      	ldrb	r0, [r5, #0]
 80025e0:	4464      	add	r4, ip
 80025e2:	3001      	adds	r0, #1
 80025e4:	b2c0      	uxtb	r0, r0
 80025e6:	7028      	strb	r0, [r5, #0]
 80025e8:	7160      	strb	r0, [r4, #5]
				pt[calxy(j,  i)].temp.x = j;
 80025ea:	72a3      	strb	r3, [r4, #10]
				pt[calxy(j,  i)].temp.y = i;
 80025ec:	72e2      	strb	r2, [r4, #11]
			pt[calxy(j,  i)].max *= ptionC;
 80025ee:	200c      	movs	r0, #12
 80025f0:	4341      	muls	r1, r0
 80025f2:	4829      	ldr	r0, [pc, #164]	; (8002698 <partition_save+0x1a0>)
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025f4:	3301      	adds	r3, #1
			pt[calxy(j,  i)].max *= ptionC;
 80025f6:	1841      	adds	r1, r0, r1
 80025f8:	4823      	ldr	r0, [pc, #140]	; (8002688 <partition_save+0x190>)
 80025fa:	890c      	ldrh	r4, [r1, #8]
 80025fc:	7800      	ldrb	r0, [r0, #0]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 80025fe:	b2db      	uxtb	r3, r3
			pt[calxy(j,  i)].max *= ptionC;
 8002600:	4360      	muls	r0, r4
 8002602:	8108      	strh	r0, [r1, #8]
		for(uint8_t j = min.x ; j <= max.x ; j++){
 8002604:	e7cd      	b.n	80025a2 <partition_save+0xaa>
		POS pos = {0, 3};
 8002606:	2203      	movs	r2, #3
 8002608:	ab02      	add	r3, sp, #8
 800260a:	7218      	strb	r0, [r3, #8]
 800260c:	725a      	strb	r2, [r3, #9]
		sprintf(bf, "Total number:%d", ptionC);
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <partition_save+0x190>)
 8002610:	ac09      	add	r4, sp, #36	; 0x24
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	4922      	ldr	r1, [pc, #136]	; (80026a0 <partition_save+0x1a8>)
 8002616:	0020      	movs	r0, r4
 8002618:	f002 fd76 	bl	8005108 <siprintf>
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 800261c:	2301      	movs	r3, #1
 800261e:	aa05      	add	r2, sp, #20
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4920      	ldr	r1, [pc, #128]	; (80026a4 <partition_save+0x1ac>)
 8002624:	a804      	add	r0, sp, #16
		char* array = { bf };
 8002626:	9405      	str	r4, [sp, #20]
		array_puts(&pos, "#Partition", &array, 1, sizeof(pos) / 2);
 8002628:	f7fe fe2a 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 800262c:	f7fe fc02 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 8002630:	f7fe f8b8 	bl	80007a4 <led_clear>
		if(ledC < 500)
 8002634:	23fa      	movs	r3, #250	; 0xfa
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <partition_save+0x1b0>)
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d21f      	bcs.n	8002680 <partition_save+0x188>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 8002640:	4f12      	ldr	r7, [pc, #72]	; (800268c <partition_save+0x194>)
 8002642:	787c      	ldrb	r4, [r7, #1]
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <partition_save+0x198>)
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	42a3      	cmp	r3, r4
 800264a:	d202      	bcs.n	8002652 <partition_save+0x15a>
		led_update();
 800264c:	f7fe f880 	bl	8000750 <led_update>
 8002650:	e76f      	b.n	8002532 <partition_save+0x3a>
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 8002652:	2305      	movs	r3, #5
 8002654:	1b1e      	subs	r6, r3, r4
 8002656:	3301      	adds	r3, #1
 8002658:	435e      	muls	r6, r3
				for(uint8_t j = min.x ; j <= max.x ; j++)
 800265a:	783d      	ldrb	r5, [r7, #0]
__STATIC_INLINE uint8_t calxy(uint8_t x, uint8_t y) { return x + ((5 - y) * 6); };
 800265c:	b2f6      	uxtb	r6, r6
				for(uint8_t j = min.x ; j <= max.x ; j++)
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <partition_save+0x198>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	42ab      	cmp	r3, r5
 8002664:	d202      	bcs.n	800266c <partition_save+0x174>
			for(uint8_t i = min.y ; i <= max.y ; i++)
 8002666:	3401      	adds	r4, #1
 8002668:	b2e4      	uxtb	r4, r4
 800266a:	e7eb      	b.n	8002644 <partition_save+0x14c>
					led_color(calxy(j,  i), 0, 4, 0);
 800266c:	2300      	movs	r3, #0
 800266e:	19a8      	adds	r0, r5, r6
 8002670:	2204      	movs	r2, #4
 8002672:	0019      	movs	r1, r3
 8002674:	b2c0      	uxtb	r0, r0
				for(uint8_t j = min.x ; j <= max.x ; j++)
 8002676:	3501      	adds	r5, #1
					led_color(calxy(j,  i), 0, 4, 0);
 8002678:	f7fe f85e 	bl	8000738 <led_color>
				for(uint8_t j = min.x ; j <= max.x ; j++)
 800267c:	b2ed      	uxtb	r5, r5
 800267e:	e7ee      	b.n	800265e <partition_save+0x166>
		else led_clear();
 8002680:	f7fe f890 	bl	80007a4 <led_clear>
 8002684:	e7e2      	b.n	800264c <partition_save+0x154>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	20000d98 	.word	0x20000d98
 800268c:	20000a1c 	.word	0x20000a1c
 8002690:	20000a1a 	.word	0x20000a1a
 8002694:	20000d8c 	.word	0x20000d8c
 8002698:	20000a20 	.word	0x20000a20
 800269c:	20000da0 	.word	0x20000da0
 80026a0:	08006414 	.word	0x08006414
 80026a4:	08006424 	.word	0x08006424
 80026a8:	20000a16 	.word	0x20000a16

080026ac <partition_mode>:

void partition_mode(void){
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t screenState;
	if(!firF){
 80026ae:	4c70      	ldr	r4, [pc, #448]	; (8002870 <partition_mode+0x1c4>)
void partition_mode(void){
 80026b0:	b093      	sub	sp, #76	; 0x4c
	if(!firF){
 80026b2:	7823      	ldrb	r3, [r4, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d15d      	bne.n	8002774 <partition_mode+0xc8>
		firF = 1;
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 80026b8:	496e      	ldr	r1, [pc, #440]	; (8002874 <partition_mode+0x1c8>)
		firF = 1;
 80026ba:	3301      	adds	r3, #1
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 80026bc:	3112      	adds	r1, #18
 80026be:	2206      	movs	r2, #6
 80026c0:	a803      	add	r0, sp, #12
		firF = 1;
 80026c2:	7023      	strb	r3, [r4, #0]
		POS pos[3] = {{0, 1}, {0, 3}, {0, 4}};
 80026c4:	f002 fbdc 	bl	8004e80 <memcpy>
		char bf[2][20];
		sprintf(bf[0], !screenState ? "Start (%d,%d)" : "End (%d,%d)", temp.x + 1, temp.y + 1);
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <partition_mode+0x1cc>)
 80026ca:	496c      	ldr	r1, [pc, #432]	; (800287c <partition_mode+0x1d0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d000      	beq.n	80026d4 <partition_mode+0x28>
 80026d2:	496b      	ldr	r1, [pc, #428]	; (8002880 <partition_mode+0x1d4>)
 80026d4:	4a6b      	ldr	r2, [pc, #428]	; (8002884 <partition_mode+0x1d8>)
 80026d6:	a808      	add	r0, sp, #32
 80026d8:	7853      	ldrb	r3, [r2, #1]
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	3201      	adds	r2, #1
 80026e0:	f002 fd12 	bl	8005108 <siprintf>
		sprintf(bf[1], pt[curxy()].cate != 0 ? "%s(%s/%d/%d)" : "(NONE)", pt[curxy()].name, ptCate[pt[curxy()].cate - 1], pt[curxy()].temp.x + 1, pt[curxy()].temp.y + 1);
 80026e4:	f7fe fd88 	bl	80011f8 <curxy>
 80026e8:	230c      	movs	r3, #12
 80026ea:	4343      	muls	r3, r0
 80026ec:	4a66      	ldr	r2, [pc, #408]	; (8002888 <partition_mode+0x1dc>)
 80026ee:	4967      	ldr	r1, [pc, #412]	; (800288c <partition_mode+0x1e0>)
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	791b      	ldrb	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <partition_mode+0x4e>
 80026f8:	4965      	ldr	r1, [pc, #404]	; (8002890 <partition_mode+0x1e4>)
 80026fa:	250c      	movs	r5, #12
 80026fc:	4368      	muls	r0, r5
 80026fe:	1817      	adds	r7, r2, r0
 8002700:	7afe      	ldrb	r6, [r7, #11]
 8002702:	3b01      	subs	r3, #1
 8002704:	3601      	adds	r6, #1
 8002706:	9601      	str	r6, [sp, #4]
 8002708:	7abe      	ldrb	r6, [r7, #10]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3601      	adds	r6, #1
 800270e:	9600      	str	r6, [sp, #0]
 8002710:	4e60      	ldr	r6, [pc, #384]	; (8002894 <partition_mode+0x1e8>)
 8002712:	ad0d      	add	r5, sp, #52	; 0x34
 8002714:	5812      	ldr	r2, [r2, r0]
 8002716:	599b      	ldr	r3, [r3, r6]
 8002718:	0028      	movs	r0, r5
 800271a:	f002 fcf5 	bl	8005108 <siprintf>
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <partition_mode+0x1cc>)
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <partition_mode+0x1ec>)
 8002724:	2a00      	cmp	r2, #0
 8002726:	d000      	beq.n	800272a <partition_mode+0x7e>
 8002728:	4b5c      	ldr	r3, [pc, #368]	; (800289c <partition_mode+0x1f0>)
 800272a:	9305      	str	r3, [sp, #20]
 800272c:	ab08      	add	r3, sp, #32
 800272e:	9306      	str	r3, [sp, #24]
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002730:	2303      	movs	r3, #3
 8002732:	495b      	ldr	r1, [pc, #364]	; (80028a0 <partition_mode+0x1f4>)
 8002734:	aa05      	add	r2, sp, #20
 8002736:	a803      	add	r0, sp, #12
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	3b02      	subs	r3, #2
		char* array[3] = { !screenState ? "Select start point" : "Select end point", bf[0], bf[1] };
 800273c:	9507      	str	r5, [sp, #28]
		SSD1306_UpdateScreen();

		led_clear();
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800273e:	260c      	movs	r6, #12
		array_puts(pos, "#Partition", array, 1, sizeof(pos) / 2);
 8002740:	f7fe fd9e 	bl	8001280 <array_puts>
		led_clear();
 8002744:	2500      	movs	r5, #0
		SSD1306_UpdateScreen();
 8002746:	f7fe fb75 	bl	8000e34 <SSD1306_UpdateScreen>
		led_clear();
 800274a:	f7fe f82b 	bl	80007a4 <led_clear>
		for(uint8_t i = 0 ; i < 36 ; i++) led_display(&pt[i], i);
 800274e:	0030      	movs	r0, r6
 8002750:	4368      	muls	r0, r5
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <partition_mode+0x1dc>)
 8002754:	b2e9      	uxtb	r1, r5
 8002756:	18c0      	adds	r0, r0, r3
 8002758:	3501      	adds	r5, #1
 800275a:	f7fe fe3b 	bl	80013d4 <led_display>
 800275e:	2d24      	cmp	r5, #36	; 0x24
 8002760:	d1f5      	bne.n	800274e <partition_mode+0xa2>
		led_color(curxy(), 4, 4, 4);
 8002762:	f7fe fd49 	bl	80011f8 <curxy>
 8002766:	2304      	movs	r3, #4
 8002768:	001a      	movs	r2, r3
 800276a:	0019      	movs	r1, r3
 800276c:	f7fd ffe4 	bl	8000738 <led_color>
		led_update();
 8002770:	f7fd ffee 	bl	8000750 <led_update>
	}
	if(cnt > 150){
 8002774:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <partition_mode+0x1f8>)
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	2a96      	cmp	r2, #150	; 0x96
 800277a:	d927      	bls.n	80027cc <partition_mode+0x120>
		cnt = 0;
 800277c:	2200      	movs	r2, #0
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 800277e:	484a      	ldr	r0, [pc, #296]	; (80028a8 <partition_mode+0x1fc>)
		cnt = 0;
 8002780:	801a      	strh	r2, [r3, #0]
		if(JOY_U) temp.y = temp.y < 5 ? temp.y + 1 : temp.y;
 8002782:	8842      	ldrh	r2, [r0, #2]
 8002784:	4949      	ldr	r1, [pc, #292]	; (80028ac <partition_mode+0x200>)
 8002786:	428a      	cmp	r2, r1
 8002788:	d935      	bls.n	80027f6 <partition_mode+0x14a>
 800278a:	4d3e      	ldr	r5, [pc, #248]	; (8002884 <partition_mode+0x1d8>)
 800278c:	786b      	ldrb	r3, [r5, #1]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d801      	bhi.n	8002796 <partition_mode+0xea>
 8002792:	3301      	adds	r3, #1
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 8002794:	b2db      	uxtb	r3, r3
 8002796:	706b      	strb	r3, [r5, #1]
		if(JOY_L) temp.x = temp.x > 0 ? temp.x - 1 : temp.x;
 8002798:	8803      	ldrh	r3, [r0, #0]
 800279a:	2096      	movs	r0, #150	; 0x96
 800279c:	0040      	lsls	r0, r0, #1
 800279e:	4283      	cmp	r3, r0
 80027a0:	d233      	bcs.n	800280a <partition_mode+0x15e>
 80027a2:	4838      	ldr	r0, [pc, #224]	; (8002884 <partition_mode+0x1d8>)
 80027a4:	7801      	ldrb	r1, [r0, #0]
 80027a6:	2900      	cmp	r1, #0
 80027a8:	d001      	beq.n	80027ae <partition_mode+0x102>
 80027aa:	3901      	subs	r1, #1
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 80027ac:	b2c9      	uxtb	r1, r1
 80027ae:	7001      	strb	r1, [r0, #0]
		if(JOY_U || JOY_D || JOY_L || JOY_R) firF = 0;
 80027b0:	21c8      	movs	r1, #200	; 0xc8
 80027b2:	3a2d      	subs	r2, #45	; 0x2d
 80027b4:	3aff      	subs	r2, #255	; 0xff
 80027b6:	b292      	uxth	r2, r2
 80027b8:	0109      	lsls	r1, r1, #4
 80027ba:	428a      	cmp	r2, r1
 80027bc:	d804      	bhi.n	80027c8 <partition_mode+0x11c>
 80027be:	3b2d      	subs	r3, #45	; 0x2d
 80027c0:	3bff      	subs	r3, #255	; 0xff
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	428b      	cmp	r3, r1
 80027c6:	d901      	bls.n	80027cc <partition_mode+0x120>
 80027c8:	2300      	movs	r3, #0
 80027ca:	7023      	strb	r3, [r4, #0]
	}
	if(read_sw()){
 80027cc:	f7fe fde4 	bl	8001398 <read_sw>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d00e      	beq.n	80027f2 <partition_mode+0x146>
		if(!screenState) { ptionS = temp; firF = 0; }
 80027d4:	4d28      	ldr	r5, [pc, #160]	; (8002878 <partition_mode+0x1cc>)
 80027d6:	492b      	ldr	r1, [pc, #172]	; (8002884 <partition_mode+0x1d8>)
 80027d8:	782f      	ldrb	r7, [r5, #0]
 80027da:	4e35      	ldr	r6, [pc, #212]	; (80028b0 <partition_mode+0x204>)
 80027dc:	2f00      	cmp	r7, #0
 80027de:	d11c      	bne.n	800281a <partition_mode+0x16e>
 80027e0:	2202      	movs	r2, #2
 80027e2:	0030      	movs	r0, r6
 80027e4:	f002 fb4c 	bl	8004e80 <memcpy>
 80027e8:	7027      	strb	r7, [r4, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;

			{ ledM = 1; partition_save(); ledM = 0; }
			init_value();
		}
		screenState = !screenState;
 80027ea:	782b      	ldrb	r3, [r5, #0]
 80027ec:	425a      	negs	r2, r3
 80027ee:	4153      	adcs	r3, r2
 80027f0:	702b      	strb	r3, [r5, #0]
	}
}
 80027f2:	b013      	add	sp, #76	; 0x4c
 80027f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_D) temp.y = temp.y > 0 ? temp.y - 1 : temp.y;
 80027f6:	2396      	movs	r3, #150	; 0x96
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d2cc      	bcs.n	8002798 <partition_mode+0xec>
 80027fe:	4d21      	ldr	r5, [pc, #132]	; (8002884 <partition_mode+0x1d8>)
 8002800:	786b      	ldrb	r3, [r5, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0c7      	beq.n	8002796 <partition_mode+0xea>
 8002806:	3b01      	subs	r3, #1
 8002808:	e7c4      	b.n	8002794 <partition_mode+0xe8>
		if(JOY_R) temp.x = temp.x < 5 ? temp.x + 1 : temp.x;
 800280a:	428b      	cmp	r3, r1
 800280c:	d9d0      	bls.n	80027b0 <partition_mode+0x104>
 800280e:	481d      	ldr	r0, [pc, #116]	; (8002884 <partition_mode+0x1d8>)
 8002810:	7801      	ldrb	r1, [r0, #0]
 8002812:	2904      	cmp	r1, #4
 8002814:	d8cb      	bhi.n	80027ae <partition_mode+0x102>
 8002816:	3101      	adds	r1, #1
 8002818:	e7c8      	b.n	80027ac <partition_mode+0x100>
			ptionE = temp;
 800281a:	4c26      	ldr	r4, [pc, #152]	; (80028b4 <partition_mode+0x208>)
 800281c:	2202      	movs	r2, #2
 800281e:	0020      	movs	r0, r4
 8002820:	f002 fb2e 	bl	8004e80 <memcpy>
			min.x = ptionS.x > ptionE.x ? ptionE.x : ptionS.x;
 8002824:	7830      	ldrb	r0, [r6, #0]
 8002826:	7821      	ldrb	r1, [r4, #0]
 8002828:	1c03      	adds	r3, r0, #0
 800282a:	4288      	cmp	r0, r1
 800282c:	d900      	bls.n	8002830 <partition_mode+0x184>
 800282e:	1c0b      	adds	r3, r1, #0
 8002830:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <partition_mode+0x20c>)
 8002832:	7013      	strb	r3, [r2, #0]
			min.y = ptionS.y > ptionE.y ? ptionE.y : ptionS.y;
 8002834:	7872      	ldrb	r2, [r6, #1]
 8002836:	7863      	ldrb	r3, [r4, #1]
 8002838:	1c14      	adds	r4, r2, #0
 800283a:	429a      	cmp	r2, r3
 800283c:	d900      	bls.n	8002840 <partition_mode+0x194>
 800283e:	1c1c      	adds	r4, r3, #0
 8002840:	4e1d      	ldr	r6, [pc, #116]	; (80028b8 <partition_mode+0x20c>)
 8002842:	7074      	strb	r4, [r6, #1]
			max.x = ptionS.x > ptionE.x ? ptionS.x : ptionE.x;
 8002844:	4c1d      	ldr	r4, [pc, #116]	; (80028bc <partition_mode+0x210>)
 8002846:	1c06      	adds	r6, r0, #0
 8002848:	4288      	cmp	r0, r1
 800284a:	d200      	bcs.n	800284e <partition_mode+0x1a2>
 800284c:	1c0e      	adds	r6, r1, #0
 800284e:	7026      	strb	r6, [r4, #0]
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 8002850:	1c11      	adds	r1, r2, #0
 8002852:	429a      	cmp	r2, r3
 8002854:	d200      	bcs.n	8002858 <partition_mode+0x1ac>
 8002856:	1c19      	adds	r1, r3, #0
			{ ledM = 1; partition_save(); ledM = 0; }
 8002858:	2301      	movs	r3, #1
			max.y = ptionS.y > ptionE.y ? ptionS.y : ptionE.y;
 800285a:	7061      	strb	r1, [r4, #1]
			{ ledM = 1; partition_save(); ledM = 0; }
 800285c:	4c18      	ldr	r4, [pc, #96]	; (80028c0 <partition_mode+0x214>)
 800285e:	7023      	strb	r3, [r4, #0]
 8002860:	f7ff fe4a 	bl	80024f8 <partition_save>
 8002864:	2300      	movs	r3, #0
 8002866:	7023      	strb	r3, [r4, #0]
			init_value();
 8002868:	f7fe fcd2 	bl	8001210 <init_value>
 800286c:	e7bd      	b.n	80027ea <partition_mode+0x13e>
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	2000000c 	.word	0x2000000c
 8002874:	080057e0 	.word	0x080057e0
 8002878:	20000d9d 	.word	0x20000d9d
 800287c:	0800642f 	.word	0x0800642f
 8002880:	0800643d 	.word	0x0800643d
 8002884:	20000da2 	.word	0x20000da2
 8002888:	20000a20 	.word	0x20000a20
 800288c:	08006449 	.word	0x08006449
 8002890:	08006309 	.word	0x08006309
 8002894:	20000038 	.word	0x20000038
 8002898:	08006456 	.word	0x08006456
 800289c:	08006469 	.word	0x08006469
 80028a0:	08006424 	.word	0x08006424
 80028a4:	20000a04 	.word	0x20000a04
 80028a8:	200009fa 	.word	0x200009fa
 80028ac:	00000dac 	.word	0x00000dac
 80028b0:	20000d9b 	.word	0x20000d9b
 80028b4:	20000d99 	.word	0x20000d99
 80028b8:	20000a1c 	.word	0x20000a1c
 80028bc:	20000a1a 	.word	0x20000a1a
 80028c0:	20000a18 	.word	0x20000a18

080028c4 <log_detail>:

void log_detail(uint8_t i){
 80028c4:	b510      	push	{r4, lr}
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 80028c6:	4912      	ldr	r1, [pc, #72]	; (8002910 <log_detail+0x4c>)
void log_detail(uint8_t i){
 80028c8:	b088      	sub	sp, #32
 80028ca:	0004      	movs	r4, r0
	POS pos[3] = {{0, 2}, {0, 4}, {0, 5}};
 80028cc:	2206      	movs	r2, #6
 80028ce:	3118      	adds	r1, #24
 80028d0:	a803      	add	r0, sp, #12
 80028d2:	f002 fad5 	bl	8004e80 <memcpy>
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80028d6:	204a      	movs	r0, #74	; 0x4a
 80028d8:	4360      	muls	r0, r4
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <log_detail+0x50>)
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <log_detail+0x54>)
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80028de:	18c2      	adds	r2, r0, r3
 80028e0:	9205      	str	r2, [sp, #20]
 80028e2:	0002      	movs	r2, r0
 80028e4:	3034      	adds	r0, #52	; 0x34
 80028e6:	321e      	adds	r2, #30
 80028e8:	18d2      	adds	r2, r2, r3
 80028ea:	18c0      	adds	r0, r0, r3
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80028ec:	2303      	movs	r3, #3
	char* array[3] = { ptLog[i].title, ptLog[i].content1, ptLog[i].content2 };
 80028ee:	9206      	str	r2, [sp, #24]
 80028f0:	9007      	str	r0, [sp, #28]
	array_puts(pos, "#Log detail", array, 1, sizeof(pos) / 2);
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	aa05      	add	r2, sp, #20
 80028f6:	3b02      	subs	r3, #2
 80028f8:	a803      	add	r0, sp, #12
 80028fa:	f7fe fcc1 	bl	8001280 <array_puts>
	SSD1306_UpdateScreen();
 80028fe:	f7fe fa99 	bl	8000e34 <SSD1306_UpdateScreen>
	while(!read_sw());
 8002902:	f7fe fd49 	bl	8001398 <read_sw>
 8002906:	2800      	cmp	r0, #0
 8002908:	d0fb      	beq.n	8002902 <log_detail+0x3e>
}
 800290a:	b008      	add	sp, #32
 800290c:	bd10      	pop	{r4, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	080057e0 	.word	0x080057e0
 8002914:	20000bd0 	.word	0x20000bd0
 8002918:	0800647a 	.word	0x0800647a

0800291c <log_mode>:

void log_mode(void){
 800291c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t log_num;
	if(!firF){
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <log_mode+0xec>)
 8002920:	4e3a      	ldr	r6, [pc, #232]	; (8002a0c <log_mode+0xf0>)
 8002922:	781d      	ldrb	r5, [r3, #0]
void log_mode(void){
 8002924:	b0bb      	sub	sp, #236	; 0xec
	if(!firF){
 8002926:	2d00      	cmp	r5, #0
 8002928:	d13c      	bne.n	80029a4 <log_mode+0x88>
		firF = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <log_mode+0xec>)
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 800292e:	ac02      	add	r4, sp, #8
		firF = 1;
 8002930:	7013      	strb	r3, [r2, #0]
		POS pos[7] = {{0, 2 + sel}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}};
 8002932:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <log_mode+0xf4>)
 8002934:	70a3      	strb	r3, [r4, #2]
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	7123      	strb	r3, [r4, #4]
 800293a:	3202      	adds	r2, #2
 800293c:	7062      	strb	r2, [r4, #1]
 800293e:	2202      	movs	r2, #2
 8002940:	70e2      	strb	r2, [r4, #3]
 8002942:	18d2      	adds	r2, r2, r3
 8002944:	7162      	strb	r2, [r4, #5]
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	71e2      	strb	r2, [r4, #7]
 800294a:	18d2      	adds	r2, r2, r3
 800294c:	71a3      	strb	r3, [r4, #6]
 800294e:	7223      	strb	r3, [r4, #8]
 8002950:	7262      	strb	r2, [r4, #9]
 8002952:	72a3      	strb	r3, [r4, #10]
 8002954:	18d2      	adds	r2, r2, r3
 8002956:	7323      	strb	r3, [r4, #12]
 8002958:	4f2e      	ldr	r7, [pc, #184]	; (8002a14 <log_mode+0xf8>)
 800295a:	3306      	adds	r3, #6
 800295c:	7025      	strb	r5, [r4, #0]
 800295e:	72e2      	strb	r2, [r4, #11]
 8002960:	7363      	strb	r3, [r4, #13]
		char bf[6][30];
		log_num = 0;
 8002962:	7035      	strb	r5, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
			if(!strlen(ptLog[i].title)) break;
 8002964:	783b      	ldrb	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d13e      	bne.n	80029e8 <log_mode+0xcc>
			sprintf(bf[i], "%s", ptLog[i].title);
			log_num++;
		}
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <log_mode+0xfc>)
		array_puts(pos, "#Log", array, 1, log_num + 1);
 800296c:	0020      	movs	r0, r4
		char* array[7] = { ">", bf[0], bf[1], bf[2], bf[3], bf[4], bf[5] };
 800296e:	9306      	str	r3, [sp, #24]
 8002970:	ab0d      	add	r3, sp, #52	; 0x34
 8002972:	9307      	str	r3, [sp, #28]
 8002974:	2352      	movs	r3, #82	; 0x52
 8002976:	446b      	add	r3, sp
 8002978:	9308      	str	r3, [sp, #32]
 800297a:	ab1c      	add	r3, sp, #112	; 0x70
 800297c:	9309      	str	r3, [sp, #36]	; 0x24
 800297e:	238e      	movs	r3, #142	; 0x8e
 8002980:	446b      	add	r3, sp
 8002982:	930a      	str	r3, [sp, #40]	; 0x28
 8002984:	ab2b      	add	r3, sp, #172	; 0xac
 8002986:	930b      	str	r3, [sp, #44]	; 0x2c
 8002988:	23ca      	movs	r3, #202	; 0xca
 800298a:	446b      	add	r3, sp
 800298c:	930c      	str	r3, [sp, #48]	; 0x30
		array_puts(pos, "#Log", array, 1, log_num + 1);
 800298e:	7833      	ldrb	r3, [r6, #0]
 8002990:	4922      	ldr	r1, [pc, #136]	; (8002a1c <log_mode+0x100>)
 8002992:	3301      	adds	r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	aa06      	add	r2, sp, #24
 800299a:	2301      	movs	r3, #1
 800299c:	f7fe fc70 	bl	8001280 <array_puts>
		SSD1306_UpdateScreen();
 80029a0:	f7fe fa48 	bl	8000e34 <SSD1306_UpdateScreen>
	}
	get_adc();
 80029a4:	f7fe fc96 	bl	80012d4 <get_adc>
	get_sel(&sel, log_num - 1, 0, 2);
 80029a8:	7831      	ldrb	r1, [r6, #0]
 80029aa:	2302      	movs	r3, #2
 80029ac:	3901      	subs	r1, #1
 80029ae:	2200      	movs	r2, #0
 80029b0:	4817      	ldr	r0, [pc, #92]	; (8002a10 <log_mode+0xf4>)
 80029b2:	b2c9      	uxtb	r1, r1
 80029b4:	f7fe fcba 	bl	800132c <get_sel>
	if(joy_result != basic) { if(joy_result == left) init_value(); joy_result = basic; firF = 0; }
 80029b8:	4c19      	ldr	r4, [pc, #100]	; (8002a20 <log_mode+0x104>)
 80029ba:	7823      	ldrb	r3, [r4, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <log_mode+0xb4>
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <log_mode+0xac>
 80029c4:	f7fe fc24 	bl	8001210 <init_value>
 80029c8:	2300      	movs	r3, #0
 80029ca:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <log_mode+0xec>)
 80029cc:	7023      	strb	r3, [r4, #0]
 80029ce:	7013      	strb	r3, [r2, #0]
	if(read_sw()) { log_detail(sel); init_value(); }
 80029d0:	f7fe fce2 	bl	8001398 <read_sw>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d005      	beq.n	80029e4 <log_mode+0xc8>
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <log_mode+0xf4>)
 80029da:	7818      	ldrb	r0, [r3, #0]
 80029dc:	f7ff ff72 	bl	80028c4 <log_detail>
 80029e0:	f7fe fc16 	bl	8001210 <init_value>
}
 80029e4:	b03b      	add	sp, #236	; 0xec
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(bf[i], "%s", ptLog[i].title);
 80029e8:	201e      	movs	r0, #30
 80029ea:	4368      	muls	r0, r5
 80029ec:	ab0d      	add	r3, sp, #52	; 0x34
 80029ee:	0039      	movs	r1, r7
 80029f0:	1818      	adds	r0, r3, r0
 80029f2:	f002 fba9 	bl	8005148 <strcpy>
			log_num++;
 80029f6:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 80029f8:	3501      	adds	r5, #1
			log_num++;
 80029fa:	3301      	adds	r3, #1
 80029fc:	7033      	strb	r3, [r6, #0]
		for(uint8_t i = 0 ; i < 6 ; i++){
 80029fe:	374a      	adds	r7, #74	; 0x4a
 8002a00:	2d06      	cmp	r5, #6
 8002a02:	d1af      	bne.n	8002964 <log_mode+0x48>
 8002a04:	e7b1      	b.n	800296a <log_mode+0x4e>
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	2000000c 	.word	0x2000000c
 8002a0c:	20000a19 	.word	0x20000a19
 8002a10:	20000d9f 	.word	0x20000d9f
 8002a14:	20000bd0 	.word	0x20000bd0
 8002a18:	08006227 	.word	0x08006227
 8002a1c:	08006486 	.word	0x08006486
 8002a20:	20000a14 	.word	0x20000a14

08002a24 <PSDrawers_Initialized>:


/* Tasks */

void PSDrawers_Initialized(void)
{
 8002a24:	b510      	push	{r4, lr}
	SSD1306_Init();
 8002a26:	f7fe fa2f 	bl	8000e88 <SSD1306_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <PSDrawers_Initialized+0x20>)
 8002a2c:	f002 f858 	bl	8004ae0 <HAL_TIM_Base_Start_IT>

	/* Write user code here */
	if(start()) time_settting();
 8002a30:	f7fe ff46 	bl	80018c0 <start>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d001      	beq.n	8002a3c <PSDrawers_Initialized+0x18>
 8002a38:	f7fe ffa0 	bl	800197c <time_settting>
	init_value();
 8002a3c:	f7fe fbe8 	bl	8001210 <init_value>
}
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200005ac 	.word	0x200005ac

08002a48 <PSDrawers_Main>:

void PSDrawers_Main(void)
{
 8002a48:	b510      	push	{r4, lr}
	while(1)
	{
		/* Write user code here */
		play_task[ModeF]();
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <PSDrawers_Main+0x10>)
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <PSDrawers_Main+0x14>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	589b      	ldr	r3, [r3, r2]
 8002a54:	4798      	blx	r3
	while(1)
 8002a56:	e7f8      	b.n	8002a4a <PSDrawers_Main+0x2>
 8002a58:	200009f8 	.word	0x200009f8
 8002a5c:	20000020 	.word	0x20000020

08002a60 <HAL_TIM_PeriodElapsedCallback>:

/* Callbacks */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	6802      	ldr	r2, [r0, #0]
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM2)
 8002a66:	05db      	lsls	r3, r3, #23
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d14a      	bne.n	8002b02 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_ADC_Start(&hadc);
 8002a6c:	4c2d      	ldr	r4, [pc, #180]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a6e:	0020      	movs	r0, r4
 8002a70:	f000 fa7e 	bl	8002f70 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002a74:	210a      	movs	r1, #10
 8002a76:	0020      	movs	r0, r4
 8002a78:	f000 fac4 	bl	8003004 <HAL_ADC_PollForConversion>
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f000 fb25 	bl	80030cc <HAL_ADC_GetValue>
 8002a82:	4d29      	ldr	r5, [pc, #164]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0xc8>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8002a84:	210a      	movs	r1, #10
		adcV[0] = HAL_ADC_GetValue(&hadc);
 8002a86:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8002a88:	0020      	movs	r0, r4
 8002a8a:	f000 fabb 	bl	8003004 <HAL_ADC_PollForConversion>
		adcV[1] = HAL_ADC_GetValue(&hadc);
 8002a8e:	0020      	movs	r0, r4
 8002a90:	f000 fb1c 	bl	80030cc <HAL_ADC_GetValue>
 8002a94:	8068      	strh	r0, [r5, #2]
		HAL_ADC_Stop(&hadc);
 8002a96:	0020      	movs	r0, r4
 8002a98:	f000 fa96 	bl	8002fc8 <HAL_ADC_Stop>
		cnt++;
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
		if(buzM) buzC++;
 8002a9e:	4d24      	ldr	r5, [pc, #144]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		cnt++;
 8002aa0:	8813      	ldrh	r3, [r2, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	8013      	strh	r3, [r2, #0]
		if(buzM) buzC++;
 8002aa6:	782a      	ldrb	r2, [r5, #0]
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x86>
 8002aac:	4c21      	ldr	r4, [pc, #132]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002aae:	8823      	ldrh	r3, [r4, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8023      	strh	r3, [r4, #0]
		if(buzM == 1){
 8002ab6:	2a01      	cmp	r2, #1
 8002ab8:	d109      	bne.n	8002ace <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(buzC < 500) BUZ(1);
 8002aba:	21fa      	movs	r1, #250	; 0xfa
 8002abc:	0049      	lsls	r1, r1, #1
 8002abe:	428b      	cmp	r3, r1
 8002ac0:	d220      	bcs.n	8002b04 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002ac2:	39ed      	subs	r1, #237	; 0xed
 8002ac4:	39ff      	subs	r1, #255	; 0xff
			else { buzM = buzC = 0; BUZ(0); }
 8002ac6:	20a0      	movs	r0, #160	; 0xa0
 8002ac8:	05c0      	lsls	r0, r0, #23
 8002aca:	f000 fe19 	bl	8003700 <HAL_GPIO_WritePin>
		}
		if(buzM == 2){
 8002ace:	782b      	ldrb	r3, [r5, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x86>
			if(buzC < 25) BUZ(1);
 8002ad4:	8823      	ldrh	r3, [r4, #0]
 8002ad6:	2b18      	cmp	r3, #24
 8002ad8:	d819      	bhi.n	8002b0e <HAL_TIM_PeriodElapsedCallback+0xae>
 8002ada:	2201      	movs	r2, #1
			else if(buzC < 50) BUZ(0);
			else if(buzC < 75) BUZ(1);
			else { buzM = buzC = 0; BUZ(0); }
 8002adc:	20a0      	movs	r0, #160	; 0xa0
 8002ade:	2108      	movs	r1, #8
 8002ae0:	05c0      	lsls	r0, r0, #23
 8002ae2:	f000 fe0d 	bl	8003700 <HAL_GPIO_WritePin>
		}
		if(ledM) ledC = ledC < 1000 ? ledC + 1 : 0;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002af0:	20fa      	movs	r0, #250	; 0xfa
 8002af2:	8813      	ldrh	r3, [r2, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	0080      	lsls	r0, r0, #2
 8002af8:	4283      	cmp	r3, r0
 8002afa:	d201      	bcs.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002afc:	3301      	adds	r3, #1
 8002afe:	b299      	uxth	r1, r3
 8002b00:	8011      	strh	r1, [r2, #0]
		else ledC = 0;
	}
}
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
			else { buzM = buzC = 0; BUZ(0); }
 8002b04:	2200      	movs	r2, #0
 8002b06:	2108      	movs	r1, #8
 8002b08:	8022      	strh	r2, [r4, #0]
 8002b0a:	702a      	strb	r2, [r5, #0]
 8002b0c:	e7db      	b.n	8002ac6 <HAL_TIM_PeriodElapsedCallback+0x66>
			else if(buzC < 50) BUZ(0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2b31      	cmp	r3, #49	; 0x31
 8002b12:	d9e3      	bls.n	8002adc <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(buzC < 75) BUZ(1);
 8002b14:	2b4a      	cmp	r3, #74	; 0x4a
 8002b16:	d9e0      	bls.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x7a>
			else { buzM = buzC = 0; BUZ(0); }
 8002b18:	2200      	movs	r2, #0
 8002b1a:	8022      	strh	r2, [r4, #0]
 8002b1c:	702a      	strb	r2, [r5, #0]
 8002b1e:	e7dd      	b.n	8002adc <HAL_TIM_PeriodElapsedCallback+0x7c>
		else ledC = 0;
 8002b20:	8013      	strh	r3, [r2, #0]
}
 8002b22:	e7ee      	b.n	8002b02 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002b24:	20000464 	.word	0x20000464
 8002b28:	200009fa 	.word	0x200009fa
 8002b2c:	20000a04 	.word	0x20000a04
 8002b30:	20000a00 	.word	0x20000a00
 8002b34:	200009fe 	.word	0x200009fe
 8002b38:	20000a18 	.word	0x20000a18
 8002b3c:	20000a16 	.word	0x20000a16

08002b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002b42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490e      	ldr	r1, [pc, #56]	; (8002b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b6a:	f7fe fb43 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6e:	f002 f959 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b72:	f7fd fe8b 	bl	800088c <main>

08002b76 <LoopForever>:

LoopForever:
    b LoopForever
 8002b76:	e7fe      	b.n	8002b76 <LoopForever>
   ldr   r0, =_estack
 8002b78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002b84:	08006544 	.word	0x08006544
  ldr r2, =_sbss
 8002b88:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8002b8c:	20000dd4 	.word	0x20000dd4

08002b90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC1_COMP_IRQHandler>
	...

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b98:	20fa      	movs	r0, #250	; 0xfa
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_InitTick+0x3c>)
 8002b9c:	0080      	lsls	r0, r0, #2
 8002b9e:	7819      	ldrb	r1, [r3, #0]
 8002ba0:	f7fd fad0 	bl	8000144 <__udivsi3>
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_InitTick+0x40>)
 8002ba6:	0001      	movs	r1, r0
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	f7fd facb 	bl	8000144 <__udivsi3>
 8002bae:	f000 fb1b 	bl	80031e8 <HAL_SYSTICK_Config>
 8002bb2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb6:	2c00      	cmp	r4, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bba:	2d03      	cmp	r5, #3
 8002bbc:	d807      	bhi.n	8002bce <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbe:	3802      	subs	r0, #2
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	0029      	movs	r1, r5
 8002bc4:	f000 fada 	bl	800317c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	0020      	movs	r0, r4
 8002bca:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_InitTick+0x44>)
 8002bcc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	20000078 	.word	0x20000078
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	2000007c 	.word	0x2000007c

08002bdc <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002bdc:	2340      	movs	r3, #64	; 0x40
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_Init+0x24>)
{
 8002be0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002be2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be4:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bea:	f7ff ffd3 	bl	8002b94 <HAL_InitTick>
 8002bee:	1e04      	subs	r4, r0, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_Init+0x1e>
    HAL_MspInit();
 8002bf2:	f7fe fa0f 	bl	8001014 <HAL_MspInit>
}
 8002bf6:	0020      	movs	r0, r4
 8002bf8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002bfa:	2401      	movs	r4, #1
 8002bfc:	e7fb      	b.n	8002bf6 <HAL_Init+0x1a>
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40022000 	.word	0x40022000

08002c04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_IncTick+0x10>)
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <HAL_IncTick+0x14>)
 8002c08:	6811      	ldr	r1, [r2, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	185b      	adds	r3, r3, r1
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	4770      	bx	lr
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000da8 	.word	0x20000da8
 8002c18:	20000078 	.word	0x20000078

08002c1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c1c:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <HAL_GetTick+0x8>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
}
 8002c20:	4770      	bx	lr
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	20000da8 	.word	0x20000da8

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff fff6 	bl	8002c1c <HAL_GetTick>
 8002c30:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	1c63      	adds	r3, r4, #1
 8002c34:	d002      	beq.n	8002c3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_Delay+0x20>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3c:	f7ff ffee 	bl	8002c1c <HAL_GetTick>
 8002c40:	1b40      	subs	r0, r0, r5
 8002c42:	42a0      	cmp	r0, r4
 8002c44:	d3fa      	bcc.n	8002c3c <HAL_Delay+0x14>
  {
  }
}
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	20000078 	.word	0x20000078

08002c4c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <ADC_DelayMicroSecond+0x24>)
{
 8002c4e:	b513      	push	{r0, r1, r4, lr}
 8002c50:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <ADC_DelayMicroSecond+0x28>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	f7fd fa75 	bl	8000144 <__udivsi3>
 8002c5a:	4344      	muls	r4, r0
 8002c5c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d100      	bne.n	8002c66 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002c64:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002c66:	9b01      	ldr	r3, [sp, #4]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	e7f7      	b.n	8002c5e <ADC_DelayMicroSecond+0x12>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000008 	.word	0x20000008
 8002c74:	000f4240 	.word	0x000f4240

08002c78 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c78:	2103      	movs	r1, #3
 8002c7a:	6803      	ldr	r3, [r0, #0]
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c80:	6898      	ldr	r0, [r3, #8]
 8002c82:	4008      	ands	r0, r1
 8002c84:	2801      	cmp	r0, #1
 8002c86:	d001      	beq.n	8002c8c <ADC_Disable+0x14>
  return HAL_OK;
 8002c88:	2000      	movs	r0, #0
}
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4202      	tst	r2, r0
 8002c90:	d0fa      	beq.n	8002c88 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c92:	2205      	movs	r2, #5
 8002c94:	689d      	ldr	r5, [r3, #8]
 8002c96:	4015      	ands	r5, r2
 8002c98:	2d01      	cmp	r5, #1
 8002c9a:	d11d      	bne.n	8002cd8 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8002c9c:	6898      	ldr	r0, [r3, #8]
 8002c9e:	3a03      	subs	r2, #3
 8002ca0:	4302      	orrs	r2, r0
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002ca6:	f7ff ffb9 	bl	8002c1c <HAL_GetTick>
 8002caa:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	422b      	tst	r3, r5
 8002cb2:	d0e9      	beq.n	8002c88 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb4:	f7ff ffb2 	bl	8002c1c <HAL_GetTick>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	280a      	cmp	r0, #10
 8002cbc:	d9f6      	bls.n	8002cac <ADC_Disable+0x34>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	422b      	tst	r3, r5
 8002cc4:	d0f2      	beq.n	8002cac <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002cca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cd2:	431d      	orrs	r5, r3
 8002cd4:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002cd6:	e7d8      	b.n	8002c8a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ce2:	4303      	orrs	r3, r0
 8002ce4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002ce6:	e7d0      	b.n	8002c8a <ADC_Disable+0x12>

08002ce8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ce8:	2103      	movs	r1, #3
 8002cea:	6803      	ldr	r3, [r0, #0]
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cee:	689a      	ldr	r2, [r3, #8]
{
 8002cf0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	2a01      	cmp	r2, #1
 8002cf6:	d104      	bne.n	8002d02 <ADC_Enable+0x1a>
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	4211      	tst	r1, r2
 8002cfc:	d001      	beq.n	8002d02 <ADC_Enable+0x1a>
  return HAL_OK;
 8002cfe:	2000      	movs	r0, #0
}
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <ADC_Enable+0x74>)
 8002d06:	4211      	tst	r1, r2
 8002d08:	d008      	beq.n	8002d1c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d10:	4313      	orrs	r3, r2
 8002d12:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d16:	4303      	orrs	r3, r0
 8002d18:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002d1a:	e7f1      	b.n	8002d00 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8002d1c:	2501      	movs	r5, #1
 8002d1e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002d20:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8002d22:	432a      	orrs	r2, r5
 8002d24:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002d26:	f7ff ff91 	bl	8002c4c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002d2a:	f7ff ff77 	bl	8002c1c <HAL_GetTick>
 8002d2e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	422b      	tst	r3, r5
 8002d36:	d1e2      	bne.n	8002cfe <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d38:	f7ff ff70 	bl	8002c1c <HAL_GetTick>
 8002d3c:	1b80      	subs	r0, r0, r6
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	d9f6      	bls.n	8002d30 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	422b      	tst	r3, r5
 8002d48:	d1f2      	bne.n	8002d30 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	4313      	orrs	r3, r2
 8002d52:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d56:	431d      	orrs	r5, r3
 8002d58:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002d5a:	e7d1      	b.n	8002d00 <ADC_Enable+0x18>
 8002d5c:	80000017 	.word	0x80000017

08002d60 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002d60:	2204      	movs	r2, #4
 8002d62:	6803      	ldr	r3, [r0, #0]
{
 8002d64:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002d66:	6899      	ldr	r1, [r3, #8]
{
 8002d68:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002d6a:	4211      	tst	r1, r2
 8002d6c:	d101      	bne.n	8002d72 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8002d6e:	2000      	movs	r0, #0
}
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	4211      	tst	r1, r2
 8002d76:	d006      	beq.n	8002d86 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002d78:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d7a:	0792      	lsls	r2, r2, #30
 8002d7c:	d403      	bmi.n	8002d86 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002d7e:	2210      	movs	r2, #16
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d86:	f7ff ff49 	bl	8002c1c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d8a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8002d8c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4233      	tst	r3, r6
 8002d94:	d0eb      	beq.n	8002d6e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d96:	f7ff ff41 	bl	8002c1c <HAL_GetTick>
 8002d9a:	1b40      	subs	r0, r0, r5
 8002d9c:	280a      	cmp	r0, #10
 8002d9e:	d9f6      	bls.n	8002d8e <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4233      	tst	r3, r6
 8002da6:	d0f2      	beq.n	8002d8e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dae:	4313      	orrs	r3, r2
 8002db0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002db4:	4303      	orrs	r3, r0
 8002db6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002db8:	e7da      	b.n	8002d70 <ADC_ConversionStop+0x10>
	...

08002dbc <HAL_ADC_Init>:
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002dc2:	2c00      	cmp	r4, #0
 8002dc4:	d01b      	beq.n	8002dfe <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002dcc:	0022      	movs	r2, r4
 8002dce:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002dd2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002dd4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002dd6:	f7fe f92b 	bl	8001030 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002dda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ddc:	06db      	lsls	r3, r3, #27
 8002dde:	d406      	bmi.n	8002dee <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	2204      	movs	r2, #4
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	0008      	movs	r0, r1
 8002de8:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002dea:	4211      	tst	r1, r2
 8002dec:	d008      	beq.n	8002e00 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	2310      	movs	r3, #16
 8002df0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002df2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	4313      	orrs	r3, r2
 8002df6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	3450      	adds	r4, #80	; 0x50
 8002dfc:	7023      	strb	r3, [r4, #0]
}
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002e00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e02:	4955      	ldr	r1, [pc, #340]	; (8002f58 <HAL_ADC_Init+0x19c>)
 8002e04:	4011      	ands	r1, r2
 8002e06:	2202      	movs	r2, #2
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	4011      	ands	r1, r2
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_ADC_Init+0x1a0>)
 8002e14:	2901      	cmp	r1, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_ADC_Init+0x62>
 8002e18:	681d      	ldr	r5, [r3, #0]
 8002e1a:	420d      	tst	r5, r1
 8002e1c:	d119      	bne.n	8002e52 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002e1e:	2680      	movs	r6, #128	; 0x80
 8002e20:	6861      	ldr	r1, [r4, #4]
 8002e22:	05f6      	lsls	r6, r6, #23
 8002e24:	004d      	lsls	r5, r1, #1
 8002e26:	086d      	lsrs	r5, r5, #1
 8002e28:	42b5      	cmp	r5, r6
 8002e2a:	d003      	beq.n	8002e34 <HAL_ADC_Init+0x78>
 8002e2c:	2580      	movs	r5, #128	; 0x80
 8002e2e:	062d      	lsls	r5, r5, #24
 8002e30:	42a9      	cmp	r1, r5
 8002e32:	d176      	bne.n	8002f22 <HAL_ADC_Init+0x166>
 8002e34:	691d      	ldr	r5, [r3, #16]
 8002e36:	00ad      	lsls	r5, r5, #2
 8002e38:	08ad      	lsrs	r5, r5, #2
 8002e3a:	611d      	str	r5, [r3, #16]
 8002e3c:	691d      	ldr	r5, [r3, #16]
 8002e3e:	4329      	orrs	r1, r5
 8002e40:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002e42:	2518      	movs	r5, #24
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	43a9      	bics	r1, r5
 8002e48:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002e4a:	68d9      	ldr	r1, [r3, #12]
 8002e4c:	68a5      	ldr	r5, [r4, #8]
 8002e4e:	4329      	orrs	r1, r5
 8002e50:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	4d42      	ldr	r5, [pc, #264]	; (8002f60 <HAL_ADC_Init+0x1a4>)
 8002e56:	4029      	ands	r1, r5
 8002e58:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5c:	6815      	ldr	r5, [r2, #0]
 8002e5e:	0649      	lsls	r1, r1, #25
 8002e60:	4329      	orrs	r1, r5
 8002e62:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	0552      	lsls	r2, r2, #21
 8002e6a:	4211      	tst	r1, r2
 8002e6c:	d102      	bne.n	8002e74 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	493b      	ldr	r1, [pc, #236]	; (8002f64 <HAL_ADC_Init+0x1a8>)
 8002e78:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002e7a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002e7c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e7e:	68dd      	ldr	r5, [r3, #12]
 8002e80:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002e82:	2902      	cmp	r1, #2
 8002e84:	d100      	bne.n	8002e88 <HAL_ADC_Init+0xcc>
 8002e86:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e88:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e8a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e8c:	4332      	orrs	r2, r6
 8002e8e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002e90:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e92:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002e94:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e96:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002e98:	69e5      	ldr	r5, [r4, #28]
 8002e9a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e9c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e9e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ea0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002ea2:	0025      	movs	r5, r4
 8002ea4:	352c      	adds	r5, #44	; 0x2c
 8002ea6:	782d      	ldrb	r5, [r5, #0]
 8002ea8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002eaa:	432a      	orrs	r2, r5
 8002eac:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eae:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002eb0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002eb4:	30ff      	adds	r0, #255	; 0xff
 8002eb6:	4282      	cmp	r2, r0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002eba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002ebc:	68d8      	ldr	r0, [r3, #12]
 8002ebe:	432a      	orrs	r2, r5
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec4:	1ca2      	adds	r2, r4, #2
 8002ec6:	7fd2      	ldrb	r2, [r2, #31]
 8002ec8:	2a01      	cmp	r2, #1
 8002eca:	d106      	bne.n	8002eda <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d134      	bne.n	8002f3a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	68d9      	ldr	r1, [r3, #12]
 8002ed4:	0252      	lsls	r2, r2, #9
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002eda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002edc:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002ede:	2901      	cmp	r1, #1
 8002ee0:	d133      	bne.n	8002f4a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002ee2:	4821      	ldr	r0, [pc, #132]	; (8002f68 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002ee4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002ee6:	4002      	ands	r2, r0
 8002ee8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002eea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eec:	6918      	ldr	r0, [r3, #16]
 8002eee:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002ef0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002ef2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002ef4:	4302      	orrs	r2, r0
 8002ef6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	4311      	orrs	r1, r2
 8002efc:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002efe:	2107      	movs	r1, #7
 8002f00:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002f04:	438a      	bics	r2, r1
 8002f06:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002f10:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002f12:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002f14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f16:	4393      	bics	r3, r2
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002f20:	e76d      	b.n	8002dfe <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002f22:	691d      	ldr	r5, [r3, #16]
 8002f24:	4e11      	ldr	r6, [pc, #68]	; (8002f6c <HAL_ADC_Init+0x1b0>)
 8002f26:	00ad      	lsls	r5, r5, #2
 8002f28:	08ad      	lsrs	r5, r5, #2
 8002f2a:	611d      	str	r5, [r3, #16]
 8002f2c:	6815      	ldr	r5, [r2, #0]
 8002f2e:	4035      	ands	r5, r6
 8002f30:	6015      	str	r5, [r2, #0]
 8002f32:	6815      	ldr	r5, [r2, #0]
 8002f34:	4329      	orrs	r1, r5
 8002f36:	6011      	str	r1, [r2, #0]
 8002f38:	e783      	b.n	8002e42 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f3e:	4301      	orrs	r1, r0
 8002f40:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002f44:	430a      	orrs	r2, r1
 8002f46:	65a2      	str	r2, [r4, #88]	; 0x58
 8002f48:	e7c7      	b.n	8002eda <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	420a      	tst	r2, r1
 8002f4e:	d0d6      	beq.n	8002efe <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	438a      	bics	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e7d2      	b.n	8002efe <HAL_ADC_Init+0x142>
 8002f58:	fffffefd 	.word	0xfffffefd
 8002f5c:	40012708 	.word	0x40012708
 8002f60:	fdffffff 	.word	0xfdffffff
 8002f64:	fffe0219 	.word	0xfffe0219
 8002f68:	fffffc03 	.word	0xfffffc03
 8002f6c:	ffc3ffff 	.word	0xffc3ffff

08002f70 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f70:	6803      	ldr	r3, [r0, #0]
{
 8002f72:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f74:	689b      	ldr	r3, [r3, #8]
{
 8002f76:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8002f78:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f7a:	075b      	lsls	r3, r3, #29
 8002f7c:	d41a      	bmi.n	8002fb4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8002f7e:	0025      	movs	r5, r4
 8002f80:	3550      	adds	r5, #80	; 0x50
 8002f82:	782b      	ldrb	r3, [r5, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d015      	beq.n	8002fb4 <HAL_ADC_Start+0x44>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f8c:	69e3      	ldr	r3, [r4, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d111      	bne.n	8002fb6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002f92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f94:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002f96:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f98:	401a      	ands	r2, r3
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8002fa2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002fa6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	3a18      	subs	r2, #24
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f7ff fe96 	bl	8002ce8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d0e8      	beq.n	8002f92 <HAL_ADC_Start+0x22>
 8002fc0:	e7f8      	b.n	8002fb4 <HAL_ADC_Start+0x44>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	fffff0fe 	.word	0xfffff0fe

08002fc8 <HAL_ADC_Stop>:
{
 8002fc8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002fca:	0006      	movs	r6, r0
 8002fcc:	3650      	adds	r6, #80	; 0x50
 8002fce:	7833      	ldrb	r3, [r6, #0]
{
 8002fd0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d012      	beq.n	8002ffe <HAL_ADC_Stop+0x36>
 8002fd8:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fda:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8002fdc:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fde:	f7ff febf 	bl	8002d60 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	f7ff fe46 	bl	8002c78 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d104      	bne.n	8002ffa <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8002ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ff2:	4a03      	ldr	r2, [pc, #12]	; (8003000 <HAL_ADC_Stop+0x38>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	431d      	orrs	r5, r3
 8002ff8:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	7033      	strb	r3, [r6, #0]
}
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	fffffefe 	.word	0xfffffefe

08003004 <HAL_ADC_PollForConversion>:
{
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003006:	6945      	ldr	r5, [r0, #20]
{
 8003008:	0004      	movs	r4, r0
 800300a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800300c:	2d08      	cmp	r5, #8
 800300e:	d00d      	beq.n	800302c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003010:	6803      	ldr	r3, [r0, #0]
 8003012:	2001      	movs	r0, #1
 8003014:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003016:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003018:	4203      	tst	r3, r0
 800301a:	d007      	beq.n	800302c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	2320      	movs	r3, #32
 800301e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003020:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	4313      	orrs	r3, r2
 8003024:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003026:	2300      	movs	r3, #0
 8003028:	7023      	strb	r3, [r4, #0]
}
 800302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800302c:	f7ff fdf6 	bl	8002c1c <HAL_GetTick>
 8003030:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4215      	tst	r5, r2
 8003038:	d024      	beq.n	8003084 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	430a      	orrs	r2, r1
 8003042:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003044:	22c0      	movs	r2, #192	; 0xc0
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	4211      	tst	r1, r2
 800304c:	d113      	bne.n	8003076 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800304e:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003050:	7fd2      	ldrb	r2, [r2, #31]
 8003052:	2a00      	cmp	r2, #0
 8003054:	d10f      	bne.n	8003076 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	0712      	lsls	r2, r2, #28
 800305a:	d50c      	bpl.n	8003076 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	0752      	lsls	r2, r2, #29
 8003060:	d428      	bmi.n	80030b4 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003062:	210c      	movs	r1, #12
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	438a      	bics	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800306a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800306c:	4916      	ldr	r1, [pc, #88]	; (80030c8 <HAL_ADC_PollForConversion+0xc4>)
 800306e:	4011      	ands	r1, r2
 8003070:	2201      	movs	r2, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003078:	69a2      	ldr	r2, [r4, #24]
 800307a:	4282      	cmp	r2, r0
 800307c:	d1d5      	bne.n	800302a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800307e:	220c      	movs	r2, #12
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e7d2      	b.n	800302a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8003084:	1c72      	adds	r2, r6, #1
 8003086:	d0d5      	beq.n	8003034 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003088:	2e00      	cmp	r6, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800308c:	002a      	movs	r2, r5
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	401a      	ands	r2, r3
 8003094:	421d      	tst	r5, r3
 8003096:	d1cc      	bne.n	8003032 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003098:	2304      	movs	r3, #4
 800309a:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 800309c:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800309e:	430b      	orrs	r3, r1
 80030a0:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80030a4:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80030a6:	e7c0      	b.n	800302a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030a8:	f7ff fdb8 	bl	8002c1c <HAL_GetTick>
 80030ac:	1bc0      	subs	r0, r0, r7
 80030ae:	42b0      	cmp	r0, r6
 80030b0:	d8ec      	bhi.n	800308c <HAL_ADC_PollForConversion+0x88>
 80030b2:	e7be      	b.n	8003032 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	2220      	movs	r2, #32
 80030b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030b8:	430a      	orrs	r2, r1
 80030ba:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030bc:	2201      	movs	r2, #1
 80030be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030c0:	430a      	orrs	r2, r1
 80030c2:	65a2      	str	r2, [r4, #88]	; 0x58
 80030c4:	e7d7      	b.n	8003076 <HAL_ADC_PollForConversion+0x72>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	fffffefe 	.word	0xfffffefe

080030cc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_ADC_ConfigChannel>:
{
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030d6:	0004      	movs	r4, r0
 80030d8:	3450      	adds	r4, #80	; 0x50
 80030da:	7822      	ldrb	r2, [r4, #0]
{
 80030dc:	0003      	movs	r3, r0
 80030de:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80030e0:	2002      	movs	r0, #2
 80030e2:	2a01      	cmp	r2, #1
 80030e4:	d00b      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x2a>
 80030e6:	3801      	subs	r0, #1
 80030e8:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	6891      	ldr	r1, [r2, #8]
 80030ee:	0749      	lsls	r1, r1, #29
 80030f0:	d506      	bpl.n	8003100 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f2:	2220      	movs	r2, #32
 80030f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030f6:	430a      	orrs	r2, r1
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80030fa:	2300      	movs	r3, #0
 80030fc:	7023      	strb	r3, [r4, #0]
}
 80030fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003100:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003102:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003104:	4e19      	ldr	r6, [pc, #100]	; (800316c <HAL_ADC_ConfigChannel+0x98>)
 8003106:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003108:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800310a:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800310c:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800310e:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003110:	42b7      	cmp	r7, r6
 8003112:	d019      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003114:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003116:	4301      	orrs	r1, r0
 8003118:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_ADC_ConfigChannel+0x9c>)
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003126:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800312c:	f7ff fd8e 	bl	8002c4c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	039b      	lsls	r3, r3, #14
 8003134:	d505      	bpl.n	8003142 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <HAL_ADC_ConfigChannel+0x9c>)
 800313a:	03db      	lsls	r3, r3, #15
 800313c:	6811      	ldr	r1, [r2, #0]
 800313e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003140:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003142:	2000      	movs	r0, #0
 8003144:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003146:	e7da      	b.n	80030fe <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003148:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800314a:	438d      	bics	r5, r1
 800314c:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003152:	4a07      	ldr	r2, [pc, #28]	; (8003170 <HAL_ADC_ConfigChannel+0x9c>)
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <HAL_ADC_ConfigChannel+0xa0>)
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	400b      	ands	r3, r1
 800315a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800315c:	0383      	lsls	r3, r0, #14
 800315e:	d5f0      	bpl.n	8003142 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003160:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_ADC_ConfigChannel+0x9c>)
 8003162:	4905      	ldr	r1, [pc, #20]	; (8003178 <HAL_ADC_ConfigChannel+0xa4>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	400b      	ands	r3, r1
 8003168:	e7ea      	b.n	8003140 <HAL_ADC_ConfigChannel+0x6c>
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	00001001 	.word	0x00001001
 8003170:	40012708 	.word	0x40012708
 8003174:	ff7fffff 	.word	0xff7fffff
 8003178:	ffbfffff 	.word	0xffbfffff

0800317c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800317e:	25ff      	movs	r5, #255	; 0xff
 8003180:	2403      	movs	r4, #3
 8003182:	002a      	movs	r2, r5
 8003184:	4004      	ands	r4, r0
 8003186:	00e4      	lsls	r4, r4, #3
 8003188:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800318a:	0189      	lsls	r1, r1, #6
 800318c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800318e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003190:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003192:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003194:	2800      	cmp	r0, #0
 8003196:	db0a      	blt.n	80031ae <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003198:	24c0      	movs	r4, #192	; 0xc0
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_NVIC_SetPriority+0x4c>)
 800319c:	0880      	lsrs	r0, r0, #2
 800319e:	0080      	lsls	r0, r0, #2
 80031a0:	18c0      	adds	r0, r0, r3
 80031a2:	00a4      	lsls	r4, r4, #2
 80031a4:	5903      	ldr	r3, [r0, r4]
 80031a6:	401a      	ands	r2, r3
 80031a8:	4311      	orrs	r1, r2
 80031aa:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80031ac:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ae:	200f      	movs	r0, #15
 80031b0:	4003      	ands	r3, r0
 80031b2:	3b08      	subs	r3, #8
 80031b4:	4805      	ldr	r0, [pc, #20]	; (80031cc <HAL_NVIC_SetPriority+0x50>)
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	181b      	adds	r3, r3, r0
 80031bc:	69d8      	ldr	r0, [r3, #28]
 80031be:	4002      	ands	r2, r0
 80031c0:	4311      	orrs	r1, r2
 80031c2:	61d9      	str	r1, [r3, #28]
 80031c4:	e7f2      	b.n	80031ac <HAL_NVIC_SetPriority+0x30>
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031d0:	2800      	cmp	r0, #0
 80031d2:	db05      	blt.n	80031e0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d4:	231f      	movs	r3, #31
 80031d6:	4018      	ands	r0, r3
 80031d8:	3b1e      	subs	r3, #30
 80031da:	4083      	lsls	r3, r0
 80031dc:	4a01      	ldr	r2, [pc, #4]	; (80031e4 <HAL_NVIC_EnableIRQ+0x14>)
 80031de:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80031e0:	4770      	bx	lr
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	e000e100 	.word	0xe000e100

080031e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	1e43      	subs	r3, r0, #1
 80031ec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d20d      	bcs.n	8003210 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f8:	4807      	ldr	r0, [pc, #28]	; (8003218 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031fc:	6a03      	ldr	r3, [r0, #32]
 80031fe:	0609      	lsls	r1, r1, #24
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	430b      	orrs	r3, r1
 8003206:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003210:	4770      	bx	lr
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	e000e010 	.word	0xe000e010
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003222:	2c00      	cmp	r4, #0
 8003224:	d035      	beq.n	8003292 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003226:	6825      	ldr	r5, [r4, #0]
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_DMA_Init+0x78>)
 800322a:	2114      	movs	r1, #20
 800322c:	18e8      	adds	r0, r5, r3
 800322e:	f7fc ff89 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003234:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003236:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800323c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800323e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003240:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003244:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003246:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003248:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800324c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	433b      	orrs	r3, r7
 8003250:	6967      	ldr	r7, [r4, #20]
 8003252:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003254:	69a7      	ldr	r7, [r4, #24]
 8003256:	433b      	orrs	r3, r7
 8003258:	69e7      	ldr	r7, [r4, #28]
 800325a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800325c:	6a27      	ldr	r7, [r4, #32]
 800325e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003260:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003262:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	01db      	lsls	r3, r3, #7
 8003268:	4299      	cmp	r1, r3
 800326a:	d00c      	beq.n	8003286 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800326c:	251c      	movs	r5, #28
 800326e:	4028      	ands	r0, r5
 8003270:	3d0d      	subs	r5, #13
 8003272:	4085      	lsls	r5, r0
 8003274:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_DMA_Init+0x84>)
 8003276:	680b      	ldr	r3, [r1, #0]
 8003278:	43ab      	bics	r3, r5
 800327a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	680d      	ldr	r5, [r1, #0]
 8003280:	4083      	lsls	r3, r0
 8003282:	432b      	orrs	r3, r5
 8003284:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003288:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800328c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800328e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003290:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003294:	bffdfff8 	.word	0xbffdfff8
 8003298:	40020000 	.word	0x40020000
 800329c:	ffff800f 	.word	0xffff800f
 80032a0:	400200a8 	.word	0x400200a8

080032a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a6:	1d45      	adds	r5, r0, #5
{
 80032a8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80032aa:	7feb      	ldrb	r3, [r5, #31]
{
 80032ac:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80032ae:	2002      	movs	r0, #2
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d029      	beq.n	8003308 <HAL_DMA_Start_IT+0x64>
 80032b4:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80032b6:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 80032b8:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	2600      	movs	r6, #0
 80032be:	469c      	mov	ip, r3
 80032c0:	4660      	mov	r0, ip
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2801      	cmp	r0, #1
 80032c6:	d12a      	bne.n	800331e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	3001      	adds	r0, #1
 80032ca:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032cc:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ce:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032d0:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80032d2:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032d4:	361c      	adds	r6, #28
 80032d6:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80032d8:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032da:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80032dc:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032de:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80032e0:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032e2:	9b01      	ldr	r3, [sp, #4]
 80032e4:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032e6:	68a3      	ldr	r3, [r4, #8]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d10e      	bne.n	800330a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ec:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032ee:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80032f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f6:	230e      	movs	r3, #14
 80032f8:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032fa:	4313      	orrs	r3, r2
 80032fc:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80032fe:	2301      	movs	r3, #1
 8003300:	6802      	ldr	r2, [r0, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2000      	movs	r0, #0
}
 8003308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800330a:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800330c:	60c2      	str	r2, [r0, #12]
 800330e:	e7ef      	b.n	80032f0 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003310:	2204      	movs	r2, #4
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	4393      	bics	r3, r2
 8003316:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003318:	6802      	ldr	r2, [r0, #0]
 800331a:	230a      	movs	r3, #10
 800331c:	e7ed      	b.n	80032fa <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800331e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003320:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003322:	e7f1      	b.n	8003308 <HAL_DMA_Start_IT+0x64>

08003324 <HAL_DMA_IRQHandler>:
{
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003326:	221c      	movs	r2, #28
 8003328:	2704      	movs	r7, #4
 800332a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800332c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800332e:	4032      	ands	r2, r6
 8003330:	003e      	movs	r6, r7
 8003332:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003334:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003336:	6803      	ldr	r3, [r0, #0]
 8003338:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800333a:	4235      	tst	r5, r6
 800333c:	d00d      	beq.n	800335a <HAL_DMA_IRQHandler+0x36>
 800333e:	423c      	tst	r4, r7
 8003340:	d00b      	beq.n	800335a <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	0692      	lsls	r2, r2, #26
 8003346:	d402      	bmi.n	800334e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	43ba      	bics	r2, r7
 800334c:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800334e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003350:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003356:	4798      	blx	r3
  return;
 8003358:	e017      	b.n	800338a <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800335a:	2702      	movs	r7, #2
 800335c:	003e      	movs	r6, r7
 800335e:	4096      	lsls	r6, r2
 8003360:	4235      	tst	r5, r6
 8003362:	d013      	beq.n	800338c <HAL_DMA_IRQHandler+0x68>
 8003364:	423c      	tst	r4, r7
 8003366:	d011      	beq.n	800338c <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	0692      	lsls	r2, r2, #26
 800336c:	d406      	bmi.n	800337c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800336e:	240a      	movs	r4, #10
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	43a2      	bics	r2, r4
 8003374:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003376:	2201      	movs	r2, #1
 8003378:	1d83      	adds	r3, r0, #6
 800337a:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800337c:	2200      	movs	r2, #0
 800337e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003380:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003382:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003384:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003386:	4293      	cmp	r3, r2
 8003388:	d1e5      	bne.n	8003356 <HAL_DMA_IRQHandler+0x32>
}
 800338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800338c:	2608      	movs	r6, #8
 800338e:	0037      	movs	r7, r6
 8003390:	4097      	lsls	r7, r2
 8003392:	423d      	tst	r5, r7
 8003394:	d0f9      	beq.n	800338a <HAL_DMA_IRQHandler+0x66>
 8003396:	4234      	tst	r4, r6
 8003398:	d0f7      	beq.n	800338a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339a:	250e      	movs	r5, #14
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	43ac      	bics	r4, r5
 80033a0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033a2:	2301      	movs	r3, #1
 80033a4:	001c      	movs	r4, r3
 80033a6:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033aa:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80033ae:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80033b0:	2200      	movs	r2, #0
 80033b2:	1d43      	adds	r3, r0, #5
 80033b4:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80033b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033b8:	e7e5      	b.n	8003386 <HAL_DMA_IRQHandler+0x62>
	...

080033bc <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <FLASH_SetErrorCode+0xa4>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	6990      	ldr	r0, [r2, #24]
 80033c2:	0049      	lsls	r1, r1, #1
 80033c4:	0003      	movs	r3, r0
{
 80033c6:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80033c8:	400b      	ands	r3, r1
 80033ca:	4208      	tst	r0, r1
 80033cc:	d005      	beq.n	80033da <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	4824      	ldr	r0, [pc, #144]	; (8003464 <FLASH_SetErrorCode+0xa8>)
 80033d2:	6944      	ldr	r4, [r0, #20]
 80033d4:	4323      	orrs	r3, r4
 80033d6:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 80033d8:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80033da:	2080      	movs	r0, #128	; 0x80
 80033dc:	6991      	ldr	r1, [r2, #24]
 80033de:	0080      	lsls	r0, r0, #2
 80033e0:	4201      	tst	r1, r0
 80033e2:	d005      	beq.n	80033f0 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80033e4:	2101      	movs	r1, #1
 80033e6:	4c1f      	ldr	r4, [pc, #124]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 80033e8:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80033ea:	6965      	ldr	r5, [r4, #20]
 80033ec:	4329      	orrs	r1, r5
 80033ee:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80033f0:	2080      	movs	r0, #128	; 0x80
 80033f2:	6991      	ldr	r1, [r2, #24]
 80033f4:	00c0      	lsls	r0, r0, #3
 80033f6:	4201      	tst	r1, r0
 80033f8:	d005      	beq.n	8003406 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80033fa:	2108      	movs	r1, #8
 80033fc:	4c19      	ldr	r4, [pc, #100]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 80033fe:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003400:	6965      	ldr	r5, [r4, #20]
 8003402:	4329      	orrs	r1, r5
 8003404:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003406:	2080      	movs	r0, #128	; 0x80
 8003408:	6991      	ldr	r1, [r2, #24]
 800340a:	0100      	lsls	r0, r0, #4
 800340c:	4201      	tst	r1, r0
 800340e:	d005      	beq.n	800341c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003410:	2104      	movs	r1, #4
 8003412:	4c14      	ldr	r4, [pc, #80]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003414:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003416:	6965      	ldr	r5, [r4, #20]
 8003418:	4329      	orrs	r1, r5
 800341a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800341c:	2080      	movs	r0, #128	; 0x80
 800341e:	6991      	ldr	r1, [r2, #24]
 8003420:	0180      	lsls	r0, r0, #6
 8003422:	4201      	tst	r1, r0
 8003424:	d005      	beq.n	8003432 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003426:	2110      	movs	r1, #16
 8003428:	4c0e      	ldr	r4, [pc, #56]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800342a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800342c:	6965      	ldr	r5, [r4, #20]
 800342e:	4329      	orrs	r1, r5
 8003430:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003432:	6991      	ldr	r1, [r2, #24]
 8003434:	0389      	lsls	r1, r1, #14
 8003436:	d505      	bpl.n	8003444 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003438:	2020      	movs	r0, #32
 800343a:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800343c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800343e:	6961      	ldr	r1, [r4, #20]
 8003440:	4301      	orrs	r1, r0
 8003442:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003444:	2080      	movs	r0, #128	; 0x80
 8003446:	6991      	ldr	r1, [r2, #24]
 8003448:	0240      	lsls	r0, r0, #9
 800344a:	4201      	tst	r1, r0
 800344c:	d005      	beq.n	800345a <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	4c04      	ldr	r4, [pc, #16]	; (8003464 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8003452:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003454:	6965      	ldr	r5, [r4, #20]
 8003456:	4329      	orrs	r1, r5
 8003458:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800345a:	6193      	str	r3, [r2, #24]
}  
 800345c:	bd30      	pop	{r4, r5, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	40022000 	.word	0x40022000
 8003464:	20000dac 	.word	0x20000dac

08003468 <FLASH_WaitForLastOperation>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff fbd6 	bl	8002c1c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003470:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003472:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <FLASH_WaitForLastOperation+0x70>)
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	4232      	tst	r2, r6
 800347a:	d121      	bne.n	80034c0 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800347c:	2202      	movs	r2, #2
 800347e:	6999      	ldr	r1, [r3, #24]
 8003480:	4211      	tst	r1, r2
 8003482:	d000      	beq.n	8003486 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003484:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	05d2      	lsls	r2, r2, #23
 800348a:	d415      	bmi.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800348c:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800348e:	0592      	lsls	r2, r2, #22
 8003490:	d412      	bmi.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003492:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003494:	0552      	lsls	r2, r2, #21
 8003496:	d40f      	bmi.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003498:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800349a:	0512      	lsls	r2, r2, #20
 800349c:	d40c      	bmi.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800349e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80034a0:	0492      	lsls	r2, r2, #18
 80034a2:	d409      	bmi.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	0008      	movs	r0, r1
 80034aa:	0292      	lsls	r2, r2, #10
 80034ac:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80034ae:	4211      	tst	r1, r2
 80034b0:	d102      	bne.n	80034b8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80034b2:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80034b4:	03db      	lsls	r3, r3, #15
 80034b6:	d508      	bpl.n	80034ca <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80034b8:	f7ff ff80 	bl	80033bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
 80034be:	e004      	b.n	80034ca <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	1c62      	adds	r2, r4, #1
 80034c2:	d0d8      	beq.n	8003476 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d101      	bne.n	80034cc <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80034c8:	2003      	movs	r0, #3
}
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034cc:	f7ff fba6 	bl	8002c1c <HAL_GetTick>
 80034d0:	1b40      	subs	r0, r0, r5
 80034d2:	42a0      	cmp	r0, r4
 80034d4:	d9ce      	bls.n	8003474 <FLASH_WaitForLastOperation+0xc>
 80034d6:	e7f7      	b.n	80034c8 <FLASH_WaitForLastOperation+0x60>
 80034d8:	40022000 	.word	0x40022000

080034dc <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80034dc:	2201      	movs	r2, #1
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80034e0:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	4211      	tst	r1, r2
 80034e6:	d00a      	beq.n	80034fe <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 80034f0:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80034f4:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f6:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80034fa:	6858      	ldr	r0, [r3, #4]
 80034fc:	4010      	ands	r0, r2
}
 80034fe:	4770      	bx	lr
 8003500:	40022000 	.word	0x40022000
 8003504:	89abcdef 	.word	0x89abcdef
 8003508:	02030405 	.word	0x02030405

0800350c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800350c:	2301      	movs	r3, #1
 800350e:	4a03      	ldr	r2, [pc, #12]	; (800351c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003510:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003512:	6851      	ldr	r1, [r2, #4]
 8003514:	430b      	orrs	r3, r1
 8003516:	6053      	str	r3, [r2, #4]
}
 8003518:	4770      	bx	lr
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40022000 	.word	0x40022000

08003520 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003522:	4f12      	ldr	r7, [pc, #72]	; (800356c <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8003524:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8003526:	7c3b      	ldrb	r3, [r7, #16]
{
 8003528:	000d      	movs	r5, r1
 800352a:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800352c:	2002      	movs	r0, #2
 800352e:	2b01      	cmp	r3, #1
 8003530:	d00c      	beq.n	800354c <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003532:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003534:	480e      	ldr	r0, [pc, #56]	; (8003570 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8003536:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003538:	f7ff ff96 	bl	8003468 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800353c:	2800      	cmp	r0, #0
 800353e:	d103      	bne.n	8003548 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003540:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003542:	2e02      	cmp	r6, #2
 8003544:	d103      	bne.n	800354e <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003546:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003548:	2300      	movs	r3, #0
 800354a:	743b      	strb	r3, [r7, #16]

  return status;
}
 800354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800354e:	2e01      	cmp	r6, #1
 8003550:	d102      	bne.n	8003558 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8003552:	b2a4      	uxth	r4, r4
 8003554:	802c      	strh	r4, [r5, #0]
 8003556:	e7f7      	b.n	8003548 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003558:	2e00      	cmp	r6, #0
 800355a:	d003      	beq.n	8003564 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800355e:	f7ff ff83 	bl	8003468 <FLASH_WaitForLastOperation>
 8003562:	e7f1      	b.n	8003548 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003564:	b2e4      	uxtb	r4, r4
 8003566:	702c      	strb	r4, [r5, #0]
 8003568:	e7ee      	b.n	8003548 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000dac 	.word	0x20000dac
 8003570:	0000c350 	.word	0x0000c350

08003574 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_GPIO_Init+0x164>)
{
 8003576:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003578:	1882      	adds	r2, r0, r2
 800357a:	1e54      	subs	r4, r2, #1
 800357c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800357e:	2300      	movs	r3, #0
{
 8003580:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003582:	3205      	adds	r2, #5
{
 8003584:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003586:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003588:	9a03      	ldr	r2, [sp, #12]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	0014      	movs	r4, r2
 800358e:	40dc      	lsrs	r4, r3
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003592:	b007      	add	sp, #28
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003596:	2101      	movs	r1, #1
 8003598:	000d      	movs	r5, r1
 800359a:	0014      	movs	r4, r2
 800359c:	409d      	lsls	r5, r3
 800359e:	402c      	ands	r4, r5
 80035a0:	468c      	mov	ip, r1
 80035a2:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80035a4:	422a      	tst	r2, r5
 80035a6:	d100      	bne.n	80035aa <HAL_GPIO_Init+0x36>
 80035a8:	e094      	b.n	80036d4 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035aa:	2403      	movs	r4, #3
 80035ac:	9a03      	ldr	r2, [sp, #12]
 80035ae:	005e      	lsls	r6, r3, #1
 80035b0:	6852      	ldr	r2, [r2, #4]
 80035b2:	9201      	str	r2, [sp, #4]
 80035b4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035b6:	40b4      	lsls	r4, r6
 80035b8:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ba:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035bc:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035be:	4564      	cmp	r4, ip
 80035c0:	d82a      	bhi.n	8003618 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80035c2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035c4:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c6:	9903      	ldr	r1, [sp, #12]
 80035c8:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ca:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035cc:	40b4      	lsls	r4, r6
 80035ce:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80035d0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80035d2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d4:	43ac      	bics	r4, r5
 80035d6:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035d8:	090c      	lsrs	r4, r1, #4
 80035da:	4661      	mov	r1, ip
 80035dc:	400c      	ands	r4, r1
 80035de:	409c      	lsls	r4, r3
 80035e0:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80035e2:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80035e4:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035e6:	9904      	ldr	r1, [sp, #16]
 80035e8:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ea:	9903      	ldr	r1, [sp, #12]
 80035ec:	688c      	ldr	r4, [r1, #8]
 80035ee:	40b4      	lsls	r4, r6
 80035f0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80035f2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f4:	2a02      	cmp	r2, #2
 80035f6:	d111      	bne.n	800361c <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80035f8:	2507      	movs	r5, #7
 80035fa:	210f      	movs	r1, #15
 80035fc:	401d      	ands	r5, r3
 80035fe:	00ad      	lsls	r5, r5, #2
 8003600:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003602:	08dc      	lsrs	r4, r3, #3
 8003604:	00a4      	lsls	r4, r4, #2
 8003606:	1904      	adds	r4, r0, r4
 8003608:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800360a:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800360c:	9903      	ldr	r1, [sp, #12]
 800360e:	6909      	ldr	r1, [r1, #16]
 8003610:	40a9      	lsls	r1, r5
 8003612:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003614:	6227      	str	r7, [r4, #32]
 8003616:	e001      	b.n	800361c <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003618:	2a03      	cmp	r2, #3
 800361a:	d1e3      	bne.n	80035e4 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800361c:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800361e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003620:	9904      	ldr	r1, [sp, #16]
 8003622:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003624:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8003626:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003628:	22c0      	movs	r2, #192	; 0xc0
 800362a:	9901      	ldr	r1, [sp, #4]
 800362c:	0292      	lsls	r2, r2, #10
 800362e:	4211      	tst	r1, r2
 8003630:	d050      	beq.n	80036d4 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	2701      	movs	r7, #1
 8003634:	4c29      	ldr	r4, [pc, #164]	; (80036dc <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003636:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003638:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800363a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363c:	433a      	orrs	r2, r7
 800363e:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_GPIO_Init+0x16c>)
 8003642:	089c      	lsrs	r4, r3, #2
 8003644:	00a4      	lsls	r4, r4, #2
 8003646:	18a4      	adds	r4, r4, r2
 8003648:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800364a:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800364c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800364e:	220f      	movs	r2, #15
 8003650:	00ad      	lsls	r5, r5, #2
 8003652:	40aa      	lsls	r2, r5
 8003654:	4661      	mov	r1, ip
 8003656:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003658:	22a0      	movs	r2, #160	; 0xa0
 800365a:	05d2      	lsls	r2, r2, #23
 800365c:	4694      	mov	ip, r2
 800365e:	2200      	movs	r2, #0
 8003660:	4560      	cmp	r0, ip
 8003662:	d00d      	beq.n	8003680 <HAL_GPIO_Init+0x10c>
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_GPIO_Init+0x170>)
 8003666:	4694      	mov	ip, r2
 8003668:	003a      	movs	r2, r7
 800366a:	4560      	cmp	r0, ip
 800366c:	d008      	beq.n	8003680 <HAL_GPIO_Init+0x10c>
 800366e:	4f1e      	ldr	r7, [pc, #120]	; (80036e8 <HAL_GPIO_Init+0x174>)
 8003670:	1892      	adds	r2, r2, r2
 8003672:	42b8      	cmp	r0, r7
 8003674:	d004      	beq.n	8003680 <HAL_GPIO_Init+0x10c>
 8003676:	4f1d      	ldr	r7, [pc, #116]	; (80036ec <HAL_GPIO_Init+0x178>)
 8003678:	0032      	movs	r2, r6
 800367a:	42b8      	cmp	r0, r7
 800367c:	d000      	beq.n	8003680 <HAL_GPIO_Init+0x10c>
 800367e:	9a05      	ldr	r2, [sp, #20]
 8003680:	40aa      	lsls	r2, r5
 8003682:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003684:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003686:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003688:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 800368c:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 800368e:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003690:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003692:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003694:	03c9      	lsls	r1, r1, #15
 8003696:	d401      	bmi.n	800369c <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003698:	0035      	movs	r5, r6
 800369a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800369c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800369e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80036a0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036a4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	0389      	lsls	r1, r1, #14
 80036a8:	d401      	bmi.n	80036ae <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80036aa:	0035      	movs	r5, r6
 80036ac:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80036ae:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80036b0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80036b2:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b4:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036b6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b8:	02c9      	lsls	r1, r1, #11
 80036ba:	d401      	bmi.n	80036c0 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80036bc:	0035      	movs	r5, r6
 80036be:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80036c0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80036c2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80036c4:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c6:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036c8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ca:	0289      	lsls	r1, r1, #10
 80036cc:	d401      	bmi.n	80036d2 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 80036ce:	4025      	ands	r5, r4
 80036d0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80036d2:	60d6      	str	r6, [r2, #12]
    position++;
 80036d4:	3301      	adds	r3, #1
 80036d6:	e757      	b.n	8003588 <HAL_GPIO_Init+0x14>
 80036d8:	afffe400 	.word	0xafffe400
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	50000400 	.word	0x50000400
 80036e8:	50000800 	.word	0x50000800
 80036ec:	50000c00 	.word	0x50000c00
 80036f0:	40010400 	.word	0x40010400

080036f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f4:	6900      	ldr	r0, [r0, #16]
 80036f6:	4008      	ands	r0, r1
 80036f8:	1e43      	subs	r3, r0, #1
 80036fa:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80036fc:	b2c0      	uxtb	r0, r0
}
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003700:	2a00      	cmp	r2, #0
 8003702:	d001      	beq.n	8003708 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003704:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003706:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003708:	6281      	str	r1, [r0, #40]	; 0x28
}
 800370a:	e7fc      	b.n	8003706 <HAL_GPIO_WritePin+0x6>

0800370c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	0792      	lsls	r2, r2, #30
 8003712:	d501      	bpl.n	8003718 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003714:	2200      	movs	r2, #0
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003718:	2201      	movs	r2, #1
 800371a:	6999      	ldr	r1, [r3, #24]
 800371c:	4211      	tst	r1, r2
 800371e:	d102      	bne.n	8003726 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	430a      	orrs	r2, r1
 8003724:	619a      	str	r2, [r3, #24]
  }
}
 8003726:	4770      	bx	lr

08003728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003728:	b530      	push	{r4, r5, lr}
 800372a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800372c:	0412      	lsls	r2, r2, #16
 800372e:	6800      	ldr	r0, [r0, #0]
 8003730:	4322      	orrs	r2, r4
 8003732:	431a      	orrs	r2, r3
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <I2C_TransferConfig+0x24>)
 8003736:	6845      	ldr	r5, [r0, #4]
 8003738:	0589      	lsls	r1, r1, #22
 800373a:	0d64      	lsrs	r4, r4, #21
 800373c:	0d89      	lsrs	r1, r1, #22
 800373e:	431c      	orrs	r4, r3
 8003740:	43a5      	bics	r5, r4
 8003742:	430a      	orrs	r2, r1
 8003744:	432a      	orrs	r2, r5
 8003746:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003748:	bd30      	pop	{r4, r5, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	03ff63ff 	.word	0x03ff63ff

08003750 <I2C_IsAcknowledgeFailed>:
{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003752:	6803      	ldr	r3, [r0, #0]
{
 8003754:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003756:	699a      	ldr	r2, [r3, #24]
{
 8003758:	0004      	movs	r4, r0
 800375a:	000d      	movs	r5, r1
  return HAL_OK;
 800375c:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800375e:	06d2      	lsls	r2, r2, #27
 8003760:	d536      	bpl.n	80037d0 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	0192      	lsls	r2, r2, #6
 8003766:	d404      	bmi.n	8003772 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	01d2      	lsls	r2, r2, #7
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003772:	2720      	movs	r7, #32
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	423a      	tst	r2, r7
 800377a:	d012      	beq.n	80037a2 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800377e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003784:	f7ff ffc2 	bl	800370c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	4912      	ldr	r1, [pc, #72]	; (80037d4 <I2C_IsAcknowledgeFailed+0x84>)
 800378c:	6853      	ldr	r3, [r2, #4]
 800378e:	400b      	ands	r3, r1
 8003790:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003792:	2304      	movs	r3, #4
 8003794:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003796:	4313      	orrs	r3, r2
 8003798:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	0023      	movs	r3, r4
 800379c:	3341      	adds	r3, #65	; 0x41
 800379e:	701f      	strb	r7, [r3, #0]
 80037a0:	e00f      	b.n	80037c2 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 80037a2:	1c6a      	adds	r2, r5, #1
 80037a4:	d0e7      	beq.n	8003776 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7ff fa39 	bl	8002c1c <HAL_GetTick>
 80037aa:	1b80      	subs	r0, r0, r6
 80037ac:	4285      	cmp	r5, r0
 80037ae:	d301      	bcc.n	80037b4 <I2C_IsAcknowledgeFailed+0x64>
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	d1df      	bne.n	8003774 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	2220      	movs	r2, #32
 80037b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037b8:	4313      	orrs	r3, r2
 80037ba:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	0023      	movs	r3, r4
 80037be:	3341      	adds	r3, #65	; 0x41
 80037c0:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	0022      	movs	r2, r4
 80037c4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80037ca:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80037ce:	7023      	strb	r3, [r4, #0]
}
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	0004      	movs	r4, r0
 80037dc:	000d      	movs	r5, r1
 80037de:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e0:	2702      	movs	r7, #2
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	423b      	tst	r3, r7
 80037e8:	d001      	beq.n	80037ee <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ee:	0032      	movs	r2, r6
 80037f0:	0029      	movs	r1, r5
 80037f2:	0020      	movs	r0, r4
 80037f4:	f7ff ffac 	bl	8003750 <I2C_IsAcknowledgeFailed>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d115      	bne.n	8003828 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	1c6b      	adds	r3, r5, #1
 80037fe:	d0f0      	beq.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7ff fa0c 	bl	8002c1c <HAL_GetTick>
 8003804:	1b80      	subs	r0, r0, r6
 8003806:	42a8      	cmp	r0, r5
 8003808:	d801      	bhi.n	800380e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800380a:	2d00      	cmp	r5, #0
 800380c:	d1e9      	bne.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	2220      	movs	r2, #32
 8003810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003812:	4313      	orrs	r3, r2
 8003814:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003816:	0023      	movs	r3, r4
 8003818:	3341      	adds	r3, #65	; 0x41
 800381a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	0022      	movs	r2, r4
 800381e:	2300      	movs	r3, #0
 8003820:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003822:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003826:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e7df      	b.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800382c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	0004      	movs	r4, r0
 8003830:	000d      	movs	r5, r1
 8003832:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003834:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003836:	2204      	movs	r2, #4
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4213      	tst	r3, r2
 800383e:	d111      	bne.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003840:	0032      	movs	r2, r6
 8003842:	0029      	movs	r1, r5
 8003844:	0020      	movs	r0, r4
 8003846:	f7ff ff83 	bl	8003750 <I2C_IsAcknowledgeFailed>
 800384a:	2800      	cmp	r0, #0
 800384c:	d119      	bne.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	423a      	tst	r2, r7
 8003854:	d017      	beq.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003856:	2104      	movs	r1, #4
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	420a      	tst	r2, r1
 800385c:	d004      	beq.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 800385e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003860:	2a00      	cmp	r2, #0
 8003862:	d001      	beq.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 8003864:	2000      	movs	r0, #0
}
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800386e:	400a      	ands	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003872:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003876:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800387a:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800387c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8003880:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003882:	2001      	movs	r0, #1
 8003884:	e7ef      	b.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7ff f9c9 	bl	8002c1c <HAL_GetTick>
 800388a:	1b80      	subs	r0, r0, r6
 800388c:	42a8      	cmp	r0, r5
 800388e:	d801      	bhi.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8003890:	2d00      	cmp	r5, #0
 8003892:	d1d0      	bne.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	2220      	movs	r2, #32
 8003896:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003898:	4313      	orrs	r3, r2
 800389a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800389c:	0023      	movs	r3, r4
 800389e:	3341      	adds	r3, #65	; 0x41
 80038a0:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80038a2:	3440      	adds	r4, #64	; 0x40
 80038a4:	2300      	movs	r3, #0
 80038a6:	e7eb      	b.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80038a8:	fe00e800 	.word	0xfe00e800

080038ac <I2C_WaitOnFlagUntilTimeout>:
{
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	0004      	movs	r4, r0
 80038b0:	000e      	movs	r6, r1
 80038b2:	0017      	movs	r7, r2
 80038b4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	6993      	ldr	r3, [r2, #24]
 80038ba:	4033      	ands	r3, r6
 80038bc:	1b9b      	subs	r3, r3, r6
 80038be:	4259      	negs	r1, r3
 80038c0:	414b      	adcs	r3, r1
 80038c2:	42bb      	cmp	r3, r7
 80038c4:	d001      	beq.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80038c6:	2000      	movs	r0, #0
 80038c8:	e017      	b.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	1c6b      	adds	r3, r5, #1
 80038cc:	d0f4      	beq.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7ff f9a5 	bl	8002c1c <HAL_GetTick>
 80038d2:	9b06      	ldr	r3, [sp, #24]
 80038d4:	1ac0      	subs	r0, r0, r3
 80038d6:	42a8      	cmp	r0, r5
 80038d8:	d801      	bhi.n	80038de <I2C_WaitOnFlagUntilTimeout+0x32>
 80038da:	2d00      	cmp	r5, #0
 80038dc:	d1eb      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038de:	2220      	movs	r2, #32
 80038e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80038e2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	4313      	orrs	r3, r2
 80038e6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	0023      	movs	r3, r4
 80038ea:	3341      	adds	r3, #65	; 0x41
 80038ec:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	0022      	movs	r2, r4
 80038f0:	2300      	movs	r3, #0
 80038f2:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80038f4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f6:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80038f8:	7023      	strb	r3, [r4, #0]
}
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	0004      	movs	r4, r0
 8003900:	000d      	movs	r5, r1
 8003902:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003904:	2720      	movs	r7, #32
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	423b      	tst	r3, r7
 800390c:	d001      	beq.n	8003912 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800390e:	2000      	movs	r0, #0
}
 8003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	0032      	movs	r2, r6
 8003914:	0029      	movs	r1, r5
 8003916:	0020      	movs	r0, r4
 8003918:	f7ff ff1a 	bl	8003750 <I2C_IsAcknowledgeFailed>
 800391c:	2800      	cmp	r0, #0
 800391e:	d113      	bne.n	8003948 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7ff f97c 	bl	8002c1c <HAL_GetTick>
 8003924:	1b80      	subs	r0, r0, r6
 8003926:	42a8      	cmp	r0, r5
 8003928:	d801      	bhi.n	800392e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800392a:	2d00      	cmp	r5, #0
 800392c:	d1eb      	bne.n	8003906 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	2220      	movs	r2, #32
 8003930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003932:	4313      	orrs	r3, r2
 8003934:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	0023      	movs	r3, r4
 8003938:	3341      	adds	r3, #65	; 0x41
 800393a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	0022      	movs	r2, r4
 800393e:	2300      	movs	r3, #0
 8003940:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003942:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003946:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003948:	2001      	movs	r0, #1
 800394a:	e7e1      	b.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800394c <HAL_I2C_Init>:
{
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003952:	2c00      	cmp	r4, #0
 8003954:	d03f      	beq.n	80039d6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003956:	0025      	movs	r5, r4
 8003958:	3541      	adds	r5, #65	; 0x41
 800395a:	782b      	ldrb	r3, [r5, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003962:	0023      	movs	r3, r4
 8003964:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003966:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003968:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800396a:	f7fd fb89 	bl	8001080 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003970:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003972:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003974:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003976:	481d      	ldr	r0, [pc, #116]	; (80039ec <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003978:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800397a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800397c:	438a      	bics	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003980:	6861      	ldr	r1, [r4, #4]
 8003982:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <HAL_I2C_Init+0xa4>)
 8003984:	400a      	ands	r2, r1
 8003986:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	4002      	ands	r2, r0
 800398c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800398e:	68e2      	ldr	r2, [r4, #12]
 8003990:	2a01      	cmp	r2, #1
 8003992:	d121      	bne.n	80039d8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	0209      	lsls	r1, r1, #8
 8003998:	4331      	orrs	r1, r6
 800399a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	4915      	ldr	r1, [pc, #84]	; (80039f4 <HAL_I2C_Init+0xa8>)
 80039a0:	4311      	orrs	r1, r2
 80039a2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039a4:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039a8:	4002      	ands	r2, r0
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039ac:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ae:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b2:	69a1      	ldr	r1, [r4, #24]
 80039b4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ba:	6a21      	ldr	r1, [r4, #32]
 80039bc:	69e2      	ldr	r2, [r4, #28]
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80039c2:	2201      	movs	r2, #1
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	3442      	adds	r4, #66	; 0x42
 80039d4:	7020      	strb	r0, [r4, #0]
}
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039d8:	2184      	movs	r1, #132	; 0x84
 80039da:	0209      	lsls	r1, r1, #8
 80039dc:	4331      	orrs	r1, r6
 80039de:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039e0:	2a02      	cmp	r2, #2
 80039e2:	d1db      	bne.n	800399c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	e7d7      	b.n	800399c <HAL_I2C_Init+0x50>
 80039ec:	ffff7fff 	.word	0xffff7fff
 80039f0:	f0ffffff 	.word	0xf0ffffff
 80039f4:	02008000 	.word	0x02008000

080039f8 <HAL_I2C_Master_Transmit>:
{
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	b087      	sub	sp, #28
 80039fc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	0003      	movs	r3, r0
 8003a00:	3341      	adds	r3, #65	; 0x41
{
 8003a02:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	9303      	str	r3, [sp, #12]
 8003a06:	781b      	ldrb	r3, [r3, #0]
{
 8003a08:	0004      	movs	r4, r0
 8003a0a:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003a0c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d114      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003a12:	0023      	movs	r3, r4
 8003a14:	3340      	adds	r3, #64	; 0x40
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	2a01      	cmp	r2, #1
 8003a1a:	d00f      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x44>
 8003a1c:	2601      	movs	r6, #1
 8003a1e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003a20:	f7ff f8fc 	bl	8002c1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a24:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003a26:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a28:	9000      	str	r0, [sp, #0]
 8003a2a:	2319      	movs	r3, #25
 8003a2c:	0032      	movs	r2, r6
 8003a2e:	0020      	movs	r0, r4
 8003a30:	0209      	lsls	r1, r1, #8
 8003a32:	f7ff ff3b 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003a3a:	2001      	movs	r0, #1
}
 8003a3c:	b007      	add	sp, #28
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a40:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a42:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a44:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a46:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a48:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a4a:	3b11      	subs	r3, #17
 8003a4c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003a4e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a52:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a54:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003a56:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003a58:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_I2C_Master_Transmit+0x11c>)
 8003a5e:	2aff      	cmp	r2, #255	; 0xff
 8003a60:	d920      	bls.n	8003aa4 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a62:	22ff      	movs	r2, #255	; 0xff
 8003a64:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a6c:	0039      	movs	r1, r7
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f7ff fe5a 	bl	8003728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a76:	002a      	movs	r2, r5
 8003a78:	0020      	movs	r0, r4
 8003a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d119      	bne.n	8003ab4 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a80:	f7ff ff3c 	bl	80038fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1d8      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a88:	2120      	movs	r1, #32
 8003a8a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003a8c:	4d22      	ldr	r5, [pc, #136]	; (8003b18 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	402a      	ands	r2, r5
 8003a94:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003a98:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	3341      	adds	r3, #65	; 0x41
 8003a9c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a9e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003aa0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003aa2:	e7cb      	b.n	8003a3c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003aa4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	049b      	lsls	r3, r3, #18
 8003ab2:	e7db      	b.n	8003a6c <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	f7ff fe90 	bl	80037d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d1be      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003ac2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ac4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ac6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003aca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003ad2:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ca      	beq.n	8003a74 <HAL_I2C_Master_Transmit+0x7c>
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	d1c8      	bne.n	8003a74 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ae8:	9500      	str	r5, [sp, #0]
 8003aea:	f7ff fedf 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1a3      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003af4:	2bff      	cmp	r3, #255	; 0xff
 8003af6:	d906      	bls.n	8003b06 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af8:	23ff      	movs	r3, #255	; 0xff
 8003afa:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	22ff      	movs	r2, #255	; 0xff
 8003b00:	9000      	str	r0, [sp, #0]
 8003b02:	045b      	lsls	r3, r3, #17
 8003b04:	e7b2      	b.n	8003a6c <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003b06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	9000      	str	r0, [sp, #0]
 8003b10:	e7cd      	b.n	8003aae <HAL_I2C_Master_Transmit+0xb6>
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	80002000 	.word	0x80002000
 8003b18:	fe00e800 	.word	0xfe00e800

08003b1c <HAL_I2C_Master_Receive>:
{
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	0003      	movs	r3, r0
 8003b24:	3341      	adds	r3, #65	; 0x41
{
 8003b26:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b28:	9303      	str	r3, [sp, #12]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
{
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003b30:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d114      	bne.n	8003b60 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8003b36:	0023      	movs	r3, r4
 8003b38:	3340      	adds	r3, #64	; 0x40
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	2a01      	cmp	r2, #1
 8003b3e:	d00f      	beq.n	8003b60 <HAL_I2C_Master_Receive+0x44>
 8003b40:	2601      	movs	r6, #1
 8003b42:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003b44:	f7ff f86a 	bl	8002c1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b48:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003b4a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b4c:	9000      	str	r0, [sp, #0]
 8003b4e:	2319      	movs	r3, #25
 8003b50:	0032      	movs	r2, r6
 8003b52:	0020      	movs	r0, r4
 8003b54:	0209      	lsls	r1, r1, #8
 8003b56:	f7ff fea9 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	b007      	add	sp, #28
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b64:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b66:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b68:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b6a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b6c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b6e:	3b12      	subs	r3, #18
 8003b70:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003b72:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003b76:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b78:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003b7a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003b7c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_I2C_Master_Receive+0x11c>)
 8003b82:	2aff      	cmp	r2, #255	; 0xff
 8003b84:	d920      	bls.n	8003bc8 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b90:	0039      	movs	r1, r7
 8003b92:	0020      	movs	r0, r4
 8003b94:	f7ff fdc8 	bl	8003728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	002a      	movs	r2, r5
 8003b9c:	0020      	movs	r0, r4
 8003b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d119      	bne.n	8003bd8 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	f7ff feaa 	bl	80038fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d1d8      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bac:	2120      	movs	r1, #32
 8003bae:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003bb0:	4d22      	ldr	r5, [pc, #136]	; (8003c3c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	402a      	ands	r2, r5
 8003bb8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003bbc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	3341      	adds	r3, #65	; 0x41
 8003bc0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003bc4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003bc6:	e7cb      	b.n	8003b60 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003bc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	049b      	lsls	r3, r3, #18
 8003bd6:	e7db      	b.n	8003b90 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd8:	f7ff fe28 	bl	800382c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d1be      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003bea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003bec:	3301      	adds	r3, #1
 8003bee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bf2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0c9      	beq.n	8003b98 <HAL_I2C_Master_Receive+0x7c>
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d1c7      	bne.n	8003b98 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	0020      	movs	r0, r4
 8003c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c0e:	9500      	str	r5, [sp, #0]
 8003c10:	f7ff fe4c 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1a2      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d906      	bls.n	8003c2c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1e:	23ff      	movs	r3, #255	; 0xff
 8003c20:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	9000      	str	r0, [sp, #0]
 8003c28:	045b      	lsls	r3, r3, #17
 8003c2a:	e7b1      	b.n	8003b90 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	9000      	str	r0, [sp, #0]
 8003c36:	e7cc      	b.n	8003bd2 <HAL_I2C_Master_Receive+0xb6>
 8003c38:	80002400 	.word	0x80002400
 8003c3c:	fe00e800 	.word	0xfe00e800

08003c40 <HAL_I2C_IsDeviceReady>:
{
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003c44:	2300      	movs	r3, #0
{
 8003c46:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8003c48:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	0003      	movs	r3, r0
{
 8003c4c:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	3341      	adds	r3, #65	; 0x41
 8003c50:	781a      	ldrb	r2, [r3, #0]
{
 8003c52:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003c54:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c56:	2a20      	cmp	r2, #32
 8003c58:	d15b      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c5a:	6802      	ldr	r2, [r0, #0]
 8003c5c:	6997      	ldr	r7, [r2, #24]
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	0038      	movs	r0, r7
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4010      	ands	r0, r2
 8003c66:	4217      	tst	r7, r2
 8003c68:	d153      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 8003c6a:	0022      	movs	r2, r4
 8003c6c:	3240      	adds	r2, #64	; 0x40
 8003c6e:	7817      	ldrb	r7, [r2, #0]
 8003c70:	2f01      	cmp	r7, #1
 8003c72:	d04e      	beq.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
 8003c74:	3d01      	subs	r5, #1
 8003c76:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c78:	2224      	movs	r2, #36	; 0x24
 8003c7a:	0589      	lsls	r1, r1, #22
 8003c7c:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7e:	0d8b      	lsrs	r3, r1, #22
 8003c80:	6460      	str	r0, [r4, #68]	; 0x44
 8003c82:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003c84:	68e3      	ldr	r3, [r4, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d12b      	bne.n	8003ce2 <HAL_I2C_IsDeviceReady+0xa2>
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_I2C_IsDeviceReady+0x144>)
 8003c8c:	9a04      	ldr	r2, [sp, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003c94:	f7fe ffc2 	bl	8002c1c <HAL_GetTick>
 8003c98:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca2:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca6:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ca8:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003caa:	431d      	orrs	r5, r3
 8003cac:	d01c      	beq.n	8003ce8 <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	2710      	movs	r7, #16
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	403a      	ands	r2, r7
 8003cb8:	423b      	tst	r3, r7
 8003cba:	d12d      	bne.n	8003d18 <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003cbc:	9b03      	ldr	r3, [sp, #12]
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	0020      	movs	r0, r4
 8003cc4:	0033      	movs	r3, r6
 8003cc6:	f7ff fdf1 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d121      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cce:	2320      	movs	r3, #32
 8003cd0:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8003cd2:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd4:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003cd8:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	3241      	adds	r2, #65	; 0x41
 8003cdc:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003cde:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003ce0:	e017      	b.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ce2:	23a0      	movs	r3, #160	; 0xa0
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	e7d1      	b.n	8003c8c <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 8003ce8:	1c73      	adds	r3, r6, #1
 8003cea:	d0d6      	beq.n	8003c9a <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cec:	f7fe ff96 	bl	8002c1c <HAL_GetTick>
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	1ac0      	subs	r0, r0, r3
 8003cf4:	42b0      	cmp	r0, r6
 8003cf6:	d801      	bhi.n	8003cfc <HAL_I2C_IsDeviceReady+0xbc>
 8003cf8:	2e00      	cmp	r6, #0
 8003cfa:	d1ce      	bne.n	8003c9a <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	2320      	movs	r3, #32
 8003d00:	3241      	adds	r2, #65	; 0x41
 8003d02:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8003d06:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	3440      	adds	r4, #64	; 0x40
 8003d10:	7023      	strb	r3, [r4, #0]
}
 8003d12:	0028      	movs	r0, r5
 8003d14:	b009      	add	sp, #36	; 0x24
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2120      	movs	r1, #32
 8003d20:	0033      	movs	r3, r6
 8003d22:	0020      	movs	r0, r4
 8003d24:	f7ff fdc2 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003d28:	1e02      	subs	r2, r0, #0
 8003d2a:	d1f2      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8003d2e:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d32:	2720      	movs	r7, #32
 8003d34:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8003d36:	9907      	ldr	r1, [sp, #28]
 8003d38:	4281      	cmp	r1, r0
 8003d3a:	d10f      	bne.n	8003d5c <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	6858      	ldr	r0, [r3, #4]
 8003d40:	01c9      	lsls	r1, r1, #7
 8003d42:	4301      	orrs	r1, r0
 8003d44:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	0039      	movs	r1, r7
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	0033      	movs	r3, r6
 8003d50:	f7ff fdac 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1dc      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003d5c:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003d5e:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8003d60:	3301      	adds	r3, #1
 8003d62:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003d64:	9b07      	ldr	r3, [sp, #28]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d200      	bcs.n	8003d6c <HAL_I2C_IsDeviceReady+0x12c>
 8003d6a:	e78b      	b.n	8003c84 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	0022      	movs	r2, r4
 8003d6e:	2320      	movs	r3, #32
 8003d70:	3241      	adds	r2, #65	; 0x41
 8003d72:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003d76:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003d80:	e7c7      	b.n	8003d12 <HAL_I2C_IsDeviceReady+0xd2>
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	02002000 	.word	0x02002000

08003d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	3441      	adds	r4, #65	; 0x41
 8003d8e:	7822      	ldrb	r2, [r4, #0]
{
 8003d90:	0003      	movs	r3, r0
 8003d92:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	b2d6      	uxtb	r6, r2
 8003d98:	2a20      	cmp	r2, #32
 8003d9a:	d118      	bne.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003d9c:	001d      	movs	r5, r3
 8003d9e:	3540      	adds	r5, #64	; 0x40
 8003da0:	782a      	ldrb	r2, [r5, #0]
 8003da2:	2a01      	cmp	r2, #1
 8003da4:	d013      	beq.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3a23      	subs	r2, #35	; 0x23
 8003dae:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db0:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003db2:	4391      	bics	r1, r2
 8003db4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003dba:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dbc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	4339      	orrs	r1, r7
 8003dc2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003dcc:	7028      	strb	r0, [r5, #0]
  }
}
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	ffffefff 	.word	0xffffefff

08003dd4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd4:	0002      	movs	r2, r0
{
 8003dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd8:	3241      	adds	r2, #65	; 0x41
 8003dda:	7814      	ldrb	r4, [r2, #0]
{
 8003ddc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	2c20      	cmp	r4, #32
 8003de4:	d117      	bne.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003de6:	001c      	movs	r4, r3
 8003de8:	3440      	adds	r4, #64	; 0x40
 8003dea:	7826      	ldrb	r6, [r4, #0]
 8003dec:	2e01      	cmp	r6, #1
 8003dee:	d012      	beq.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	3022      	adds	r0, #34	; 0x22
 8003df2:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3823      	subs	r0, #35	; 0x23
 8003df8:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003dfa:	4f07      	ldr	r7, [pc, #28]	; (8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003dfc:	4386      	bics	r6, r0
 8003dfe:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003e00:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003e02:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003e04:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003e06:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003e08:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	4308      	orrs	r0, r1
 8003e0e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003e10:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003e14:	7020      	strb	r0, [r4, #0]
  }
}
 8003e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e18:	fffff0ff 	.word	0xfffff0ff

08003e1c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003e20:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003e22:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e24:	4022      	ands	r2, r4
 8003e26:	2a08      	cmp	r2, #8
 8003e28:	d031      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x72>
 8003e2a:	2a0c      	cmp	r2, #12
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x26>
 8003e2e:	2a04      	cmp	r2, #4
 8003e30:	d125      	bne.n	8003e7e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e32:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003e34:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e36:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003e38:	17c0      	asrs	r0, r0, #31
 8003e3a:	4018      	ands	r0, r3
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x80>)
 8003e3e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e42:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e44:	4816      	ldr	r0, [pc, #88]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e46:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e48:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e4c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e50:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e52:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e54:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e56:	4211      	tst	r1, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f7fc fa1c 	bl	800029c <__aeabi_lmul>
 8003e64:	0022      	movs	r2, r4
 8003e66:	2300      	movs	r3, #0
 8003e68:	f7fc f9f8 	bl	800025c <__aeabi_uldivmod>
 8003e6c:	e7e8      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2310      	movs	r3, #16
 8003e72:	421a      	tst	r2, r3
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003e78:	e7f0      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x80>)
 8003e7c:	e7ee      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e7e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e80:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e82:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e88:	3301      	adds	r3, #1
 8003e8a:	4098      	lsls	r0, r3
      break;
 8003e8c:	e7d8      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003e8e:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003e90:	e7d6      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x24>
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	40021000 	.word	0x40021000
 8003e98:	ff48e500 	.word	0xff48e500
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	08006200 	.word	0x08006200
 8003ea4:	007a1200 	.word	0x007a1200
 8003ea8:	003d0900 	.word	0x003d0900

08003eac <HAL_RCC_OscConfig>:
{
 8003eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eae:	0005      	movs	r5, r0
 8003eb0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d05a      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	4cbe      	ldr	r4, [pc, #760]	; (80041b4 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ebe:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	025b      	lsls	r3, r3, #9
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	07d2      	lsls	r2, r2, #31
 8003ecc:	d442      	bmi.n	8003f54 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	079b      	lsls	r3, r3, #30
 8003ed2:	d500      	bpl.n	8003ed6 <HAL_RCC_OscConfig+0x2a>
 8003ed4:	e08b      	b.n	8003fee <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	06db      	lsls	r3, r3, #27
 8003eda:	d529      	bpl.n	8003f30 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003edc:	2e00      	cmp	r6, #0
 8003ede:	d000      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x36>
 8003ee0:	e0dc      	b.n	800409c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	d502      	bpl.n	8003eee <HAL_RCC_OscConfig+0x42>
 8003ee8:	69eb      	ldr	r3, [r5, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d03e      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eee:	6862      	ldr	r2, [r4, #4]
 8003ef0:	49b1      	ldr	r1, [pc, #708]	; (80041b8 <HAL_RCC_OscConfig+0x30c>)
 8003ef2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efa:	6861      	ldr	r1, [r4, #4]
 8003efc:	6a2a      	ldr	r2, [r5, #32]
 8003efe:	0209      	lsls	r1, r1, #8
 8003f00:	0a09      	lsrs	r1, r1, #8
 8003f02:	0612      	lsls	r2, r2, #24
 8003f04:	430a      	orrs	r2, r1
 8003f06:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	0212      	lsls	r2, r2, #8
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f14:	68e1      	ldr	r1, [r4, #12]
 8003f16:	060a      	lsls	r2, r1, #24
 8003f18:	49a8      	ldr	r1, [pc, #672]	; (80041bc <HAL_RCC_OscConfig+0x310>)
 8003f1a:	0f12      	lsrs	r2, r2, #28
 8003f1c:	5c8a      	ldrb	r2, [r1, r2]
 8003f1e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f20:	4aa7      	ldr	r2, [pc, #668]	; (80041c0 <HAL_RCC_OscConfig+0x314>)
 8003f22:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003f24:	4ba7      	ldr	r3, [pc, #668]	; (80041c4 <HAL_RCC_OscConfig+0x318>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	f7fe fe34 	bl	8002b94 <HAL_InitTick>
        if(status != HAL_OK)
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d134      	bne.n	8003f9a <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	071b      	lsls	r3, r3, #28
 8003f34:	d500      	bpl.n	8003f38 <HAL_RCC_OscConfig+0x8c>
 8003f36:	e0e8      	b.n	800410a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	075b      	lsls	r3, r3, #29
 8003f3c:	d500      	bpl.n	8003f40 <HAL_RCC_OscConfig+0x94>
 8003f3e:	e10a      	b.n	8004156 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	069b      	lsls	r3, r3, #26
 8003f44:	d500      	bpl.n	8003f48 <HAL_RCC_OscConfig+0x9c>
 8003f46:	e18e      	b.n	8004266 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d000      	beq.n	8003f50 <HAL_RCC_OscConfig+0xa4>
 8003f4e:	e1bd      	b.n	80042cc <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8003f50:	2000      	movs	r0, #0
 8003f52:	e022      	b.n	8003f9a <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f54:	2e08      	cmp	r6, #8
 8003f56:	d003      	beq.n	8003f60 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f58:	2e0c      	cmp	r6, #12
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCC_OscConfig+0xc4>
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	039b      	lsls	r3, r3, #14
 8003f64:	d5b3      	bpl.n	8003ece <HAL_RCC_OscConfig+0x22>
 8003f66:	686b      	ldr	r3, [r5, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1b0      	bne.n	8003ece <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	686a      	ldr	r2, [r5, #4]
 8003f72:	428a      	cmp	r2, r1
 8003f74:	d113      	bne.n	8003f9e <HAL_RCC_OscConfig+0xf2>
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fe4e 	bl	8002c1c <HAL_GetTick>
 8003f80:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	0292      	lsls	r2, r2, #10
 8003f88:	4213      	tst	r3, r2
 8003f8a:	d1a0      	bne.n	8003ece <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fe fe46 	bl	8002c1c <HAL_GetTick>
 8003f90:	9b00      	ldr	r3, [sp, #0]
 8003f92:	1ac0      	subs	r0, r0, r3
 8003f94:	2864      	cmp	r0, #100	; 0x64
 8003f96:	d9f4      	bls.n	8003f82 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8003f98:	2003      	movs	r0, #3
}
 8003f9a:	b005      	add	sp, #20
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9e:	21a0      	movs	r1, #160	; 0xa0
 8003fa0:	02c9      	lsls	r1, r1, #11
 8003fa2:	428a      	cmp	r2, r1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x106>
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	02d2      	lsls	r2, r2, #11
 8003fac:	430a      	orrs	r2, r1
 8003fae:	6022      	str	r2, [r4, #0]
 8003fb0:	e7e1      	b.n	8003f76 <HAL_RCC_OscConfig+0xca>
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	4884      	ldr	r0, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x31c>)
 8003fb6:	4001      	ands	r1, r0
 8003fb8:	6021      	str	r1, [r4, #0]
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	4982      	ldr	r1, [pc, #520]	; (80041cc <HAL_RCC_OscConfig+0x320>)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	d1d6      	bne.n	8003f7c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8003fce:	f7fe fe25 	bl	8002c1c <HAL_GetTick>
 8003fd2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	0292      	lsls	r2, r2, #10
 8003fda:	4213      	tst	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x134>
 8003fde:	e776      	b.n	8003ece <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fe1c 	bl	8002c1c <HAL_GetTick>
 8003fe4:	9b00      	ldr	r3, [sp, #0]
 8003fe6:	1ac0      	subs	r0, r0, r3
 8003fe8:	2864      	cmp	r0, #100	; 0x64
 8003fea:	d9f3      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x128>
 8003fec:	e7d4      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003fee:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff0:	2e04      	cmp	r6, #4
 8003ff2:	d003      	beq.n	8003ffc <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ff4:	2e0c      	cmp	r6, #12
 8003ff6:	d124      	bne.n	8004042 <HAL_RCC_OscConfig+0x196>
 8003ff8:	2f00      	cmp	r7, #0
 8003ffa:	d122      	bne.n	8004042 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	075b      	lsls	r3, r3, #29
 8004000:	d501      	bpl.n	8004006 <HAL_RCC_OscConfig+0x15a>
 8004002:	2a00      	cmp	r2, #0
 8004004:	d0b2      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	6861      	ldr	r1, [r4, #4]
 8004008:	692b      	ldr	r3, [r5, #16]
 800400a:	4871      	ldr	r0, [pc, #452]	; (80041d0 <HAL_RCC_OscConfig+0x324>)
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	4001      	ands	r1, r0
 8004010:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004012:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	438b      	bics	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401e:	f7ff fefd 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	4a65      	ldr	r2, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x310>)
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	0f1b      	lsrs	r3, r3, #28
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	40d8      	lsrs	r0, r3
 800402e:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <HAL_RCC_OscConfig+0x314>)
 8004030:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8004032:	4b64      	ldr	r3, [pc, #400]	; (80041c4 <HAL_RCC_OscConfig+0x318>)
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	f7fe fdad 	bl	8002b94 <HAL_InitTick>
      if(status != HAL_OK)
 800403a:	2800      	cmp	r0, #0
 800403c:	d100      	bne.n	8004040 <HAL_RCC_OscConfig+0x194>
 800403e:	e74a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2a>
 8004040:	e7ab      	b.n	8003f9a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004042:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8004044:	2a00      	cmp	r2, #0
 8004046:	d018      	beq.n	800407a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004048:	2109      	movs	r1, #9
 800404a:	438b      	bics	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004050:	f7fe fde4 	bl	8002c1c <HAL_GetTick>
 8004054:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004056:	2204      	movs	r2, #4
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	4213      	tst	r3, r2
 800405c:	d007      	beq.n	800406e <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	692b      	ldr	r3, [r5, #16]
 8004062:	495b      	ldr	r1, [pc, #364]	; (80041d0 <HAL_RCC_OscConfig+0x324>)
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	400a      	ands	r2, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	e733      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406e:	f7fe fdd5 	bl	8002c1c <HAL_GetTick>
 8004072:	1bc0      	subs	r0, r0, r7
 8004074:	2802      	cmp	r0, #2
 8004076:	d9ee      	bls.n	8004056 <HAL_RCC_OscConfig+0x1aa>
 8004078:	e78e      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 800407a:	2201      	movs	r2, #1
 800407c:	4393      	bics	r3, r2
 800407e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004080:	f7fe fdcc 	bl	8002c1c <HAL_GetTick>
 8004084:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004086:	2204      	movs	r2, #4
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	4213      	tst	r3, r2
 800408c:	d100      	bne.n	8004090 <HAL_RCC_OscConfig+0x1e4>
 800408e:	e722      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7fe fdc4 	bl	8002c1c <HAL_GetTick>
 8004094:	1bc0      	subs	r0, r0, r7
 8004096:	2802      	cmp	r0, #2
 8004098:	d9f5      	bls.n	8004086 <HAL_RCC_OscConfig+0x1da>
 800409a:	e77d      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800409c:	69eb      	ldr	r3, [r5, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d020      	beq.n	80040e4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040ac:	f7fe fdb6 	bl	8002c1c <HAL_GetTick>
 80040b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4213      	tst	r3, r2
 80040ba:	d00d      	beq.n	80040d8 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	4a3e      	ldr	r2, [pc, #248]	; (80041b8 <HAL_RCC_OscConfig+0x30c>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80040c4:	4313      	orrs	r3, r2
 80040c6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c8:	6862      	ldr	r2, [r4, #4]
 80040ca:	6a2b      	ldr	r3, [r5, #32]
 80040cc:	0212      	lsls	r2, r2, #8
 80040ce:	061b      	lsls	r3, r3, #24
 80040d0:	0a12      	lsrs	r2, r2, #8
 80040d2:	4313      	orrs	r3, r2
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	e72b      	b.n	8003f30 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d8:	f7fe fda0 	bl	8002c1c <HAL_GetTick>
 80040dc:	1bc0      	subs	r0, r0, r7
 80040de:	2802      	cmp	r0, #2
 80040e0:	d9e7      	bls.n	80040b2 <HAL_RCC_OscConfig+0x206>
 80040e2:	e759      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_RCC_OscConfig+0x328>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040ec:	f7fe fd96 	bl	8002c1c <HAL_GetTick>
 80040f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040f2:	2280      	movs	r2, #128	; 0x80
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	4213      	tst	r3, r2
 80040fa:	d100      	bne.n	80040fe <HAL_RCC_OscConfig+0x252>
 80040fc:	e718      	b.n	8003f30 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040fe:	f7fe fd8d 	bl	8002c1c <HAL_GetTick>
 8004102:	1bc0      	subs	r0, r0, r7
 8004104:	2802      	cmp	r0, #2
 8004106:	d9f4      	bls.n	80040f2 <HAL_RCC_OscConfig+0x246>
 8004108:	e746      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410a:	696a      	ldr	r2, [r5, #20]
 800410c:	2301      	movs	r3, #1
 800410e:	2a00      	cmp	r2, #0
 8004110:	d010      	beq.n	8004134 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8004112:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004114:	4313      	orrs	r3, r2
 8004116:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004118:	f7fe fd80 	bl	8002c1c <HAL_GetTick>
 800411c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800411e:	2202      	movs	r2, #2
 8004120:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004122:	4213      	tst	r3, r2
 8004124:	d000      	beq.n	8004128 <HAL_RCC_OscConfig+0x27c>
 8004126:	e707      	b.n	8003f38 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe fd78 	bl	8002c1c <HAL_GetTick>
 800412c:	1bc0      	subs	r0, r0, r7
 800412e:	2802      	cmp	r0, #2
 8004130:	d9f5      	bls.n	800411e <HAL_RCC_OscConfig+0x272>
 8004132:	e731      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8004134:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004136:	439a      	bics	r2, r3
 8004138:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800413a:	f7fe fd6f 	bl	8002c1c <HAL_GetTick>
 800413e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004140:	2202      	movs	r2, #2
 8004142:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004144:	4213      	tst	r3, r2
 8004146:	d100      	bne.n	800414a <HAL_RCC_OscConfig+0x29e>
 8004148:	e6f6      	b.n	8003f38 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe fd67 	bl	8002c1c <HAL_GetTick>
 800414e:	1bc0      	subs	r0, r0, r7
 8004150:	2802      	cmp	r0, #2
 8004152:	d9f5      	bls.n	8004140 <HAL_RCC_OscConfig+0x294>
 8004154:	e720      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004156:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004158:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800415c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800415e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004160:	421a      	tst	r2, r3
 8004162:	d104      	bne.n	800416e <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004166:	4313      	orrs	r3, r2
 8004168:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	4f19      	ldr	r7, [pc, #100]	; (80041d8 <HAL_RCC_OscConfig+0x32c>)
 8004172:	0052      	lsls	r2, r2, #1
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4213      	tst	r3, r2
 8004178:	d008      	beq.n	800418c <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	68ab      	ldr	r3, [r5, #8]
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	4293      	cmp	r3, r2
 8004182:	d12b      	bne.n	80041dc <HAL_RCC_OscConfig+0x330>
 8004184:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004186:	4313      	orrs	r3, r2
 8004188:	6523      	str	r3, [r4, #80]	; 0x50
 800418a:	e04c      	b.n	8004226 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	0052      	lsls	r2, r2, #1
 8004192:	4313      	orrs	r3, r2
 8004194:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004196:	f7fe fd41 	bl	8002c1c <HAL_GetTick>
 800419a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	4213      	tst	r3, r2
 80041a4:	d1e9      	bne.n	800417a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fe fd39 	bl	8002c1c <HAL_GetTick>
 80041aa:	9b01      	ldr	r3, [sp, #4]
 80041ac:	1ac0      	subs	r0, r0, r3
 80041ae:	2864      	cmp	r0, #100	; 0x64
 80041b0:	d9f4      	bls.n	800419c <HAL_RCC_OscConfig+0x2f0>
 80041b2:	e6f1      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	ffff1fff 	.word	0xffff1fff
 80041bc:	080061f0 	.word	0x080061f0
 80041c0:	20000008 	.word	0x20000008
 80041c4:	2000007c 	.word	0x2000007c
 80041c8:	fffeffff 	.word	0xfffeffff
 80041cc:	fffbffff 	.word	0xfffbffff
 80041d0:	ffffe0ff 	.word	0xffffe0ff
 80041d4:	fffffeff 	.word	0xfffffeff
 80041d8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <HAL_RCC_OscConfig+0x362>
 80041e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041e2:	4a6b      	ldr	r2, [pc, #428]	; (8004390 <HAL_RCC_OscConfig+0x4e4>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	6523      	str	r3, [r4, #80]	; 0x50
 80041e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041ea:	4a6a      	ldr	r2, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041f0:	f7fe fd14 	bl	8002c1c <HAL_GetTick>
 80041f4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	4213      	tst	r3, r2
 80041fe:	d01a      	beq.n	8004236 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fe fd0c 	bl	8002c1c <HAL_GetTick>
 8004204:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_RCC_OscConfig+0x4ec>)
 8004206:	1bc0      	subs	r0, r0, r7
 8004208:	4298      	cmp	r0, r3
 800420a:	d9f4      	bls.n	80041f6 <HAL_RCC_OscConfig+0x34a>
 800420c:	e6c4      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420e:	21a0      	movs	r1, #160	; 0xa0
 8004210:	00c9      	lsls	r1, r1, #3
 8004212:	428b      	cmp	r3, r1
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x39c>
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	430b      	orrs	r3, r1
 800421e:	6523      	str	r3, [r4, #80]	; 0x50
 8004220:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004222:	431a      	orrs	r2, r3
 8004224:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004226:	f7fe fcf9 	bl	8002c1c <HAL_GetTick>
 800422a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004230:	0092      	lsls	r2, r2, #2
 8004232:	4213      	tst	r3, r2
 8004234:	d010      	beq.n	8004258 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8004236:	9b00      	ldr	r3, [sp, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d000      	beq.n	800423e <HAL_RCC_OscConfig+0x392>
 800423c:	e680      	b.n	8003f40 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004240:	4a56      	ldr	r2, [pc, #344]	; (800439c <HAL_RCC_OscConfig+0x4f0>)
 8004242:	4013      	ands	r3, r2
 8004244:	63a3      	str	r3, [r4, #56]	; 0x38
 8004246:	e67b      	b.n	8003f40 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800424a:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_RCC_OscConfig+0x4e4>)
 800424c:	4013      	ands	r3, r2
 800424e:	6523      	str	r3, [r4, #80]	; 0x50
 8004250:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004252:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004254:	4013      	ands	r3, r2
 8004256:	e797      	b.n	8004188 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fe fce0 	bl	8002c1c <HAL_GetTick>
 800425c:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <HAL_RCC_OscConfig+0x4ec>)
 800425e:	1bc0      	subs	r0, r0, r7
 8004260:	4298      	cmp	r0, r3
 8004262:	d9e3      	bls.n	800422c <HAL_RCC_OscConfig+0x380>
 8004264:	e698      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004266:	69a9      	ldr	r1, [r5, #24]
 8004268:	2301      	movs	r3, #1
 800426a:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_RCC_OscConfig+0x4f4>)
 800426c:	2900      	cmp	r1, #0
 800426e:	d018      	beq.n	80042a2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8004270:	68a1      	ldr	r1, [r4, #8]
 8004272:	4319      	orrs	r1, r3
 8004274:	60a1      	str	r1, [r4, #8]
 8004276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004278:	430b      	orrs	r3, r1
 800427a:	6363      	str	r3, [r4, #52]	; 0x34
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	6a11      	ldr	r1, [r2, #32]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	430b      	orrs	r3, r1
 8004284:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004286:	f7fe fcc9 	bl	8002c1c <HAL_GetTick>
 800428a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800428c:	2202      	movs	r2, #2
 800428e:	68a3      	ldr	r3, [r4, #8]
 8004290:	4213      	tst	r3, r2
 8004292:	d000      	beq.n	8004296 <HAL_RCC_OscConfig+0x3ea>
 8004294:	e658      	b.n	8003f48 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004296:	f7fe fcc1 	bl	8002c1c <HAL_GetTick>
 800429a:	1bc0      	subs	r0, r0, r7
 800429c:	2802      	cmp	r0, #2
 800429e:	d9f5      	bls.n	800428c <HAL_RCC_OscConfig+0x3e0>
 80042a0:	e67a      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 80042a2:	68a1      	ldr	r1, [r4, #8]
 80042a4:	4399      	bics	r1, r3
 80042a6:	60a1      	str	r1, [r4, #8]
 80042a8:	6a13      	ldr	r3, [r2, #32]
 80042aa:	493e      	ldr	r1, [pc, #248]	; (80043a4 <HAL_RCC_OscConfig+0x4f8>)
 80042ac:	400b      	ands	r3, r1
 80042ae:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80042b0:	f7fe fcb4 	bl	8002c1c <HAL_GetTick>
 80042b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042b6:	2202      	movs	r2, #2
 80042b8:	68a3      	ldr	r3, [r4, #8]
 80042ba:	4213      	tst	r3, r2
 80042bc:	d100      	bne.n	80042c0 <HAL_RCC_OscConfig+0x414>
 80042be:	e643      	b.n	8003f48 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c0:	f7fe fcac 	bl	8002c1c <HAL_GetTick>
 80042c4:	1bc0      	subs	r0, r0, r7
 80042c6:	2802      	cmp	r0, #2
 80042c8:	d9f5      	bls.n	80042b6 <HAL_RCC_OscConfig+0x40a>
 80042ca:	e665      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042cc:	2e0c      	cmp	r6, #12
 80042ce:	d043      	beq.n	8004358 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d0:	4a35      	ldr	r2, [pc, #212]	; (80043a8 <HAL_RCC_OscConfig+0x4fc>)
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d12e      	bne.n	8004334 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 80042d6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042d8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80042da:	4013      	ands	r3, r2
 80042dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042de:	f7fe fc9d 	bl	8002c1c <HAL_GetTick>
 80042e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042e4:	04bf      	lsls	r7, r7, #18
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	423b      	tst	r3, r7
 80042ea:	d11d      	bne.n	8004328 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80042ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80042f0:	68e2      	ldr	r2, [r4, #12]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042f6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	400a      	ands	r2, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042fe:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004300:	4313      	orrs	r3, r2
 8004302:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	045b      	lsls	r3, r3, #17
 800430a:	4313      	orrs	r3, r2
 800430c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800430e:	f7fe fc85 	bl	8002c1c <HAL_GetTick>
 8004312:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	4233      	tst	r3, r6
 8004318:	d000      	beq.n	800431c <HAL_RCC_OscConfig+0x470>
 800431a:	e619      	b.n	8003f50 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fc7e 	bl	8002c1c <HAL_GetTick>
 8004320:	1b40      	subs	r0, r0, r5
 8004322:	2802      	cmp	r0, #2
 8004324:	d9f6      	bls.n	8004314 <HAL_RCC_OscConfig+0x468>
 8004326:	e637      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe fc78 	bl	8002c1c <HAL_GetTick>
 800432c:	1b80      	subs	r0, r0, r6
 800432e:	2802      	cmp	r0, #2
 8004330:	d9d9      	bls.n	80042e6 <HAL_RCC_OscConfig+0x43a>
 8004332:	e631      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8004334:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004336:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004338:	4013      	ands	r3, r2
 800433a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800433c:	f7fe fc6e 	bl	8002c1c <HAL_GetTick>
 8004340:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004342:	04b6      	lsls	r6, r6, #18
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	4233      	tst	r3, r6
 8004348:	d100      	bne.n	800434c <HAL_RCC_OscConfig+0x4a0>
 800434a:	e601      	b.n	8003f50 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe fc66 	bl	8002c1c <HAL_GetTick>
 8004350:	1b40      	subs	r0, r0, r5
 8004352:	2802      	cmp	r0, #2
 8004354:	d9f6      	bls.n	8004344 <HAL_RCC_OscConfig+0x498>
 8004356:	e61f      	b.n	8003f98 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004358:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435a:	2b01      	cmp	r3, #1
 800435c:	d100      	bne.n	8004360 <HAL_RCC_OscConfig+0x4b4>
 800435e:	e61c      	b.n	8003f9a <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004362:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004366:	0252      	lsls	r2, r2, #9
 8004368:	401a      	ands	r2, r3
 800436a:	428a      	cmp	r2, r1
 800436c:	d000      	beq.n	8004370 <HAL_RCC_OscConfig+0x4c4>
 800436e:	e5fd      	b.n	8003f6c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004370:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004374:	0392      	lsls	r2, r2, #14
 8004376:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004378:	428a      	cmp	r2, r1
 800437a:	d000      	beq.n	800437e <HAL_RCC_OscConfig+0x4d2>
 800437c:	e5f6      	b.n	8003f6c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800437e:	22c0      	movs	r2, #192	; 0xc0
 8004380:	0412      	lsls	r2, r2, #16
 8004382:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004384:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004386:	4293      	cmp	r3, r2
 8004388:	d100      	bne.n	800438c <HAL_RCC_OscConfig+0x4e0>
 800438a:	e5e1      	b.n	8003f50 <HAL_RCC_OscConfig+0xa4>
 800438c:	e5ee      	b.n	8003f6c <HAL_RCC_OscConfig+0xc0>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	fffffeff 	.word	0xfffffeff
 8004394:	fffffbff 	.word	0xfffffbff
 8004398:	00001388 	.word	0x00001388
 800439c:	efffffff 	.word	0xefffffff
 80043a0:	40010000 	.word	0x40010000
 80043a4:	ffffdfff 	.word	0xffffdfff
 80043a8:	feffffff 	.word	0xfeffffff
 80043ac:	ff02ffff 	.word	0xff02ffff

080043b0 <HAL_RCC_ClockConfig>:
{
 80043b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b2:	1e04      	subs	r4, r0, #0
 80043b4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80043b8:	2001      	movs	r0, #1
}
 80043ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	2501      	movs	r5, #1
 80043be:	4e5b      	ldr	r6, [pc, #364]	; (800452c <HAL_RCC_ClockConfig+0x17c>)
 80043c0:	9a01      	ldr	r2, [sp, #4]
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	402b      	ands	r3, r5
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d331      	bcc.n	800442e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	0793      	lsls	r3, r2, #30
 80043ce:	d443      	bmi.n	8004458 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d0:	07d3      	lsls	r3, r2, #31
 80043d2:	d449      	bmi.n	8004468 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d4:	2501      	movs	r5, #1
 80043d6:	6833      	ldr	r3, [r6, #0]
 80043d8:	9a01      	ldr	r2, [sp, #4]
 80043da:	402b      	ands	r3, r5
 80043dc:	4293      	cmp	r3, r2
 80043de:	d909      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	43ab      	bics	r3, r5
 80043e4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80043e6:	f7fe fc19 	bl	8002c1c <HAL_GetTick>
 80043ea:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	422b      	tst	r3, r5
 80043f0:	d000      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
 80043f2:	e08c      	b.n	800450e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	4d4e      	ldr	r5, [pc, #312]	; (8004530 <HAL_RCC_ClockConfig+0x180>)
 80043f8:	0753      	lsls	r3, r2, #29
 80043fa:	d500      	bpl.n	80043fe <HAL_RCC_ClockConfig+0x4e>
 80043fc:	e08f      	b.n	800451e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	0713      	lsls	r3, r2, #28
 8004400:	d506      	bpl.n	8004410 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	68e9      	ldr	r1, [r5, #12]
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <HAL_RCC_ClockConfig+0x184>)
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	400a      	ands	r2, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004410:	f7ff fd04 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8004414:	68eb      	ldr	r3, [r5, #12]
 8004416:	4a48      	ldr	r2, [pc, #288]	; (8004538 <HAL_RCC_ClockConfig+0x188>)
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	0f1b      	lsrs	r3, r3, #28
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	40d8      	lsrs	r0, r3
 8004420:	4b46      	ldr	r3, [pc, #280]	; (800453c <HAL_RCC_ClockConfig+0x18c>)
 8004422:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCC_ClockConfig+0x190>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	f7fe fbb4 	bl	8002b94 <HAL_InitTick>
  if(status != HAL_OK)
 800442c:	e7c5      	b.n	80043ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	9a01      	ldr	r2, [sp, #4]
 8004432:	43ab      	bics	r3, r5
 8004434:	4313      	orrs	r3, r2
 8004436:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004438:	f7fe fbf0 	bl	8002c1c <HAL_GetTick>
 800443c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	6833      	ldr	r3, [r6, #0]
 8004440:	9a01      	ldr	r2, [sp, #4]
 8004442:	402b      	ands	r3, r5
 8004444:	4293      	cmp	r3, r2
 8004446:	d0c0      	beq.n	80043ca <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004448:	f7fe fbe8 	bl	8002c1c <HAL_GetTick>
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 800444e:	1bc0      	subs	r0, r0, r7
 8004450:	4298      	cmp	r0, r3
 8004452:	d9f4      	bls.n	800443e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004454:	2003      	movs	r0, #3
 8004456:	e7b0      	b.n	80043ba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	20f0      	movs	r0, #240	; 0xf0
 800445a:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_RCC_ClockConfig+0x180>)
 800445c:	68cb      	ldr	r3, [r1, #12]
 800445e:	4383      	bics	r3, r0
 8004460:	68a0      	ldr	r0, [r4, #8]
 8004462:	4303      	orrs	r3, r0
 8004464:	60cb      	str	r3, [r1, #12]
 8004466:	e7b3      	b.n	80043d0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	4d31      	ldr	r5, [pc, #196]	; (8004530 <HAL_RCC_ClockConfig+0x180>)
 800446a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800446c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	2a02      	cmp	r2, #2
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004472:	039b      	lsls	r3, r3, #14
 8004474:	d5a0      	bpl.n	80043b8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004476:	2103      	movs	r1, #3
 8004478:	68eb      	ldr	r3, [r5, #12]
 800447a:	438b      	bics	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004480:	f7fe fbcc 	bl	8002c1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004484:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004486:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004488:	2b02      	cmp	r3, #2
 800448a:	d118      	bne.n	80044be <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	220c      	movs	r2, #12
 800448e:	68eb      	ldr	r3, [r5, #12]
 8004490:	4013      	ands	r3, r2
 8004492:	2b08      	cmp	r3, #8
 8004494:	d09e      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004496:	f7fe fbc1 	bl	8002c1c <HAL_GetTick>
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 800449c:	1bc0      	subs	r0, r0, r7
 800449e:	4298      	cmp	r0, r3
 80044a0:	d9f4      	bls.n	800448c <HAL_RCC_ClockConfig+0xdc>
 80044a2:	e7d7      	b.n	8004454 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a4:	2a03      	cmp	r2, #3
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	d4e4      	bmi.n	8004476 <HAL_RCC_ClockConfig+0xc6>
 80044ac:	e784      	b.n	80043b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044ae:	2a01      	cmp	r2, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b2:	075b      	lsls	r3, r3, #29
 80044b4:	d4df      	bmi.n	8004476 <HAL_RCC_ClockConfig+0xc6>
 80044b6:	e77f      	b.n	80043b8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044b8:	059b      	lsls	r3, r3, #22
 80044ba:	d4dc      	bmi.n	8004476 <HAL_RCC_ClockConfig+0xc6>
 80044bc:	e77c      	b.n	80043b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d10b      	bne.n	80044da <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c2:	220c      	movs	r2, #12
 80044c4:	68eb      	ldr	r3, [r5, #12]
 80044c6:	4013      	ands	r3, r2
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d083      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe fba6 	bl	8002c1c <HAL_GetTick>
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 80044d2:	1bc0      	subs	r0, r0, r7
 80044d4:	4298      	cmp	r0, r3
 80044d6:	d9f4      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x112>
 80044d8:	e7bc      	b.n	8004454 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d011      	beq.n	8004502 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044de:	220c      	movs	r2, #12
 80044e0:	68eb      	ldr	r3, [r5, #12]
 80044e2:	4213      	tst	r3, r2
 80044e4:	d100      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x138>
 80044e6:	e775      	b.n	80043d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fe fb98 	bl	8002c1c <HAL_GetTick>
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 80044ee:	1bc0      	subs	r0, r0, r7
 80044f0:	4298      	cmp	r0, r3
 80044f2:	d9f4      	bls.n	80044de <HAL_RCC_ClockConfig+0x12e>
 80044f4:	e7ae      	b.n	8004454 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f6:	f7fe fb91 	bl	8002c1c <HAL_GetTick>
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 80044fc:	1bc0      	subs	r0, r0, r7
 80044fe:	4298      	cmp	r0, r3
 8004500:	d8a8      	bhi.n	8004454 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004502:	220c      	movs	r2, #12
 8004504:	68eb      	ldr	r3, [r5, #12]
 8004506:	4013      	ands	r3, r2
 8004508:	2b04      	cmp	r3, #4
 800450a:	d1f4      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x146>
 800450c:	e762      	b.n	80043d4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450e:	f7fe fb85 	bl	8002c1c <HAL_GetTick>
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_ClockConfig+0x194>)
 8004514:	1bc0      	subs	r0, r0, r7
 8004516:	4298      	cmp	r0, r3
 8004518:	d800      	bhi.n	800451c <HAL_RCC_ClockConfig+0x16c>
 800451a:	e767      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c>
 800451c:	e79a      	b.n	8004454 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451e:	68eb      	ldr	r3, [r5, #12]
 8004520:	4909      	ldr	r1, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x198>)
 8004522:	400b      	ands	r3, r1
 8004524:	68e1      	ldr	r1, [r4, #12]
 8004526:	430b      	orrs	r3, r1
 8004528:	60eb      	str	r3, [r5, #12]
 800452a:	e768      	b.n	80043fe <HAL_RCC_ClockConfig+0x4e>
 800452c:	40022000 	.word	0x40022000
 8004530:	40021000 	.word	0x40021000
 8004534:	ffffc7ff 	.word	0xffffc7ff
 8004538:	080061f0 	.word	0x080061f0
 800453c:	20000008 	.word	0x20000008
 8004540:	2000007c 	.word	0x2000007c
 8004544:	00001388 	.word	0x00001388
 8004548:	fffff8ff 	.word	0xfffff8ff

0800454c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800454c:	6803      	ldr	r3, [r0, #0]
{
 800454e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004550:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004552:	069b      	lsls	r3, r3, #26
 8004554:	d53c      	bpl.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004556:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004558:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4c5a      	ldr	r4, [pc, #360]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800455c:	055b      	lsls	r3, r3, #21
 800455e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004560:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004562:	421a      	tst	r2, r3
 8004564:	d104      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004568:	4313      	orrs	r3, r2
 800456a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800456c:	2301      	movs	r3, #1
 800456e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	2780      	movs	r7, #128	; 0x80
 8004572:	4e55      	ldr	r6, [pc, #340]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004574:	007f      	lsls	r7, r7, #1
 8004576:	6833      	ldr	r3, [r6, #0]
 8004578:	423b      	tst	r3, r7
 800457a:	d062      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800457c:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800457e:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004580:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004582:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004584:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004586:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800458c:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800458e:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004590:	428a      	cmp	r2, r1
 8004592:	d167      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004594:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004596:	0011      	movs	r1, r2
 8004598:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800459a:	421a      	tst	r2, r3
 800459c:	d16a      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459e:	6869      	ldr	r1, [r5, #4]
 80045a0:	23c0      	movs	r3, #192	; 0xc0
 80045a2:	000a      	movs	r2, r1
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	401a      	ands	r2, r3
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x70>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	4847      	ldr	r0, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80045b0:	4003      	ands	r3, r0
 80045b2:	20c0      	movs	r0, #192	; 0xc0
 80045b4:	0380      	lsls	r0, r0, #14
 80045b6:	4001      	ands	r1, r0
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045be:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045c0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c2:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d103      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ca:	4a41      	ldr	r2, [pc, #260]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	07da      	lsls	r2, r3, #31
 80045d4:	d506      	bpl.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d6:	2003      	movs	r0, #3
 80045d8:	493a      	ldr	r1, [pc, #232]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80045da:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80045dc:	4382      	bics	r2, r0
 80045de:	68a8      	ldr	r0, [r5, #8]
 80045e0:	4302      	orrs	r2, r0
 80045e2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e4:	079a      	lsls	r2, r3, #30
 80045e6:	d506      	bpl.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e8:	200c      	movs	r0, #12
 80045ea:	4936      	ldr	r1, [pc, #216]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80045ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80045ee:	4382      	bics	r2, r0
 80045f0:	68e8      	ldr	r0, [r5, #12]
 80045f2:	4302      	orrs	r2, r0
 80045f4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f6:	075a      	lsls	r2, r3, #29
 80045f8:	d506      	bpl.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045fa:	4932      	ldr	r1, [pc, #200]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80045fc:	4835      	ldr	r0, [pc, #212]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80045fe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004600:	4002      	ands	r2, r0
 8004602:	6928      	ldr	r0, [r5, #16]
 8004604:	4302      	orrs	r2, r0
 8004606:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004608:	071a      	lsls	r2, r3, #28
 800460a:	d506      	bpl.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800460c:	492d      	ldr	r1, [pc, #180]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800460e:	4832      	ldr	r0, [pc, #200]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004610:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004612:	4002      	ands	r2, r0
 8004614:	6968      	ldr	r0, [r5, #20]
 8004616:	4302      	orrs	r2, r0
 8004618:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800461a:	065a      	lsls	r2, r3, #25
 800461c:	d506      	bpl.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800461e:	4929      	ldr	r1, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004620:	482e      	ldr	r0, [pc, #184]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004622:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004624:	4002      	ands	r2, r0
 8004626:	69e8      	ldr	r0, [r5, #28]
 8004628:	4302      	orrs	r2, r0
 800462a:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800462c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	d517      	bpl.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004634:	492a      	ldr	r1, [pc, #168]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004636:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004638:	400b      	ands	r3, r1
 800463a:	69a9      	ldr	r1, [r5, #24]
 800463c:	430b      	orrs	r3, r1
 800463e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004642:	6833      	ldr	r3, [r6, #0]
 8004644:	433b      	orrs	r3, r7
 8004646:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004648:	f7fe fae8 	bl	8002c1c <HAL_GetTick>
 800464c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	6833      	ldr	r3, [r6, #0]
 8004650:	423b      	tst	r3, r7
 8004652:	d193      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fe fae2 	bl	8002c1c <HAL_GetTick>
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	1ac0      	subs	r0, r0, r3
 800465c:	2864      	cmp	r0, #100	; 0x64
 800465e:	d9f6      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 8004660:	2003      	movs	r0, #3
}
 8004662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004664:	429e      	cmp	r6, r3
 8004666:	d195      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004668:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800466a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800466c:	0392      	lsls	r2, r2, #14
 800466e:	d400      	bmi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004670:	e790      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004672:	e7f6      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004674:	42b1      	cmp	r1, r6
 8004676:	d100      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004678:	e791      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800467a:	682b      	ldr	r3, [r5, #0]
 800467c:	069b      	lsls	r3, r3, #26
 800467e:	d400      	bmi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004680:	e78d      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004682:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004684:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004686:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004688:	0312      	lsls	r2, r2, #12
 800468a:	4302      	orrs	r2, r0
 800468c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004692:	4815      	ldr	r0, [pc, #84]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004694:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004696:	4002      	ands	r2, r0
 8004698:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800469a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800469c:	05cb      	lsls	r3, r1, #23
 800469e:	d400      	bmi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80046a0:	e77d      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80046a2:	f7fe fabb 	bl	8002c1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80046a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046aa:	00bf      	lsls	r7, r7, #2
 80046ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046ae:	423b      	tst	r3, r7
 80046b0:	d000      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80046b2:	e774      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fe fab2 	bl	8002c1c <HAL_GetTick>
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80046ba:	1b80      	subs	r0, r0, r6
 80046bc:	4298      	cmp	r0, r3
 80046be:	d9f5      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046c0:	e7ce      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
 80046cc:	ffcfffff 	.word	0xffcfffff
 80046d0:	efffffff 	.word	0xefffffff
 80046d4:	fffff3ff 	.word	0xfffff3ff
 80046d8:	ffffcfff 	.word	0xffffcfff
 80046dc:	fbffffff 	.word	0xfbffffff
 80046e0:	fff3ffff 	.word	0xfff3ffff
 80046e4:	fffcffff 	.word	0xfffcffff
 80046e8:	fff7ffff 	.word	0xfff7ffff
 80046ec:	00001388 	.word	0x00001388

080046f0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80046f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f2:	001d      	movs	r5, r3
 80046f4:	0017      	movs	r7, r2
 80046f6:	b085      	sub	sp, #20
 80046f8:	000e      	movs	r6, r1
 80046fa:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046fc:	f7fe fa8e 	bl	8002c1c <HAL_GetTick>
 8004700:	19ed      	adds	r5, r5, r7
 8004702:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004704:	f7fe fa8a 	bl	8002c1c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004708:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800470a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	015b      	lsls	r3, r3, #5
 8004710:	0d1b      	lsrs	r3, r3, #20
 8004712:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004714:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004716:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004718:	6893      	ldr	r3, [r2, #8]
 800471a:	4033      	ands	r3, r6
 800471c:	429e      	cmp	r6, r3
 800471e:	d001      	beq.n	8004724 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004720:	2000      	movs	r0, #0
 8004722:	e032      	b.n	800478a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004724:	1c7b      	adds	r3, r7, #1
 8004726:	d0f7      	beq.n	8004718 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004728:	f7fe fa78 	bl	8002c1c <HAL_GetTick>
 800472c:	9b01      	ldr	r3, [sp, #4]
 800472e:	1ac0      	subs	r0, r0, r3
 8004730:	42a8      	cmp	r0, r5
 8004732:	d32c      	bcc.n	800478e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004734:	21e0      	movs	r1, #224	; 0xe0
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	438a      	bics	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473e:	2282      	movs	r2, #130	; 0x82
 8004740:	6861      	ldr	r1, [r4, #4]
 8004742:	0052      	lsls	r2, r2, #1
 8004744:	4291      	cmp	r1, r2
 8004746:	d10c      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	68a2      	ldr	r2, [r4, #8]
 800474c:	0209      	lsls	r1, r1, #8
 800474e:	428a      	cmp	r2, r1
 8004750:	d003      	beq.n	800475a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	00c9      	lsls	r1, r1, #3
 8004756:	428a      	cmp	r2, r1
 8004758:	d103      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800475a:	2140      	movs	r1, #64	; 0x40
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	438a      	bics	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004766:	0189      	lsls	r1, r1, #6
 8004768:	428a      	cmp	r2, r1
 800476a:	d106      	bne.n	800477a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	480d      	ldr	r0, [pc, #52]	; (80047a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004770:	4001      	ands	r1, r0
 8004772:	6019      	str	r1, [r3, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800477a:	0023      	movs	r3, r4
 800477c:	2201      	movs	r2, #1
 800477e:	3351      	adds	r3, #81	; 0x51
 8004780:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004782:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004784:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004786:	3450      	adds	r4, #80	; 0x50
 8004788:	7023      	strb	r3, [r4, #0]
}
 800478a:	b005      	add	sp, #20
 800478c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800478e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004790:	1e5a      	subs	r2, r3, #1
 8004792:	4193      	sbcs	r3, r2
 8004794:	425b      	negs	r3, r3
 8004796:	401d      	ands	r5, r3
      count--;
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3b01      	subs	r3, #1
 800479c:	e7ba      	b.n	8004714 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000008 	.word	0x20000008
 80047a4:	ffffdfff 	.word	0xffffdfff

080047a8 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047a8:	4b16      	ldr	r3, [pc, #88]	; (8004804 <SPI_EndRxTxTransaction+0x5c>)
{
 80047aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047ac:	0004      	movs	r4, r0
 80047ae:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	4915      	ldr	r1, [pc, #84]	; (8004808 <SPI_EndRxTxTransaction+0x60>)
{
 80047b4:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047b6:	f7fb fcc5 	bl	8000144 <__udivsi3>
 80047ba:	23fa      	movs	r3, #250	; 0xfa
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4343      	muls	r3, r0
 80047c0:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c2:	2382      	movs	r3, #130	; 0x82
 80047c4:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047c6:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4299      	cmp	r1, r3
 80047cc:	d10d      	bne.n	80047ea <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	0033      	movs	r3, r6
 80047d0:	002a      	movs	r2, r5
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	0020      	movs	r0, r4
 80047d6:	f7ff ff8b 	bl	80046f0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80047da:	2800      	cmp	r0, #0
 80047dc:	d00f      	beq.n	80047fe <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047de:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80047e0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047e4:	4313      	orrs	r3, r2
 80047e6:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80047e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <SPI_EndRxTxTransaction+0x56>
      count--;
 80047f0:	9b01      	ldr	r3, [sp, #4]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4213      	tst	r3, r2
 80047fc:	d1f5      	bne.n	80047ea <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80047fe:	2000      	movs	r0, #0
 8004800:	e7f2      	b.n	80047e8 <SPI_EndRxTxTransaction+0x40>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20000008 	.word	0x20000008
 8004808:	016e3600 	.word	0x016e3600

0800480c <HAL_SPI_Init>:
{
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004810:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004812:	2c00      	cmp	r4, #0
 8004814:	d054      	beq.n	80048c0 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d152      	bne.n	80048c2 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481c:	2282      	movs	r2, #130	; 0x82
 800481e:	6861      	ldr	r1, [r4, #4]
 8004820:	0052      	lsls	r2, r2, #1
 8004822:	4291      	cmp	r1, r2
 8004824:	d000      	beq.n	8004828 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004826:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004828:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800482a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800482c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800482e:	3551      	adds	r5, #81	; 0x51
 8004830:	782b      	ldrb	r3, [r5, #0]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004838:	0023      	movs	r3, r4
 800483a:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 800483c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800483e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004840:	f7fc fc4c 	bl	80010dc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004844:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004846:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004848:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800484a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800484c:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800484e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004850:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004852:	4393      	bics	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004856:	2382      	movs	r3, #130	; 0x82
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4033      	ands	r3, r6
 800485c:	2684      	movs	r6, #132	; 0x84
 800485e:	0236      	lsls	r6, r6, #8
 8004860:	403e      	ands	r6, r7
 8004862:	4333      	orrs	r3, r6
 8004864:	2680      	movs	r6, #128	; 0x80
 8004866:	68e7      	ldr	r7, [r4, #12]
 8004868:	0136      	lsls	r6, r6, #4
 800486a:	403e      	ands	r6, r7
 800486c:	4333      	orrs	r3, r6
 800486e:	6926      	ldr	r6, [r4, #16]
 8004870:	69a2      	ldr	r2, [r4, #24]
 8004872:	4030      	ands	r0, r6
 8004874:	2601      	movs	r6, #1
 8004876:	4303      	orrs	r3, r0
 8004878:	6960      	ldr	r0, [r4, #20]
 800487a:	69e7      	ldr	r7, [r4, #28]
 800487c:	4030      	ands	r0, r6
 800487e:	4303      	orrs	r3, r0
 8004880:	2080      	movs	r0, #128	; 0x80
 8004882:	0080      	lsls	r0, r0, #2
 8004884:	4010      	ands	r0, r2
 8004886:	4303      	orrs	r3, r0
 8004888:	2038      	movs	r0, #56	; 0x38
 800488a:	4038      	ands	r0, r7
 800488c:	4303      	orrs	r3, r0
 800488e:	2080      	movs	r0, #128	; 0x80
 8004890:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004892:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004894:	4038      	ands	r0, r7
 8004896:	4303      	orrs	r3, r0
 8004898:	2080      	movs	r0, #128	; 0x80
 800489a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800489c:	0180      	lsls	r0, r0, #6
 800489e:	4038      	ands	r0, r7
 80048a0:	4303      	orrs	r3, r0
 80048a2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048a4:	2304      	movs	r3, #4
 80048a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048a8:	401a      	ands	r2, r3
 80048aa:	330c      	adds	r3, #12
 80048ac:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ae:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048b0:	431a      	orrs	r2, r3
 80048b2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048b4:	69cb      	ldr	r3, [r1, #28]
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <HAL_SPI_Init+0xc0>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048bc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048be:	702e      	strb	r6, [r5, #0]
}
 80048c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c2:	2300      	movs	r3, #0
 80048c4:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048c6:	6163      	str	r3, [r4, #20]
 80048c8:	e7ae      	b.n	8004828 <HAL_SPI_Init+0x1c>
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	fffff7ff 	.word	0xfffff7ff

080048d0 <HAL_SPI_Transmit_DMA>:
{
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80048d2:	0006      	movs	r6, r0
 80048d4:	3650      	adds	r6, #80	; 0x50
 80048d6:	7833      	ldrb	r3, [r6, #0]
{
 80048d8:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80048da:	2502      	movs	r5, #2
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d03e      	beq.n	800495e <HAL_SPI_Transmit_DMA+0x8e>
 80048e0:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80048e2:	0007      	movs	r7, r0
  __HAL_LOCK(hspi);
 80048e4:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80048e6:	3751      	adds	r7, #81	; 0x51
 80048e8:	783b      	ldrb	r3, [r7, #0]
 80048ea:	b2dd      	uxtb	r5, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d14a      	bne.n	8004986 <HAL_SPI_Transmit_DMA+0xb6>
  if ((pData == NULL) || (Size == 0U))
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d032      	beq.n	800495a <HAL_SPI_Transmit_DMA+0x8a>
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	d030      	beq.n	800495a <HAL_SPI_Transmit_DMA+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048f8:	3302      	adds	r3, #2
 80048fa:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004900:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004902:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 8004904:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004906:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004908:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800490a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 800490e:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004910:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8004912:	6802      	ldr	r2, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	6880      	ldr	r0, [r0, #8]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	4298      	cmp	r0, r3
 800491a:	d108      	bne.n	800492e <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 800491c:	2040      	movs	r0, #64	; 0x40
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	4383      	bics	r3, r0
 8004922:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	6810      	ldr	r0, [r2, #0]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4303      	orrs	r3, r0
 800492c:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800492e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004932:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004934:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <HAL_SPI_Transmit_DMA+0xc0>)
 8004938:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800493a:	4b16      	ldr	r3, [pc, #88]	; (8004994 <HAL_SPI_Transmit_DMA+0xc4>)
 800493c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8004942:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004946:	f7fe fcad 	bl	80032a4 <HAL_DMA_Start_IT>
 800494a:	2800      	cmp	r0, #0
 800494c:	d009      	beq.n	8004962 <HAL_SPI_Transmit_DMA+0x92>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800494e:	2310      	movs	r3, #16
 8004950:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004952:	4313      	orrs	r3, r2
 8004954:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004956:	2301      	movs	r3, #1
 8004958:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 800495a:	2300      	movs	r3, #0
 800495c:	7033      	strb	r3, [r6, #0]
}
 800495e:	0028      	movs	r0, r5
 8004960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	4211      	tst	r1, r2
 800496a:	d102      	bne.n	8004972 <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004972:	2220      	movs	r2, #32
 8004974:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004976:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800497c:	2202      	movs	r2, #2
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	e7e9      	b.n	800495a <HAL_SPI_Transmit_DMA+0x8a>
    errorcode = HAL_BUSY;
 8004986:	2502      	movs	r5, #2
 8004988:	e7e7      	b.n	800495a <HAL_SPI_Transmit_DMA+0x8a>
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049a9 	.word	0x080049a9

08004998 <HAL_SPI_TxCpltCallback>:
 8004998:	4770      	bx	lr

0800499a <HAL_SPI_TxHalfCpltCallback>:
 800499a:	4770      	bx	lr

0800499c <SPI_DMAHalfTransmitCplt>:
{
 800499c:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800499e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80049a0:	f7ff fffb 	bl	800499a <HAL_SPI_TxHalfCpltCallback>
}
 80049a4:	bd10      	pop	{r4, pc}

080049a6 <HAL_SPI_ErrorCallback>:
 80049a6:	4770      	bx	lr

080049a8 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049a8:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80049ac:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049ae:	6802      	ldr	r2, [r0, #0]
 80049b0:	6853      	ldr	r3, [r2, #4]
 80049b2:	438b      	bics	r3, r1
 80049b4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049b6:	2310      	movs	r3, #16
 80049b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80049ba:	4313      	orrs	r3, r2
 80049bc:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049be:	0003      	movs	r3, r0
 80049c0:	2201      	movs	r2, #1
 80049c2:	3351      	adds	r3, #81	; 0x51
 80049c4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 80049c6:	f7ff ffee 	bl	80049a6 <HAL_SPI_ErrorCallback>
}
 80049ca:	bd10      	pop	{r4, pc}

080049cc <SPI_DMATransmitCplt>:
{
 80049cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ce:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80049d2:	f7fe f923 	bl	8002c1c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	2520      	movs	r5, #32
 80049da:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80049dc:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80049de:	422b      	tst	r3, r5
 80049e0:	d127      	bne.n	8004a32 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049e2:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	43a9      	bics	r1, r5
 80049ea:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	4381      	bics	r1, r0
 80049f0:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049f2:	0020      	movs	r0, r4
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	f7ff fed7 	bl	80047a8 <SPI_EndRxTxTransaction>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d002      	beq.n	8004a04 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a00:	431d      	orrs	r5, r3
 8004a02:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a04:	68a3      	ldr	r3, [r4, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	9201      	str	r2, [sp, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	0023      	movs	r3, r4
 8004a1e:	2201      	movs	r2, #1
 8004a20:	3351      	adds	r3, #81	; 0x51
 8004a22:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8004a2a:	0020      	movs	r0, r4
 8004a2c:	f7ff ffbb 	bl	80049a6 <HAL_SPI_ErrorCallback>
}
 8004a30:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8004a32:	0020      	movs	r0, r4
 8004a34:	f7ff ffb0 	bl	8004998 <HAL_SPI_TxCpltCallback>
 8004a38:	e7fa      	b.n	8004a30 <SPI_DMATransmitCplt+0x64>
	...

08004a3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	2280      	movs	r2, #128	; 0x80
{
 8004a3e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004a40:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a42:	05d2      	lsls	r2, r2, #23
 8004a44:	4290      	cmp	r0, r2
 8004a46:	d005      	beq.n	8004a54 <TIM_Base_SetConfig+0x18>
 8004a48:	4c10      	ldr	r4, [pc, #64]	; (8004a8c <TIM_Base_SetConfig+0x50>)
 8004a4a:	42a0      	cmp	r0, r4
 8004a4c:	d002      	beq.n	8004a54 <TIM_Base_SetConfig+0x18>
 8004a4e:	4c10      	ldr	r4, [pc, #64]	; (8004a90 <TIM_Base_SetConfig+0x54>)
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d10f      	bne.n	8004a74 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a54:	2470      	movs	r4, #112	; 0x70
 8004a56:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004a58:	684c      	ldr	r4, [r1, #4]
 8004a5a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5c:	4290      	cmp	r0, r2
 8004a5e:	d005      	beq.n	8004a6c <TIM_Base_SetConfig+0x30>
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <TIM_Base_SetConfig+0x50>)
 8004a62:	4290      	cmp	r0, r2
 8004a64:	d002      	beq.n	8004a6c <TIM_Base_SetConfig+0x30>
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <TIM_Base_SetConfig+0x54>)
 8004a68:	4290      	cmp	r0, r2
 8004a6a:	d103      	bne.n	8004a74 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6c:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <TIM_Base_SetConfig+0x58>)
 8004a6e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a70:	68ca      	ldr	r2, [r1, #12]
 8004a72:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	4393      	bics	r3, r2
 8004a78:	690a      	ldr	r2, [r1, #16]
 8004a7a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004a7c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a7e:	688b      	ldr	r3, [r1, #8]
 8004a80:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a82:	680b      	ldr	r3, [r1, #0]
 8004a84:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a86:	2301      	movs	r3, #1
 8004a88:	6143      	str	r3, [r0, #20]
}
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	40010800 	.word	0x40010800
 8004a90:	40011400 	.word	0x40011400
 8004a94:	fffffcff 	.word	0xfffffcff

08004a98 <HAL_TIM_Base_Init>:
{
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
  if (htim == NULL)
 8004a9e:	2c00      	cmp	r4, #0
 8004aa0:	d01d      	beq.n	8004ade <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	0025      	movs	r5, r4
 8004aa4:	3539      	adds	r5, #57	; 0x39
 8004aa6:	782b      	ldrb	r3, [r5, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004aae:	0023      	movs	r3, r4
 8004ab0:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004ab4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004ab6:	f7fc fb57 	bl	8001168 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	1d21      	adds	r1, r4, #4
 8004ac2:	f7ff ffbb 	bl	8004a3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac6:	0022      	movs	r2, r4
 8004ac8:	2301      	movs	r3, #1
  return HAL_OK;
 8004aca:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	323e      	adds	r2, #62	; 0x3e
 8004ace:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	343d      	adds	r4, #61	; 0x3d
 8004ad2:	3a04      	subs	r2, #4
 8004ad4:	7013      	strb	r3, [r2, #0]
 8004ad6:	7053      	strb	r3, [r2, #1]
 8004ad8:	7093      	strb	r3, [r2, #2]
 8004ada:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	702b      	strb	r3, [r5, #0]
}
 8004ade:	bd70      	pop	{r4, r5, r6, pc}

08004ae0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	0002      	movs	r2, r0
{
 8004ae2:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004ae4:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae6:	3239      	adds	r2, #57	; 0x39
 8004ae8:	7811      	ldrb	r1, [r2, #0]
 8004aea:	4281      	cmp	r1, r0
 8004aec:	d119      	bne.n	8004b22 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	2102      	movs	r1, #2
 8004af0:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	4302      	orrs	r2, r0
 8004af8:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afa:	2280      	movs	r2, #128	; 0x80
 8004afc:	05d2      	lsls	r2, r2, #23
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d005      	beq.n	8004b0e <HAL_TIM_Base_Start_IT+0x2e>
 8004b02:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <HAL_TIM_Base_Start_IT+0x50>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d002      	beq.n	8004b0e <HAL_TIM_Base_Start_IT+0x2e>
 8004b08:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_TIM_Base_Start_IT+0x54>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10a      	bne.n	8004b24 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0e:	2107      	movs	r1, #7
 8004b10:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004b12:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b14:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	2a06      	cmp	r2, #6
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
}
 8004b22:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4310      	orrs	r0, r2
 8004b28:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e7f9      	b.n	8004b22 <HAL_TIM_Base_Start_IT+0x42>
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40010800 	.word	0x40010800
 8004b34:	40011400 	.word	0x40011400

08004b38 <HAL_TIM_ConfigClockSource>:
{
 8004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004b3a:	0005      	movs	r5, r0
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	3538      	adds	r5, #56	; 0x38
 8004b40:	782c      	ldrb	r4, [r5, #0]
{
 8004b42:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004b44:	0010      	movs	r0, r2
 8004b46:	2c01      	cmp	r4, #1
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8004b4c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4e:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8004b50:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b52:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b56:	484c      	ldr	r0, [pc, #304]	; (8004c88 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5a:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8004b5c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b5e:	680a      	ldr	r2, [r1, #0]
 8004b60:	2a60      	cmp	r2, #96	; 0x60
 8004b62:	d05f      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xec>
 8004b64:	d832      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x94>
 8004b66:	2a40      	cmp	r2, #64	; 0x40
 8004b68:	d100      	bne.n	8004b6c <HAL_TIM_ConfigClockSource+0x34>
 8004b6a:	e074      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x11e>
 8004b6c:	d814      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x60>
 8004b6e:	2a20      	cmp	r2, #32
 8004b70:	d00c      	beq.n	8004b8c <HAL_TIM_ConfigClockSource+0x54>
 8004b72:	d809      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x50>
 8004b74:	2110      	movs	r1, #16
 8004b76:	0010      	movs	r0, r2
 8004b78:	4388      	bics	r0, r1
 8004b7a:	d007      	beq.n	8004b8c <HAL_TIM_ConfigClockSource+0x54>
 8004b7c:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004b82:	2300      	movs	r3, #0
 8004b84:	702b      	strb	r3, [r5, #0]
}
 8004b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004b88:	2a30      	cmp	r2, #48	; 0x30
 8004b8a:	d1f7      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8c:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004b8e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b90:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b92:	430a      	orrs	r2, r1
 8004b94:	2107      	movs	r1, #7
 8004b96:	e032      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004b98:	2a50      	cmp	r2, #80	; 0x50
 8004b9a:	d1ef      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 8004b9c:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba0:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba4:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bac:	43a2      	bics	r2, r4
 8004bae:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb0:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bb2:	210a      	movs	r1, #10
 8004bb4:	438f      	bics	r7, r1
 8004bb6:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb8:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004bba:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbe:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc0:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004bc2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bc8:	2257      	movs	r2, #87	; 0x57
 8004bca:	e018      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004bcc:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004bce:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004bd0:	017f      	lsls	r7, r7, #5
 8004bd2:	42ba      	cmp	r2, r7
 8004bd4:	d0d3      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x46>
 8004bd6:	2080      	movs	r0, #128	; 0x80
 8004bd8:	0180      	lsls	r0, r0, #6
 8004bda:	4282      	cmp	r2, r0
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xce>
 8004bde:	0020      	movs	r0, r4
 8004be0:	2a70      	cmp	r2, #112	; 0x70
 8004be2:	d1cc      	bne.n	8004b7e <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004be4:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be6:	4829      	ldr	r0, [pc, #164]	; (8004c8c <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be8:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bea:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bec:	688a      	ldr	r2, [r1, #8]
 8004bee:	68c9      	ldr	r1, [r1, #12]
 8004bf0:	4322      	orrs	r2, r4
 8004bf2:	0209      	lsls	r1, r1, #8
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf8:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfa:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004bfc:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfe:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	e7bb      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004c06:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	4820      	ldr	r0, [pc, #128]	; (8004c8c <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c0a:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c0e:	688a      	ldr	r2, [r1, #8]
 8004c10:	68c9      	ldr	r1, [r1, #12]
 8004c12:	4322      	orrs	r2, r4
 8004c14:	0209      	lsls	r1, r1, #8
 8004c16:	430a      	orrs	r2, r1
 8004c18:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8004c1a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	01d2      	lsls	r2, r2, #7
 8004c22:	e7ec      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c24:	6848      	ldr	r0, [r1, #4]
 8004c26:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c28:	2110      	movs	r1, #16
 8004c2a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c2c:	4c18      	ldr	r4, [pc, #96]	; (8004c90 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2e:	438a      	bics	r2, r1
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004c34:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c36:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c38:	24a0      	movs	r4, #160	; 0xa0
 8004c3a:	43a2      	bics	r2, r4
 8004c3c:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3e:	033f      	lsls	r7, r7, #12
 8004c40:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8004c42:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c44:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c46:	0102      	lsls	r2, r0, #4
 8004c48:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8004c4a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004c4c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4e:	438a      	bics	r2, r1
 8004c50:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c52:	2267      	movs	r2, #103	; 0x67
 8004c54:	e7d3      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 8004c56:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c58:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5c:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c5e:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c60:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c64:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c66:	43a2      	bics	r2, r4
 8004c68:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c6a:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c6c:	210a      	movs	r1, #10
 8004c6e:	438f      	bics	r7, r1
 8004c70:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c72:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004c74:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c78:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004c7c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7e:	438a      	bics	r2, r1
 8004c80:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c82:	2247      	movs	r2, #71	; 0x47
 8004c84:	e7bb      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xc6>
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	ffff0088 	.word	0xffff0088
 8004c8c:	ffff00ff 	.word	0xffff00ff
 8004c90:	ffff0fff 	.word	0xffff0fff

08004c94 <HAL_TIM_OC_DelayElapsedCallback>:
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_IC_CaptureCallback>:
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_TriggerCallback>:
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	6803      	ldr	r3, [r0, #0]
{
 8004ca0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ca2:	6919      	ldr	r1, [r3, #16]
{
 8004ca4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ca6:	4211      	tst	r1, r2
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	4211      	tst	r1, r2
 8004cae:	d00a      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb0:	3a05      	subs	r2, #5
 8004cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb4:	3204      	adds	r2, #4
 8004cb6:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	079b      	lsls	r3, r3, #30
 8004cbc:	d05e      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	f7ff ffea 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	6919      	ldr	r1, [r3, #16]
 8004ccc:	4211      	tst	r1, r2
 8004cce:	d010      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd0:	68d9      	ldr	r1, [r3, #12]
 8004cd2:	4211      	tst	r1, r2
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd6:	3a09      	subs	r2, #9
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cda:	3207      	adds	r2, #7
 8004cdc:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	23c0      	movs	r3, #192	; 0xc0
 8004ce2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce6:	421a      	tst	r2, r3
 8004ce8:	d04e      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	f7ff ffd4 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	6919      	ldr	r1, [r3, #16]
 8004cf8:	4211      	tst	r1, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cfc:	68d9      	ldr	r1, [r3, #12]
 8004cfe:	4211      	tst	r1, r2
 8004d00:	d00b      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d02:	3a11      	subs	r2, #17
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d06:	320d      	adds	r2, #13
 8004d08:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	d040      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	f7ff ffc0 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	2300      	movs	r3, #0
 8004d18:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	6919      	ldr	r1, [r3, #16]
 8004d20:	4211      	tst	r1, r2
 8004d22:	d010      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d24:	68d9      	ldr	r1, [r3, #12]
 8004d26:	4211      	tst	r1, r2
 8004d28:	d00d      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2a:	3a21      	subs	r2, #33	; 0x21
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2e:	3219      	adds	r2, #25
 8004d30:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	23c0      	movs	r3, #192	; 0xc0
 8004d36:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3a:	421a      	tst	r2, r3
 8004d3c:	d030      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	f7ff ffaa 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	2300      	movs	r3, #0
 8004d44:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d46:	2201      	movs	r2, #1
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6919      	ldr	r1, [r3, #16]
 8004d4c:	4211      	tst	r1, r2
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d50:	68d9      	ldr	r1, [r3, #12]
 8004d52:	4211      	tst	r1, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d56:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d58:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5c:	f7fd fe80 	bl	8002a60 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	6919      	ldr	r1, [r3, #16]
 8004d66:	4211      	tst	r1, r2
 8004d68:	d007      	beq.n	8004d7a <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	4211      	tst	r1, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d70:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8004d72:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d76:	f7ff ff90 	bl	8004c9a <HAL_TIM_TriggerCallback>
}
 8004d7a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7c:	f7ff ff8a 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	0020      	movs	r0, r4
 8004d82:	f7ff ff89 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d86:	e79c      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d88:	f7ff ff84 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	0020      	movs	r0, r4
 8004d8e:	f7ff ff83 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d92:	e7ac      	b.n	8004cee <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d94:	f7ff ff7e 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	0020      	movs	r0, r4
 8004d9a:	f7ff ff7d 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d9e:	e7ba      	b.n	8004d16 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da0:	f7ff ff78 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	0020      	movs	r0, r4
 8004da6:	f7ff ff77 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004daa:	e7ca      	b.n	8004d42 <HAL_TIM_IRQHandler+0xa6>

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dae:	0004      	movs	r4, r0
 8004db0:	2202      	movs	r2, #2
 8004db2:	3438      	adds	r4, #56	; 0x38
 8004db4:	7825      	ldrb	r5, [r4, #0]
{
 8004db6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004db8:	0010      	movs	r0, r2
 8004dba:	2d01      	cmp	r5, #1
 8004dbc:	d01d      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbe:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc0:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc2:	3539      	adds	r5, #57	; 0x39
 8004dc4:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004dca:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dcc:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dce:	680e      	ldr	r6, [r1, #0]
 8004dd0:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd2:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd4:	2080      	movs	r0, #128	; 0x80
 8004dd6:	05c0      	lsls	r0, r0, #23
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d005      	beq.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004ddc:	4807      	ldr	r0, [pc, #28]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004dde:	4283      	cmp	r3, r0
 8004de0:	d002      	beq.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004de2:	4807      	ldr	r0, [pc, #28]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004de4:	4283      	cmp	r3, r0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004de8:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dea:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dec:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dee:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004df0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004df4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004df8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	40010800 	.word	0x40010800
 8004e00:	40011400 	.word	0x40011400

08004e04 <calloc>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <calloc+0x10>)
 8004e08:	000a      	movs	r2, r1
 8004e0a:	0001      	movs	r1, r0
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f000 f85b 	bl	8004ec8 <_calloc_r>
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	20000080 	.word	0x20000080

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	20000080 	.word	0x20000080

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	2600      	movs	r6, #0
 8004e28:	4d0c      	ldr	r5, [pc, #48]	; (8004e5c <__libc_init_array+0x38>)
 8004e2a:	4c0d      	ldr	r4, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	2600      	movs	r6, #0
 8004e36:	f000 fcc7 	bl	80057c8 <_init>
 8004e3a:	4d0a      	ldr	r5, [pc, #40]	; (8004e64 <__libc_init_array+0x40>)
 8004e3c:	4c0a      	ldr	r4, [pc, #40]	; (8004e68 <__libc_init_array+0x44>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	00b3      	lsls	r3, r6, #2
 8004e4a:	58eb      	ldr	r3, [r5, r3]
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	00b3      	lsls	r3, r6, #2
 8004e54:	58eb      	ldr	r3, [r5, r3]
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	0800653c 	.word	0x0800653c
 8004e60:	0800653c 	.word	0x0800653c
 8004e64:	0800653c 	.word	0x0800653c
 8004e68:	08006540 	.word	0x08006540

08004e6c <free>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <free+0x10>)
 8004e70:	0001      	movs	r1, r0
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	f000 f854 	bl	8004f20 <_free_r>
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	20000080 	.word	0x20000080

08004e80 <memcpy>:
 8004e80:	2300      	movs	r3, #0
 8004e82:	b510      	push	{r4, lr}
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d100      	bne.n	8004e8a <memcpy+0xa>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	5ccc      	ldrb	r4, [r1, r3]
 8004e8c:	54c4      	strb	r4, [r0, r3]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	e7f8      	b.n	8004e84 <memcpy+0x4>

08004e92 <memmove>:
 8004e92:	b510      	push	{r4, lr}
 8004e94:	4288      	cmp	r0, r1
 8004e96:	d902      	bls.n	8004e9e <memmove+0xc>
 8004e98:	188b      	adds	r3, r1, r2
 8004e9a:	4298      	cmp	r0, r3
 8004e9c:	d303      	bcc.n	8004ea6 <memmove+0x14>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e007      	b.n	8004eb2 <memmove+0x20>
 8004ea2:	5c8b      	ldrb	r3, [r1, r2]
 8004ea4:	5483      	strb	r3, [r0, r2]
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	d2fb      	bcs.n	8004ea2 <memmove+0x10>
 8004eaa:	bd10      	pop	{r4, pc}
 8004eac:	5ccc      	ldrb	r4, [r1, r3]
 8004eae:	54c4      	strb	r4, [r0, r3]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d1fa      	bne.n	8004eac <memmove+0x1a>
 8004eb6:	e7f8      	b.n	8004eaa <memmove+0x18>

08004eb8 <memset>:
 8004eb8:	0003      	movs	r3, r0
 8004eba:	1882      	adds	r2, r0, r2
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d100      	bne.n	8004ec2 <memset+0xa>
 8004ec0:	4770      	bx	lr
 8004ec2:	7019      	strb	r1, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	e7f9      	b.n	8004ebc <memset+0x4>

08004ec8 <_calloc_r>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	0c13      	lsrs	r3, r2, #16
 8004ecc:	0c0d      	lsrs	r5, r1, #16
 8004ece:	d11e      	bne.n	8004f0e <_calloc_r+0x46>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <_calloc_r+0x26>
 8004ed4:	b289      	uxth	r1, r1
 8004ed6:	b294      	uxth	r4, r2
 8004ed8:	434c      	muls	r4, r1
 8004eda:	0021      	movs	r1, r4
 8004edc:	f000 f88c 	bl	8004ff8 <_malloc_r>
 8004ee0:	1e05      	subs	r5, r0, #0
 8004ee2:	d01b      	beq.n	8004f1c <_calloc_r+0x54>
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f7ff ffe6 	bl	8004eb8 <memset>
 8004eec:	e016      	b.n	8004f1c <_calloc_r+0x54>
 8004eee:	1c1d      	adds	r5, r3, #0
 8004ef0:	1c0b      	adds	r3, r1, #0
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	b289      	uxth	r1, r1
 8004ef6:	b29c      	uxth	r4, r3
 8004ef8:	4351      	muls	r1, r2
 8004efa:	b2ab      	uxth	r3, r5
 8004efc:	4363      	muls	r3, r4
 8004efe:	0c0c      	lsrs	r4, r1, #16
 8004f00:	191c      	adds	r4, r3, r4
 8004f02:	0c22      	lsrs	r2, r4, #16
 8004f04:	d107      	bne.n	8004f16 <_calloc_r+0x4e>
 8004f06:	0424      	lsls	r4, r4, #16
 8004f08:	b289      	uxth	r1, r1
 8004f0a:	430c      	orrs	r4, r1
 8004f0c:	e7e5      	b.n	8004eda <_calloc_r+0x12>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <_calloc_r+0x4e>
 8004f12:	1c13      	adds	r3, r2, #0
 8004f14:	e7ed      	b.n	8004ef2 <_calloc_r+0x2a>
 8004f16:	230c      	movs	r3, #12
 8004f18:	2500      	movs	r5, #0
 8004f1a:	6003      	str	r3, [r0, #0]
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}

08004f20 <_free_r>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	0005      	movs	r5, r0
 8004f24:	2900      	cmp	r1, #0
 8004f26:	d010      	beq.n	8004f4a <_free_r+0x2a>
 8004f28:	1f0c      	subs	r4, r1, #4
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da00      	bge.n	8004f32 <_free_r+0x12>
 8004f30:	18e4      	adds	r4, r4, r3
 8004f32:	0028      	movs	r0, r5
 8004f34:	f000 f910 	bl	8005158 <__malloc_lock>
 8004f38:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <_free_r+0x90>)
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <_free_r+0x2c>
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	6014      	str	r4, [r2, #0]
 8004f44:	0028      	movs	r0, r5
 8004f46:	f000 f90f 	bl	8005168 <__malloc_unlock>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d908      	bls.n	8004f62 <_free_r+0x42>
 8004f50:	6821      	ldr	r1, [r4, #0]
 8004f52:	1860      	adds	r0, r4, r1
 8004f54:	4283      	cmp	r3, r0
 8004f56:	d1f3      	bne.n	8004f40 <_free_r+0x20>
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	1841      	adds	r1, r0, r1
 8004f5e:	6021      	str	r1, [r4, #0]
 8004f60:	e7ee      	b.n	8004f40 <_free_r+0x20>
 8004f62:	001a      	movs	r2, r3
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <_free_r+0x4e>
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	d9f9      	bls.n	8004f62 <_free_r+0x42>
 8004f6e:	6811      	ldr	r1, [r2, #0]
 8004f70:	1850      	adds	r0, r2, r1
 8004f72:	42a0      	cmp	r0, r4
 8004f74:	d10b      	bne.n	8004f8e <_free_r+0x6e>
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	1809      	adds	r1, r1, r0
 8004f7a:	1850      	adds	r0, r2, r1
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	4283      	cmp	r3, r0
 8004f80:	d1e0      	bne.n	8004f44 <_free_r+0x24>
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	1841      	adds	r1, r0, r1
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	e7da      	b.n	8004f44 <_free_r+0x24>
 8004f8e:	42a0      	cmp	r0, r4
 8004f90:	d902      	bls.n	8004f98 <_free_r+0x78>
 8004f92:	230c      	movs	r3, #12
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	e7d5      	b.n	8004f44 <_free_r+0x24>
 8004f98:	6821      	ldr	r1, [r4, #0]
 8004f9a:	1860      	adds	r0, r4, r1
 8004f9c:	4283      	cmp	r3, r0
 8004f9e:	d103      	bne.n	8004fa8 <_free_r+0x88>
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	1841      	adds	r1, r0, r1
 8004fa6:	6021      	str	r1, [r4, #0]
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6054      	str	r4, [r2, #4]
 8004fac:	e7ca      	b.n	8004f44 <_free_r+0x24>
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20000dc4 	.word	0x20000dc4

08004fb4 <sbrk_aligned>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4e0f      	ldr	r6, [pc, #60]	; (8004ff4 <sbrk_aligned+0x40>)
 8004fb8:	000d      	movs	r5, r1
 8004fba:	6831      	ldr	r1, [r6, #0]
 8004fbc:	0004      	movs	r4, r0
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d102      	bne.n	8004fc8 <sbrk_aligned+0x14>
 8004fc2:	f000 f88f 	bl	80050e4 <_sbrk_r>
 8004fc6:	6030      	str	r0, [r6, #0]
 8004fc8:	0029      	movs	r1, r5
 8004fca:	0020      	movs	r0, r4
 8004fcc:	f000 f88a 	bl	80050e4 <_sbrk_r>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d00a      	beq.n	8004fea <sbrk_aligned+0x36>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	1cc5      	adds	r5, r0, #3
 8004fd8:	439d      	bics	r5, r3
 8004fda:	42a8      	cmp	r0, r5
 8004fdc:	d007      	beq.n	8004fee <sbrk_aligned+0x3a>
 8004fde:	1a29      	subs	r1, r5, r0
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	f000 f87f 	bl	80050e4 <_sbrk_r>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d101      	bne.n	8004fee <sbrk_aligned+0x3a>
 8004fea:	2501      	movs	r5, #1
 8004fec:	426d      	negs	r5, r5
 8004fee:	0028      	movs	r0, r5
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	20000dc8 	.word	0x20000dc8

08004ff8 <_malloc_r>:
 8004ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	1ccb      	adds	r3, r1, #3
 8004ffe:	4393      	bics	r3, r2
 8005000:	3308      	adds	r3, #8
 8005002:	0006      	movs	r6, r0
 8005004:	001f      	movs	r7, r3
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d232      	bcs.n	8005070 <_malloc_r+0x78>
 800500a:	270c      	movs	r7, #12
 800500c:	42b9      	cmp	r1, r7
 800500e:	d831      	bhi.n	8005074 <_malloc_r+0x7c>
 8005010:	0030      	movs	r0, r6
 8005012:	f000 f8a1 	bl	8005158 <__malloc_lock>
 8005016:	4d32      	ldr	r5, [pc, #200]	; (80050e0 <_malloc_r+0xe8>)
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	001c      	movs	r4, r3
 800501c:	2c00      	cmp	r4, #0
 800501e:	d12e      	bne.n	800507e <_malloc_r+0x86>
 8005020:	0039      	movs	r1, r7
 8005022:	0030      	movs	r0, r6
 8005024:	f7ff ffc6 	bl	8004fb4 <sbrk_aligned>
 8005028:	0004      	movs	r4, r0
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d11e      	bne.n	800506c <_malloc_r+0x74>
 800502e:	682c      	ldr	r4, [r5, #0]
 8005030:	0025      	movs	r5, r4
 8005032:	2d00      	cmp	r5, #0
 8005034:	d14a      	bne.n	80050cc <_malloc_r+0xd4>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	0029      	movs	r1, r5
 800503a:	18e3      	adds	r3, r4, r3
 800503c:	0030      	movs	r0, r6
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	f000 f850 	bl	80050e4 <_sbrk_r>
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	4283      	cmp	r3, r0
 8005048:	d143      	bne.n	80050d2 <_malloc_r+0xda>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	3703      	adds	r7, #3
 800504e:	1aff      	subs	r7, r7, r3
 8005050:	2303      	movs	r3, #3
 8005052:	439f      	bics	r7, r3
 8005054:	3708      	adds	r7, #8
 8005056:	2f0c      	cmp	r7, #12
 8005058:	d200      	bcs.n	800505c <_malloc_r+0x64>
 800505a:	270c      	movs	r7, #12
 800505c:	0039      	movs	r1, r7
 800505e:	0030      	movs	r0, r6
 8005060:	f7ff ffa8 	bl	8004fb4 <sbrk_aligned>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d034      	beq.n	80050d2 <_malloc_r+0xda>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	19df      	adds	r7, r3, r7
 800506c:	6027      	str	r7, [r4, #0]
 800506e:	e013      	b.n	8005098 <_malloc_r+0xa0>
 8005070:	2b00      	cmp	r3, #0
 8005072:	dacb      	bge.n	800500c <_malloc_r+0x14>
 8005074:	230c      	movs	r3, #12
 8005076:	2500      	movs	r5, #0
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	0028      	movs	r0, r5
 800507c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	1bd1      	subs	r1, r2, r7
 8005082:	d420      	bmi.n	80050c6 <_malloc_r+0xce>
 8005084:	290b      	cmp	r1, #11
 8005086:	d917      	bls.n	80050b8 <_malloc_r+0xc0>
 8005088:	19e2      	adds	r2, r4, r7
 800508a:	6027      	str	r7, [r4, #0]
 800508c:	42a3      	cmp	r3, r4
 800508e:	d111      	bne.n	80050b4 <_malloc_r+0xbc>
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	6053      	str	r3, [r2, #4]
 8005098:	0030      	movs	r0, r6
 800509a:	0025      	movs	r5, r4
 800509c:	f000 f864 	bl	8005168 <__malloc_unlock>
 80050a0:	2207      	movs	r2, #7
 80050a2:	350b      	adds	r5, #11
 80050a4:	1d23      	adds	r3, r4, #4
 80050a6:	4395      	bics	r5, r2
 80050a8:	1aea      	subs	r2, r5, r3
 80050aa:	429d      	cmp	r5, r3
 80050ac:	d0e5      	beq.n	800507a <_malloc_r+0x82>
 80050ae:	1b5b      	subs	r3, r3, r5
 80050b0:	50a3      	str	r3, [r4, r2]
 80050b2:	e7e2      	b.n	800507a <_malloc_r+0x82>
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	e7ec      	b.n	8005092 <_malloc_r+0x9a>
 80050b8:	6862      	ldr	r2, [r4, #4]
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	d101      	bne.n	80050c2 <_malloc_r+0xca>
 80050be:	602a      	str	r2, [r5, #0]
 80050c0:	e7ea      	b.n	8005098 <_malloc_r+0xa0>
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	e7e8      	b.n	8005098 <_malloc_r+0xa0>
 80050c6:	0023      	movs	r3, r4
 80050c8:	6864      	ldr	r4, [r4, #4]
 80050ca:	e7a7      	b.n	800501c <_malloc_r+0x24>
 80050cc:	002c      	movs	r4, r5
 80050ce:	686d      	ldr	r5, [r5, #4]
 80050d0:	e7af      	b.n	8005032 <_malloc_r+0x3a>
 80050d2:	230c      	movs	r3, #12
 80050d4:	0030      	movs	r0, r6
 80050d6:	6033      	str	r3, [r6, #0]
 80050d8:	f000 f846 	bl	8005168 <__malloc_unlock>
 80050dc:	e7cd      	b.n	800507a <_malloc_r+0x82>
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	20000dc4 	.word	0x20000dc4

080050e4 <_sbrk_r>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_sbrk_r+0x20>)
 80050ea:	0004      	movs	r4, r0
 80050ec:	0008      	movs	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fc f860 	bl	80011b4 <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d103      	bne.n	8005100 <_sbrk_r+0x1c>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d000      	beq.n	8005100 <_sbrk_r+0x1c>
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000dcc 	.word	0x20000dcc

08005108 <siprintf>:
 8005108:	b40e      	push	{r1, r2, r3}
 800510a:	b500      	push	{lr}
 800510c:	490b      	ldr	r1, [pc, #44]	; (800513c <siprintf+0x34>)
 800510e:	b09c      	sub	sp, #112	; 0x70
 8005110:	ab1d      	add	r3, sp, #116	; 0x74
 8005112:	9002      	str	r0, [sp, #8]
 8005114:	9006      	str	r0, [sp, #24]
 8005116:	9107      	str	r1, [sp, #28]
 8005118:	9104      	str	r1, [sp, #16]
 800511a:	4809      	ldr	r0, [pc, #36]	; (8005140 <siprintf+0x38>)
 800511c:	4909      	ldr	r1, [pc, #36]	; (8005144 <siprintf+0x3c>)
 800511e:	cb04      	ldmia	r3!, {r2}
 8005120:	9105      	str	r1, [sp, #20]
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	a902      	add	r1, sp, #8
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	f000 f888 	bl	800523c <_svfiprintf_r>
 800512c:	2300      	movs	r3, #0
 800512e:	9a02      	ldr	r2, [sp, #8]
 8005130:	7013      	strb	r3, [r2, #0]
 8005132:	b01c      	add	sp, #112	; 0x70
 8005134:	bc08      	pop	{r3}
 8005136:	b003      	add	sp, #12
 8005138:	4718      	bx	r3
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	7fffffff 	.word	0x7fffffff
 8005140:	20000080 	.word	0x20000080
 8005144:	ffff0208 	.word	0xffff0208

08005148 <strcpy>:
 8005148:	0003      	movs	r3, r0
 800514a:	780a      	ldrb	r2, [r1, #0]
 800514c:	3101      	adds	r1, #1
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	2a00      	cmp	r2, #0
 8005154:	d1f9      	bne.n	800514a <strcpy+0x2>
 8005156:	4770      	bx	lr

08005158 <__malloc_lock>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4802      	ldr	r0, [pc, #8]	; (8005164 <__malloc_lock+0xc>)
 800515c:	f000 faf0 	bl	8005740 <__retarget_lock_acquire_recursive>
 8005160:	bd10      	pop	{r4, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20000dd0 	.word	0x20000dd0

08005168 <__malloc_unlock>:
 8005168:	b510      	push	{r4, lr}
 800516a:	4802      	ldr	r0, [pc, #8]	; (8005174 <__malloc_unlock+0xc>)
 800516c:	f000 fae9 	bl	8005742 <__retarget_lock_release_recursive>
 8005170:	bd10      	pop	{r4, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20000dd0 	.word	0x20000dd0

08005178 <__ssputs_r>:
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	688e      	ldr	r6, [r1, #8]
 800517c:	b085      	sub	sp, #20
 800517e:	0007      	movs	r7, r0
 8005180:	000c      	movs	r4, r1
 8005182:	9203      	str	r2, [sp, #12]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	429e      	cmp	r6, r3
 8005188:	d83c      	bhi.n	8005204 <__ssputs_r+0x8c>
 800518a:	2390      	movs	r3, #144	; 0x90
 800518c:	898a      	ldrh	r2, [r1, #12]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	421a      	tst	r2, r3
 8005192:	d034      	beq.n	80051fe <__ssputs_r+0x86>
 8005194:	6909      	ldr	r1, [r1, #16]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	6960      	ldr	r0, [r4, #20]
 800519a:	1a5b      	subs	r3, r3, r1
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	2303      	movs	r3, #3
 80051a0:	4343      	muls	r3, r0
 80051a2:	0fdd      	lsrs	r5, r3, #31
 80051a4:	18ed      	adds	r5, r5, r3
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	9802      	ldr	r0, [sp, #8]
 80051aa:	3301      	adds	r3, #1
 80051ac:	181b      	adds	r3, r3, r0
 80051ae:	106d      	asrs	r5, r5, #1
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	d900      	bls.n	80051b6 <__ssputs_r+0x3e>
 80051b4:	001d      	movs	r5, r3
 80051b6:	0553      	lsls	r3, r2, #21
 80051b8:	d532      	bpl.n	8005220 <__ssputs_r+0xa8>
 80051ba:	0029      	movs	r1, r5
 80051bc:	0038      	movs	r0, r7
 80051be:	f7ff ff1b 	bl	8004ff8 <_malloc_r>
 80051c2:	1e06      	subs	r6, r0, #0
 80051c4:	d109      	bne.n	80051da <__ssputs_r+0x62>
 80051c6:	230c      	movs	r3, #12
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	2001      	movs	r0, #1
 80051ce:	89a2      	ldrh	r2, [r4, #12]
 80051d0:	4240      	negs	r0, r0
 80051d2:	4313      	orrs	r3, r2
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	b005      	add	sp, #20
 80051d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051da:	9a02      	ldr	r2, [sp, #8]
 80051dc:	6921      	ldr	r1, [r4, #16]
 80051de:	f7ff fe4f 	bl	8004e80 <memcpy>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	4a14      	ldr	r2, [pc, #80]	; (8005238 <__ssputs_r+0xc0>)
 80051e6:	401a      	ands	r2, r3
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	4313      	orrs	r3, r2
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	9b02      	ldr	r3, [sp, #8]
 80051f0:	6126      	str	r6, [r4, #16]
 80051f2:	18f6      	adds	r6, r6, r3
 80051f4:	6026      	str	r6, [r4, #0]
 80051f6:	6165      	str	r5, [r4, #20]
 80051f8:	9e01      	ldr	r6, [sp, #4]
 80051fa:	1aed      	subs	r5, r5, r3
 80051fc:	60a5      	str	r5, [r4, #8]
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	429e      	cmp	r6, r3
 8005202:	d900      	bls.n	8005206 <__ssputs_r+0x8e>
 8005204:	9e01      	ldr	r6, [sp, #4]
 8005206:	0032      	movs	r2, r6
 8005208:	9903      	ldr	r1, [sp, #12]
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	f7ff fe41 	bl	8004e92 <memmove>
 8005210:	68a3      	ldr	r3, [r4, #8]
 8005212:	2000      	movs	r0, #0
 8005214:	1b9b      	subs	r3, r3, r6
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	199e      	adds	r6, r3, r6
 800521c:	6026      	str	r6, [r4, #0]
 800521e:	e7da      	b.n	80051d6 <__ssputs_r+0x5e>
 8005220:	002a      	movs	r2, r5
 8005222:	0038      	movs	r0, r7
 8005224:	f000 fa99 	bl	800575a <_realloc_r>
 8005228:	1e06      	subs	r6, r0, #0
 800522a:	d1e0      	bne.n	80051ee <__ssputs_r+0x76>
 800522c:	0038      	movs	r0, r7
 800522e:	6921      	ldr	r1, [r4, #16]
 8005230:	f7ff fe76 	bl	8004f20 <_free_r>
 8005234:	e7c7      	b.n	80051c6 <__ssputs_r+0x4e>
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	fffffb7f 	.word	0xfffffb7f

0800523c <_svfiprintf_r>:
 800523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523e:	b0a1      	sub	sp, #132	; 0x84
 8005240:	9003      	str	r0, [sp, #12]
 8005242:	001d      	movs	r5, r3
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	000f      	movs	r7, r1
 8005248:	0016      	movs	r6, r2
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	d511      	bpl.n	8005272 <_svfiprintf_r+0x36>
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10e      	bne.n	8005272 <_svfiprintf_r+0x36>
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	f7ff fecf 	bl	8004ff8 <_malloc_r>
 800525a:	6038      	str	r0, [r7, #0]
 800525c:	6138      	str	r0, [r7, #16]
 800525e:	2800      	cmp	r0, #0
 8005260:	d105      	bne.n	800526e <_svfiprintf_r+0x32>
 8005262:	230c      	movs	r3, #12
 8005264:	9a03      	ldr	r2, [sp, #12]
 8005266:	3801      	subs	r0, #1
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	b021      	add	sp, #132	; 0x84
 800526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	2300      	movs	r3, #0
 8005274:	ac08      	add	r4, sp, #32
 8005276:	6163      	str	r3, [r4, #20]
 8005278:	3320      	adds	r3, #32
 800527a:	7663      	strb	r3, [r4, #25]
 800527c:	3310      	adds	r3, #16
 800527e:	76a3      	strb	r3, [r4, #26]
 8005280:	9507      	str	r5, [sp, #28]
 8005282:	0035      	movs	r5, r6
 8005284:	782b      	ldrb	r3, [r5, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <_svfiprintf_r+0x52>
 800528a:	2b25      	cmp	r3, #37	; 0x25
 800528c:	d147      	bne.n	800531e <_svfiprintf_r+0xe2>
 800528e:	1bab      	subs	r3, r5, r6
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	42b5      	cmp	r5, r6
 8005294:	d00c      	beq.n	80052b0 <_svfiprintf_r+0x74>
 8005296:	0032      	movs	r2, r6
 8005298:	0039      	movs	r1, r7
 800529a:	9803      	ldr	r0, [sp, #12]
 800529c:	f7ff ff6c 	bl	8005178 <__ssputs_r>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d100      	bne.n	80052a6 <_svfiprintf_r+0x6a>
 80052a4:	e0ae      	b.n	8005404 <_svfiprintf_r+0x1c8>
 80052a6:	6962      	ldr	r2, [r4, #20]
 80052a8:	9b05      	ldr	r3, [sp, #20]
 80052aa:	4694      	mov	ip, r2
 80052ac:	4463      	add	r3, ip
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	782b      	ldrb	r3, [r5, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d100      	bne.n	80052b8 <_svfiprintf_r+0x7c>
 80052b6:	e0a5      	b.n	8005404 <_svfiprintf_r+0x1c8>
 80052b8:	2201      	movs	r2, #1
 80052ba:	2300      	movs	r3, #0
 80052bc:	4252      	negs	r2, r2
 80052be:	6062      	str	r2, [r4, #4]
 80052c0:	a904      	add	r1, sp, #16
 80052c2:	3254      	adds	r2, #84	; 0x54
 80052c4:	1852      	adds	r2, r2, r1
 80052c6:	1c6e      	adds	r6, r5, #1
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	60e3      	str	r3, [r4, #12]
 80052cc:	60a3      	str	r3, [r4, #8]
 80052ce:	7013      	strb	r3, [r2, #0]
 80052d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80052d2:	2205      	movs	r2, #5
 80052d4:	7831      	ldrb	r1, [r6, #0]
 80052d6:	4854      	ldr	r0, [pc, #336]	; (8005428 <_svfiprintf_r+0x1ec>)
 80052d8:	f000 fa34 	bl	8005744 <memchr>
 80052dc:	1c75      	adds	r5, r6, #1
 80052de:	2800      	cmp	r0, #0
 80052e0:	d11f      	bne.n	8005322 <_svfiprintf_r+0xe6>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	06d3      	lsls	r3, r2, #27
 80052e6:	d504      	bpl.n	80052f2 <_svfiprintf_r+0xb6>
 80052e8:	2353      	movs	r3, #83	; 0x53
 80052ea:	a904      	add	r1, sp, #16
 80052ec:	185b      	adds	r3, r3, r1
 80052ee:	2120      	movs	r1, #32
 80052f0:	7019      	strb	r1, [r3, #0]
 80052f2:	0713      	lsls	r3, r2, #28
 80052f4:	d504      	bpl.n	8005300 <_svfiprintf_r+0xc4>
 80052f6:	2353      	movs	r3, #83	; 0x53
 80052f8:	a904      	add	r1, sp, #16
 80052fa:	185b      	adds	r3, r3, r1
 80052fc:	212b      	movs	r1, #43	; 0x2b
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	7833      	ldrb	r3, [r6, #0]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d016      	beq.n	8005334 <_svfiprintf_r+0xf8>
 8005306:	0035      	movs	r5, r6
 8005308:	2100      	movs	r1, #0
 800530a:	200a      	movs	r0, #10
 800530c:	68e3      	ldr	r3, [r4, #12]
 800530e:	782a      	ldrb	r2, [r5, #0]
 8005310:	1c6e      	adds	r6, r5, #1
 8005312:	3a30      	subs	r2, #48	; 0x30
 8005314:	2a09      	cmp	r2, #9
 8005316:	d94e      	bls.n	80053b6 <_svfiprintf_r+0x17a>
 8005318:	2900      	cmp	r1, #0
 800531a:	d111      	bne.n	8005340 <_svfiprintf_r+0x104>
 800531c:	e017      	b.n	800534e <_svfiprintf_r+0x112>
 800531e:	3501      	adds	r5, #1
 8005320:	e7b0      	b.n	8005284 <_svfiprintf_r+0x48>
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <_svfiprintf_r+0x1ec>)
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	1ac0      	subs	r0, r0, r3
 8005328:	2301      	movs	r3, #1
 800532a:	4083      	lsls	r3, r0
 800532c:	4313      	orrs	r3, r2
 800532e:	002e      	movs	r6, r5
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	e7ce      	b.n	80052d2 <_svfiprintf_r+0x96>
 8005334:	9b07      	ldr	r3, [sp, #28]
 8005336:	1d19      	adds	r1, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	9107      	str	r1, [sp, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db01      	blt.n	8005344 <_svfiprintf_r+0x108>
 8005340:	930b      	str	r3, [sp, #44]	; 0x2c
 8005342:	e004      	b.n	800534e <_svfiprintf_r+0x112>
 8005344:	425b      	negs	r3, r3
 8005346:	60e3      	str	r3, [r4, #12]
 8005348:	2302      	movs	r3, #2
 800534a:	4313      	orrs	r3, r2
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	782b      	ldrb	r3, [r5, #0]
 8005350:	2b2e      	cmp	r3, #46	; 0x2e
 8005352:	d10a      	bne.n	800536a <_svfiprintf_r+0x12e>
 8005354:	786b      	ldrb	r3, [r5, #1]
 8005356:	2b2a      	cmp	r3, #42	; 0x2a
 8005358:	d135      	bne.n	80053c6 <_svfiprintf_r+0x18a>
 800535a:	9b07      	ldr	r3, [sp, #28]
 800535c:	3502      	adds	r5, #2
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9207      	str	r2, [sp, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	db2b      	blt.n	80053c0 <_svfiprintf_r+0x184>
 8005368:	9309      	str	r3, [sp, #36]	; 0x24
 800536a:	4e30      	ldr	r6, [pc, #192]	; (800542c <_svfiprintf_r+0x1f0>)
 800536c:	2203      	movs	r2, #3
 800536e:	0030      	movs	r0, r6
 8005370:	7829      	ldrb	r1, [r5, #0]
 8005372:	f000 f9e7 	bl	8005744 <memchr>
 8005376:	2800      	cmp	r0, #0
 8005378:	d006      	beq.n	8005388 <_svfiprintf_r+0x14c>
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	1b80      	subs	r0, r0, r6
 800537e:	4083      	lsls	r3, r0
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	3501      	adds	r5, #1
 8005384:	4313      	orrs	r3, r2
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	7829      	ldrb	r1, [r5, #0]
 800538a:	2206      	movs	r2, #6
 800538c:	4828      	ldr	r0, [pc, #160]	; (8005430 <_svfiprintf_r+0x1f4>)
 800538e:	1c6e      	adds	r6, r5, #1
 8005390:	7621      	strb	r1, [r4, #24]
 8005392:	f000 f9d7 	bl	8005744 <memchr>
 8005396:	2800      	cmp	r0, #0
 8005398:	d03c      	beq.n	8005414 <_svfiprintf_r+0x1d8>
 800539a:	4b26      	ldr	r3, [pc, #152]	; (8005434 <_svfiprintf_r+0x1f8>)
 800539c:	2b00      	cmp	r3, #0
 800539e:	d125      	bne.n	80053ec <_svfiprintf_r+0x1b0>
 80053a0:	2207      	movs	r2, #7
 80053a2:	9b07      	ldr	r3, [sp, #28]
 80053a4:	3307      	adds	r3, #7
 80053a6:	4393      	bics	r3, r2
 80053a8:	3308      	adds	r3, #8
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	6963      	ldr	r3, [r4, #20]
 80053ae:	9a04      	ldr	r2, [sp, #16]
 80053b0:	189b      	adds	r3, r3, r2
 80053b2:	6163      	str	r3, [r4, #20]
 80053b4:	e765      	b.n	8005282 <_svfiprintf_r+0x46>
 80053b6:	4343      	muls	r3, r0
 80053b8:	0035      	movs	r5, r6
 80053ba:	2101      	movs	r1, #1
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	e7a6      	b.n	800530e <_svfiprintf_r+0xd2>
 80053c0:	2301      	movs	r3, #1
 80053c2:	425b      	negs	r3, r3
 80053c4:	e7d0      	b.n	8005368 <_svfiprintf_r+0x12c>
 80053c6:	2300      	movs	r3, #0
 80053c8:	200a      	movs	r0, #10
 80053ca:	001a      	movs	r2, r3
 80053cc:	3501      	adds	r5, #1
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	7829      	ldrb	r1, [r5, #0]
 80053d2:	1c6e      	adds	r6, r5, #1
 80053d4:	3930      	subs	r1, #48	; 0x30
 80053d6:	2909      	cmp	r1, #9
 80053d8:	d903      	bls.n	80053e2 <_svfiprintf_r+0x1a6>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c5      	beq.n	800536a <_svfiprintf_r+0x12e>
 80053de:	9209      	str	r2, [sp, #36]	; 0x24
 80053e0:	e7c3      	b.n	800536a <_svfiprintf_r+0x12e>
 80053e2:	4342      	muls	r2, r0
 80053e4:	0035      	movs	r5, r6
 80053e6:	2301      	movs	r3, #1
 80053e8:	1852      	adds	r2, r2, r1
 80053ea:	e7f1      	b.n	80053d0 <_svfiprintf_r+0x194>
 80053ec:	ab07      	add	r3, sp, #28
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	003a      	movs	r2, r7
 80053f2:	0021      	movs	r1, r4
 80053f4:	4b10      	ldr	r3, [pc, #64]	; (8005438 <_svfiprintf_r+0x1fc>)
 80053f6:	9803      	ldr	r0, [sp, #12]
 80053f8:	e000      	b.n	80053fc <_svfiprintf_r+0x1c0>
 80053fa:	bf00      	nop
 80053fc:	9004      	str	r0, [sp, #16]
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	3301      	adds	r3, #1
 8005402:	d1d3      	bne.n	80053ac <_svfiprintf_r+0x170>
 8005404:	89bb      	ldrh	r3, [r7, #12]
 8005406:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005408:	065b      	lsls	r3, r3, #25
 800540a:	d400      	bmi.n	800540e <_svfiprintf_r+0x1d2>
 800540c:	e72d      	b.n	800526a <_svfiprintf_r+0x2e>
 800540e:	2001      	movs	r0, #1
 8005410:	4240      	negs	r0, r0
 8005412:	e72a      	b.n	800526a <_svfiprintf_r+0x2e>
 8005414:	ab07      	add	r3, sp, #28
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	003a      	movs	r2, r7
 800541a:	0021      	movs	r1, r4
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <_svfiprintf_r+0x1fc>)
 800541e:	9803      	ldr	r0, [sp, #12]
 8005420:	f000 f87c 	bl	800551c <_printf_i>
 8005424:	e7ea      	b.n	80053fc <_svfiprintf_r+0x1c0>
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	08006501 	.word	0x08006501
 800542c:	08006507 	.word	0x08006507
 8005430:	0800650b 	.word	0x0800650b
 8005434:	00000000 	.word	0x00000000
 8005438:	08005179 	.word	0x08005179

0800543c <_printf_common>:
 800543c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800543e:	0015      	movs	r5, r2
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	688a      	ldr	r2, [r1, #8]
 8005444:	690b      	ldr	r3, [r1, #16]
 8005446:	000c      	movs	r4, r1
 8005448:	9000      	str	r0, [sp, #0]
 800544a:	4293      	cmp	r3, r2
 800544c:	da00      	bge.n	8005450 <_printf_common+0x14>
 800544e:	0013      	movs	r3, r2
 8005450:	0022      	movs	r2, r4
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	3243      	adds	r2, #67	; 0x43
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	2a00      	cmp	r2, #0
 800545a:	d001      	beq.n	8005460 <_printf_common+0x24>
 800545c:	3301      	adds	r3, #1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	069b      	lsls	r3, r3, #26
 8005464:	d502      	bpl.n	800546c <_printf_common+0x30>
 8005466:	682b      	ldr	r3, [r5, #0]
 8005468:	3302      	adds	r3, #2
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	2306      	movs	r3, #6
 8005470:	0017      	movs	r7, r2
 8005472:	401f      	ands	r7, r3
 8005474:	421a      	tst	r2, r3
 8005476:	d027      	beq.n	80054c8 <_printf_common+0x8c>
 8005478:	0023      	movs	r3, r4
 800547a:	3343      	adds	r3, #67	; 0x43
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	4193      	sbcs	r3, r2
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	0692      	lsls	r2, r2, #26
 8005486:	d430      	bmi.n	80054ea <_printf_common+0xae>
 8005488:	0022      	movs	r2, r4
 800548a:	9901      	ldr	r1, [sp, #4]
 800548c:	9800      	ldr	r0, [sp, #0]
 800548e:	9e08      	ldr	r6, [sp, #32]
 8005490:	3243      	adds	r2, #67	; 0x43
 8005492:	47b0      	blx	r6
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d025      	beq.n	80054e4 <_printf_common+0xa8>
 8005498:	2306      	movs	r3, #6
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	682a      	ldr	r2, [r5, #0]
 800549e:	68e1      	ldr	r1, [r4, #12]
 80054a0:	2500      	movs	r5, #0
 80054a2:	4003      	ands	r3, r0
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d103      	bne.n	80054b0 <_printf_common+0x74>
 80054a8:	1a8d      	subs	r5, r1, r2
 80054aa:	43eb      	mvns	r3, r5
 80054ac:	17db      	asrs	r3, r3, #31
 80054ae:	401d      	ands	r5, r3
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	6922      	ldr	r2, [r4, #16]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	dd01      	ble.n	80054bc <_printf_common+0x80>
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	18ed      	adds	r5, r5, r3
 80054bc:	2700      	movs	r7, #0
 80054be:	42bd      	cmp	r5, r7
 80054c0:	d120      	bne.n	8005504 <_printf_common+0xc8>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e010      	b.n	80054e8 <_printf_common+0xac>
 80054c6:	3701      	adds	r7, #1
 80054c8:	68e3      	ldr	r3, [r4, #12]
 80054ca:	682a      	ldr	r2, [r5, #0]
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	42bb      	cmp	r3, r7
 80054d0:	ddd2      	ble.n	8005478 <_printf_common+0x3c>
 80054d2:	0022      	movs	r2, r4
 80054d4:	2301      	movs	r3, #1
 80054d6:	9901      	ldr	r1, [sp, #4]
 80054d8:	9800      	ldr	r0, [sp, #0]
 80054da:	9e08      	ldr	r6, [sp, #32]
 80054dc:	3219      	adds	r2, #25
 80054de:	47b0      	blx	r6
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d1f0      	bne.n	80054c6 <_printf_common+0x8a>
 80054e4:	2001      	movs	r0, #1
 80054e6:	4240      	negs	r0, r0
 80054e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054ea:	2030      	movs	r0, #48	; 0x30
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	3143      	adds	r1, #67	; 0x43
 80054f0:	7008      	strb	r0, [r1, #0]
 80054f2:	0021      	movs	r1, r4
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	3145      	adds	r1, #69	; 0x45
 80054f8:	7809      	ldrb	r1, [r1, #0]
 80054fa:	18a2      	adds	r2, r4, r2
 80054fc:	3243      	adds	r2, #67	; 0x43
 80054fe:	3302      	adds	r3, #2
 8005500:	7011      	strb	r1, [r2, #0]
 8005502:	e7c1      	b.n	8005488 <_printf_common+0x4c>
 8005504:	0022      	movs	r2, r4
 8005506:	2301      	movs	r3, #1
 8005508:	9901      	ldr	r1, [sp, #4]
 800550a:	9800      	ldr	r0, [sp, #0]
 800550c:	9e08      	ldr	r6, [sp, #32]
 800550e:	321a      	adds	r2, #26
 8005510:	47b0      	blx	r6
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d0e6      	beq.n	80054e4 <_printf_common+0xa8>
 8005516:	3701      	adds	r7, #1
 8005518:	e7d1      	b.n	80054be <_printf_common+0x82>
	...

0800551c <_printf_i>:
 800551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551e:	b08b      	sub	sp, #44	; 0x2c
 8005520:	9206      	str	r2, [sp, #24]
 8005522:	000a      	movs	r2, r1
 8005524:	3243      	adds	r2, #67	; 0x43
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	9005      	str	r0, [sp, #20]
 800552a:	9204      	str	r2, [sp, #16]
 800552c:	7e0a      	ldrb	r2, [r1, #24]
 800552e:	000c      	movs	r4, r1
 8005530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005532:	2a78      	cmp	r2, #120	; 0x78
 8005534:	d807      	bhi.n	8005546 <_printf_i+0x2a>
 8005536:	2a62      	cmp	r2, #98	; 0x62
 8005538:	d809      	bhi.n	800554e <_printf_i+0x32>
 800553a:	2a00      	cmp	r2, #0
 800553c:	d100      	bne.n	8005540 <_printf_i+0x24>
 800553e:	e0c1      	b.n	80056c4 <_printf_i+0x1a8>
 8005540:	2a58      	cmp	r2, #88	; 0x58
 8005542:	d100      	bne.n	8005546 <_printf_i+0x2a>
 8005544:	e08c      	b.n	8005660 <_printf_i+0x144>
 8005546:	0026      	movs	r6, r4
 8005548:	3642      	adds	r6, #66	; 0x42
 800554a:	7032      	strb	r2, [r6, #0]
 800554c:	e022      	b.n	8005594 <_printf_i+0x78>
 800554e:	0010      	movs	r0, r2
 8005550:	3863      	subs	r0, #99	; 0x63
 8005552:	2815      	cmp	r0, #21
 8005554:	d8f7      	bhi.n	8005546 <_printf_i+0x2a>
 8005556:	f7fa fdeb 	bl	8000130 <__gnu_thumb1_case_shi>
 800555a:	0016      	.short	0x0016
 800555c:	fff6001f 	.word	0xfff6001f
 8005560:	fff6fff6 	.word	0xfff6fff6
 8005564:	001ffff6 	.word	0x001ffff6
 8005568:	fff6fff6 	.word	0xfff6fff6
 800556c:	fff6fff6 	.word	0xfff6fff6
 8005570:	003600a8 	.word	0x003600a8
 8005574:	fff6009a 	.word	0xfff6009a
 8005578:	00b9fff6 	.word	0x00b9fff6
 800557c:	0036fff6 	.word	0x0036fff6
 8005580:	fff6fff6 	.word	0xfff6fff6
 8005584:	009e      	.short	0x009e
 8005586:	0026      	movs	r6, r4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	3642      	adds	r6, #66	; 0x42
 800558c:	1d11      	adds	r1, r2, #4
 800558e:	6019      	str	r1, [r3, #0]
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	7033      	strb	r3, [r6, #0]
 8005594:	2301      	movs	r3, #1
 8005596:	e0a7      	b.n	80056e8 <_printf_i+0x1cc>
 8005598:	6808      	ldr	r0, [r1, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	1d0a      	adds	r2, r1, #4
 800559e:	0605      	lsls	r5, r0, #24
 80055a0:	d50b      	bpl.n	80055ba <_printf_i+0x9e>
 80055a2:	680d      	ldr	r5, [r1, #0]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	da03      	bge.n	80055b2 <_printf_i+0x96>
 80055aa:	232d      	movs	r3, #45	; 0x2d
 80055ac:	9a04      	ldr	r2, [sp, #16]
 80055ae:	426d      	negs	r5, r5
 80055b0:	7013      	strb	r3, [r2, #0]
 80055b2:	4b61      	ldr	r3, [pc, #388]	; (8005738 <_printf_i+0x21c>)
 80055b4:	270a      	movs	r7, #10
 80055b6:	9303      	str	r3, [sp, #12]
 80055b8:	e01b      	b.n	80055f2 <_printf_i+0xd6>
 80055ba:	680d      	ldr	r5, [r1, #0]
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	0641      	lsls	r1, r0, #25
 80055c0:	d5f1      	bpl.n	80055a6 <_printf_i+0x8a>
 80055c2:	b22d      	sxth	r5, r5
 80055c4:	e7ef      	b.n	80055a6 <_printf_i+0x8a>
 80055c6:	680d      	ldr	r5, [r1, #0]
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	1d08      	adds	r0, r1, #4
 80055cc:	6018      	str	r0, [r3, #0]
 80055ce:	062e      	lsls	r6, r5, #24
 80055d0:	d501      	bpl.n	80055d6 <_printf_i+0xba>
 80055d2:	680d      	ldr	r5, [r1, #0]
 80055d4:	e003      	b.n	80055de <_printf_i+0xc2>
 80055d6:	066d      	lsls	r5, r5, #25
 80055d8:	d5fb      	bpl.n	80055d2 <_printf_i+0xb6>
 80055da:	680d      	ldr	r5, [r1, #0]
 80055dc:	b2ad      	uxth	r5, r5
 80055de:	4b56      	ldr	r3, [pc, #344]	; (8005738 <_printf_i+0x21c>)
 80055e0:	2708      	movs	r7, #8
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	2a6f      	cmp	r2, #111	; 0x6f
 80055e6:	d000      	beq.n	80055ea <_printf_i+0xce>
 80055e8:	3702      	adds	r7, #2
 80055ea:	0023      	movs	r3, r4
 80055ec:	2200      	movs	r2, #0
 80055ee:	3343      	adds	r3, #67	; 0x43
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	6863      	ldr	r3, [r4, #4]
 80055f4:	60a3      	str	r3, [r4, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	db03      	blt.n	8005602 <_printf_i+0xe6>
 80055fa:	2204      	movs	r2, #4
 80055fc:	6821      	ldr	r1, [r4, #0]
 80055fe:	4391      	bics	r1, r2
 8005600:	6021      	str	r1, [r4, #0]
 8005602:	2d00      	cmp	r5, #0
 8005604:	d102      	bne.n	800560c <_printf_i+0xf0>
 8005606:	9e04      	ldr	r6, [sp, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <_printf_i+0x10a>
 800560c:	9e04      	ldr	r6, [sp, #16]
 800560e:	0028      	movs	r0, r5
 8005610:	0039      	movs	r1, r7
 8005612:	f7fa fe1d 	bl	8000250 <__aeabi_uidivmod>
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	3e01      	subs	r6, #1
 800561a:	5c5b      	ldrb	r3, [r3, r1]
 800561c:	7033      	strb	r3, [r6, #0]
 800561e:	002b      	movs	r3, r5
 8005620:	0005      	movs	r5, r0
 8005622:	429f      	cmp	r7, r3
 8005624:	d9f3      	bls.n	800560e <_printf_i+0xf2>
 8005626:	2f08      	cmp	r7, #8
 8005628:	d109      	bne.n	800563e <_printf_i+0x122>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	07db      	lsls	r3, r3, #31
 800562e:	d506      	bpl.n	800563e <_printf_i+0x122>
 8005630:	6863      	ldr	r3, [r4, #4]
 8005632:	6922      	ldr	r2, [r4, #16]
 8005634:	4293      	cmp	r3, r2
 8005636:	dc02      	bgt.n	800563e <_printf_i+0x122>
 8005638:	2330      	movs	r3, #48	; 0x30
 800563a:	3e01      	subs	r6, #1
 800563c:	7033      	strb	r3, [r6, #0]
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	1b9b      	subs	r3, r3, r6
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	9b07      	ldr	r3, [sp, #28]
 8005646:	0021      	movs	r1, r4
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	9805      	ldr	r0, [sp, #20]
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	aa09      	add	r2, sp, #36	; 0x24
 8005650:	f7ff fef4 	bl	800543c <_printf_common>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d14c      	bne.n	80056f2 <_printf_i+0x1d6>
 8005658:	2001      	movs	r0, #1
 800565a:	4240      	negs	r0, r0
 800565c:	b00b      	add	sp, #44	; 0x2c
 800565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005660:	3145      	adds	r1, #69	; 0x45
 8005662:	700a      	strb	r2, [r1, #0]
 8005664:	4a34      	ldr	r2, [pc, #208]	; (8005738 <_printf_i+0x21c>)
 8005666:	9203      	str	r2, [sp, #12]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	ca20      	ldmia	r2!, {r5}
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	0608      	lsls	r0, r1, #24
 8005672:	d516      	bpl.n	80056a2 <_printf_i+0x186>
 8005674:	07cb      	lsls	r3, r1, #31
 8005676:	d502      	bpl.n	800567e <_printf_i+0x162>
 8005678:	2320      	movs	r3, #32
 800567a:	4319      	orrs	r1, r3
 800567c:	6021      	str	r1, [r4, #0]
 800567e:	2710      	movs	r7, #16
 8005680:	2d00      	cmp	r5, #0
 8005682:	d1b2      	bne.n	80055ea <_printf_i+0xce>
 8005684:	2320      	movs	r3, #32
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	439a      	bics	r2, r3
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	e7ad      	b.n	80055ea <_printf_i+0xce>
 800568e:	2220      	movs	r2, #32
 8005690:	6809      	ldr	r1, [r1, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	0022      	movs	r2, r4
 8005698:	2178      	movs	r1, #120	; 0x78
 800569a:	3245      	adds	r2, #69	; 0x45
 800569c:	7011      	strb	r1, [r2, #0]
 800569e:	4a27      	ldr	r2, [pc, #156]	; (800573c <_printf_i+0x220>)
 80056a0:	e7e1      	b.n	8005666 <_printf_i+0x14a>
 80056a2:	0648      	lsls	r0, r1, #25
 80056a4:	d5e6      	bpl.n	8005674 <_printf_i+0x158>
 80056a6:	b2ad      	uxth	r5, r5
 80056a8:	e7e4      	b.n	8005674 <_printf_i+0x158>
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	680d      	ldr	r5, [r1, #0]
 80056ae:	1d10      	adds	r0, r2, #4
 80056b0:	6949      	ldr	r1, [r1, #20]
 80056b2:	6018      	str	r0, [r3, #0]
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	062e      	lsls	r6, r5, #24
 80056b8:	d501      	bpl.n	80056be <_printf_i+0x1a2>
 80056ba:	6019      	str	r1, [r3, #0]
 80056bc:	e002      	b.n	80056c4 <_printf_i+0x1a8>
 80056be:	066d      	lsls	r5, r5, #25
 80056c0:	d5fb      	bpl.n	80056ba <_printf_i+0x19e>
 80056c2:	8019      	strh	r1, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	9e04      	ldr	r6, [sp, #16]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	e7bb      	b.n	8005644 <_printf_i+0x128>
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	1d11      	adds	r1, r2, #4
 80056d0:	6019      	str	r1, [r3, #0]
 80056d2:	6816      	ldr	r6, [r2, #0]
 80056d4:	2100      	movs	r1, #0
 80056d6:	0030      	movs	r0, r6
 80056d8:	6862      	ldr	r2, [r4, #4]
 80056da:	f000 f833 	bl	8005744 <memchr>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d001      	beq.n	80056e6 <_printf_i+0x1ca>
 80056e2:	1b80      	subs	r0, r0, r6
 80056e4:	6060      	str	r0, [r4, #4]
 80056e6:	6863      	ldr	r3, [r4, #4]
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9a04      	ldr	r2, [sp, #16]
 80056ee:	7013      	strb	r3, [r2, #0]
 80056f0:	e7a8      	b.n	8005644 <_printf_i+0x128>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	0032      	movs	r2, r6
 80056f6:	9906      	ldr	r1, [sp, #24]
 80056f8:	9805      	ldr	r0, [sp, #20]
 80056fa:	9d07      	ldr	r5, [sp, #28]
 80056fc:	47a8      	blx	r5
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d0aa      	beq.n	8005658 <_printf_i+0x13c>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	079b      	lsls	r3, r3, #30
 8005706:	d415      	bmi.n	8005734 <_printf_i+0x218>
 8005708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570a:	68e0      	ldr	r0, [r4, #12]
 800570c:	4298      	cmp	r0, r3
 800570e:	daa5      	bge.n	800565c <_printf_i+0x140>
 8005710:	0018      	movs	r0, r3
 8005712:	e7a3      	b.n	800565c <_printf_i+0x140>
 8005714:	0022      	movs	r2, r4
 8005716:	2301      	movs	r3, #1
 8005718:	9906      	ldr	r1, [sp, #24]
 800571a:	9805      	ldr	r0, [sp, #20]
 800571c:	9e07      	ldr	r6, [sp, #28]
 800571e:	3219      	adds	r2, #25
 8005720:	47b0      	blx	r6
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d098      	beq.n	8005658 <_printf_i+0x13c>
 8005726:	3501      	adds	r5, #1
 8005728:	68e3      	ldr	r3, [r4, #12]
 800572a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	42ab      	cmp	r3, r5
 8005730:	dcf0      	bgt.n	8005714 <_printf_i+0x1f8>
 8005732:	e7e9      	b.n	8005708 <_printf_i+0x1ec>
 8005734:	2500      	movs	r5, #0
 8005736:	e7f7      	b.n	8005728 <_printf_i+0x20c>
 8005738:	08006512 	.word	0x08006512
 800573c:	08006523 	.word	0x08006523

08005740 <__retarget_lock_acquire_recursive>:
 8005740:	4770      	bx	lr

08005742 <__retarget_lock_release_recursive>:
 8005742:	4770      	bx	lr

08005744 <memchr>:
 8005744:	b2c9      	uxtb	r1, r1
 8005746:	1882      	adds	r2, r0, r2
 8005748:	4290      	cmp	r0, r2
 800574a:	d101      	bne.n	8005750 <memchr+0xc>
 800574c:	2000      	movs	r0, #0
 800574e:	4770      	bx	lr
 8005750:	7803      	ldrb	r3, [r0, #0]
 8005752:	428b      	cmp	r3, r1
 8005754:	d0fb      	beq.n	800574e <memchr+0xa>
 8005756:	3001      	adds	r0, #1
 8005758:	e7f6      	b.n	8005748 <memchr+0x4>

0800575a <_realloc_r>:
 800575a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575c:	0007      	movs	r7, r0
 800575e:	000e      	movs	r6, r1
 8005760:	0014      	movs	r4, r2
 8005762:	2900      	cmp	r1, #0
 8005764:	d105      	bne.n	8005772 <_realloc_r+0x18>
 8005766:	0011      	movs	r1, r2
 8005768:	f7ff fc46 	bl	8004ff8 <_malloc_r>
 800576c:	0005      	movs	r5, r0
 800576e:	0028      	movs	r0, r5
 8005770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005772:	2a00      	cmp	r2, #0
 8005774:	d103      	bne.n	800577e <_realloc_r+0x24>
 8005776:	f7ff fbd3 	bl	8004f20 <_free_r>
 800577a:	0025      	movs	r5, r4
 800577c:	e7f7      	b.n	800576e <_realloc_r+0x14>
 800577e:	f000 f81b 	bl	80057b8 <_malloc_usable_size_r>
 8005782:	9001      	str	r0, [sp, #4]
 8005784:	4284      	cmp	r4, r0
 8005786:	d803      	bhi.n	8005790 <_realloc_r+0x36>
 8005788:	0035      	movs	r5, r6
 800578a:	0843      	lsrs	r3, r0, #1
 800578c:	42a3      	cmp	r3, r4
 800578e:	d3ee      	bcc.n	800576e <_realloc_r+0x14>
 8005790:	0021      	movs	r1, r4
 8005792:	0038      	movs	r0, r7
 8005794:	f7ff fc30 	bl	8004ff8 <_malloc_r>
 8005798:	1e05      	subs	r5, r0, #0
 800579a:	d0e8      	beq.n	800576e <_realloc_r+0x14>
 800579c:	9b01      	ldr	r3, [sp, #4]
 800579e:	0022      	movs	r2, r4
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d900      	bls.n	80057a6 <_realloc_r+0x4c>
 80057a4:	001a      	movs	r2, r3
 80057a6:	0031      	movs	r1, r6
 80057a8:	0028      	movs	r0, r5
 80057aa:	f7ff fb69 	bl	8004e80 <memcpy>
 80057ae:	0031      	movs	r1, r6
 80057b0:	0038      	movs	r0, r7
 80057b2:	f7ff fbb5 	bl	8004f20 <_free_r>
 80057b6:	e7da      	b.n	800576e <_realloc_r+0x14>

080057b8 <_malloc_usable_size_r>:
 80057b8:	1f0b      	subs	r3, r1, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1f18      	subs	r0, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da01      	bge.n	80057c6 <_malloc_usable_size_r+0xe>
 80057c2:	580b      	ldr	r3, [r1, r0]
 80057c4:	18c0      	adds	r0, r0, r3
 80057c6:	4770      	bx	lr

080057c8 <_init>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr

080057d4 <_fini>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr
